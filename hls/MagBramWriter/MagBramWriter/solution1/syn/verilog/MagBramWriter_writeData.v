// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MagBramWriter_writeData (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_out_address0,
        buffer_out_ce0,
        buffer_out_we0,
        buffer_out_d0,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        channel
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state39 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] buffer_out_address0;
output   buffer_out_ce0;
output   buffer_out_we0;
output  [31:0] buffer_out_d0;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
input  [31:0] buffer_r_q0;
input  [3:0] channel;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_out_ce0;
reg buffer_out_we0;
reg buffer_r_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] i_1_reg_85;
wire   [63:0] zext_ln95_1_fu_120_p1;
wire   [63:0] zext_ln95_2_fu_130_p1;
reg   [63:0] zext_ln95_2_reg_177;
wire   [0:0] icmp_ln95_fu_134_p2;
reg   [0:0] icmp_ln95_reg_182;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln95_reg_182_pp0_iter1_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter2_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter3_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter4_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter5_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter6_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter7_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter8_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter9_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter10_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter11_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter12_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter13_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter14_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter15_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter16_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter17_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter18_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter19_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter20_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter21_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter22_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter23_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter24_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter25_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter26_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter27_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter28_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter29_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter30_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter31_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter32_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter33_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter34_reg;
reg   [0:0] icmp_ln95_reg_182_pp0_iter35_reg;
wire   [7:0] trunc_ln97_2_fu_149_p1;
reg   [7:0] trunc_ln97_2_reg_191;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter1_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter2_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter3_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter4_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter5_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter6_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter7_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter8_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter9_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter10_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter11_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter12_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter13_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter14_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter15_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter16_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter17_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter18_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter19_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter20_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter21_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter22_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter23_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter24_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter25_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter26_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter27_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter28_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter29_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter30_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter31_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter32_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter33_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter34_reg;
reg   [7:0] trunc_ln97_2_reg_191_pp0_iter35_reg;
wire   [63:0] add_ln95_1_fu_153_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
wire   [63:0] zext_ln97_fu_163_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln97_1_fu_168_p1;
wire   [5:0] shl_ln95_1_fu_102_p3;
wire   [7:0] shl_ln_fu_94_p3;
wire   [7:0] zext_ln95_fu_110_p1;
wire   [7:0] i_fu_114_p2;
wire   [7:0] add_ln95_fu_124_p2;
wire   [31:0] grp_fu_143_p0;
wire   [5:0] grp_fu_143_p1;
wire   [4:0] grp_fu_143_p2;
wire   [4:0] trunc_ln97_1_fu_159_p1;
wire    ap_CS_fsm_state39;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
end

MagBramWriter_srem_32ns_6ns_5_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 5 ))
srem_32ns_6ns_5_36_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_143_p0),
    .din1(grp_fu_143_p1),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter36 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_reg_85 <= zext_ln95_1_fu_120_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln95_fu_134_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_85 <= add_ln95_1_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln95_reg_182 <= icmp_ln95_fu_134_p2;
        icmp_ln95_reg_182_pp0_iter1_reg <= icmp_ln95_reg_182;
        trunc_ln97_2_reg_191_pp0_iter1_reg <= trunc_ln97_2_reg_191;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln95_reg_182_pp0_iter10_reg <= icmp_ln95_reg_182_pp0_iter9_reg;
        icmp_ln95_reg_182_pp0_iter11_reg <= icmp_ln95_reg_182_pp0_iter10_reg;
        icmp_ln95_reg_182_pp0_iter12_reg <= icmp_ln95_reg_182_pp0_iter11_reg;
        icmp_ln95_reg_182_pp0_iter13_reg <= icmp_ln95_reg_182_pp0_iter12_reg;
        icmp_ln95_reg_182_pp0_iter14_reg <= icmp_ln95_reg_182_pp0_iter13_reg;
        icmp_ln95_reg_182_pp0_iter15_reg <= icmp_ln95_reg_182_pp0_iter14_reg;
        icmp_ln95_reg_182_pp0_iter16_reg <= icmp_ln95_reg_182_pp0_iter15_reg;
        icmp_ln95_reg_182_pp0_iter17_reg <= icmp_ln95_reg_182_pp0_iter16_reg;
        icmp_ln95_reg_182_pp0_iter18_reg <= icmp_ln95_reg_182_pp0_iter17_reg;
        icmp_ln95_reg_182_pp0_iter19_reg <= icmp_ln95_reg_182_pp0_iter18_reg;
        icmp_ln95_reg_182_pp0_iter20_reg <= icmp_ln95_reg_182_pp0_iter19_reg;
        icmp_ln95_reg_182_pp0_iter21_reg <= icmp_ln95_reg_182_pp0_iter20_reg;
        icmp_ln95_reg_182_pp0_iter22_reg <= icmp_ln95_reg_182_pp0_iter21_reg;
        icmp_ln95_reg_182_pp0_iter23_reg <= icmp_ln95_reg_182_pp0_iter22_reg;
        icmp_ln95_reg_182_pp0_iter24_reg <= icmp_ln95_reg_182_pp0_iter23_reg;
        icmp_ln95_reg_182_pp0_iter25_reg <= icmp_ln95_reg_182_pp0_iter24_reg;
        icmp_ln95_reg_182_pp0_iter26_reg <= icmp_ln95_reg_182_pp0_iter25_reg;
        icmp_ln95_reg_182_pp0_iter27_reg <= icmp_ln95_reg_182_pp0_iter26_reg;
        icmp_ln95_reg_182_pp0_iter28_reg <= icmp_ln95_reg_182_pp0_iter27_reg;
        icmp_ln95_reg_182_pp0_iter29_reg <= icmp_ln95_reg_182_pp0_iter28_reg;
        icmp_ln95_reg_182_pp0_iter2_reg <= icmp_ln95_reg_182_pp0_iter1_reg;
        icmp_ln95_reg_182_pp0_iter30_reg <= icmp_ln95_reg_182_pp0_iter29_reg;
        icmp_ln95_reg_182_pp0_iter31_reg <= icmp_ln95_reg_182_pp0_iter30_reg;
        icmp_ln95_reg_182_pp0_iter32_reg <= icmp_ln95_reg_182_pp0_iter31_reg;
        icmp_ln95_reg_182_pp0_iter33_reg <= icmp_ln95_reg_182_pp0_iter32_reg;
        icmp_ln95_reg_182_pp0_iter34_reg <= icmp_ln95_reg_182_pp0_iter33_reg;
        icmp_ln95_reg_182_pp0_iter35_reg <= icmp_ln95_reg_182_pp0_iter34_reg;
        icmp_ln95_reg_182_pp0_iter3_reg <= icmp_ln95_reg_182_pp0_iter2_reg;
        icmp_ln95_reg_182_pp0_iter4_reg <= icmp_ln95_reg_182_pp0_iter3_reg;
        icmp_ln95_reg_182_pp0_iter5_reg <= icmp_ln95_reg_182_pp0_iter4_reg;
        icmp_ln95_reg_182_pp0_iter6_reg <= icmp_ln95_reg_182_pp0_iter5_reg;
        icmp_ln95_reg_182_pp0_iter7_reg <= icmp_ln95_reg_182_pp0_iter6_reg;
        icmp_ln95_reg_182_pp0_iter8_reg <= icmp_ln95_reg_182_pp0_iter7_reg;
        icmp_ln95_reg_182_pp0_iter9_reg <= icmp_ln95_reg_182_pp0_iter8_reg;
        trunc_ln97_2_reg_191_pp0_iter10_reg <= trunc_ln97_2_reg_191_pp0_iter9_reg;
        trunc_ln97_2_reg_191_pp0_iter11_reg <= trunc_ln97_2_reg_191_pp0_iter10_reg;
        trunc_ln97_2_reg_191_pp0_iter12_reg <= trunc_ln97_2_reg_191_pp0_iter11_reg;
        trunc_ln97_2_reg_191_pp0_iter13_reg <= trunc_ln97_2_reg_191_pp0_iter12_reg;
        trunc_ln97_2_reg_191_pp0_iter14_reg <= trunc_ln97_2_reg_191_pp0_iter13_reg;
        trunc_ln97_2_reg_191_pp0_iter15_reg <= trunc_ln97_2_reg_191_pp0_iter14_reg;
        trunc_ln97_2_reg_191_pp0_iter16_reg <= trunc_ln97_2_reg_191_pp0_iter15_reg;
        trunc_ln97_2_reg_191_pp0_iter17_reg <= trunc_ln97_2_reg_191_pp0_iter16_reg;
        trunc_ln97_2_reg_191_pp0_iter18_reg <= trunc_ln97_2_reg_191_pp0_iter17_reg;
        trunc_ln97_2_reg_191_pp0_iter19_reg <= trunc_ln97_2_reg_191_pp0_iter18_reg;
        trunc_ln97_2_reg_191_pp0_iter20_reg <= trunc_ln97_2_reg_191_pp0_iter19_reg;
        trunc_ln97_2_reg_191_pp0_iter21_reg <= trunc_ln97_2_reg_191_pp0_iter20_reg;
        trunc_ln97_2_reg_191_pp0_iter22_reg <= trunc_ln97_2_reg_191_pp0_iter21_reg;
        trunc_ln97_2_reg_191_pp0_iter23_reg <= trunc_ln97_2_reg_191_pp0_iter22_reg;
        trunc_ln97_2_reg_191_pp0_iter24_reg <= trunc_ln97_2_reg_191_pp0_iter23_reg;
        trunc_ln97_2_reg_191_pp0_iter25_reg <= trunc_ln97_2_reg_191_pp0_iter24_reg;
        trunc_ln97_2_reg_191_pp0_iter26_reg <= trunc_ln97_2_reg_191_pp0_iter25_reg;
        trunc_ln97_2_reg_191_pp0_iter27_reg <= trunc_ln97_2_reg_191_pp0_iter26_reg;
        trunc_ln97_2_reg_191_pp0_iter28_reg <= trunc_ln97_2_reg_191_pp0_iter27_reg;
        trunc_ln97_2_reg_191_pp0_iter29_reg <= trunc_ln97_2_reg_191_pp0_iter28_reg;
        trunc_ln97_2_reg_191_pp0_iter2_reg <= trunc_ln97_2_reg_191_pp0_iter1_reg;
        trunc_ln97_2_reg_191_pp0_iter30_reg <= trunc_ln97_2_reg_191_pp0_iter29_reg;
        trunc_ln97_2_reg_191_pp0_iter31_reg <= trunc_ln97_2_reg_191_pp0_iter30_reg;
        trunc_ln97_2_reg_191_pp0_iter32_reg <= trunc_ln97_2_reg_191_pp0_iter31_reg;
        trunc_ln97_2_reg_191_pp0_iter33_reg <= trunc_ln97_2_reg_191_pp0_iter32_reg;
        trunc_ln97_2_reg_191_pp0_iter34_reg <= trunc_ln97_2_reg_191_pp0_iter33_reg;
        trunc_ln97_2_reg_191_pp0_iter35_reg <= trunc_ln97_2_reg_191_pp0_iter34_reg;
        trunc_ln97_2_reg_191_pp0_iter3_reg <= trunc_ln97_2_reg_191_pp0_iter2_reg;
        trunc_ln97_2_reg_191_pp0_iter4_reg <= trunc_ln97_2_reg_191_pp0_iter3_reg;
        trunc_ln97_2_reg_191_pp0_iter5_reg <= trunc_ln97_2_reg_191_pp0_iter4_reg;
        trunc_ln97_2_reg_191_pp0_iter6_reg <= trunc_ln97_2_reg_191_pp0_iter5_reg;
        trunc_ln97_2_reg_191_pp0_iter7_reg <= trunc_ln97_2_reg_191_pp0_iter6_reg;
        trunc_ln97_2_reg_191_pp0_iter8_reg <= trunc_ln97_2_reg_191_pp0_iter7_reg;
        trunc_ln97_2_reg_191_pp0_iter9_reg <= trunc_ln97_2_reg_191_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln95_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln97_2_reg_191 <= trunc_ln97_2_fu_149_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln95_2_reg_177[7 : 2] <= zext_ln95_2_fu_130_p1[7 : 2];
    end
end

always @ (*) begin
    if ((icmp_ln95_fu_134_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        buffer_out_ce0 = 1'b1;
    end else begin
        buffer_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter36 == 1'b1) & (icmp_ln95_reg_182_pp0_iter35_reg == 1'd1))) begin
        buffer_out_we0 = 1'b1;
    end else begin
        buffer_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter35 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln95_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter36 == 1'b1) & (ap_enable_reg_pp0_iter35 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter36 == 1'b1) & (ap_enable_reg_pp0_iter35 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln95_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln95_1_fu_153_p2 = (i_1_reg_85 + 64'd1);

assign add_ln95_fu_124_p2 = (i_fu_114_p2 + 8'd20);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_out_address0 = zext_ln97_1_fu_168_p1;

assign buffer_out_d0 = buffer_r_q0;

assign buffer_r_address0 = zext_ln97_fu_163_p1;

assign grp_fu_143_p0 = i_1_reg_85[31:0];

assign grp_fu_143_p1 = 32'd20;

assign i_fu_114_p2 = (shl_ln_fu_94_p3 + zext_ln95_fu_110_p1);

assign icmp_ln95_fu_134_p2 = (($signed(i_1_reg_85) < $signed(zext_ln95_2_reg_177)) ? 1'b1 : 1'b0);

assign shl_ln95_1_fu_102_p3 = {{channel}, {2'd0}};

assign shl_ln_fu_94_p3 = {{channel}, {4'd0}};

assign trunc_ln97_1_fu_159_p1 = grp_fu_143_p2[4:0];

assign trunc_ln97_2_fu_149_p1 = i_1_reg_85[7:0];

assign zext_ln95_1_fu_120_p1 = i_fu_114_p2;

assign zext_ln95_2_fu_130_p1 = add_ln95_fu_124_p2;

assign zext_ln95_fu_110_p1 = shl_ln95_1_fu_102_p3;

assign zext_ln97_1_fu_168_p1 = trunc_ln97_2_reg_191_pp0_iter35_reg;

assign zext_ln97_fu_163_p1 = trunc_ln97_1_fu_159_p1;

always @ (posedge ap_clk) begin
    zext_ln95_2_reg_177[1:0] <= 2'b00;
    zext_ln95_2_reg_177[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //MagBramWriter_writeData
