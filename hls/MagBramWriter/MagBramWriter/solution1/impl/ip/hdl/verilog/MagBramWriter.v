// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MagBramWriter_MagBramWriter,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.072000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3378,HLS_SYN_LUT=3108,HLS_VERSION=2020_2}" *)

module MagBramWriter (
        ap_clk,
        ap_rst_n,
        buffer_in_0_address0,
        buffer_in_0_ce0,
        buffer_in_0_q0,
        buffer_in_1_address0,
        buffer_in_1_ce0,
        buffer_in_1_q0,
        buffer_in_2_address0,
        buffer_in_2_ce0,
        buffer_in_2_q0,
        buffer_in_3_address0,
        buffer_in_3_ce0,
        buffer_in_3_q0,
        buffer_in_4_address0,
        buffer_in_4_ce0,
        buffer_in_4_q0,
        buffer_in_5_address0,
        buffer_in_5_ce0,
        buffer_in_5_q0,
        buffer_in_6_address0,
        buffer_in_6_ce0,
        buffer_in_6_q0,
        buffer_in_7_address0,
        buffer_in_7_ce0,
        buffer_in_7_q0,
        buffer_in_8_address0,
        buffer_in_8_ce0,
        buffer_in_8_q0,
        buffer_in_9_address0,
        buffer_in_9_ce0,
        buffer_in_9_q0,
        buffer_in_10_address0,
        buffer_in_10_ce0,
        buffer_in_10_q0,
        buffer_in_11_address0,
        buffer_in_11_ce0,
        buffer_in_11_q0,
        buffer_out_address0,
        buffer_out_ce0,
        buffer_out_we0,
        buffer_out_d0,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [4:0] buffer_in_0_address0;
output   buffer_in_0_ce0;
input  [31:0] buffer_in_0_q0;
output  [4:0] buffer_in_1_address0;
output   buffer_in_1_ce0;
input  [31:0] buffer_in_1_q0;
output  [4:0] buffer_in_2_address0;
output   buffer_in_2_ce0;
input  [31:0] buffer_in_2_q0;
output  [4:0] buffer_in_3_address0;
output   buffer_in_3_ce0;
input  [31:0] buffer_in_3_q0;
output  [4:0] buffer_in_4_address0;
output   buffer_in_4_ce0;
input  [31:0] buffer_in_4_q0;
output  [4:0] buffer_in_5_address0;
output   buffer_in_5_ce0;
input  [31:0] buffer_in_5_q0;
output  [4:0] buffer_in_6_address0;
output   buffer_in_6_ce0;
input  [31:0] buffer_in_6_q0;
output  [4:0] buffer_in_7_address0;
output   buffer_in_7_ce0;
input  [31:0] buffer_in_7_q0;
output  [4:0] buffer_in_8_address0;
output   buffer_in_8_ce0;
input  [31:0] buffer_in_8_q0;
output  [4:0] buffer_in_9_address0;
output   buffer_in_9_ce0;
input  [31:0] buffer_in_9_q0;
output  [4:0] buffer_in_10_address0;
output   buffer_in_10_ce0;
input  [31:0] buffer_in_10_q0;
output  [4:0] buffer_in_11_address0;
output   buffer_in_11_ce0;
input  [31:0] buffer_in_11_q0;
output  [7:0] buffer_out_address0;
output   buffer_out_ce0;
output   buffer_out_we0;
output  [31:0] buffer_out_d0;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg buffer_in_0_ce0;
reg buffer_in_1_ce0;
reg buffer_in_2_ce0;
reg buffer_in_3_ce0;
reg buffer_in_4_ce0;
reg buffer_in_5_ce0;
reg buffer_in_6_ce0;
reg buffer_in_7_ce0;
reg buffer_in_8_ce0;
reg buffer_in_9_ce0;
reg buffer_in_10_ce0;
reg buffer_in_11_ce0;
reg buffer_out_ce0;
reg buffer_out_we0;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [4:0] buffer_0_address0;
reg    buffer_0_ce0;
reg    buffer_0_we0;
wire   [31:0] buffer_0_q0;
reg   [4:0] buffer_1_address0;
reg    buffer_1_ce0;
reg    buffer_1_we0;
wire   [31:0] buffer_1_q0;
reg   [4:0] buffer_2_address0;
reg    buffer_2_ce0;
reg    buffer_2_we0;
wire   [31:0] buffer_2_q0;
reg   [4:0] buffer_3_address0;
reg    buffer_3_ce0;
reg    buffer_3_we0;
wire   [31:0] buffer_3_q0;
reg   [4:0] buffer_4_address0;
reg    buffer_4_ce0;
reg    buffer_4_we0;
wire   [31:0] buffer_4_q0;
reg   [4:0] buffer_5_address0;
reg    buffer_5_ce0;
reg    buffer_5_we0;
wire   [31:0] buffer_5_q0;
reg   [4:0] buffer_6_address0;
reg    buffer_6_ce0;
reg    buffer_6_we0;
wire   [31:0] buffer_6_q0;
reg   [4:0] buffer_7_address0;
reg    buffer_7_ce0;
reg    buffer_7_we0;
wire   [31:0] buffer_7_q0;
reg   [4:0] buffer_8_address0;
reg    buffer_8_ce0;
reg    buffer_8_we0;
wire   [31:0] buffer_8_q0;
reg   [4:0] buffer_9_address0;
reg    buffer_9_ce0;
reg    buffer_9_we0;
wire   [31:0] buffer_9_q0;
reg   [4:0] buffer_10_address0;
reg    buffer_10_ce0;
reg    buffer_10_we0;
wire   [31:0] buffer_10_q0;
reg   [4:0] buffer_11_address0;
reg    buffer_11_ce0;
reg    buffer_11_we0;
wire   [31:0] buffer_11_q0;
wire    grp_writeData_fu_132_ap_start;
wire    grp_writeData_fu_132_ap_done;
wire    grp_writeData_fu_132_ap_idle;
wire    grp_writeData_fu_132_ap_ready;
wire   [7:0] grp_writeData_fu_132_buffer_out_address0;
wire    grp_writeData_fu_132_buffer_out_ce0;
wire    grp_writeData_fu_132_buffer_out_we0;
wire   [31:0] grp_writeData_fu_132_buffer_out_d0;
wire   [4:0] grp_writeData_fu_132_buffer_r_address0;
wire    grp_writeData_fu_132_buffer_r_ce0;
reg   [31:0] grp_writeData_fu_132_buffer_r_q0;
reg   [3:0] grp_writeData_fu_132_channel;
wire    grp_loadBuffer_fu_152_ap_start;
wire    grp_loadBuffer_fu_152_ap_done;
wire    grp_loadBuffer_fu_152_ap_idle;
wire    grp_loadBuffer_fu_152_ap_ready;
wire   [4:0] grp_loadBuffer_fu_152_buffer_in_0_address0;
wire    grp_loadBuffer_fu_152_buffer_in_0_ce0;
reg   [31:0] grp_loadBuffer_fu_152_buffer_in_0_q0;
wire   [4:0] grp_loadBuffer_fu_152_buffer_r_address0;
wire    grp_loadBuffer_fu_152_buffer_r_ce0;
wire    grp_loadBuffer_fu_152_buffer_r_we0;
wire   [31:0] grp_loadBuffer_fu_152_buffer_r_d0;
reg    grp_writeData_fu_132_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
reg    grp_loadBuffer_fu_152_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [25:0] ap_NS_fsm;
reg    ap_block_state4_on_subcall_done;
reg    ap_block_state6_on_subcall_done;
reg    ap_block_state8_on_subcall_done;
reg    ap_block_state10_on_subcall_done;
reg    ap_block_state12_on_subcall_done;
reg    ap_block_state14_on_subcall_done;
reg    ap_block_state16_on_subcall_done;
reg    ap_block_state18_on_subcall_done;
reg    ap_block_state20_on_subcall_done;
reg    ap_block_state22_on_subcall_done;
reg    ap_block_state24_on_subcall_done;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 grp_writeData_fu_132_ap_start_reg = 1'b0;
#0 grp_loadBuffer_fu_152_ap_start_reg = 1'b0;
end

MagBramWriter_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_0_address0),
    .ce0(buffer_0_ce0),
    .we0(buffer_0_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_0_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_1_address0),
    .ce0(buffer_1_ce0),
    .we0(buffer_1_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_1_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_2_address0),
    .ce0(buffer_2_ce0),
    .we0(buffer_2_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_2_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_3_address0),
    .ce0(buffer_3_ce0),
    .we0(buffer_3_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_3_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_4_address0),
    .ce0(buffer_4_ce0),
    .we0(buffer_4_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_4_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_5_address0),
    .ce0(buffer_5_ce0),
    .we0(buffer_5_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_5_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_6_address0),
    .ce0(buffer_6_ce0),
    .we0(buffer_6_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_6_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_7_address0),
    .ce0(buffer_7_ce0),
    .we0(buffer_7_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_7_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_8_address0),
    .ce0(buffer_8_ce0),
    .we0(buffer_8_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_8_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_9_address0),
    .ce0(buffer_9_ce0),
    .we0(buffer_9_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_9_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_10_address0),
    .ce0(buffer_10_ce0),
    .we0(buffer_10_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_10_q0)
);

MagBramWriter_buffer_0 #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
buffer_11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_11_address0),
    .ce0(buffer_11_ce0),
    .we0(buffer_11_we0),
    .d0(grp_loadBuffer_fu_152_buffer_r_d0),
    .q0(buffer_11_q0)
);

MagBramWriter_writeData grp_writeData_fu_132(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_writeData_fu_132_ap_start),
    .ap_done(grp_writeData_fu_132_ap_done),
    .ap_idle(grp_writeData_fu_132_ap_idle),
    .ap_ready(grp_writeData_fu_132_ap_ready),
    .buffer_out_address0(grp_writeData_fu_132_buffer_out_address0),
    .buffer_out_ce0(grp_writeData_fu_132_buffer_out_ce0),
    .buffer_out_we0(grp_writeData_fu_132_buffer_out_we0),
    .buffer_out_d0(grp_writeData_fu_132_buffer_out_d0),
    .buffer_r_address0(grp_writeData_fu_132_buffer_r_address0),
    .buffer_r_ce0(grp_writeData_fu_132_buffer_r_ce0),
    .buffer_r_q0(grp_writeData_fu_132_buffer_r_q0),
    .channel(grp_writeData_fu_132_channel)
);

MagBramWriter_loadBuffer grp_loadBuffer_fu_152(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_loadBuffer_fu_152_ap_start),
    .ap_done(grp_loadBuffer_fu_152_ap_done),
    .ap_idle(grp_loadBuffer_fu_152_ap_idle),
    .ap_ready(grp_loadBuffer_fu_152_ap_ready),
    .buffer_in_0_address0(grp_loadBuffer_fu_152_buffer_in_0_address0),
    .buffer_in_0_ce0(grp_loadBuffer_fu_152_buffer_in_0_ce0),
    .buffer_in_0_q0(grp_loadBuffer_fu_152_buffer_in_0_q0),
    .buffer_r_address0(grp_loadBuffer_fu_152_buffer_r_address0),
    .buffer_r_ce0(grp_loadBuffer_fu_152_buffer_r_ce0),
    .buffer_r_we0(grp_loadBuffer_fu_152_buffer_r_we0),
    .buffer_r_d0(grp_loadBuffer_fu_152_buffer_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_loadBuffer_fu_152_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_loadBuffer_fu_152_ap_start_reg <= 1'b1;
        end else if ((grp_loadBuffer_fu_152_ap_ready == 1'b1)) begin
            grp_loadBuffer_fu_152_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_writeData_fu_132_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
            grp_writeData_fu_132_ap_start_reg <= 1'b1;
        end else if ((grp_writeData_fu_132_ap_ready == 1'b1)) begin
            grp_writeData_fu_132_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_writeData_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_writeData_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_0_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_0_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_0_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_0_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_0_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_10_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_10_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_10_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_10_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_10_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_10_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_11_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        buffer_11_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_11_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        buffer_11_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_11_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_1_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_1_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_1_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_1_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_1_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_2_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_2_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_2_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_2_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_2_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_3_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_3_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_3_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_3_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_3_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_4_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_4_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_4_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_4_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_4_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_5_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_5_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_5_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_5_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_5_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_6_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_6_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_6_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_6_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_6_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_7_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_7_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_7_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_7_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_7_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_8_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_8_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_8_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_8_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_8_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_8_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_9_address0 = grp_loadBuffer_fu_152_buffer_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_9_address0 = grp_writeData_fu_132_buffer_r_address0;
    end else begin
        buffer_9_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_9_ce0 = grp_loadBuffer_fu_152_buffer_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_9_ce0 = grp_writeData_fu_132_buffer_r_ce0;
    end else begin
        buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_9_we0 = grp_loadBuffer_fu_152_buffer_r_we0;
    end else begin
        buffer_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_in_0_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        buffer_in_10_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        buffer_in_11_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_in_1_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_in_2_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_in_3_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_in_4_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_in_5_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer_in_6_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        buffer_in_7_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        buffer_in_8_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        buffer_in_9_ce0 = grp_loadBuffer_fu_152_buffer_in_0_ce0;
    end else begin
        buffer_in_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        buffer_out_ce0 = grp_writeData_fu_132_buffer_out_ce0;
    end else begin
        buffer_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        buffer_out_we0 = grp_writeData_fu_132_buffer_out_we0;
    end else begin
        buffer_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = buffer_in_0_q0;
    end else begin
        grp_loadBuffer_fu_152_buffer_in_0_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_writeData_fu_132_buffer_r_q0 = buffer_0_q0;
    end else begin
        grp_writeData_fu_132_buffer_r_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_writeData_fu_132_channel = 4'd11;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_writeData_fu_132_channel = 4'd10;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_writeData_fu_132_channel = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_writeData_fu_132_channel = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_writeData_fu_132_channel = 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_writeData_fu_132_channel = 4'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_writeData_fu_132_channel = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_writeData_fu_132_channel = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_writeData_fu_132_channel = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_writeData_fu_132_channel = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_writeData_fu_132_channel = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_writeData_fu_132_channel = 4'd0;
    end else begin
        grp_writeData_fu_132_channel = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_loadBuffer_fu_152_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b0 == ap_block_state12_on_subcall_done) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b0 == ap_block_state20_on_subcall_done) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b0 == ap_block_state24_on_subcall_done) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((grp_writeData_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state12_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state14_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state16_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state18_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state20_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state22_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state24_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state8_on_subcall_done = ((grp_loadBuffer_fu_152_ap_done == 1'b0) | (grp_writeData_fu_132_ap_done == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buffer_in_0_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_10_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_11_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_1_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_2_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_3_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_4_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_5_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_6_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_7_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_8_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_in_9_address0 = grp_loadBuffer_fu_152_buffer_in_0_address0;

assign buffer_out_address0 = grp_writeData_fu_132_buffer_out_address0;

assign buffer_out_d0 = grp_writeData_fu_132_buffer_out_d0;

assign grp_loadBuffer_fu_152_ap_start = grp_loadBuffer_fu_152_ap_start_reg;

assign grp_writeData_fu_132_ap_start = grp_writeData_fu_132_ap_start_reg;

endmodule //MagBramWriter
