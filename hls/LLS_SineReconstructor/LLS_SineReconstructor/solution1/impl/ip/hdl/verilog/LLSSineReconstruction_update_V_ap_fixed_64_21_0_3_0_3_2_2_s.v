// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_update_V_ap_fixed_64_21_0_3_0_3_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        col_i_dout,
        col_i_empty_n,
        col_i_read,
        col_j_dout,
        col_j_empty_n,
        col_j_read,
        s_dout,
        s_empty_n,
        s_read,
        c_dout,
        c_empty_n,
        c_read,
        matV_V_0_address0,
        matV_V_0_ce0,
        matV_V_0_we0,
        matV_V_0_d0,
        matV_V_0_address1,
        matV_V_0_ce1,
        matV_V_0_we1,
        matV_V_0_d1,
        matV_V_1_address0,
        matV_V_1_ce0,
        matV_V_1_we0,
        matV_V_1_d0,
        matV_V_1_address1,
        matV_V_1_ce1,
        matV_V_1_we1,
        matV_V_1_d1,
        V_i_V_0_address0,
        V_i_V_0_ce0,
        V_i_V_0_q0,
        V_j_V_0_address0,
        V_j_V_0_ce0,
        V_j_V_0_q0,
        V_i_V_1_address0,
        V_i_V_1_ce0,
        V_i_V_1_q0,
        V_j_V_1_address0,
        V_j_V_1_ce0,
        V_j_V_1_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1:0] col_i_dout;
input   col_i_empty_n;
output   col_i_read;
input  [1:0] col_j_dout;
input   col_j_empty_n;
output   col_j_read;
input  [63:0] s_dout;
input   s_empty_n;
output   s_read;
input  [63:0] c_dout;
input   c_empty_n;
output   c_read;
output  [2:0] matV_V_0_address0;
output   matV_V_0_ce0;
output   matV_V_0_we0;
output  [63:0] matV_V_0_d0;
output  [2:0] matV_V_0_address1;
output   matV_V_0_ce1;
output   matV_V_0_we1;
output  [63:0] matV_V_0_d1;
output  [2:0] matV_V_1_address0;
output   matV_V_1_ce0;
output   matV_V_1_we0;
output  [63:0] matV_V_1_d0;
output  [2:0] matV_V_1_address1;
output   matV_V_1_ce1;
output   matV_V_1_we1;
output  [63:0] matV_V_1_d1;
output  [0:0] V_i_V_0_address0;
output   V_i_V_0_ce0;
input  [63:0] V_i_V_0_q0;
output  [0:0] V_j_V_0_address0;
output   V_j_V_0_ce0;
input  [63:0] V_j_V_0_q0;
output  [0:0] V_i_V_1_address0;
output   V_i_V_1_ce0;
input  [63:0] V_i_V_1_q0;
output  [0:0] V_j_V_1_address0;
output   V_j_V_1_ce0;
input  [63:0] V_j_V_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_i_read;
reg col_j_read;
reg s_read;
reg c_read;
reg matV_V_0_ce0;
reg matV_V_0_we0;
reg matV_V_0_ce1;
reg matV_V_0_we1;
reg matV_V_1_ce0;
reg matV_V_1_we0;
reg matV_V_1_ce1;
reg matV_V_1_we1;
reg V_i_V_0_ce0;
reg V_j_V_0_ce0;
reg V_i_V_1_ce0;
reg V_j_V_1_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    col_i_blk_n;
reg    col_j_blk_n;
reg    s_blk_n;
reg    c_blk_n;
reg   [1:0] k_reg_214;
wire  signed [106:0] c_cast_i_i_i_fu_225_p1;
reg  signed [106:0] c_cast_i_i_i_reg_514;
wire  signed [106:0] s_cast_i_i_i_fu_229_p1;
reg  signed [106:0] s_cast_i_i_i_reg_522;
wire   [2:0] col_i_load_cast_fu_233_p1;
reg   [2:0] col_i_load_cast_reg_530;
wire   [2:0] zext_ln155_1_fu_237_p1;
reg   [2:0] zext_ln155_1_reg_535;
wire   [1:0] add_ln155_fu_241_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln155_fu_247_p2;
reg   [0:0] icmp_ln155_reg_545;
reg   [0:0] icmp_ln155_reg_545_pp0_iter1_reg;
reg   [0:0] icmp_ln155_reg_545_pp0_iter2_reg;
wire   [2:0] sub_ln162_fu_277_p2;
reg   [2:0] sub_ln162_reg_549;
reg   [2:0] sub_ln162_reg_549_pp0_iter1_reg;
wire  signed [106:0] sext_ln1118_fu_283_p1;
reg  signed [106:0] sext_ln1118_reg_575;
wire   [106:0] r_V_10_fu_287_p2;
reg   [106:0] r_V_10_reg_580;
wire  signed [106:0] sext_ln1118_1_fu_292_p1;
reg  signed [106:0] sext_ln1118_1_reg_585;
wire   [106:0] r_V_11_fu_296_p2;
reg   [106:0] r_V_11_reg_590;
wire  signed [106:0] sext_ln1118_2_fu_301_p1;
reg  signed [106:0] sext_ln1118_2_reg_595;
wire   [106:0] r_V_12_fu_305_p2;
reg   [106:0] r_V_12_reg_600;
wire  signed [106:0] sext_ln1118_3_fu_310_p1;
reg  signed [106:0] sext_ln1118_3_reg_605;
wire   [106:0] r_V_13_fu_314_p2;
reg   [106:0] r_V_13_reg_610;
wire   [2:0] add_ln163_fu_329_p2;
reg   [2:0] add_ln163_reg_615;
reg   [63:0] trunc_ln708_1_reg_620;
reg   [0:0] tmp_1_reg_625;
reg   [63:0] trunc_ln708_3_reg_630;
reg   [0:0] tmp_3_reg_635;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln155_fu_253_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln162_1_fu_323_p1;
wire   [63:0] zext_ln163_fu_491_p1;
wire   [0:0] trunc_ln162_fu_265_p1;
wire   [2:0] tmp_cast_fu_269_p3;
wire   [2:0] zext_ln162_fu_261_p1;
wire  signed [63:0] r_V_10_fu_287_p1;
wire  signed [63:0] r_V_11_fu_296_p1;
wire  signed [63:0] r_V_12_fu_305_p1;
wire  signed [63:0] r_V_13_fu_314_p1;
wire   [2:0] add_ln162_fu_319_p2;
wire   [106:0] ret_V_fu_333_p2;
wire   [0:0] tmp_fu_347_p3;
wire   [63:0] trunc_ln_fu_337_p4;
wire   [63:0] zext_ln415_fu_355_p1;
wire  signed [63:0] r_V_4_fu_366_p0;
wire  signed [63:0] r_V_4_fu_366_p1;
wire  signed [63:0] r_V_5_fu_370_p0;
wire  signed [63:0] r_V_5_fu_370_p1;
wire   [106:0] r_V_4_fu_366_p2;
wire   [106:0] r_V_5_fu_370_p2;
wire   [106:0] ret_V_1_fu_382_p2;
wire   [42:0] trunc_ln1192_1_fu_378_p1;
wire   [42:0] trunc_ln1192_fu_374_p1;
wire   [42:0] add_ln713_fu_398_p2;
wire   [106:0] ret_V_2_fu_412_p2;
wire   [0:0] tmp_2_fu_426_p3;
wire   [63:0] trunc_ln708_2_fu_416_p4;
wire   [63:0] zext_ln415_2_fu_434_p1;
wire  signed [63:0] r_V_8_fu_445_p0;
wire  signed [63:0] r_V_8_fu_445_p1;
wire  signed [63:0] r_V_9_fu_449_p0;
wire  signed [63:0] r_V_9_fu_449_p1;
wire   [106:0] r_V_8_fu_445_p2;
wire   [106:0] r_V_9_fu_449_p2;
wire   [106:0] ret_V_3_fu_461_p2;
wire   [42:0] trunc_ln1192_3_fu_457_p1;
wire   [42:0] trunc_ln1192_2_fu_453_p1;
wire   [42:0] add_ln713_1_fu_477_p2;
wire   [63:0] zext_ln415_1_fu_496_p1;
wire   [63:0] zext_ln415_3_fu_505_p1;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U604(
    .din0(V_i_V_0_q0),
    .din1(r_V_10_fu_287_p1),
    .dout(r_V_10_fu_287_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U605(
    .din0(V_j_V_0_q0),
    .din1(r_V_11_fu_296_p1),
    .dout(r_V_11_fu_296_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U606(
    .din0(V_i_V_1_q0),
    .din1(r_V_12_fu_305_p1),
    .dout(r_V_12_fu_305_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U607(
    .din0(V_j_V_1_q0),
    .din1(r_V_13_fu_314_p1),
    .dout(r_V_13_fu_314_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U608(
    .din0(r_V_4_fu_366_p0),
    .din1(r_V_4_fu_366_p1),
    .dout(r_V_4_fu_366_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U609(
    .din0(r_V_5_fu_370_p0),
    .din1(r_V_5_fu_370_p1),
    .dout(r_V_5_fu_370_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U610(
    .din0(r_V_8_fu_445_p0),
    .din1(r_V_8_fu_445_p1),
    .dout(r_V_8_fu_445_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U611(
    .din0(r_V_9_fu_449_p0),
    .din1(r_V_9_fu_449_p1),
    .dout(r_V_9_fu_449_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_fu_247_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_reg_214 <= add_ln155_fu_241_p2;
    end else if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_214 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln155_reg_545_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln163_reg_615 <= add_ln163_fu_329_p2;
        tmp_1_reg_625 <= add_ln713_fu_398_p2[32'd42];
        tmp_3_reg_635 <= add_ln713_1_fu_477_p2[32'd42];
        trunc_ln708_1_reg_620 <= {{ret_V_1_fu_382_p2[106:43]}};
        trunc_ln708_3_reg_630 <= {{ret_V_3_fu_461_p2[106:43]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        c_cast_i_i_i_reg_514 <= c_cast_i_i_i_fu_225_p1;
        col_i_load_cast_reg_530[1 : 0] <= col_i_load_cast_fu_233_p1[1 : 0];
        s_cast_i_i_i_reg_522 <= s_cast_i_i_i_fu_229_p1;
        zext_ln155_1_reg_535[1 : 0] <= zext_ln155_1_fu_237_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln155_reg_545 <= icmp_ln155_fu_247_p2;
        icmp_ln155_reg_545_pp0_iter1_reg <= icmp_ln155_reg_545;
        sub_ln162_reg_549_pp0_iter1_reg <= sub_ln162_reg_549;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln155_reg_545_pp0_iter2_reg <= icmp_ln155_reg_545_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_reg_545 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_10_reg_580 <= r_V_10_fu_287_p2;
        r_V_11_reg_590 <= r_V_11_fu_296_p2;
        r_V_12_reg_600 <= r_V_12_fu_305_p2;
        r_V_13_reg_610 <= r_V_13_fu_314_p2;
        sext_ln1118_1_reg_585 <= sext_ln1118_1_fu_292_p1;
        sext_ln1118_2_reg_595 <= sext_ln1118_2_fu_301_p1;
        sext_ln1118_3_reg_605 <= sext_ln1118_3_fu_310_p1;
        sext_ln1118_reg_575 <= sext_ln1118_fu_283_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln155_fu_247_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln162_reg_549 <= sub_ln162_fu_277_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        V_i_V_0_ce0 = 1'b1;
    end else begin
        V_i_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        V_i_V_1_ce0 = 1'b1;
    end else begin
        V_i_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        V_j_V_0_ce0 = 1'b1;
    end else begin
        V_j_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        V_j_V_1_ce0 = 1'b1;
    end else begin
        V_j_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln155_fu_247_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_blk_n = c_empty_n;
    end else begin
        c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read = 1'b1;
    end else begin
        c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_blk_n = col_i_empty_n;
    end else begin
        col_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_read = 1'b1;
    end else begin
        col_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_blk_n = col_j_empty_n;
    end else begin
        col_j_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_read = 1'b1;
    end else begin
        col_j_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matV_V_0_ce0 = 1'b1;
    end else begin
        matV_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matV_V_0_ce1 = 1'b1;
    end else begin
        matV_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln155_reg_545_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matV_V_0_we0 = 1'b1;
    end else begin
        matV_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_545_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matV_V_0_we1 = 1'b1;
    end else begin
        matV_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matV_V_1_ce0 = 1'b1;
    end else begin
        matV_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matV_V_1_ce1 = 1'b1;
    end else begin
        matV_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln155_reg_545_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matV_V_1_we0 = 1'b1;
    end else begin
        matV_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln155_reg_545_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matV_V_1_we1 = 1'b1;
    end else begin
        matV_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_blk_n = s_empty_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_read = 1'b1;
    end else begin
        s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln155_fu_247_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln155_fu_247_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V_i_V_0_address0 = zext_ln155_fu_253_p1;

assign V_i_V_1_address0 = zext_ln155_fu_253_p1;

assign V_j_V_0_address0 = zext_ln155_fu_253_p1;

assign V_j_V_1_address0 = zext_ln155_fu_253_p1;

assign add_ln155_fu_241_p2 = (k_reg_214 + 2'd1);

assign add_ln162_fu_319_p2 = (sub_ln162_reg_549_pp0_iter1_reg + col_i_load_cast_reg_530);

assign add_ln163_fu_329_p2 = (sub_ln162_reg_549_pp0_iter1_reg + zext_ln155_1_reg_535);

assign add_ln713_1_fu_477_p2 = (trunc_ln1192_3_fu_457_p1 + trunc_ln1192_2_fu_453_p1);

assign add_ln713_fu_398_p2 = (trunc_ln1192_1_fu_378_p1 + trunc_ln1192_fu_374_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_cast_i_i_i_fu_225_p1 = $signed(c_dout);

assign col_i_load_cast_fu_233_p1 = col_i_dout;

assign icmp_ln155_fu_247_p2 = ((k_reg_214 == 2'd2) ? 1'b1 : 1'b0);

assign matV_V_0_address0 = zext_ln163_fu_491_p1;

assign matV_V_0_address1 = zext_ln162_1_fu_323_p1;

assign matV_V_0_d0 = (trunc_ln708_1_reg_620 + zext_ln415_1_fu_496_p1);

assign matV_V_0_d1 = (trunc_ln_fu_337_p4 + zext_ln415_fu_355_p1);

assign matV_V_1_address0 = zext_ln163_fu_491_p1;

assign matV_V_1_address1 = zext_ln162_1_fu_323_p1;

assign matV_V_1_d0 = (trunc_ln708_3_reg_630 + zext_ln415_3_fu_505_p1);

assign matV_V_1_d1 = (trunc_ln708_2_fu_416_p4 + zext_ln415_2_fu_434_p1);

assign r_V_10_fu_287_p1 = c_cast_i_i_i_reg_514;

assign r_V_11_fu_296_p1 = s_cast_i_i_i_reg_522;

assign r_V_12_fu_305_p1 = c_cast_i_i_i_reg_514;

assign r_V_13_fu_314_p1 = s_cast_i_i_i_reg_522;

assign r_V_4_fu_366_p0 = sext_ln1118_reg_575;

assign r_V_4_fu_366_p1 = s_cast_i_i_i_reg_522;

assign r_V_5_fu_370_p0 = sext_ln1118_1_reg_585;

assign r_V_5_fu_370_p1 = c_cast_i_i_i_reg_514;

assign r_V_8_fu_445_p0 = sext_ln1118_2_reg_595;

assign r_V_8_fu_445_p1 = s_cast_i_i_i_reg_522;

assign r_V_9_fu_449_p0 = sext_ln1118_3_reg_605;

assign r_V_9_fu_449_p1 = c_cast_i_i_i_reg_514;

assign ret_V_1_fu_382_p2 = (r_V_5_fu_370_p2 + r_V_4_fu_366_p2);

assign ret_V_2_fu_412_p2 = (r_V_12_reg_600 - r_V_13_reg_610);

assign ret_V_3_fu_461_p2 = (r_V_9_fu_449_p2 + r_V_8_fu_445_p2);

assign ret_V_fu_333_p2 = (r_V_10_reg_580 - r_V_11_reg_590);

assign s_cast_i_i_i_fu_229_p1 = $signed(s_dout);

assign sext_ln1118_1_fu_292_p1 = $signed(V_j_V_0_q0);

assign sext_ln1118_2_fu_301_p1 = $signed(V_i_V_1_q0);

assign sext_ln1118_3_fu_310_p1 = $signed(V_j_V_1_q0);

assign sext_ln1118_fu_283_p1 = $signed(V_i_V_0_q0);

assign sub_ln162_fu_277_p2 = (tmp_cast_fu_269_p3 - zext_ln162_fu_261_p1);

assign tmp_2_fu_426_p3 = ret_V_2_fu_412_p2[32'd42];

assign tmp_cast_fu_269_p3 = {{trunc_ln162_fu_265_p1}, {2'd0}};

assign tmp_fu_347_p3 = ret_V_fu_333_p2[32'd42];

assign trunc_ln1192_1_fu_378_p1 = r_V_5_fu_370_p2[42:0];

assign trunc_ln1192_2_fu_453_p1 = r_V_8_fu_445_p2[42:0];

assign trunc_ln1192_3_fu_457_p1 = r_V_9_fu_449_p2[42:0];

assign trunc_ln1192_fu_374_p1 = r_V_4_fu_366_p2[42:0];

assign trunc_ln162_fu_265_p1 = k_reg_214[0:0];

assign trunc_ln708_2_fu_416_p4 = {{ret_V_2_fu_412_p2[106:43]}};

assign trunc_ln_fu_337_p4 = {{ret_V_fu_333_p2[106:43]}};

assign zext_ln155_1_fu_237_p1 = col_j_dout;

assign zext_ln155_fu_253_p1 = k_reg_214;

assign zext_ln162_1_fu_323_p1 = add_ln162_fu_319_p2;

assign zext_ln162_fu_261_p1 = k_reg_214;

assign zext_ln163_fu_491_p1 = add_ln163_reg_615;

assign zext_ln415_1_fu_496_p1 = tmp_1_reg_625;

assign zext_ln415_2_fu_434_p1 = tmp_2_fu_426_p3;

assign zext_ln415_3_fu_505_p1 = tmp_3_reg_635;

assign zext_ln415_fu_355_p1 = tmp_fu_347_p3;

always @ (posedge ap_clk) begin
    col_i_load_cast_reg_530[2] <= 1'b0;
    zext_ln155_1_reg_535[2] <= 1'b0;
end

endmodule //LLSSineReconstruction_update_V_ap_fixed_64_21_0_3_0_3_2_2_s
