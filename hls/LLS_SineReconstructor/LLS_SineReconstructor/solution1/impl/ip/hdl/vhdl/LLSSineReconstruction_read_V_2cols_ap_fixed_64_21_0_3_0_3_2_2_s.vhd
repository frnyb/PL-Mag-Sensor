-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_read_V_2cols_ap_fixed_64_21_0_3_0_3_2_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    n_empty_n : IN STD_LOGIC;
    n_read : OUT STD_LOGIC;
    col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_i_empty_n : IN STD_LOGIC;
    col_i_read : OUT STD_LOGIC;
    col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_j_empty_n : IN STD_LOGIC;
    col_j_read : OUT STD_LOGIC;
    V_i_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_0_ce1 : OUT STD_LOGIC;
    V_i_V_0_we1 : OUT STD_LOGIC;
    V_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_1_ce1 : OUT STD_LOGIC;
    V_i_V_1_we1 : OUT STD_LOGIC;
    V_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_0_ce1 : OUT STD_LOGIC;
    V_j_V_0_we1 : OUT STD_LOGIC;
    V_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_1_ce1 : OUT STD_LOGIC;
    V_j_V_1_we1 : OUT STD_LOGIC;
    V_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_0_ce0 : OUT STD_LOGIC;
    matV_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_0_ce1 : OUT STD_LOGIC;
    matV_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_1_ce0 : OUT STD_LOGIC;
    matV_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_1_ce1 : OUT STD_LOGIC;
    matV_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of LLSSineReconstruction_read_V_2cols_ap_fixed_64_21_0_3_0_3_2_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n_blk_n : STD_LOGIC;
    signal col_i_blk_n : STD_LOGIC;
    signal col_j_blk_n : STD_LOGIC;
    signal k_reg_220 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_read_reg_326 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i_load_cast_fu_232_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_i_load_cast_reg_332 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln319_1_fu_236_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln319_1_reg_337 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln319_fu_240_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln319_reg_342 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln319_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln319_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln324_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln324_reg_371 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln324_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln324_1_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_k_phi_fu_224_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln325_1_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln326_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln319_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_fu_256_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_260_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln325_fu_252_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln325_fu_268_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln325_fu_274_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln326_fu_285_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_296_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln324_fu_307_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln319_reg_347 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_reg_220 <= add_ln319_reg_342;
            elsif ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_220 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln319_reg_342 <= add_ln319_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    col_i_load_cast_reg_332(1 downto 0) <= col_i_load_cast_fu_232_p1(1 downto 0);
                n_read_reg_326 <= n_dout;
                    zext_ln319_1_reg_337(1 downto 0) <= zext_ln319_1_fu_236_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln319_reg_347 <= icmp_ln319_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln319_fu_246_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln324_1_reg_375 <= icmp_ln324_1_fu_313_p2;
                icmp_ln324_reg_371 <= icmp_ln324_fu_302_p2;
            end if;
        end if;
    end process;
    col_i_load_cast_reg_332(2) <= '0';
    zext_ln319_1_reg_337(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, n_empty_n, col_i_empty_n, col_j_empty_n, ap_enable_reg_pp0_iter0, icmp_ln319_fu_246_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln319_fu_246_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln319_fu_246_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    V_i_V_0_address1 <= zext_ln319_fu_318_p1(1 - 1 downto 0);

    V_i_V_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_i_V_0_ce1 <= ap_const_logic_1;
        else 
            V_i_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    V_i_V_0_d1 <= matV_V_0_q1;

    V_i_V_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln324_reg_371, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln324_reg_371 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_i_V_0_we1 <= ap_const_logic_1;
        else 
            V_i_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    V_i_V_1_address1 <= zext_ln319_fu_318_p1(1 - 1 downto 0);

    V_i_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_i_V_1_ce1 <= ap_const_logic_1;
        else 
            V_i_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    V_i_V_1_d1 <= matV_V_1_q1;

    V_i_V_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln324_1_reg_375, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln324_1_reg_375 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_i_V_1_we1 <= ap_const_logic_1;
        else 
            V_i_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_V_0_address1 <= zext_ln319_fu_318_p1(1 - 1 downto 0);

    V_j_V_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_j_V_0_ce1 <= ap_const_logic_1;
        else 
            V_j_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_V_0_d1 <= matV_V_0_q0;

    V_j_V_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln324_reg_371, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln324_reg_371 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_j_V_0_we1 <= ap_const_logic_1;
        else 
            V_j_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_V_1_address1 <= zext_ln319_fu_318_p1(1 - 1 downto 0);

    V_j_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_j_V_1_ce1 <= ap_const_logic_1;
        else 
            V_j_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_V_1_d1 <= matV_V_1_q0;

    V_j_V_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln324_1_reg_375, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln324_1_reg_375 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            V_j_V_1_we1 <= ap_const_logic_1;
        else 
            V_j_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln319_fu_240_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_224_p4) + unsigned(ap_const_lv2_1));
    add_ln325_fu_274_p2 <= std_logic_vector(unsigned(sub_ln325_fu_268_p2) + unsigned(col_i_load_cast_reg_332));
    add_ln326_fu_285_p2 <= std_logic_vector(unsigned(sub_ln325_fu_268_p2) + unsigned(zext_ln319_1_reg_337));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, n_empty_n, col_i_empty_n, col_j_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln319_fu_246_p2)
    begin
        if ((icmp_ln319_fu_246_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_224_p4_assign_proc : process(k_reg_220, add_ln319_reg_342, ap_CS_fsm_pp0_stage0, icmp_ln319_reg_347, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln319_reg_347 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_k_phi_fu_224_p4 <= add_ln319_reg_342;
        else 
            ap_phi_mux_k_phi_fu_224_p4 <= k_reg_220;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    col_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_blk_n <= col_i_empty_n;
        else 
            col_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_i_load_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_dout),3));

    col_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_read <= ap_const_logic_1;
        else 
            col_i_read <= ap_const_logic_0;
        end if; 
    end process;


    col_j_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_blk_n <= col_j_empty_n;
        else 
            col_j_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_j_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_read <= ap_const_logic_1;
        else 
            col_j_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_296_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_k_phi_fu_224_p4),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    icmp_ln319_fu_246_p2 <= "1" when (ap_phi_mux_k_phi_fu_224_p4 = ap_const_lv2_2) else "0";
    icmp_ln324_1_fu_313_p2 <= "1" when (unsigned(or_ln324_fu_307_p2) < unsigned(n_read_reg_326)) else "0";
    icmp_ln324_fu_302_p2 <= "1" when (unsigned(empty_fu_296_p2) < unsigned(n_read_reg_326)) else "0";
    matV_V_0_address0 <= zext_ln326_fu_290_p1(3 - 1 downto 0);
    matV_V_0_address1 <= zext_ln325_1_fu_279_p1(3 - 1 downto 0);

    matV_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            matV_V_0_ce0 <= ap_const_logic_1;
        else 
            matV_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matV_V_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            matV_V_0_ce1 <= ap_const_logic_1;
        else 
            matV_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    matV_V_1_address0 <= zext_ln326_fu_290_p1(3 - 1 downto 0);
    matV_V_1_address1 <= zext_ln325_1_fu_279_p1(3 - 1 downto 0);

    matV_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            matV_V_1_ce0 <= ap_const_logic_1;
        else 
            matV_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matV_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            matV_V_1_ce1 <= ap_const_logic_1;
        else 
            matV_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_blk_n <= n_empty_n;
        else 
            n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_read <= ap_const_logic_1;
        else 
            n_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln324_fu_307_p2 <= (empty_fu_296_p2 or ap_const_lv2_1);
    sub_ln325_fu_268_p2 <= std_logic_vector(unsigned(tmp_cast_fu_260_p3) - unsigned(zext_ln325_fu_252_p1));
    tmp_cast_fu_260_p3 <= (trunc_ln325_fu_256_p1 & ap_const_lv2_0);
    trunc_ln325_fu_256_p1 <= ap_phi_mux_k_phi_fu_224_p4(1 - 1 downto 0);
    zext_ln319_1_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_j_dout),3));
    zext_ln319_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_220),64));
    zext_ln325_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln325_fu_274_p2),64));
    zext_ln325_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_phi_fu_224_p4),3));
    zext_ln326_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln326_fu_285_p2),64));
end behav;
