-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_read_and_gen_2x2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sine_reconstructor_16_873_din : OUT STD_LOGIC_VECTOR (59 downto 0);
    sine_reconstructor_16_873_full_n : IN STD_LOGIC;
    sine_reconstructor_16_873_write : OUT STD_LOGIC;
    sine_reconstructor_16_974_din : OUT STD_LOGIC_VECTOR (59 downto 0);
    sine_reconstructor_16_974_full_n : IN STD_LOGIC;
    sine_reconstructor_16_974_write : OUT STD_LOGIC;
    sine_reconstructor_16_1075_din : OUT STD_LOGIC_VECTOR (59 downto 0);
    sine_reconstructor_16_1075_full_n : IN STD_LOGIC;
    sine_reconstructor_16_1075_write : OUT STD_LOGIC;
    this_14_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_14_0_ce0 : OUT STD_LOGIC;
    this_14_0_we0 : OUT STD_LOGIC;
    this_14_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    this_14_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    this_15_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_15_0_ce0 : OUT STD_LOGIC;
    this_15_0_we0 : OUT STD_LOGIC;
    this_15_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    this_15_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    this_16_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_16_0_ce0 : OUT STD_LOGIC;
    this_16_0_we0 : OUT STD_LOGIC;
    this_16_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    this_16_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    this_17_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_17_ce0 : OUT STD_LOGIC;
    this_17_we0 : OUT STD_LOGIC;
    this_17_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    this_17_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    this_17_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_17_ce1 : OUT STD_LOGIC;
    this_17_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    this_18_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_18_ce0 : OUT STD_LOGIC;
    this_18_we0 : OUT STD_LOGIC;
    this_18_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    this_18_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    this_18_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_18_ce1 : OUT STD_LOGIC;
    this_18_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    this_19_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_19_ce0 : OUT STD_LOGIC;
    this_19_we0 : OUT STD_LOGIC;
    this_19_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    this_19_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    this_19_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_19_ce1 : OUT STD_LOGIC;
    this_19_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    matA_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_0_ce0 : OUT STD_LOGIC;
    matA_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    matA_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_0_ce1 : OUT STD_LOGIC;
    matA_0_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    A_i_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_0_ce0 : OUT STD_LOGIC;
    A_i_0_we0 : OUT STD_LOGIC;
    A_i_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    A_j_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_0_ce0 : OUT STD_LOGIC;
    A_j_0_we0 : OUT STD_LOGIC;
    A_j_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_i_empty_n : IN STD_LOGIC;
    col_i_read : OUT STD_LOGIC;
    col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_j_empty_n : IN STD_LOGIC;
    col_j_read : OUT STD_LOGIC );
end;


architecture behav of LLSSineReconstruction_read_and_gen_2x2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sine_reconstructor_16_873_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sine_reconstructor_16_974_blk_n : STD_LOGIC;
    signal sine_reconstructor_16_1075_blk_n : STD_LOGIC;
    signal col_i_blk_n : STD_LOGIC;
    signal col_j_blk_n : STD_LOGIC;
    signal col_i_read_reg_1306 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_j_read_reg_1311 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln581_fu_808_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal col_i_load_cast_fu_830_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_i_load_cast_reg_1324 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln581_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln599_1_fu_833_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln599_1_reg_1329 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln599_fu_836_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln599_reg_1334 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln599_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln599_reg_1339 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_894_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1358 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln599_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_23_fu_908_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_23_reg_1363 : STD_LOGIC_VECTOR (98 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal this_14_0_addr_1_reg_1368 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_27_fu_926_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_27_reg_1378 : STD_LOGIC_VECTOR (98 downto 0);
    signal this_15_0_addr_1_reg_1383 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_reg_1388 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_28_fu_940_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_28_reg_1393 : STD_LOGIC_VECTOR (98 downto 0);
    signal this_16_0_addr_1_reg_1398 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln691_fu_1053_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln691_reg_1408 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal this_17_addr_1_reg_1416 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln623_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal this_18_addr_1_reg_1426 : STD_LOGIC_VECTOR (3 downto 0);
    signal this_19_addr_1_reg_1436 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln645_fu_1096_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln645_reg_1446 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln645_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln645_reg_1451 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln645_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln657_fu_1159_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln657_reg_1491 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln657_fu_1165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln657_reg_1496 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln657_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln668_fu_1222_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln668_reg_1536 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln668_fu_1228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln668_reg_1541 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln668_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_sum_tmp0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal alpha_sum_tmp0_V_ce0 : STD_LOGIC;
    signal alpha_sum_tmp0_V_we0 : STD_LOGIC;
    signal alpha_sum_tmp0_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal alpha_sum_tmp0_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal alpha_sum_tmp0_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal alpha_sum_tmp0_V_ce1 : STD_LOGIC;
    signal alpha_sum_tmp0_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal beta_sum_tmp0_V_ce0 : STD_LOGIC;
    signal beta_sum_tmp0_V_we0 : STD_LOGIC;
    signal beta_sum_tmp0_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp0_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp0_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal beta_sum_tmp0_V_ce1 : STD_LOGIC;
    signal beta_sum_tmp0_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal gamma_sum_tmp0_V_ce0 : STD_LOGIC;
    signal gamma_sum_tmp0_V_we0 : STD_LOGIC;
    signal gamma_sum_tmp0_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp0_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp0_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal gamma_sum_tmp0_V_ce1 : STD_LOGIC;
    signal gamma_sum_tmp0_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal alpha_sum_tmp1_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal alpha_sum_tmp1_V_ce0 : STD_LOGIC;
    signal alpha_sum_tmp1_V_we0 : STD_LOGIC;
    signal alpha_sum_tmp1_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal alpha_sum_tmp1_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal alpha_sum_tmp1_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal alpha_sum_tmp1_V_ce1 : STD_LOGIC;
    signal alpha_sum_tmp1_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp1_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal beta_sum_tmp1_V_ce0 : STD_LOGIC;
    signal beta_sum_tmp1_V_we0 : STD_LOGIC;
    signal beta_sum_tmp1_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp1_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp1_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal beta_sum_tmp1_V_ce1 : STD_LOGIC;
    signal beta_sum_tmp1_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp1_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal gamma_sum_tmp1_V_ce0 : STD_LOGIC;
    signal gamma_sum_tmp1_V_we0 : STD_LOGIC;
    signal gamma_sum_tmp1_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp1_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp1_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal gamma_sum_tmp1_V_ce1 : STD_LOGIC;
    signal gamma_sum_tmp1_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal alpha_sum_tmp2_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_sum_tmp2_V_ce0 : STD_LOGIC;
    signal alpha_sum_tmp2_V_we0 : STD_LOGIC;
    signal alpha_sum_tmp2_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal alpha_sum_tmp2_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal alpha_sum_tmp2_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_sum_tmp2_V_ce1 : STD_LOGIC;
    signal alpha_sum_tmp2_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp2_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_sum_tmp2_V_ce0 : STD_LOGIC;
    signal beta_sum_tmp2_V_we0 : STD_LOGIC;
    signal beta_sum_tmp2_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp2_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal beta_sum_tmp2_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_sum_tmp2_V_ce1 : STD_LOGIC;
    signal beta_sum_tmp2_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp2_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal gamma_sum_tmp2_V_ce0 : STD_LOGIC;
    signal gamma_sum_tmp2_V_we0 : STD_LOGIC;
    signal gamma_sum_tmp2_V_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp2_V_q0 : STD_LOGIC_VECTOR (59 downto 0);
    signal gamma_sum_tmp2_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal gamma_sum_tmp2_V_ce1 : STD_LOGIC;
    signal gamma_sum_tmp2_V_q1 : STD_LOGIC_VECTOR (59 downto 0);
    signal t_reg_742 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal k_reg_753 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx_V_reg_764 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal k_2_reg_775 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal k_3_reg_786 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal k_4_reg_797 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln581_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln610_1_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln611_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom5625_i_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln623_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln648_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_fu_1131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln660_fu_1181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_1_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln671_fu_1244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_2_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state14 : BOOLEAN;
    signal add_ln415_fu_980_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln415_3_fu_1013_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln415_4_fu_1046_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln703_fu_1075_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln703_1_fu_1082_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln703_2_fu_1089_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln610_fu_850_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_854_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln610_fu_846_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln610_fu_862_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln610_fu_868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln611_fu_878_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1115_fu_904_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_23_fu_908_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal sext_ln1115_fu_904_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_23_fu_908_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal sext_ln1115_1_fu_922_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_27_fu_926_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal sext_ln1115_1_fu_922_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_27_fu_926_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_28_fu_940_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_28_fu_940_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal lhs_1_fu_954_p3 : STD_LOGIC_VECTOR (98 downto 0);
    signal ret_V_fu_962_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal trunc_ln_fu_967_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln415_fu_977_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal lhs_3_fu_987_p3 : STD_LOGIC_VECTOR (98 downto 0);
    signal ret_V_3_fu_995_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal trunc_ln708_3_fu_1000_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln415_3_fu_1010_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal lhs_5_fu_1020_p3 : STD_LOGIC_VECTOR (98 downto 0);
    signal ret_V_4_fu_1028_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal trunc_ln708_4_fu_1033_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln415_4_fu_1043_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal shl_ln648_fu_1112_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln648_fu_1125_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln660_fu_1175_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln660_fu_1188_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln671_fu_1238_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln671_fu_1251_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_mul_60s_60s_99_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (59 downto 0);
        din1 : IN STD_LOGIC_VECTOR (59 downto 0);
        dout : OUT STD_LOGIC_VECTOR (98 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (59 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (59 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (59 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (59 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (59 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (59 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;



begin
    alpha_sum_tmp0_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp0_V
    generic map (
        DataWidth => 60,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_sum_tmp0_V_address0,
        ce0 => alpha_sum_tmp0_V_ce0,
        we0 => alpha_sum_tmp0_V_we0,
        d0 => alpha_sum_tmp0_V_d0,
        q0 => alpha_sum_tmp0_V_q0,
        address1 => alpha_sum_tmp0_V_address1,
        ce1 => alpha_sum_tmp0_V_ce1,
        q1 => alpha_sum_tmp0_V_q1);

    beta_sum_tmp0_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp0_V
    generic map (
        DataWidth => 60,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_sum_tmp0_V_address0,
        ce0 => beta_sum_tmp0_V_ce0,
        we0 => beta_sum_tmp0_V_we0,
        d0 => beta_sum_tmp0_V_d0,
        q0 => beta_sum_tmp0_V_q0,
        address1 => beta_sum_tmp0_V_address1,
        ce1 => beta_sum_tmp0_V_ce1,
        q1 => beta_sum_tmp0_V_q1);

    gamma_sum_tmp0_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp0_V
    generic map (
        DataWidth => 60,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_sum_tmp0_V_address0,
        ce0 => gamma_sum_tmp0_V_ce0,
        we0 => gamma_sum_tmp0_V_we0,
        d0 => gamma_sum_tmp0_V_d0,
        q0 => gamma_sum_tmp0_V_q0,
        address1 => gamma_sum_tmp0_V_address1,
        ce1 => gamma_sum_tmp0_V_ce1,
        q1 => gamma_sum_tmp0_V_q1);

    alpha_sum_tmp1_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp1_V
    generic map (
        DataWidth => 60,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_sum_tmp1_V_address0,
        ce0 => alpha_sum_tmp1_V_ce0,
        we0 => alpha_sum_tmp1_V_we0,
        d0 => alpha_sum_tmp1_V_d0,
        q0 => alpha_sum_tmp1_V_q0,
        address1 => alpha_sum_tmp1_V_address1,
        ce1 => alpha_sum_tmp1_V_ce1,
        q1 => alpha_sum_tmp1_V_q1);

    beta_sum_tmp1_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp1_V
    generic map (
        DataWidth => 60,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_sum_tmp1_V_address0,
        ce0 => beta_sum_tmp1_V_ce0,
        we0 => beta_sum_tmp1_V_we0,
        d0 => beta_sum_tmp1_V_d0,
        q0 => beta_sum_tmp1_V_q0,
        address1 => beta_sum_tmp1_V_address1,
        ce1 => beta_sum_tmp1_V_ce1,
        q1 => beta_sum_tmp1_V_q1);

    gamma_sum_tmp1_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp1_V
    generic map (
        DataWidth => 60,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_sum_tmp1_V_address0,
        ce0 => gamma_sum_tmp1_V_ce0,
        we0 => gamma_sum_tmp1_V_we0,
        d0 => gamma_sum_tmp1_V_d0,
        q0 => gamma_sum_tmp1_V_q0,
        address1 => gamma_sum_tmp1_V_address1,
        ce1 => gamma_sum_tmp1_V_ce1,
        q1 => gamma_sum_tmp1_V_q1);

    alpha_sum_tmp2_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp2_V
    generic map (
        DataWidth => 60,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_sum_tmp2_V_address0,
        ce0 => alpha_sum_tmp2_V_ce0,
        we0 => alpha_sum_tmp2_V_we0,
        d0 => alpha_sum_tmp2_V_d0,
        q0 => alpha_sum_tmp2_V_q0,
        address1 => alpha_sum_tmp2_V_address1,
        ce1 => alpha_sum_tmp2_V_ce1,
        q1 => alpha_sum_tmp2_V_q1);

    beta_sum_tmp2_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp2_V
    generic map (
        DataWidth => 60,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_sum_tmp2_V_address0,
        ce0 => beta_sum_tmp2_V_ce0,
        we0 => beta_sum_tmp2_V_we0,
        d0 => beta_sum_tmp2_V_d0,
        q0 => beta_sum_tmp2_V_q0,
        address1 => beta_sum_tmp2_V_address1,
        ce1 => beta_sum_tmp2_V_ce1,
        q1 => beta_sum_tmp2_V_q1);

    gamma_sum_tmp2_V_U : component LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp2_V
    generic map (
        DataWidth => 60,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_sum_tmp2_V_address0,
        ce0 => gamma_sum_tmp2_V_ce0,
        we0 => gamma_sum_tmp2_V_we0,
        d0 => gamma_sum_tmp2_V_d0,
        q0 => gamma_sum_tmp2_V_q0,
        address1 => gamma_sum_tmp2_V_address1,
        ce1 => gamma_sum_tmp2_V_ce1,
        q1 => gamma_sum_tmp2_V_q1);

    mul_60s_60s_99_1_1_U133 : component LLSSineReconstruction_mul_60s_60s_99_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 60,
        din1_WIDTH => 60,
        dout_WIDTH => 99)
    port map (
        din0 => r_V_23_fu_908_p0,
        din1 => r_V_23_fu_908_p1,
        dout => r_V_23_fu_908_p2);

    mul_60s_60s_99_1_1_U134 : component LLSSineReconstruction_mul_60s_60s_99_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 60,
        din1_WIDTH => 60,
        dout_WIDTH => 99)
    port map (
        din0 => r_V_27_fu_926_p0,
        din1 => r_V_27_fu_926_p1,
        dout => r_V_27_fu_926_p2);

    mul_60s_60s_99_1_1_U135 : component LLSSineReconstruction_mul_60s_60s_99_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 60,
        din1_WIDTH => 60,
        dout_WIDTH => 99)
    port map (
        din0 => r_V_28_fu_940_p0,
        din1 => r_V_28_fu_940_p1,
        dout => r_V_28_fu_940_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((sine_reconstructor_16_1075_full_n = ap_const_logic_0) or (sine_reconstructor_16_974_full_n = ap_const_logic_0) or (sine_reconstructor_16_873_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    idx_V_reg_764_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln599_fu_888_p2 = ap_const_lv1_1))) then 
                idx_V_reg_764 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                idx_V_reg_764 <= add_ln691_reg_1408;
            end if; 
        end if;
    end process;

    k_2_reg_775_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln623_fu_1069_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_2_reg_775 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_2_reg_775 <= add_ln645_reg_1446;
            end if; 
        end if;
    end process;

    k_3_reg_786_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln645_fu_1106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                k_3_reg_786 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_3_reg_786 <= add_ln657_reg_1491;
            end if; 
        end if;
    end process;

    k_4_reg_797_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln657_fu_1169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                k_4_reg_797 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_4_reg_797 <= add_ln668_reg_1536;
            end if; 
        end if;
    end process;

    k_reg_753_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_1))) then 
                k_reg_753 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_reg_753 <= add_ln599_reg_1334;
            end if; 
        end if;
    end process;

    t_reg_742_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_742 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_0))) then 
                t_reg_742 <= add_ln581_fu_808_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln599_reg_1334 <= add_ln599_fu_836_p2;
                    zext_ln599_reg_1339(6 downto 0) <= zext_ln599_fu_842_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln645_reg_1446 <= add_ln645_fu_1096_p2;
                    zext_ln645_reg_1451(3 downto 0) <= zext_ln645_fu_1102_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln657_reg_1491 <= add_ln657_fu_1159_p2;
                    zext_ln657_reg_1496(2 downto 0) <= zext_ln657_fu_1165_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln668_reg_1536 <= add_ln668_fu_1222_p2;
                    zext_ln668_reg_1541(1 downto 0) <= zext_ln668_fu_1228_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln691_reg_1408 <= add_ln691_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_1))) then
                    col_i_load_cast_reg_1324(1 downto 0) <= col_i_load_cast_fu_830_p1(1 downto 0);
                    zext_ln599_1_reg_1329(1 downto 0) <= zext_ln599_1_fu_833_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                col_i_read_reg_1306 <= col_i_dout;
                col_j_read_reg_1311 <= col_j_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln599_fu_888_p2 = ap_const_lv1_0))) then
                empty_reg_1358 <= empty_fu_894_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                r_V_23_reg_1363 <= r_V_23_fu_908_p2;
                r_V_27_reg_1378 <= r_V_27_fu_926_p2;
                r_V_28_reg_1393 <= r_V_28_fu_940_p2;
                this_14_0_addr_1_reg_1368 <= idxprom5625_i_fu_898_p1(4 - 1 downto 0);
                this_15_0_addr_1_reg_1383 <= idxprom5625_i_fu_898_p1(4 - 1 downto 0);
                this_16_0_addr_1_reg_1398 <= idxprom5625_i_fu_898_p1(4 - 1 downto 0);
                tmp_21_reg_1388 <= r_V_27_fu_926_p2(38 downto 38);
                tmp_22_reg_1403 <= r_V_28_fu_940_p2(38 downto 38);
                tmp_reg_1373 <= r_V_23_fu_908_p2(38 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln623_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                this_17_addr_1_reg_1416 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
                this_18_addr_1_reg_1426 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
                this_19_addr_1_reg_1436 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    col_i_load_cast_reg_1324(7 downto 2) <= "000000";
    zext_ln599_1_reg_1329(7 downto 2) <= "000000";
    zext_ln599_reg_1339(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln645_reg_1451(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln657_reg_1496(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln668_reg_1541(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, sine_reconstructor_16_873_full_n, sine_reconstructor_16_974_full_n, sine_reconstructor_16_1075_full_n, col_i_empty_n, col_j_empty_n, ap_CS_fsm_state14, ap_CS_fsm_state2, icmp_ln581_fu_824_p2, ap_CS_fsm_state3, icmp_ln599_fu_888_p2, ap_CS_fsm_state6, icmp_ln623_fu_1069_p2, ap_CS_fsm_state8, icmp_ln645_fu_1106_p2, ap_CS_fsm_state10, icmp_ln657_fu_1169_p2, ap_CS_fsm_state12, icmp_ln668_fu_1232_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln599_fu_888_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln623_fu_1069_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln645_fu_1106_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln657_fu_1169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln668_fu_1232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if ((not(((sine_reconstructor_16_1075_full_n = ap_const_logic_0) or (sine_reconstructor_16_974_full_n = ap_const_logic_0) or (sine_reconstructor_16_873_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    A_i_0_address0 <= zext_ln599_reg_1339(7 - 1 downto 0);

    A_i_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_i_0_ce0 <= ap_const_logic_1;
        else 
            A_i_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_i_0_d0 <= matA_0_q1;

    A_i_0_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_i_0_we0 <= ap_const_logic_1;
        else 
            A_i_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_j_0_address0 <= zext_ln599_reg_1339(7 - 1 downto 0);

    A_j_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_j_0_ce0 <= ap_const_logic_1;
        else 
            A_j_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_j_0_d0 <= matA_0_q0;

    A_j_0_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_j_0_we0 <= ap_const_logic_1;
        else 
            A_j_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln415_3_fu_1013_p2 <= std_logic_vector(unsigned(trunc_ln708_3_fu_1000_p4) + unsigned(zext_ln415_3_fu_1010_p1));
    add_ln415_4_fu_1046_p2 <= std_logic_vector(unsigned(trunc_ln708_4_fu_1033_p4) + unsigned(zext_ln415_4_fu_1043_p1));
    add_ln415_fu_980_p2 <= std_logic_vector(unsigned(trunc_ln_fu_967_p4) + unsigned(zext_ln415_fu_977_p1));
    add_ln581_fu_808_p2 <= std_logic_vector(unsigned(t_reg_742) + unsigned(ap_const_lv5_1));
    add_ln599_fu_836_p2 <= std_logic_vector(unsigned(k_reg_753) + unsigned(ap_const_lv7_1));
    add_ln610_fu_868_p2 <= std_logic_vector(unsigned(sub_ln610_fu_862_p2) + unsigned(col_i_load_cast_reg_1324));
    add_ln611_fu_878_p2 <= std_logic_vector(unsigned(sub_ln610_fu_862_p2) + unsigned(zext_ln599_1_reg_1329));
    add_ln645_fu_1096_p2 <= std_logic_vector(unsigned(k_2_reg_775) + unsigned(ap_const_lv4_1));
    add_ln657_fu_1159_p2 <= std_logic_vector(unsigned(k_3_reg_786) + unsigned(ap_const_lv3_1));
    add_ln668_fu_1222_p2 <= std_logic_vector(unsigned(k_4_reg_797) + unsigned(ap_const_lv2_1));
    add_ln691_fu_1053_p2 <= std_logic_vector(unsigned(idx_V_reg_764) + unsigned(ap_const_lv5_1));
    add_ln703_1_fu_1082_p2 <= std_logic_vector(unsigned(this_15_0_q0) + unsigned(this_18_q0));
    add_ln703_2_fu_1089_p2 <= std_logic_vector(unsigned(this_16_0_q0) + unsigned(this_19_q0));
    add_ln703_fu_1075_p2 <= std_logic_vector(unsigned(this_14_0_q0) + unsigned(this_17_q0));

    alpha_sum_tmp0_V_address0_assign_proc : process(zext_ln645_reg_1451, ap_CS_fsm_state10, ap_CS_fsm_state9, zext_ln703_1_fu_1194_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            alpha_sum_tmp0_V_address0 <= zext_ln703_1_fu_1194_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            alpha_sum_tmp0_V_address0 <= zext_ln645_reg_1451(3 - 1 downto 0);
        else 
            alpha_sum_tmp0_V_address0 <= "XXX";
        end if; 
    end process;

    alpha_sum_tmp0_V_address1 <= zext_ln660_fu_1181_p1(3 - 1 downto 0);

    alpha_sum_tmp0_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            alpha_sum_tmp0_V_ce0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp0_V_ce1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            alpha_sum_tmp0_V_ce1 <= ap_const_logic_1;
        else 
            alpha_sum_tmp0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alpha_sum_tmp0_V_d0 <= std_logic_vector(unsigned(this_17_q0) + unsigned(this_17_q1));

    alpha_sum_tmp0_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            alpha_sum_tmp0_V_we0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp1_V_address0_assign_proc : process(zext_ln657_reg_1496, ap_CS_fsm_state12, ap_CS_fsm_state11, zext_ln703_2_fu_1257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            alpha_sum_tmp1_V_address0 <= zext_ln703_2_fu_1257_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            alpha_sum_tmp1_V_address0 <= zext_ln657_reg_1496(2 - 1 downto 0);
        else 
            alpha_sum_tmp1_V_address0 <= "XX";
        end if; 
    end process;

    alpha_sum_tmp1_V_address1 <= zext_ln671_fu_1244_p1(2 - 1 downto 0);

    alpha_sum_tmp1_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            alpha_sum_tmp1_V_ce0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp1_V_ce1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            alpha_sum_tmp1_V_ce1 <= ap_const_logic_1;
        else 
            alpha_sum_tmp1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alpha_sum_tmp1_V_d0 <= std_logic_vector(unsigned(alpha_sum_tmp0_V_q0) + unsigned(alpha_sum_tmp0_V_q1));

    alpha_sum_tmp1_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            alpha_sum_tmp1_V_we0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp2_V_address0_assign_proc : process(ap_CS_fsm_state12, zext_ln668_reg_1541, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            alpha_sum_tmp2_V_address0 <= zext_ln668_reg_1541(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            alpha_sum_tmp2_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            alpha_sum_tmp2_V_address0 <= "X";
        end if; 
    end process;

    alpha_sum_tmp2_V_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    alpha_sum_tmp2_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            alpha_sum_tmp2_V_ce0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp2_V_ce1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            alpha_sum_tmp2_V_ce1 <= ap_const_logic_1;
        else 
            alpha_sum_tmp2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alpha_sum_tmp2_V_d0 <= std_logic_vector(unsigned(alpha_sum_tmp1_V_q0) + unsigned(alpha_sum_tmp1_V_q1));

    alpha_sum_tmp2_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            alpha_sum_tmp2_V_we0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, col_i_empty_n, col_j_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(sine_reconstructor_16_873_full_n, sine_reconstructor_16_974_full_n, sine_reconstructor_16_1075_full_n)
    begin
                ap_block_state14 <= ((sine_reconstructor_16_1075_full_n = ap_const_logic_0) or (sine_reconstructor_16_974_full_n = ap_const_logic_0) or (sine_reconstructor_16_873_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, sine_reconstructor_16_873_full_n, sine_reconstructor_16_974_full_n, sine_reconstructor_16_1075_full_n, ap_CS_fsm_state14)
    begin
        if ((not(((sine_reconstructor_16_1075_full_n = ap_const_logic_0) or (sine_reconstructor_16_974_full_n = ap_const_logic_0) or (sine_reconstructor_16_873_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(sine_reconstructor_16_873_full_n, sine_reconstructor_16_974_full_n, sine_reconstructor_16_1075_full_n, ap_CS_fsm_state14)
    begin
        if ((not(((sine_reconstructor_16_1075_full_n = ap_const_logic_0) or (sine_reconstructor_16_974_full_n = ap_const_logic_0) or (sine_reconstructor_16_873_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp0_V_address0_assign_proc : process(zext_ln645_reg_1451, ap_CS_fsm_state10, ap_CS_fsm_state9, zext_ln703_1_fu_1194_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            beta_sum_tmp0_V_address0 <= zext_ln703_1_fu_1194_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            beta_sum_tmp0_V_address0 <= zext_ln645_reg_1451(3 - 1 downto 0);
        else 
            beta_sum_tmp0_V_address0 <= "XXX";
        end if; 
    end process;

    beta_sum_tmp0_V_address1 <= zext_ln660_fu_1181_p1(3 - 1 downto 0);

    beta_sum_tmp0_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            beta_sum_tmp0_V_ce0 <= ap_const_logic_1;
        else 
            beta_sum_tmp0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp0_V_ce1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            beta_sum_tmp0_V_ce1 <= ap_const_logic_1;
        else 
            beta_sum_tmp0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    beta_sum_tmp0_V_d0 <= std_logic_vector(unsigned(this_18_q0) + unsigned(this_18_q1));

    beta_sum_tmp0_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            beta_sum_tmp0_V_we0 <= ap_const_logic_1;
        else 
            beta_sum_tmp0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp1_V_address0_assign_proc : process(zext_ln657_reg_1496, ap_CS_fsm_state12, ap_CS_fsm_state11, zext_ln703_2_fu_1257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            beta_sum_tmp1_V_address0 <= zext_ln703_2_fu_1257_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            beta_sum_tmp1_V_address0 <= zext_ln657_reg_1496(2 - 1 downto 0);
        else 
            beta_sum_tmp1_V_address0 <= "XX";
        end if; 
    end process;

    beta_sum_tmp1_V_address1 <= zext_ln671_fu_1244_p1(2 - 1 downto 0);

    beta_sum_tmp1_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            beta_sum_tmp1_V_ce0 <= ap_const_logic_1;
        else 
            beta_sum_tmp1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp1_V_ce1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            beta_sum_tmp1_V_ce1 <= ap_const_logic_1;
        else 
            beta_sum_tmp1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    beta_sum_tmp1_V_d0 <= std_logic_vector(unsigned(beta_sum_tmp0_V_q0) + unsigned(beta_sum_tmp0_V_q1));

    beta_sum_tmp1_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            beta_sum_tmp1_V_we0 <= ap_const_logic_1;
        else 
            beta_sum_tmp1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp2_V_address0_assign_proc : process(ap_CS_fsm_state12, zext_ln668_reg_1541, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            beta_sum_tmp2_V_address0 <= zext_ln668_reg_1541(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            beta_sum_tmp2_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            beta_sum_tmp2_V_address0 <= "X";
        end if; 
    end process;

    beta_sum_tmp2_V_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    beta_sum_tmp2_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            beta_sum_tmp2_V_ce0 <= ap_const_logic_1;
        else 
            beta_sum_tmp2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp2_V_ce1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            beta_sum_tmp2_V_ce1 <= ap_const_logic_1;
        else 
            beta_sum_tmp2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    beta_sum_tmp2_V_d0 <= std_logic_vector(unsigned(beta_sum_tmp1_V_q0) + unsigned(beta_sum_tmp1_V_q1));

    beta_sum_tmp2_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            beta_sum_tmp2_V_we0 <= ap_const_logic_1;
        else 
            beta_sum_tmp2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    col_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_blk_n <= col_i_empty_n;
        else 
            col_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_i_load_cast_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_read_reg_1306),8));

    col_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_read <= ap_const_logic_1;
        else 
            col_i_read <= ap_const_logic_0;
        end if; 
    end process;


    col_j_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_j_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_blk_n <= col_j_empty_n;
        else 
            col_j_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_j_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_read <= ap_const_logic_1;
        else 
            col_j_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_894_p1 <= k_reg_753(4 - 1 downto 0);

    gamma_sum_tmp0_V_address0_assign_proc : process(zext_ln645_reg_1451, ap_CS_fsm_state10, ap_CS_fsm_state9, zext_ln703_1_fu_1194_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gamma_sum_tmp0_V_address0 <= zext_ln703_1_fu_1194_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gamma_sum_tmp0_V_address0 <= zext_ln645_reg_1451(3 - 1 downto 0);
        else 
            gamma_sum_tmp0_V_address0 <= "XXX";
        end if; 
    end process;

    gamma_sum_tmp0_V_address1 <= zext_ln660_fu_1181_p1(3 - 1 downto 0);

    gamma_sum_tmp0_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gamma_sum_tmp0_V_ce0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp0_V_ce1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gamma_sum_tmp0_V_ce1 <= ap_const_logic_1;
        else 
            gamma_sum_tmp0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    gamma_sum_tmp0_V_d0 <= std_logic_vector(unsigned(this_19_q0) + unsigned(this_19_q1));

    gamma_sum_tmp0_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gamma_sum_tmp0_V_we0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp1_V_address0_assign_proc : process(zext_ln657_reg_1496, ap_CS_fsm_state12, ap_CS_fsm_state11, zext_ln703_2_fu_1257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gamma_sum_tmp1_V_address0 <= zext_ln703_2_fu_1257_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            gamma_sum_tmp1_V_address0 <= zext_ln657_reg_1496(2 - 1 downto 0);
        else 
            gamma_sum_tmp1_V_address0 <= "XX";
        end if; 
    end process;

    gamma_sum_tmp1_V_address1 <= zext_ln671_fu_1244_p1(2 - 1 downto 0);

    gamma_sum_tmp1_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gamma_sum_tmp1_V_ce0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp1_V_ce1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gamma_sum_tmp1_V_ce1 <= ap_const_logic_1;
        else 
            gamma_sum_tmp1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    gamma_sum_tmp1_V_d0 <= std_logic_vector(unsigned(gamma_sum_tmp0_V_q0) + unsigned(gamma_sum_tmp0_V_q1));

    gamma_sum_tmp1_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            gamma_sum_tmp1_V_we0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp2_V_address0_assign_proc : process(ap_CS_fsm_state12, zext_ln668_reg_1541, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            gamma_sum_tmp2_V_address0 <= zext_ln668_reg_1541(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gamma_sum_tmp2_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            gamma_sum_tmp2_V_address0 <= "X";
        end if; 
    end process;

    gamma_sum_tmp2_V_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    gamma_sum_tmp2_V_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gamma_sum_tmp2_V_ce0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp2_V_ce1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gamma_sum_tmp2_V_ce1 <= ap_const_logic_1;
        else 
            gamma_sum_tmp2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    gamma_sum_tmp2_V_d0 <= std_logic_vector(unsigned(gamma_sum_tmp1_V_q0) + unsigned(gamma_sum_tmp1_V_q1));

    gamma_sum_tmp2_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            gamma_sum_tmp2_V_we0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln581_fu_824_p2 <= "1" when (t_reg_742 = ap_const_lv5_10) else "0";
    icmp_ln599_fu_888_p2 <= "1" when (k_reg_753 = ap_const_lv7_50) else "0";
    icmp_ln623_fu_1069_p2 <= "1" when (idx_V_reg_764 = ap_const_lv5_10) else "0";
    icmp_ln645_fu_1106_p2 <= "1" when (k_2_reg_775 = ap_const_lv4_8) else "0";
    icmp_ln657_fu_1169_p2 <= "1" when (k_3_reg_786 = ap_const_lv3_4) else "0";
    icmp_ln668_fu_1232_p2 <= "1" when (k_4_reg_797 = ap_const_lv2_2) else "0";
    idxprom5625_i_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_1358),64));
    lhs_1_fu_954_p3 <= (this_14_0_q0 & ap_const_lv39_0);
    lhs_3_fu_987_p3 <= (this_15_0_q0 & ap_const_lv39_0);
    lhs_5_fu_1020_p3 <= (this_16_0_q0 & ap_const_lv39_0);
    matA_0_address0 <= zext_ln611_fu_883_p1(8 - 1 downto 0);
    matA_0_address1 <= zext_ln610_1_fu_873_p1(8 - 1 downto 0);

    matA_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matA_0_ce0 <= ap_const_logic_1;
        else 
            matA_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_0_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matA_0_ce1 <= ap_const_logic_1;
        else 
            matA_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln648_fu_1125_p2 <= (shl_ln648_fu_1112_p2 or ap_const_lv4_1);
    or_ln660_fu_1188_p2 <= (shl_ln660_fu_1175_p2 or ap_const_lv3_1);
    or_ln671_fu_1251_p2 <= (shl_ln671_fu_1238_p2 or ap_const_lv2_1);
    r_V_23_fu_908_p0 <= sext_ln1115_fu_904_p1(60 - 1 downto 0);
    r_V_23_fu_908_p1 <= sext_ln1115_fu_904_p1(60 - 1 downto 0);
    r_V_27_fu_926_p0 <= sext_ln1115_1_fu_922_p1(60 - 1 downto 0);
    r_V_27_fu_926_p1 <= sext_ln1115_1_fu_922_p1(60 - 1 downto 0);
    r_V_28_fu_940_p0 <= sext_ln1115_1_fu_922_p1(60 - 1 downto 0);
    r_V_28_fu_940_p1 <= sext_ln1115_fu_904_p1(60 - 1 downto 0);
    ret_V_3_fu_995_p2 <= std_logic_vector(unsigned(lhs_3_fu_987_p3) + unsigned(r_V_27_reg_1378));
    ret_V_4_fu_1028_p2 <= std_logic_vector(unsigned(lhs_5_fu_1020_p3) + unsigned(r_V_28_reg_1393));
    ret_V_fu_962_p2 <= std_logic_vector(unsigned(lhs_1_fu_954_p3) + unsigned(r_V_23_reg_1363));
    sext_ln1115_1_fu_922_p0 <= matA_0_q0;
        sext_ln1115_1_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1115_1_fu_922_p0),99));

    sext_ln1115_fu_904_p0 <= matA_0_q1;
        sext_ln1115_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1115_fu_904_p0),99));

    shl_ln648_fu_1112_p2 <= std_logic_vector(shift_left(unsigned(k_2_reg_775),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln660_fu_1175_p2 <= std_logic_vector(shift_left(unsigned(k_3_reg_786),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln671_fu_1238_p2 <= std_logic_vector(shift_left(unsigned(k_4_reg_797),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));

    sine_reconstructor_16_1075_blk_n_assign_proc : process(sine_reconstructor_16_1075_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sine_reconstructor_16_1075_blk_n <= sine_reconstructor_16_1075_full_n;
        else 
            sine_reconstructor_16_1075_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sine_reconstructor_16_1075_din <= std_logic_vector(unsigned(gamma_sum_tmp2_V_q0) + unsigned(gamma_sum_tmp2_V_q1));

    sine_reconstructor_16_1075_write_assign_proc : process(sine_reconstructor_16_873_full_n, sine_reconstructor_16_974_full_n, sine_reconstructor_16_1075_full_n, ap_CS_fsm_state14)
    begin
        if ((not(((sine_reconstructor_16_1075_full_n = ap_const_logic_0) or (sine_reconstructor_16_974_full_n = ap_const_logic_0) or (sine_reconstructor_16_873_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            sine_reconstructor_16_1075_write <= ap_const_logic_1;
        else 
            sine_reconstructor_16_1075_write <= ap_const_logic_0;
        end if; 
    end process;


    sine_reconstructor_16_873_blk_n_assign_proc : process(sine_reconstructor_16_873_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sine_reconstructor_16_873_blk_n <= sine_reconstructor_16_873_full_n;
        else 
            sine_reconstructor_16_873_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sine_reconstructor_16_873_din <= std_logic_vector(unsigned(alpha_sum_tmp2_V_q0) + unsigned(alpha_sum_tmp2_V_q1));

    sine_reconstructor_16_873_write_assign_proc : process(sine_reconstructor_16_873_full_n, sine_reconstructor_16_974_full_n, sine_reconstructor_16_1075_full_n, ap_CS_fsm_state14)
    begin
        if ((not(((sine_reconstructor_16_1075_full_n = ap_const_logic_0) or (sine_reconstructor_16_974_full_n = ap_const_logic_0) or (sine_reconstructor_16_873_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            sine_reconstructor_16_873_write <= ap_const_logic_1;
        else 
            sine_reconstructor_16_873_write <= ap_const_logic_0;
        end if; 
    end process;


    sine_reconstructor_16_974_blk_n_assign_proc : process(sine_reconstructor_16_974_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sine_reconstructor_16_974_blk_n <= sine_reconstructor_16_974_full_n;
        else 
            sine_reconstructor_16_974_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sine_reconstructor_16_974_din <= std_logic_vector(unsigned(beta_sum_tmp2_V_q0) + unsigned(beta_sum_tmp2_V_q1));

    sine_reconstructor_16_974_write_assign_proc : process(sine_reconstructor_16_873_full_n, sine_reconstructor_16_974_full_n, sine_reconstructor_16_1075_full_n, ap_CS_fsm_state14)
    begin
        if ((not(((sine_reconstructor_16_1075_full_n = ap_const_logic_0) or (sine_reconstructor_16_974_full_n = ap_const_logic_0) or (sine_reconstructor_16_873_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            sine_reconstructor_16_974_write <= ap_const_logic_1;
        else 
            sine_reconstructor_16_974_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln610_fu_862_p2 <= std_logic_vector(unsigned(tmp_cast_fu_854_p3) - unsigned(zext_ln610_fu_846_p1));

    this_14_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, this_14_0_addr_1_reg_1368, ap_CS_fsm_state6, ap_CS_fsm_state5, zext_ln581_fu_814_p1, idxprom5625_i_fu_898_p1, zext_ln623_fu_1059_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_14_0_address0 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_14_0_address0 <= this_14_0_addr_1_reg_1368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            this_14_0_address0 <= idxprom5625_i_fu_898_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_14_0_address0 <= zext_ln581_fu_814_p1(4 - 1 downto 0);
        else 
            this_14_0_address0 <= "XXXX";
        end if; 
    end process;


    this_14_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            this_14_0_ce0 <= ap_const_logic_1;
        else 
            this_14_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_14_0_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, add_ln415_fu_980_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_14_0_d0 <= add_ln415_fu_980_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_14_0_d0 <= ap_const_lv60_0;
        else 
            this_14_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    this_14_0_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln581_fu_824_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_0)))) then 
            this_14_0_we0 <= ap_const_logic_1;
        else 
            this_14_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    this_15_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, this_15_0_addr_1_reg_1383, ap_CS_fsm_state6, ap_CS_fsm_state5, zext_ln581_fu_814_p1, idxprom5625_i_fu_898_p1, zext_ln623_fu_1059_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_15_0_address0 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_15_0_address0 <= this_15_0_addr_1_reg_1383;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            this_15_0_address0 <= idxprom5625_i_fu_898_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_15_0_address0 <= zext_ln581_fu_814_p1(4 - 1 downto 0);
        else 
            this_15_0_address0 <= "XXXX";
        end if; 
    end process;


    this_15_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            this_15_0_ce0 <= ap_const_logic_1;
        else 
            this_15_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_15_0_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, add_ln415_3_fu_1013_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_15_0_d0 <= add_ln415_3_fu_1013_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_15_0_d0 <= ap_const_lv60_0;
        else 
            this_15_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    this_15_0_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln581_fu_824_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_0)))) then 
            this_15_0_we0 <= ap_const_logic_1;
        else 
            this_15_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    this_16_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, this_16_0_addr_1_reg_1398, ap_CS_fsm_state6, ap_CS_fsm_state5, zext_ln581_fu_814_p1, idxprom5625_i_fu_898_p1, zext_ln623_fu_1059_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_16_0_address0 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_16_0_address0 <= this_16_0_addr_1_reg_1398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            this_16_0_address0 <= idxprom5625_i_fu_898_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_16_0_address0 <= zext_ln581_fu_814_p1(4 - 1 downto 0);
        else 
            this_16_0_address0 <= "XXXX";
        end if; 
    end process;


    this_16_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            this_16_0_ce0 <= ap_const_logic_1;
        else 
            this_16_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_16_0_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, add_ln415_4_fu_1046_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            this_16_0_d0 <= add_ln415_4_fu_1046_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_16_0_d0 <= ap_const_lv60_0;
        else 
            this_16_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    this_16_0_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln581_fu_824_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_0)))) then 
            this_16_0_we0 <= ap_const_logic_1;
        else 
            this_16_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    this_17_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, this_17_addr_1_reg_1416, ap_CS_fsm_state8, ap_CS_fsm_state7, zext_ln581_fu_814_p1, zext_ln623_fu_1059_p1, zext_ln703_fu_1131_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            this_17_address0 <= zext_ln703_fu_1131_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            this_17_address0 <= this_17_addr_1_reg_1416;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_17_address0 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_17_address0 <= zext_ln581_fu_814_p1(4 - 1 downto 0);
        else 
            this_17_address0 <= "XXXX";
        end if; 
    end process;

    this_17_address1 <= zext_ln648_fu_1118_p1(4 - 1 downto 0);

    this_17_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            this_17_ce0 <= ap_const_logic_1;
        else 
            this_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_17_ce1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            this_17_ce1 <= ap_const_logic_1;
        else 
            this_17_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    this_17_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, add_ln703_fu_1075_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            this_17_d0 <= add_ln703_fu_1075_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_17_d0 <= ap_const_lv60_0;
        else 
            this_17_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    this_17_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln581_fu_824_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_0)))) then 
            this_17_we0 <= ap_const_logic_1;
        else 
            this_17_we0 <= ap_const_logic_0;
        end if; 
    end process;


    this_18_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, this_18_addr_1_reg_1426, ap_CS_fsm_state8, ap_CS_fsm_state7, zext_ln581_fu_814_p1, zext_ln623_fu_1059_p1, zext_ln703_fu_1131_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            this_18_address0 <= zext_ln703_fu_1131_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            this_18_address0 <= this_18_addr_1_reg_1426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_18_address0 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_18_address0 <= zext_ln581_fu_814_p1(4 - 1 downto 0);
        else 
            this_18_address0 <= "XXXX";
        end if; 
    end process;

    this_18_address1 <= zext_ln648_fu_1118_p1(4 - 1 downto 0);

    this_18_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            this_18_ce0 <= ap_const_logic_1;
        else 
            this_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_18_ce1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            this_18_ce1 <= ap_const_logic_1;
        else 
            this_18_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    this_18_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, add_ln703_1_fu_1082_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            this_18_d0 <= add_ln703_1_fu_1082_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_18_d0 <= ap_const_lv60_0;
        else 
            this_18_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    this_18_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln581_fu_824_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_0)))) then 
            this_18_we0 <= ap_const_logic_1;
        else 
            this_18_we0 <= ap_const_logic_0;
        end if; 
    end process;


    this_19_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, this_19_addr_1_reg_1436, ap_CS_fsm_state8, ap_CS_fsm_state7, zext_ln581_fu_814_p1, zext_ln623_fu_1059_p1, zext_ln703_fu_1131_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            this_19_address0 <= zext_ln703_fu_1131_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            this_19_address0 <= this_19_addr_1_reg_1436;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            this_19_address0 <= zext_ln623_fu_1059_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_19_address0 <= zext_ln581_fu_814_p1(4 - 1 downto 0);
        else 
            this_19_address0 <= "XXXX";
        end if; 
    end process;

    this_19_address1 <= zext_ln648_fu_1118_p1(4 - 1 downto 0);

    this_19_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            this_19_ce0 <= ap_const_logic_1;
        else 
            this_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_19_ce1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            this_19_ce1 <= ap_const_logic_1;
        else 
            this_19_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    this_19_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, add_ln703_2_fu_1089_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            this_19_d0 <= add_ln703_2_fu_1089_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            this_19_d0 <= ap_const_lv60_0;
        else 
            this_19_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    this_19_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln581_fu_824_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln581_fu_824_p2 = ap_const_lv1_0)))) then 
            this_19_we0 <= ap_const_logic_1;
        else 
            this_19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_cast_fu_854_p3 <= (trunc_ln610_fu_850_p1 & ap_const_lv2_0);
    trunc_ln610_fu_850_p1 <= k_reg_753(6 - 1 downto 0);
    trunc_ln708_3_fu_1000_p4 <= ret_V_3_fu_995_p2(98 downto 39);
    trunc_ln708_4_fu_1033_p4 <= ret_V_4_fu_1028_p2(98 downto 39);
    trunc_ln_fu_967_p4 <= ret_V_fu_962_p2(98 downto 39);
    zext_ln415_3_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_1388),60));
    zext_ln415_4_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_1403),60));
    zext_ln415_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1373),60));
    zext_ln581_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_742),64));
    zext_ln599_1_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_j_read_reg_1311),8));
    zext_ln599_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_753),64));
    zext_ln610_1_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln610_fu_868_p2),64));
    zext_ln610_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_753),8));
    zext_ln611_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln611_fu_878_p2),64));
    zext_ln623_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_V_reg_764),64));
    zext_ln645_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_775),64));
    zext_ln648_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln648_fu_1112_p2),64));
    zext_ln657_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_3_reg_786),64));
    zext_ln660_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln660_fu_1175_p2),64));
    zext_ln668_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_4_reg_797),64));
    zext_ln671_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln671_fu_1238_p2),64));
    zext_ln703_1_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln660_fu_1188_p2),64));
    zext_ln703_2_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln671_fu_1251_p2),64));
    zext_ln703_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln648_fu_1125_p2),64));
end behav;
