-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K1_V_rom is 
    generic(
             DWIDTH     : integer := 21; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K1_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000000000000000000010", 1 => "111111110101101010110", 
    2 => "111111101011010101000", 3 => "111111100000111111100", 
    4 => "111111010110101010000", 5 => "111111001100010100111", 
    6 => "111111000001111111011", 7 => "111110110111101010011", 
    8 => "111110101101010101100", 9 => "111110100011000000011", 
    10 => "111110011000101011111", 11 => "111110001110010111010", 
    12 => "111110000100000010110", 13 => "111101111001101110010", 
    14 => "111101101111011010011", 15 => "111101100101000110011", 
    16 => "111101011010110010110", 17 => "111101010000011111011", 
    18 => "111101000110001100011", 19 => "111100111011111001100", 
    20 => "111100110001100110110", 21 => "111100100111010100011", 
    22 => "111100011101000010001", 23 => "111100010010110000100", 
    24 => "111100001000011111010", 25 => "111011111110001110000", 
    26 => "111011110011111101011", 27 => "111011101001101101011", 
    28 => "111011011111011101101", 29 => "111011010101001110000", 
    30 => "111011001010111111011", 31 => "111011000000110000110", 
    32 => "111010110110100010110", 33 => "111010101100010100111", 
    34 => "111010100010000111110", 35 => "111010010111111011010", 
    36 => "111010001101101111010", 37 => "111010000011100011100", 
    38 => "111001111001011000011", 39 => "111001101111001101111", 
    40 => "111001100101000100000", 41 => "111001011010111010111", 
    42 => "111001010000110010001", 43 => "111001000110101010010", 
    44 => "111000111100100011000", 45 => "111000110010011100001", 
    46 => "111000101000010110000", 47 => "111000011110010000111", 
    48 => "111000010100001100001", 49 => "111000001010001000011", 
    50 => "111000000000000100111", 51 => "110111110110000010010", 
    52 => "110111101100000000101", 53 => "110111100001111111101", 
    54 => "110111010111111111001", 55 => "110111001101111111110", 
    56 => "110111000100000001100", 57 => "110110111010000011110", 
    58 => "110110110000000110010", 59 => "110110100110001010010", 
    60 => "110110011100001111011", 61 => "110110010010010100101", 
    62 => "110110001000011011011", 63 => "110101111110100010111", 
    64 => "110101110100101011001", 65 => "110101101010110100110", 
    66 => "110101100000111111000", 67 => "110101010111001010010", 
    68 => "110101001101010110010", 69 => "110101000011100011100", 
    70 => "110100111001110001111", 71 => "110100110000000001000", 
    72 => "110100100110010001101", 73 => "110100011100100010011", 
    74 => "110100010010110101000", 75 => "110100001001001000111", 
    76 => "110011111111011101100", 77 => "110011110101110010100", 
    78 => "110011101100001001011", 79 => "110011100010100001010", 
    80 => "110011011000111010100", 81 => "110011001111010101000", 
    82 => "110011000101110000100", 83 => "110010111100001100101", 
    84 => "110010110010101010100", 85 => "110010101001001001111", 
    86 => "110010011111101010010", 87 => "110010010110001011100", 
    88 => "110010001100101110010", 89 => "110010000011010010000", 
    90 => "110001111001110111101", 91 => "110001110000011110001", 
    92 => "110001100111000110011", 93 => "110001011101101111011", 
    94 => "110001010100011001111", 95 => "110001001011000101110", 
    96 => "110001000001110011001", 97 => "110000111000100001111", 
    98 => "110000101111010001111", 99 => "110000100110000011101", 
    100 => "110000011100110110010", 101 => "110000010011101010101", 
    102 => "110000001010100000001", 103 => "110000000001010111100", 
    104 => "101111111000010000010", 105 => "101111101111001010100", 
    106 => "101111100110000101110", 107 => "101111011101000011000", 
    108 => "101111010100000001100", 109 => "101111001011000001111", 
    110 => "101111000010000011100", 111 => "101110111001000111001", 
    112 => "101110110000001011111", 113 => "101110100111010010100", 
    114 => "101110011110011010011", 115 => "101110010101100100001", 
    116 => "101110001100101111011", 117 => "101110000011111011110", 
    118 => "101101111011001010011", 119 => "101101110010011010101", 
    120 => "101101101001101100110", 121 => "101101100001000000001", 
    122 => "101101011000010101100", 123 => "101101001111101100011", 
    124 => "101101000111000100111", 125 => "101100111110011111101", 
    126 => "101100110101111011100", 127 => "101100101101011001011" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K1_V is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K1_V is
    component LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K1_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K1_V_rom_U :  component LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K1_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


