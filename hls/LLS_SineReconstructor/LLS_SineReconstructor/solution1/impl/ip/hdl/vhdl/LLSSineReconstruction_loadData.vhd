-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_loadData is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_times_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_times_ce0 : OUT STD_LOGIC;
    this_times_we0 : OUT STD_LOGIC;
    this_times_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    sliding_window_front_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_back_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_7_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_6_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_5_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_4_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_3_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_2_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_1_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_0_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of LLSSineReconstruction_loadData is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv7_6C : STD_LOGIC_VECTOR (6 downto 0) := "1101100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv43_0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000000";
    constant ap_const_lv80_15799 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010101011110011001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_reg_5609 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_5609_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state14_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln170_fu_5750_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln170_reg_7629 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln170_fu_5754_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln170_reg_7634 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln22_fu_5762_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln22_reg_7639 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_fu_5771_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_7644 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal max_vals_V_11_load_reg_7649 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_1_load_reg_7654 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_2_load_reg_7659 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_3_load_reg_7664 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_4_load_reg_7669 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_5_load_reg_7674 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_6_load_reg_7679 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_7_load_reg_7684 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_8_load_reg_7689 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_9_load_reg_7694 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_10_load_reg_7699 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln170_fu_5781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_fu_5842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_7708 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_diff_V_fu_5900_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_5906_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_8821 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln176_fu_5914_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln176_reg_8826 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln176_fu_5920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_8831 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln179_fu_5938_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln179_reg_8858 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln176_fu_5932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal cmp16_fu_5947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp16_reg_8984 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal this_times_addr_reg_8992 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp25_fu_5952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp25_reg_8997 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln184_fu_5958_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln184_reg_9002 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln184_fu_5964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_9007 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln190_cast_fu_5970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln190_cast_reg_9011 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln211_fu_5975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln211_reg_9026 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_42_fu_5993_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal r_V_42_reg_9030 : STD_LOGIC_VECTOR (79 downto 0);
    signal add_ln241_fu_6306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln241_fu_6300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln245_fu_6366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_diff_V_3_fu_6374_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal sample_period_samples_0_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mag_samples_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_sample_V_ce0 : STD_LOGIC;
    signal mag_samples_sample_V_we0 : STD_LOGIC;
    signal mag_samples_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_sample_V_ce1 : STD_LOGIC;
    signal mag_samples_sample_V_we1 : STD_LOGIC;
    signal mag_samples_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_timestamp_V_ce0 : STD_LOGIC;
    signal mag_samples_timestamp_V_we0 : STD_LOGIC;
    signal mag_samples_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal mag_samples_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal mag_samples_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_timestamp_V_ce1 : STD_LOGIC;
    signal mag_samples_timestamp_V_we1 : STD_LOGIC;
    signal mag_samples_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_reg_5586 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_5598 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_phi_mux_k_phi_fu_5613_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal this_phase_ref_idx_0_reg_5621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_2_phi_fu_5637_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_5633 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_diff_V_1_reg_5644 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_phi_ln215_phi_fu_5656_p22 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln181_fu_5943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_vals_V_11_fu_506 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_0_fu_6097_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_1_fu_510 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_2_fu_514 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_3_fu_518 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_4_fu_522 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_5_fu_526 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_6_fu_530 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_7_fu_534 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_8_fu_538 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_9_fu_542 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_10_fu_546 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_time_ch0_V_fu_550 : STD_LOGIC_VECTOR (63 downto 0);
    signal mag_time_ch0_V_2_fu_6280_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_vals_V_11_11_fu_554 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_fu_558 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_0_fu_6112_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_vals_V_11_12_fu_562 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_1_fu_566 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_2_fu_570 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_3_fu_574 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_4_fu_578 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_5_fu_582 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_6_fu_586 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_7_fu_590 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_8_fu_594 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_9_fu_598 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_10_fu_602 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_11_fu_606 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_vals_V_11_12_fu_610 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln170_fu_5750_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln170_fu_5754_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln170_fu_5777_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln22_fu_5787_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln22_fu_5793_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_1_fu_5797_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_5808_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_5816_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_fu_5824_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_5802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_idx_fu_5830_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_idx_2_fu_5835_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln176_1_fu_5928_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_5981_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_42_fu_5993_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_42_fu_5993_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal max_val_V_fu_6005_p14 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_val_V_fu_6035_p14 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln878_fu_6071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_fu_6065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln886_fu_6092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_6085_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_val_V_1_fu_6077_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp28_fu_6105_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_fu_6253_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal zext_ln1192_fu_6261_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_fu_6264_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal mag_time_ch0_V_1_fu_6270_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln215_1_fu_6312_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_diff_V_4_fu_6350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln886_fu_6356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln247_fu_6362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_42_fu_5993_p00 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_condition_3204 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_mul_63ns_18ns_80_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component LLSSineReconstruction_mux_124_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_mux_164_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (11 downto 0);
        din13 : IN STD_LOGIC_VECTOR (11 downto 0);
        din14 : IN STD_LOGIC_VECTOR (11 downto 0);
        din15 : IN STD_LOGIC_VECTOR (11 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component LLSSineReconstruction_loadData_mag_samples_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_loadData_mag_samples_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    sample_period_samples_0_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_0_sample_V_address0,
        ce0 => sample_period_samples_0_sample_V_ce0,
        we0 => sample_period_samples_0_sample_V_we0,
        d0 => sample_period_samples_0_sample_V_d0,
        q0 => sample_period_samples_0_sample_V_q0,
        address1 => sample_period_samples_0_sample_V_address1,
        ce1 => sample_period_samples_0_sample_V_ce1,
        we1 => sample_period_samples_0_sample_V_we1,
        d1 => sample_period_samples_0_sample_V_d1);

    sample_period_samples_1_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_1_sample_V_address0,
        ce0 => sample_period_samples_1_sample_V_ce0,
        we0 => sample_period_samples_1_sample_V_we0,
        d0 => sample_period_samples_1_sample_V_d0,
        q0 => sample_period_samples_1_sample_V_q0,
        address1 => sample_period_samples_1_sample_V_address1,
        ce1 => sample_period_samples_1_sample_V_ce1,
        we1 => sample_period_samples_1_sample_V_we1,
        d1 => sample_period_samples_1_sample_V_d1);

    sample_period_samples_2_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_2_sample_V_address0,
        ce0 => sample_period_samples_2_sample_V_ce0,
        we0 => sample_period_samples_2_sample_V_we0,
        d0 => sample_period_samples_2_sample_V_d0,
        q0 => sample_period_samples_2_sample_V_q0,
        address1 => sample_period_samples_2_sample_V_address1,
        ce1 => sample_period_samples_2_sample_V_ce1,
        we1 => sample_period_samples_2_sample_V_we1,
        d1 => sample_period_samples_2_sample_V_d1);

    sample_period_samples_3_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_3_sample_V_address0,
        ce0 => sample_period_samples_3_sample_V_ce0,
        we0 => sample_period_samples_3_sample_V_we0,
        d0 => sample_period_samples_3_sample_V_d0,
        q0 => sample_period_samples_3_sample_V_q0,
        address1 => sample_period_samples_3_sample_V_address1,
        ce1 => sample_period_samples_3_sample_V_ce1,
        we1 => sample_period_samples_3_sample_V_we1,
        d1 => sample_period_samples_3_sample_V_d1);

    sample_period_samples_4_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_4_sample_V_address0,
        ce0 => sample_period_samples_4_sample_V_ce0,
        we0 => sample_period_samples_4_sample_V_we0,
        d0 => sample_period_samples_4_sample_V_d0,
        q0 => sample_period_samples_4_sample_V_q0,
        address1 => sample_period_samples_4_sample_V_address1,
        ce1 => sample_period_samples_4_sample_V_ce1,
        we1 => sample_period_samples_4_sample_V_we1,
        d1 => sample_period_samples_4_sample_V_d1);

    sample_period_samples_5_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_5_sample_V_address0,
        ce0 => sample_period_samples_5_sample_V_ce0,
        we0 => sample_period_samples_5_sample_V_we0,
        d0 => sample_period_samples_5_sample_V_d0,
        q0 => sample_period_samples_5_sample_V_q0,
        address1 => sample_period_samples_5_sample_V_address1,
        ce1 => sample_period_samples_5_sample_V_ce1,
        we1 => sample_period_samples_5_sample_V_we1,
        d1 => sample_period_samples_5_sample_V_d1);

    sample_period_samples_6_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_6_sample_V_address0,
        ce0 => sample_period_samples_6_sample_V_ce0,
        we0 => sample_period_samples_6_sample_V_we0,
        d0 => sample_period_samples_6_sample_V_d0,
        q0 => sample_period_samples_6_sample_V_q0,
        address1 => sample_period_samples_6_sample_V_address1,
        ce1 => sample_period_samples_6_sample_V_ce1,
        we1 => sample_period_samples_6_sample_V_we1,
        d1 => sample_period_samples_6_sample_V_d1);

    sample_period_samples_7_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_7_sample_V_address0,
        ce0 => sample_period_samples_7_sample_V_ce0,
        we0 => sample_period_samples_7_sample_V_we0,
        d0 => sample_period_samples_7_sample_V_d0,
        q0 => sample_period_samples_7_sample_V_q0,
        address1 => sample_period_samples_7_sample_V_address1,
        ce1 => sample_period_samples_7_sample_V_ce1,
        we1 => sample_period_samples_7_sample_V_we1,
        d1 => sample_period_samples_7_sample_V_d1);

    sample_period_samples_8_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_8_sample_V_address0,
        ce0 => sample_period_samples_8_sample_V_ce0,
        we0 => sample_period_samples_8_sample_V_we0,
        d0 => sample_period_samples_8_sample_V_d0,
        q0 => sample_period_samples_8_sample_V_q0,
        address1 => sample_period_samples_8_sample_V_address1,
        ce1 => sample_period_samples_8_sample_V_ce1,
        we1 => sample_period_samples_8_sample_V_we1,
        d1 => sample_period_samples_8_sample_V_d1);

    sample_period_samples_9_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_9_sample_V_address0,
        ce0 => sample_period_samples_9_sample_V_ce0,
        we0 => sample_period_samples_9_sample_V_we0,
        d0 => sample_period_samples_9_sample_V_d0,
        q0 => sample_period_samples_9_sample_V_q0,
        address1 => sample_period_samples_9_sample_V_address1,
        ce1 => sample_period_samples_9_sample_V_ce1,
        we1 => sample_period_samples_9_sample_V_we1,
        d1 => sample_period_samples_9_sample_V_d1);

    sample_period_samples_10_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_10_sample_V_address0,
        ce0 => sample_period_samples_10_sample_V_ce0,
        we0 => sample_period_samples_10_sample_V_we0,
        d0 => sample_period_samples_10_sample_V_d0,
        q0 => sample_period_samples_10_sample_V_q0,
        address1 => sample_period_samples_10_sample_V_address1,
        ce1 => sample_period_samples_10_sample_V_ce1,
        we1 => sample_period_samples_10_sample_V_we1,
        d1 => sample_period_samples_10_sample_V_d1);

    sample_period_samples_11_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_11_sample_V_address0,
        ce0 => sample_period_samples_11_sample_V_ce0,
        we0 => sample_period_samples_11_sample_V_we0,
        d0 => sample_period_samples_11_sample_V_d0,
        q0 => sample_period_samples_11_sample_V_q0,
        address1 => sample_period_samples_11_sample_V_address1,
        ce1 => sample_period_samples_11_sample_V_ce1,
        we1 => sample_period_samples_11_sample_V_we1,
        d1 => sample_period_samples_11_sample_V_d1);

    sample_period_samples_0_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_0_timestamp_V_address0,
        ce0 => sample_period_samples_0_timestamp_V_ce0,
        we0 => sample_period_samples_0_timestamp_V_we0,
        d0 => sample_period_samples_0_timestamp_V_d0,
        q0 => sample_period_samples_0_timestamp_V_q0,
        address1 => sample_period_samples_0_timestamp_V_address1,
        ce1 => sample_period_samples_0_timestamp_V_ce1,
        we1 => sample_period_samples_0_timestamp_V_we1,
        d1 => sample_period_samples_0_timestamp_V_d1);

    sample_period_samples_1_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_1_timestamp_V_address0,
        ce0 => sample_period_samples_1_timestamp_V_ce0,
        we0 => sample_period_samples_1_timestamp_V_we0,
        d0 => sample_period_samples_1_timestamp_V_d0,
        q0 => sample_period_samples_1_timestamp_V_q0,
        address1 => sample_period_samples_1_timestamp_V_address1,
        ce1 => sample_period_samples_1_timestamp_V_ce1,
        we1 => sample_period_samples_1_timestamp_V_we1,
        d1 => sample_period_samples_1_timestamp_V_d1);

    sample_period_samples_2_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_2_timestamp_V_address0,
        ce0 => sample_period_samples_2_timestamp_V_ce0,
        we0 => sample_period_samples_2_timestamp_V_we0,
        d0 => sample_period_samples_2_timestamp_V_d0,
        q0 => sample_period_samples_2_timestamp_V_q0,
        address1 => sample_period_samples_2_timestamp_V_address1,
        ce1 => sample_period_samples_2_timestamp_V_ce1,
        we1 => sample_period_samples_2_timestamp_V_we1,
        d1 => sample_period_samples_2_timestamp_V_d1);

    sample_period_samples_3_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_3_timestamp_V_address0,
        ce0 => sample_period_samples_3_timestamp_V_ce0,
        we0 => sample_period_samples_3_timestamp_V_we0,
        d0 => sample_period_samples_3_timestamp_V_d0,
        q0 => sample_period_samples_3_timestamp_V_q0,
        address1 => sample_period_samples_3_timestamp_V_address1,
        ce1 => sample_period_samples_3_timestamp_V_ce1,
        we1 => sample_period_samples_3_timestamp_V_we1,
        d1 => sample_period_samples_3_timestamp_V_d1);

    sample_period_samples_4_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_4_timestamp_V_address0,
        ce0 => sample_period_samples_4_timestamp_V_ce0,
        we0 => sample_period_samples_4_timestamp_V_we0,
        d0 => sample_period_samples_4_timestamp_V_d0,
        q0 => sample_period_samples_4_timestamp_V_q0,
        address1 => sample_period_samples_4_timestamp_V_address1,
        ce1 => sample_period_samples_4_timestamp_V_ce1,
        we1 => sample_period_samples_4_timestamp_V_we1,
        d1 => sample_period_samples_4_timestamp_V_d1);

    sample_period_samples_5_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_5_timestamp_V_address0,
        ce0 => sample_period_samples_5_timestamp_V_ce0,
        we0 => sample_period_samples_5_timestamp_V_we0,
        d0 => sample_period_samples_5_timestamp_V_d0,
        q0 => sample_period_samples_5_timestamp_V_q0,
        address1 => sample_period_samples_5_timestamp_V_address1,
        ce1 => sample_period_samples_5_timestamp_V_ce1,
        we1 => sample_period_samples_5_timestamp_V_we1,
        d1 => sample_period_samples_5_timestamp_V_d1);

    sample_period_samples_6_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_6_timestamp_V_address0,
        ce0 => sample_period_samples_6_timestamp_V_ce0,
        we0 => sample_period_samples_6_timestamp_V_we0,
        d0 => sample_period_samples_6_timestamp_V_d0,
        q0 => sample_period_samples_6_timestamp_V_q0,
        address1 => sample_period_samples_6_timestamp_V_address1,
        ce1 => sample_period_samples_6_timestamp_V_ce1,
        we1 => sample_period_samples_6_timestamp_V_we1,
        d1 => sample_period_samples_6_timestamp_V_d1);

    sample_period_samples_7_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_7_timestamp_V_address0,
        ce0 => sample_period_samples_7_timestamp_V_ce0,
        we0 => sample_period_samples_7_timestamp_V_we0,
        d0 => sample_period_samples_7_timestamp_V_d0,
        q0 => sample_period_samples_7_timestamp_V_q0,
        address1 => sample_period_samples_7_timestamp_V_address1,
        ce1 => sample_period_samples_7_timestamp_V_ce1,
        we1 => sample_period_samples_7_timestamp_V_we1,
        d1 => sample_period_samples_7_timestamp_V_d1);

    sample_period_samples_8_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_8_timestamp_V_address0,
        ce0 => sample_period_samples_8_timestamp_V_ce0,
        we0 => sample_period_samples_8_timestamp_V_we0,
        d0 => sample_period_samples_8_timestamp_V_d0,
        q0 => sample_period_samples_8_timestamp_V_q0,
        address1 => sample_period_samples_8_timestamp_V_address1,
        ce1 => sample_period_samples_8_timestamp_V_ce1,
        we1 => sample_period_samples_8_timestamp_V_we1,
        d1 => sample_period_samples_8_timestamp_V_d1);

    sample_period_samples_9_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_9_timestamp_V_address0,
        ce0 => sample_period_samples_9_timestamp_V_ce0,
        we0 => sample_period_samples_9_timestamp_V_we0,
        d0 => sample_period_samples_9_timestamp_V_d0,
        q0 => sample_period_samples_9_timestamp_V_q0,
        address1 => sample_period_samples_9_timestamp_V_address1,
        ce1 => sample_period_samples_9_timestamp_V_ce1,
        we1 => sample_period_samples_9_timestamp_V_we1,
        d1 => sample_period_samples_9_timestamp_V_d1);

    sample_period_samples_10_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_10_timestamp_V_address0,
        ce0 => sample_period_samples_10_timestamp_V_ce0,
        we0 => sample_period_samples_10_timestamp_V_we0,
        d0 => sample_period_samples_10_timestamp_V_d0,
        q0 => sample_period_samples_10_timestamp_V_q0,
        address1 => sample_period_samples_10_timestamp_V_address1,
        ce1 => sample_period_samples_10_timestamp_V_ce1,
        we1 => sample_period_samples_10_timestamp_V_we1,
        d1 => sample_period_samples_10_timestamp_V_d1);

    sample_period_samples_11_timestamp_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_11_timestamp_V_address0,
        ce0 => sample_period_samples_11_timestamp_V_ce0,
        we0 => sample_period_samples_11_timestamp_V_we0,
        d0 => sample_period_samples_11_timestamp_V_d0,
        q0 => sample_period_samples_11_timestamp_V_q0,
        address1 => sample_period_samples_11_timestamp_V_address1,
        ce1 => sample_period_samples_11_timestamp_V_ce1,
        we1 => sample_period_samples_11_timestamp_V_we1,
        d1 => sample_period_samples_11_timestamp_V_d1);

    mag_samples_sample_V_U : component LLSSineReconstruction_loadData_mag_samples_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mag_samples_sample_V_address0,
        ce0 => mag_samples_sample_V_ce0,
        we0 => mag_samples_sample_V_we0,
        d0 => mag_samples_sample_V_d0,
        q0 => mag_samples_sample_V_q0,
        address1 => mag_samples_sample_V_address1,
        ce1 => mag_samples_sample_V_ce1,
        we1 => mag_samples_sample_V_we1,
        d1 => mag_samples_sample_V_d1);

    mag_samples_timestamp_V_U : component LLSSineReconstruction_loadData_mag_samples_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mag_samples_timestamp_V_address0,
        ce0 => mag_samples_timestamp_V_ce0,
        we0 => mag_samples_timestamp_V_we0,
        d0 => mag_samples_timestamp_V_d0,
        q0 => mag_samples_timestamp_V_q0,
        address1 => mag_samples_timestamp_V_address1,
        ce1 => mag_samples_timestamp_V_ce1,
        we1 => mag_samples_timestamp_V_we1,
        d1 => mag_samples_timestamp_V_d1);

    mul_63ns_18ns_80_1_1_U215 : component LLSSineReconstruction_mul_63ns_18ns_80_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 63,
        din1_WIDTH => 18,
        dout_WIDTH => 80)
    port map (
        din0 => r_V_42_fu_5993_p0,
        din1 => r_V_42_fu_5993_p1,
        dout => r_V_42_fu_5993_p2);

    mux_124_12_1_1_U216 : component LLSSineReconstruction_mux_124_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => max_vals_V_11_12_fu_562,
        din1 => max_vals_V_11_fu_506,
        din2 => max_vals_V_11_1_fu_510,
        din3 => max_vals_V_11_2_fu_514,
        din4 => max_vals_V_11_3_fu_518,
        din5 => max_vals_V_11_4_fu_522,
        din6 => max_vals_V_11_5_fu_526,
        din7 => max_vals_V_11_6_fu_530,
        din8 => max_vals_V_11_7_fu_534,
        din9 => max_vals_V_11_8_fu_538,
        din10 => max_vals_V_11_9_fu_542,
        din11 => max_vals_V_11_10_fu_546,
        din12 => k_reg_5609_pp0_iter1_reg,
        dout => max_val_V_fu_6005_p14);

    mux_124_12_1_1_U217 : component LLSSineReconstruction_mux_124_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => min_vals_V_11_1_fu_566,
        din1 => min_vals_V_11_2_fu_570,
        din2 => min_vals_V_11_3_fu_574,
        din3 => min_vals_V_11_4_fu_578,
        din4 => min_vals_V_11_5_fu_582,
        din5 => min_vals_V_11_6_fu_586,
        din6 => min_vals_V_11_7_fu_590,
        din7 => min_vals_V_11_8_fu_594,
        din8 => min_vals_V_11_9_fu_598,
        din9 => min_vals_V_11_10_fu_602,
        din10 => min_vals_V_11_11_fu_606,
        din11 => min_vals_V_11_12_fu_610,
        din12 => k_reg_5609_pp0_iter1_reg,
        dout => min_val_V_fu_6035_p14);

    mux_164_12_1_1_U218 : component LLSSineReconstruction_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => min_vals_V_11_12_fu_610,
        din1 => min_vals_V_11_2_fu_570,
        din2 => min_vals_V_11_3_fu_574,
        din3 => min_vals_V_11_4_fu_578,
        din4 => min_vals_V_11_5_fu_582,
        din5 => min_vals_V_11_6_fu_586,
        din6 => min_vals_V_11_7_fu_590,
        din7 => min_vals_V_11_8_fu_594,
        din8 => min_vals_V_11_9_fu_598,
        din9 => min_vals_V_11_10_fu_602,
        din10 => min_vals_V_11_11_fu_606,
        din11 => min_vals_V_11_12_fu_610,
        din12 => min_vals_V_11_12_fu_610,
        din13 => min_vals_V_11_12_fu_610,
        din14 => min_vals_V_11_12_fu_610,
        din15 => min_vals_V_11_12_fu_610,
        din16 => i_2_reg_5633,
        dout => phi_ln215_1_fu_6312_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_2_reg_5633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_6300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_2_reg_5633 <= add_ln241_fu_6306_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln170_fu_5781_p2 = ap_const_lv1_1))) then 
                i_2_reg_5633 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_reg_5586_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_fu_5932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_5586 <= i_3_reg_7644;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_5586 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_5598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_reg_5598 <= add_ln176_reg_8826;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_5598 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_5609_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln184_reg_9007 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_reg_5609 <= add_ln184_reg_9002;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_reg_5609 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    mag_time_ch0_V_fu_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mag_time_ch0_V_fu_550 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln211_reg_9026 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                mag_time_ch0_V_fu_550 <= mag_time_ch0_V_2_fu_6280_p3;
            end if; 
        end if;
    end process;

    max_diff_V_1_reg_5644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_6300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                max_diff_V_1_reg_5644 <= max_diff_V_3_fu_6374_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln170_fu_5781_p2 = ap_const_lv1_1))) then 
                max_diff_V_1_reg_5644 <= max_diff_V_fu_5900_p2;
            end if; 
        end if;
    end process;

    this_phase_ref_idx_0_reg_5621_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_6300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                this_phase_ref_idx_0_reg_5621 <= select_ln245_fu_6366_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln170_fu_5781_p2 = ap_const_lv1_1))) then 
                this_phase_ref_idx_0_reg_5621 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln176_reg_8826 <= add_ln176_fu_5914_p2;
                    zext_ln176_reg_8831(3 downto 0) <= zext_ln176_fu_5920_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_fu_5932_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln179_reg_8858 <= add_ln179_fu_5938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln184_reg_9002 <= add_ln184_fu_5958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                cmp16_reg_8984 <= cmp16_fu_5947_p2;
                sel_tmp25_reg_8997 <= sel_tmp25_fu_5952_p2;
                this_times_addr_reg_8992 <= zext_ln181_fu_5943_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_7644 <= i_3_fu_5771_p2;
                max_vals_V_11_10_load_reg_7699 <= max_vals_V_11_10_fu_546;
                max_vals_V_11_1_load_reg_7654 <= max_vals_V_11_1_fu_510;
                max_vals_V_11_2_load_reg_7659 <= max_vals_V_11_2_fu_514;
                max_vals_V_11_3_load_reg_7664 <= max_vals_V_11_3_fu_518;
                max_vals_V_11_4_load_reg_7669 <= max_vals_V_11_4_fu_522;
                max_vals_V_11_5_load_reg_7674 <= max_vals_V_11_5_fu_526;
                max_vals_V_11_6_load_reg_7679 <= max_vals_V_11_6_fu_530;
                max_vals_V_11_7_load_reg_7684 <= max_vals_V_11_7_fu_534;
                max_vals_V_11_8_load_reg_7689 <= max_vals_V_11_8_fu_538;
                max_vals_V_11_9_load_reg_7694 <= max_vals_V_11_9_fu_542;
                max_vals_V_11_load_reg_7649 <= max_vals_V_11_fu_506;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln184_reg_9007 <= icmp_ln184_fu_5964_p2;
                icmp_ln211_reg_9026 <= icmp_ln211_fu_5975_p2;
                k_reg_5609_pp0_iter1_reg <= k_reg_5609;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((k_reg_5609_pp0_iter1_reg = ap_const_lv4_B) or ((k_reg_5609_pp0_iter1_reg = ap_const_lv4_C) or ((k_reg_5609_pp0_iter1_reg = ap_const_lv4_D) or ((k_reg_5609_pp0_iter1_reg = ap_const_lv4_E) or (k_reg_5609_pp0_iter1_reg = ap_const_lv4_F))))))) then
                max_vals_V_11_10_fu_546 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_12_fu_610 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_0))) then
                max_vals_V_11_11_fu_554 <= max_vals_V_0_fu_6097_p3;
                max_vals_V_11_12_fu_562 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_1_fu_566 <= min_vals_V_0_fu_6112_p3;
                min_vals_V_11_fu_558 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_2))) then
                max_vals_V_11_1_fu_510 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_3_fu_574 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_3))) then
                max_vals_V_11_2_fu_514 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_4_fu_578 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_4))) then
                max_vals_V_11_3_fu_518 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_5_fu_582 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_5))) then
                max_vals_V_11_4_fu_522 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_6_fu_586 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_6))) then
                max_vals_V_11_5_fu_526 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_7_fu_590 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_7))) then
                max_vals_V_11_6_fu_530 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_8_fu_594 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_8))) then
                max_vals_V_11_7_fu_534 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_9_fu_598 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_9))) then
                max_vals_V_11_8_fu_538 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_10_fu_602 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_A))) then
                max_vals_V_11_9_fu_542 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_11_fu_606 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (k_reg_5609_pp0_iter1_reg = ap_const_lv4_1))) then
                max_vals_V_11_fu_506 <= max_vals_V_0_fu_6097_p3;
                min_vals_V_11_2_fu_570 <= min_vals_V_0_fu_6112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_fu_5975_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_42_reg_9030 <= r_V_42_fu_5993_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sext_ln170_reg_7634 <= sext_ln170_fu_5754_p1;
                trunc_ln170_reg_7629 <= trunc_ln170_fu_5750_p1;
                trunc_ln22_reg_7639 <= trunc_ln22_fu_5762_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp_reg_8821(7 downto 3) <= tmp_fu_5906_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_fu_5964_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    trunc_ln190_cast_reg_9011(3 downto 0) <= trunc_ln190_cast_fu_5970_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln170_fu_5781_p2 = ap_const_lv1_0))) then
                    zext_ln34_reg_7708(4 downto 0) <= zext_ln34_fu_5842_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln34_reg_7708(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_reg_8821(2 downto 0) <= "000";
    zext_ln176_reg_8831(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    trunc_ln190_cast_reg_9011(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln170_fu_5781_p2, ap_CS_fsm_state7, icmp_ln176_fu_5932_p2, ap_enable_reg_pp0_iter0, icmp_ln184_fu_5964_p2, ap_CS_fsm_state18, icmp_ln241_fu_6300_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln170_fu_5781_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln176_fu_5932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln184_fu_5964_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln184_fu_5964_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln241_fu_6300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln176_fu_5914_p2 <= std_logic_vector(unsigned(j_reg_5598) + unsigned(ap_const_lv4_1));
    add_ln179_fu_5938_p2 <= std_logic_vector(unsigned(tmp_reg_8821) + unsigned(zext_ln176_1_fu_5928_p1));
    add_ln184_fu_5958_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_5613_p4) + unsigned(ap_const_lv4_1));
    add_ln22_1_fu_5797_p2 <= std_logic_vector(signed(sext_ln22_fu_5793_p1) + signed(sext_ln170_reg_7634));
    add_ln22_fu_5787_p2 <= std_logic_vector(unsigned(zext_ln170_fu_5777_p1) + unsigned(ap_const_lv6_2D));
    add_ln241_fu_6306_p2 <= std_logic_vector(unsigned(i_2_reg_5633) + unsigned(ap_const_lv4_1));
    add_ln28_fu_5824_p2 <= std_logic_vector(unsigned(select_ln28_fu_5816_p3) + unsigned(i_reg_5586));
    and_ln886_fu_6092_p2 <= (sel_tmp25_reg_8997 and icmp_ln886_1_fu_6065_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_3204_assign_proc : process(ap_phi_mux_i_2_phi_fu_5637_p4)
    begin
                ap_condition_3204 <= (not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_1)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_A)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_9)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_8)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_7)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_6)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_5)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_4)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_3)) and not((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_2)));
    end process;


    ap_condition_pp0_exit_iter0_state14_assign_proc : process(icmp_ln184_fu_5964_p2)
    begin
        if ((icmp_ln184_fu_5964_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_2_phi_fu_5637_p4 <= i_2_reg_5633;

    ap_phi_mux_k_phi_fu_5613_p4_assign_proc : process(k_reg_5609, ap_CS_fsm_pp0_stage0, add_ln184_reg_9002, icmp_ln184_reg_9007, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln184_reg_9007 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_k_phi_fu_5613_p4 <= add_ln184_reg_9002;
        else 
            ap_phi_mux_k_phi_fu_5613_p4 <= k_reg_5609;
        end if; 
    end process;


    ap_phi_mux_phi_ln215_phi_fu_5656_p22_assign_proc : process(max_vals_V_11_load_reg_7649, max_vals_V_11_1_load_reg_7654, max_vals_V_11_2_load_reg_7659, max_vals_V_11_3_load_reg_7664, max_vals_V_11_4_load_reg_7669, max_vals_V_11_5_load_reg_7674, max_vals_V_11_6_load_reg_7679, max_vals_V_11_7_load_reg_7684, max_vals_V_11_8_load_reg_7689, max_vals_V_11_9_load_reg_7694, max_vals_V_11_10_load_reg_7699, ap_CS_fsm_state18, icmp_ln241_fu_6300_p2, ap_phi_mux_i_2_phi_fu_5637_p4, ap_condition_3204)
    begin
        if (((icmp_ln241_fu_6300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
            if ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_load_reg_7649;
            elsif ((ap_const_boolean_1 = ap_condition_3204)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_10_load_reg_7699;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_A)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_9_load_reg_7694;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_9)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_8_load_reg_7689;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_7_load_reg_7684;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_6_load_reg_7679;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_5_load_reg_7674;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_4_load_reg_7669;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_3_load_reg_7664;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_2_load_reg_7659;
            elsif ((ap_phi_mux_i_2_phi_fu_5637_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= max_vals_V_11_1_load_reg_7654;
            else 
                ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= "XXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= this_phase_ref_idx_0_reg_5621(4 - 1 downto 0);
    buffer_idx_2_fu_5835_p3 <= 
        trunc_ln22_reg_7639 when (icmp_ln24_fu_5802_p2(0) = '1') else 
        buffer_idx_fu_5830_p2;
    buffer_idx_fu_5830_p2 <= std_logic_vector(unsigned(add_ln28_fu_5824_p2) + unsigned(trunc_ln170_reg_7629));
    cmp16_fu_5947_p2 <= "1" when (add_ln179_reg_8858 = ap_const_lv8_0) else "0";
    i_3_fu_5771_p2 <= std_logic_vector(unsigned(i_reg_5586) + unsigned(ap_const_lv5_1));
    icmp_ln170_fu_5781_p2 <= "1" when (i_reg_5586 = ap_const_lv5_14) else "0";
    icmp_ln176_fu_5932_p2 <= "1" when (j_reg_5598 = ap_const_lv4_8) else "0";
    icmp_ln184_fu_5964_p2 <= "1" when (ap_phi_mux_k_phi_fu_5613_p4 = ap_const_lv4_C) else "0";
    icmp_ln211_fu_5975_p2 <= "1" when (k_reg_5609 = ap_const_lv4_0) else "0";
    icmp_ln241_fu_6300_p2 <= "1" when (i_2_reg_5633 = ap_const_lv4_C) else "0";
    icmp_ln24_fu_5802_p2 <= "1" when (signed(add_ln22_1_fu_5797_p2) < signed(ap_const_lv7_6C)) else "0";
    icmp_ln878_fu_6071_p2 <= "1" when (unsigned(mag_samples_sample_V_q0) < unsigned(min_val_V_fu_6035_p14)) else "0";
    icmp_ln886_1_fu_6065_p2 <= "1" when (unsigned(mag_samples_sample_V_q0) > unsigned(max_val_V_fu_6005_p14)) else "0";
    icmp_ln886_fu_6356_p2 <= "1" when (unsigned(max_diff_V_4_fu_6350_p2) > unsigned(max_diff_V_1_reg_5644)) else "0";
    lhs_fu_6253_p3 <= (mag_time_ch0_V_fu_550 & ap_const_lv43_0);

    mag_samples_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, trunc_ln190_cast_reg_9011, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mag_samples_sample_V_address0 <= trunc_ln190_cast_reg_9011(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            mag_samples_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    mag_samples_sample_V_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mag_samples_sample_V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mag_samples_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mag_samples_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mag_samples_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mag_samples_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_samples_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            mag_samples_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    mag_samples_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            mag_samples_sample_V_ce0 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mag_samples_sample_V_ce1 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, sample_period_samples_1_sample_V_q0, sample_period_samples_3_sample_V_q0, sample_period_samples_5_sample_V_q0, sample_period_samples_7_sample_V_q0, sample_period_samples_9_sample_V_q0, sample_period_samples_11_sample_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mag_samples_sample_V_d0 <= sample_period_samples_11_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mag_samples_sample_V_d0 <= sample_period_samples_9_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mag_samples_sample_V_d0 <= sample_period_samples_7_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mag_samples_sample_V_d0 <= sample_period_samples_5_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mag_samples_sample_V_d0 <= sample_period_samples_3_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_samples_sample_V_d0 <= sample_period_samples_1_sample_V_q0;
        else 
            mag_samples_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    mag_samples_sample_V_d1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, sample_period_samples_0_sample_V_q0, sample_period_samples_2_sample_V_q0, sample_period_samples_4_sample_V_q0, sample_period_samples_6_sample_V_q0, sample_period_samples_8_sample_V_q0, sample_period_samples_10_sample_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mag_samples_sample_V_d1 <= sample_period_samples_10_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mag_samples_sample_V_d1 <= sample_period_samples_8_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mag_samples_sample_V_d1 <= sample_period_samples_6_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mag_samples_sample_V_d1 <= sample_period_samples_4_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mag_samples_sample_V_d1 <= sample_period_samples_2_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_samples_sample_V_d1 <= sample_period_samples_0_sample_V_q0;
        else 
            mag_samples_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    mag_samples_sample_V_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mag_samples_sample_V_we0 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mag_samples_sample_V_we1 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_enable_reg_pp0_iter0, trunc_ln190_cast_fu_5970_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mag_samples_timestamp_V_address0 <= trunc_ln190_cast_fu_5970_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mag_samples_timestamp_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mag_samples_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mag_samples_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mag_samples_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mag_samples_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_samples_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            mag_samples_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    mag_samples_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mag_samples_timestamp_V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mag_samples_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mag_samples_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mag_samples_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mag_samples_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_samples_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            mag_samples_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    mag_samples_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            mag_samples_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            mag_samples_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mag_samples_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            mag_samples_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_timestamp_V_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, sample_period_samples_1_timestamp_V_q0, sample_period_samples_3_timestamp_V_q0, sample_period_samples_5_timestamp_V_q0, sample_period_samples_7_timestamp_V_q0, sample_period_samples_9_timestamp_V_q0, sample_period_samples_11_timestamp_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mag_samples_timestamp_V_d0 <= sample_period_samples_11_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mag_samples_timestamp_V_d0 <= sample_period_samples_9_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mag_samples_timestamp_V_d0 <= sample_period_samples_7_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mag_samples_timestamp_V_d0 <= sample_period_samples_5_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mag_samples_timestamp_V_d0 <= sample_period_samples_3_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_samples_timestamp_V_d0 <= sample_period_samples_1_timestamp_V_q0;
        else 
            mag_samples_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mag_samples_timestamp_V_d1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, sample_period_samples_0_timestamp_V_q0, sample_period_samples_2_timestamp_V_q0, sample_period_samples_4_timestamp_V_q0, sample_period_samples_6_timestamp_V_q0, sample_period_samples_8_timestamp_V_q0, sample_period_samples_10_timestamp_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mag_samples_timestamp_V_d1 <= sample_period_samples_10_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mag_samples_timestamp_V_d1 <= sample_period_samples_8_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mag_samples_timestamp_V_d1 <= sample_period_samples_6_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mag_samples_timestamp_V_d1 <= sample_period_samples_4_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mag_samples_timestamp_V_d1 <= sample_period_samples_2_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mag_samples_timestamp_V_d1 <= sample_period_samples_0_timestamp_V_q0;
        else 
            mag_samples_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mag_samples_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mag_samples_timestamp_V_we0 <= ap_const_logic_1;
        else 
            mag_samples_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            mag_samples_timestamp_V_we1 <= ap_const_logic_1;
        else 
            mag_samples_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mag_time_ch0_V_1_fu_6270_p4 <= ret_V_fu_6264_p2(106 downto 43);
    mag_time_ch0_V_2_fu_6280_p3 <= 
        mag_time_ch0_V_fu_550 when (cmp16_reg_8984(0) = '1') else 
        mag_time_ch0_V_1_fu_6270_p4;
    max_diff_V_3_fu_6374_p3 <= 
        max_diff_V_4_fu_6350_p2 when (icmp_ln886_fu_6356_p2(0) = '1') else 
        max_diff_V_1_reg_5644;
    max_diff_V_4_fu_6350_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln215_phi_fu_5656_p22) - unsigned(phi_ln215_1_fu_6312_p18));
    max_diff_V_fu_5900_p2 <= std_logic_vector(unsigned(max_vals_V_11_11_fu_554) - unsigned(min_vals_V_11_fu_558));
    max_vals_V_0_fu_6097_p3 <= 
        mag_samples_sample_V_q0 when (and_ln886_fu_6092_p2(0) = '1') else 
        sel_tmp_fu_6085_p3;
    min_val_V_1_fu_6077_p3 <= 
        mag_samples_sample_V_q0 when (icmp_ln878_fu_6071_p2(0) = '1') else 
        min_val_V_fu_6035_p14;
    min_vals_V_0_fu_6112_p3 <= 
        min_val_V_fu_6035_p14 when (and_ln886_fu_6092_p2(0) = '1') else 
        sel_tmp28_fu_6105_p3;
    r_V_42_fu_5993_p0 <= r_V_42_fu_5993_p00(63 - 1 downto 0);
    r_V_42_fu_5993_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_5981_p3),80));
    r_V_42_fu_5993_p1 <= ap_const_lv80_15799(18 - 1 downto 0);
    r_V_fu_5981_p3 <= (mag_samples_timestamp_V_q0 & ap_const_lv43_0);
    ret_V_fu_6264_p2 <= std_logic_vector(unsigned(lhs_fu_6253_p3) + unsigned(zext_ln1192_fu_6261_p1));

    sample_period_samples_0_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln176_fu_5920_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_address0 <= zext_ln176_fu_5920_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_0_q0, sliding_window_buffer_samples_sample_V_5_0_q0, sliding_window_buffer_samples_sample_V_3_0_q0, sliding_window_buffer_samples_sample_V_1_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_0_q0;
        else 
            sample_period_samples_0_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_0_q0, sliding_window_buffer_samples_sample_V_4_0_q0, sliding_window_buffer_samples_sample_V_2_0_q0, sliding_window_buffer_samples_sample_V_0_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_0_q0;
        else 
            sample_period_samples_0_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln176_fu_5920_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_timestamp_V_address0 <= zext_ln176_fu_5920_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_0_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_0_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_0_q0, sliding_window_buffer_samples_timestamp_V_5_0_q0, sliding_window_buffer_samples_timestamp_V_3_0_q0, sliding_window_buffer_samples_timestamp_V_1_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_0_q0;
        else 
            sample_period_samples_0_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_0_q0, sliding_window_buffer_samples_timestamp_V_4_0_q0, sliding_window_buffer_samples_timestamp_V_2_0_q0, sliding_window_buffer_samples_timestamp_V_0_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_0_q0;
        else 
            sample_period_samples_0_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_period_samples_10_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_10_q0, sliding_window_buffer_samples_sample_V_5_10_q0, sliding_window_buffer_samples_sample_V_3_10_q0, sliding_window_buffer_samples_sample_V_1_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_10_q0;
        else 
            sample_period_samples_10_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_10_q0, sliding_window_buffer_samples_sample_V_4_10_q0, sliding_window_buffer_samples_sample_V_2_10_q0, sliding_window_buffer_samples_sample_V_0_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_10_q0;
        else 
            sample_period_samples_10_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_period_samples_10_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_10_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_10_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_10_q0, sliding_window_buffer_samples_timestamp_V_5_10_q0, sliding_window_buffer_samples_timestamp_V_3_10_q0, sliding_window_buffer_samples_timestamp_V_1_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_10_q0;
        else 
            sample_period_samples_10_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_10_q0, sliding_window_buffer_samples_timestamp_V_4_10_q0, sliding_window_buffer_samples_timestamp_V_2_10_q0, sliding_window_buffer_samples_timestamp_V_0_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_10_q0;
        else 
            sample_period_samples_10_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_period_samples_11_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_11_q0, sliding_window_buffer_samples_sample_V_5_11_q0, sliding_window_buffer_samples_sample_V_3_11_q0, sliding_window_buffer_samples_sample_V_1_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_11_q0;
        else 
            sample_period_samples_11_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_11_q0, sliding_window_buffer_samples_sample_V_4_11_q0, sliding_window_buffer_samples_sample_V_2_11_q0, sliding_window_buffer_samples_sample_V_0_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_11_q0;
        else 
            sample_period_samples_11_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_period_samples_11_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_11_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_11_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_11_q0, sliding_window_buffer_samples_timestamp_V_5_11_q0, sliding_window_buffer_samples_timestamp_V_3_11_q0, sliding_window_buffer_samples_timestamp_V_1_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_11_q0;
        else 
            sample_period_samples_11_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_11_q0, sliding_window_buffer_samples_timestamp_V_4_11_q0, sliding_window_buffer_samples_timestamp_V_2_11_q0, sliding_window_buffer_samples_timestamp_V_0_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_11_q0;
        else 
            sample_period_samples_11_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln176_fu_5920_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_address0 <= zext_ln176_fu_5920_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_1_q0, sliding_window_buffer_samples_sample_V_5_1_q0, sliding_window_buffer_samples_sample_V_3_1_q0, sliding_window_buffer_samples_sample_V_1_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_1_q0;
        else 
            sample_period_samples_1_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_1_q0, sliding_window_buffer_samples_sample_V_4_1_q0, sliding_window_buffer_samples_sample_V_2_1_q0, sliding_window_buffer_samples_sample_V_0_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_1_q0;
        else 
            sample_period_samples_1_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln176_fu_5920_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_timestamp_V_address0 <= zext_ln176_fu_5920_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_1_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_1_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_1_q0, sliding_window_buffer_samples_timestamp_V_5_1_q0, sliding_window_buffer_samples_timestamp_V_3_1_q0, sliding_window_buffer_samples_timestamp_V_1_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_1_q0;
        else 
            sample_period_samples_1_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_1_q0, sliding_window_buffer_samples_timestamp_V_4_1_q0, sliding_window_buffer_samples_timestamp_V_2_1_q0, sliding_window_buffer_samples_timestamp_V_0_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_1_q0;
        else 
            sample_period_samples_1_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_2_q0, sliding_window_buffer_samples_sample_V_5_2_q0, sliding_window_buffer_samples_sample_V_3_2_q0, sliding_window_buffer_samples_sample_V_1_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_2_q0;
        else 
            sample_period_samples_2_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_2_q0, sliding_window_buffer_samples_sample_V_4_2_q0, sliding_window_buffer_samples_sample_V_2_2_q0, sliding_window_buffer_samples_sample_V_0_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_2_q0;
        else 
            sample_period_samples_2_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_2_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_2_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_2_q0, sliding_window_buffer_samples_timestamp_V_5_2_q0, sliding_window_buffer_samples_timestamp_V_3_2_q0, sliding_window_buffer_samples_timestamp_V_1_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_2_q0;
        else 
            sample_period_samples_2_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_2_q0, sliding_window_buffer_samples_timestamp_V_4_2_q0, sliding_window_buffer_samples_timestamp_V_2_2_q0, sliding_window_buffer_samples_timestamp_V_0_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_2_q0;
        else 
            sample_period_samples_2_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_3_q0, sliding_window_buffer_samples_sample_V_5_3_q0, sliding_window_buffer_samples_sample_V_3_3_q0, sliding_window_buffer_samples_sample_V_1_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_3_q0;
        else 
            sample_period_samples_3_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_3_q0, sliding_window_buffer_samples_sample_V_4_3_q0, sliding_window_buffer_samples_sample_V_2_3_q0, sliding_window_buffer_samples_sample_V_0_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_3_q0;
        else 
            sample_period_samples_3_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_3_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_3_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_3_q0, sliding_window_buffer_samples_timestamp_V_5_3_q0, sliding_window_buffer_samples_timestamp_V_3_3_q0, sliding_window_buffer_samples_timestamp_V_1_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_3_q0;
        else 
            sample_period_samples_3_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_3_q0, sliding_window_buffer_samples_timestamp_V_4_3_q0, sliding_window_buffer_samples_timestamp_V_2_3_q0, sliding_window_buffer_samples_timestamp_V_0_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_3_q0;
        else 
            sample_period_samples_3_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_4_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_4_q0, sliding_window_buffer_samples_sample_V_5_4_q0, sliding_window_buffer_samples_sample_V_3_4_q0, sliding_window_buffer_samples_sample_V_1_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_4_q0;
        else 
            sample_period_samples_4_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_4_q0, sliding_window_buffer_samples_sample_V_4_4_q0, sliding_window_buffer_samples_sample_V_2_4_q0, sliding_window_buffer_samples_sample_V_0_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_4_q0;
        else 
            sample_period_samples_4_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_4_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_4_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_4_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_4_q0, sliding_window_buffer_samples_timestamp_V_5_4_q0, sliding_window_buffer_samples_timestamp_V_3_4_q0, sliding_window_buffer_samples_timestamp_V_1_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_4_q0;
        else 
            sample_period_samples_4_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_4_q0, sliding_window_buffer_samples_timestamp_V_4_4_q0, sliding_window_buffer_samples_timestamp_V_2_4_q0, sliding_window_buffer_samples_timestamp_V_0_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_4_q0;
        else 
            sample_period_samples_4_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_5_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_5_q0, sliding_window_buffer_samples_sample_V_5_5_q0, sliding_window_buffer_samples_sample_V_3_5_q0, sliding_window_buffer_samples_sample_V_1_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_5_q0;
        else 
            sample_period_samples_5_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_5_q0, sliding_window_buffer_samples_sample_V_4_5_q0, sliding_window_buffer_samples_sample_V_2_5_q0, sliding_window_buffer_samples_sample_V_0_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_5_q0;
        else 
            sample_period_samples_5_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_5_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_5_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_5_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_5_q0, sliding_window_buffer_samples_timestamp_V_5_5_q0, sliding_window_buffer_samples_timestamp_V_3_5_q0, sliding_window_buffer_samples_timestamp_V_1_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_5_q0;
        else 
            sample_period_samples_5_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_5_q0, sliding_window_buffer_samples_timestamp_V_4_5_q0, sliding_window_buffer_samples_timestamp_V_2_5_q0, sliding_window_buffer_samples_timestamp_V_0_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_5_q0;
        else 
            sample_period_samples_5_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_period_samples_6_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_6_q0, sliding_window_buffer_samples_sample_V_5_6_q0, sliding_window_buffer_samples_sample_V_3_6_q0, sliding_window_buffer_samples_sample_V_1_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_6_q0;
        else 
            sample_period_samples_6_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_6_q0, sliding_window_buffer_samples_sample_V_4_6_q0, sliding_window_buffer_samples_sample_V_2_6_q0, sliding_window_buffer_samples_sample_V_0_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_6_q0;
        else 
            sample_period_samples_6_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_period_samples_6_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_6_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_6_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_6_q0, sliding_window_buffer_samples_timestamp_V_5_6_q0, sliding_window_buffer_samples_timestamp_V_3_6_q0, sliding_window_buffer_samples_timestamp_V_1_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_6_q0;
        else 
            sample_period_samples_6_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_6_q0, sliding_window_buffer_samples_timestamp_V_4_6_q0, sliding_window_buffer_samples_timestamp_V_2_6_q0, sliding_window_buffer_samples_timestamp_V_0_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_6_q0;
        else 
            sample_period_samples_6_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_period_samples_7_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_7_q0, sliding_window_buffer_samples_sample_V_5_7_q0, sliding_window_buffer_samples_sample_V_3_7_q0, sliding_window_buffer_samples_sample_V_1_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_7_q0;
        else 
            sample_period_samples_7_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_7_q0, sliding_window_buffer_samples_sample_V_4_7_q0, sliding_window_buffer_samples_sample_V_2_7_q0, sliding_window_buffer_samples_sample_V_0_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_7_q0;
        else 
            sample_period_samples_7_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_period_samples_7_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_7_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_7_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_7_q0, sliding_window_buffer_samples_timestamp_V_5_7_q0, sliding_window_buffer_samples_timestamp_V_3_7_q0, sliding_window_buffer_samples_timestamp_V_1_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_7_q0;
        else 
            sample_period_samples_7_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_7_q0, sliding_window_buffer_samples_timestamp_V_4_7_q0, sliding_window_buffer_samples_timestamp_V_2_7_q0, sliding_window_buffer_samples_timestamp_V_0_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_7_q0;
        else 
            sample_period_samples_7_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_period_samples_8_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_8_q0, sliding_window_buffer_samples_sample_V_5_8_q0, sliding_window_buffer_samples_sample_V_3_8_q0, sliding_window_buffer_samples_sample_V_1_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_8_q0;
        else 
            sample_period_samples_8_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_8_q0, sliding_window_buffer_samples_sample_V_4_8_q0, sliding_window_buffer_samples_sample_V_2_8_q0, sliding_window_buffer_samples_sample_V_0_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_8_q0;
        else 
            sample_period_samples_8_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_period_samples_8_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_8_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_8_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_8_q0, sliding_window_buffer_samples_timestamp_V_5_8_q0, sliding_window_buffer_samples_timestamp_V_3_8_q0, sliding_window_buffer_samples_timestamp_V_1_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_8_q0;
        else 
            sample_period_samples_8_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_8_q0, sliding_window_buffer_samples_timestamp_V_4_8_q0, sliding_window_buffer_samples_timestamp_V_2_8_q0, sliding_window_buffer_samples_timestamp_V_0_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_8_q0;
        else 
            sample_period_samples_8_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_period_samples_9_sample_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_9_q0, sliding_window_buffer_samples_sample_V_5_9_q0, sliding_window_buffer_samples_sample_V_3_9_q0, sliding_window_buffer_samples_sample_V_1_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_9_q0;
        else 
            sample_period_samples_9_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_9_q0, sliding_window_buffer_samples_sample_V_4_9_q0, sliding_window_buffer_samples_sample_V_2_9_q0, sliding_window_buffer_samples_sample_V_0_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_9_q0;
        else 
            sample_period_samples_9_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln176_reg_8831, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_period_samples_9_timestamp_V_address0 <= zext_ln176_reg_8831(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_9_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_9_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_7_9_q0, sliding_window_buffer_samples_timestamp_V_5_9_q0, sliding_window_buffer_samples_timestamp_V_3_9_q0, sliding_window_buffer_samples_timestamp_V_1_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_9_q0;
        else 
            sample_period_samples_9_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_6_9_q0, sliding_window_buffer_samples_timestamp_V_4_9_q0, sliding_window_buffer_samples_timestamp_V_2_9_q0, sliding_window_buffer_samples_timestamp_V_0_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_9_q0;
        else 
            sample_period_samples_9_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp25_fu_5952_p2 <= (cmp16_fu_5947_p2 xor ap_const_lv1_1);
    sel_tmp28_fu_6105_p3 <= 
        mag_samples_sample_V_q0 when (cmp16_reg_8984(0) = '1') else 
        min_val_V_1_fu_6077_p3;
    sel_tmp_fu_6085_p3 <= 
        mag_samples_sample_V_q0 when (cmp16_reg_8984(0) = '1') else 
        max_val_V_fu_6005_p14;
    select_ln245_fu_6366_p3 <= 
        zext_ln247_fu_6362_p1 when (icmp_ln886_fu_6356_p2(0) = '1') else 
        this_phase_ref_idx_0_reg_5621;
    select_ln28_fu_5816_p3 <= 
        ap_const_lv5_1 when (tmp_23_fu_5808_p3(0) = '1') else 
        ap_const_lv5_D;
    sext_ln170_fu_5754_p0 <= sliding_window_front_ptr_s;
        sext_ln170_fu_5754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln170_fu_5754_p0),7));

        sext_ln22_fu_5793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln22_fu_5787_p2),7));

    sliding_window_buffer_samples_sample_V_0_0_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_10_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_11_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_1_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_2_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_3_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_4_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_5_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_6_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_7_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_8_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_9_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_0_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_10_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_11_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_1_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_2_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_3_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_4_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_5_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_6_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_7_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_8_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_9_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_0_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_10_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_11_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_1_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_2_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_3_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_4_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_5_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_6_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_7_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_8_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_9_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_0_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_10_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_11_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_1_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_2_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_3_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_4_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_5_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_6_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_7_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_8_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_9_address0 <= zext_ln34_fu_5842_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_0_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_10_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_11_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_1_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_2_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_3_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_4_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_5_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_6_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_7_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_8_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_9_address0 <= zext_ln34_reg_7708(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    this_times_address0 <= this_times_addr_reg_8992;

    this_times_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            this_times_ce0 <= ap_const_logic_1;
        else 
            this_times_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    this_times_d0 <= 
        ap_const_lv64_0 when (cmp16_reg_8984(0) = '1') else 
        mag_time_ch0_V_1_fu_6270_p4;

    this_times_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln211_reg_9026, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln211_reg_9026 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            this_times_we0 <= ap_const_logic_1;
        else 
            this_times_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_23_fu_5808_p3 <= add_ln22_1_fu_5797_p2(6 downto 6);
    tmp_fu_5906_p3 <= (i_reg_5586 & ap_const_lv3_0);
    trunc_ln170_fu_5750_p0 <= sliding_window_front_ptr_s;
    trunc_ln170_fu_5750_p1 <= trunc_ln170_fu_5750_p0(5 - 1 downto 0);
    trunc_ln190_cast_fu_5970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_phi_fu_5613_p4),64));
    trunc_ln22_fu_5762_p1 <= sliding_window_back_ptr_s(5 - 1 downto 0);
    zext_ln1192_fu_6261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_42_reg_9030),107));
    zext_ln170_fu_5777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_5586),6));
    zext_ln176_1_fu_5928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_5598),8));
    zext_ln176_fu_5920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_5598),64));
    zext_ln181_fu_5943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_reg_8858),64));
    zext_ln247_fu_6362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_5633),32));
    zext_ln34_fu_5842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_idx_2_fu_5835_p3),64));
end behav;
