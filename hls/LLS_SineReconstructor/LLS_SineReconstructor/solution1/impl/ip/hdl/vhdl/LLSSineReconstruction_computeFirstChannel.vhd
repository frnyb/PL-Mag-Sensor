-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_computeFirstChannel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_times_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_times_ce0 : OUT STD_LOGIC;
    this_times_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read : IN STD_LOGIC_VECTOR (3 downto 0);
    this_A_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    this_A_ce0 : OUT STD_LOGIC;
    this_A_we0 : OUT STD_LOGIC;
    this_A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    this_A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    this_b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_b_ce0 : OUT STD_LOGIC;
    this_b_we0 : OUT STD_LOGIC;
    this_b_d0 : OUT STD_LOGIC_VECTOR (54 downto 0);
    this_b_q0 : IN STD_LOGIC_VECTOR (54 downto 0);
    sliding_window_front_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_back_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_buffer_samples_sample_V_7_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sigma_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sigma_V_ce0 : OUT STD_LOGIC;
    sigma_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sigma_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sigma_V_ce1 : OUT STD_LOGIC;
    sigma_V_we1 : OUT STD_LOGIC;
    sigma_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matU_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    matU_V_ce0 : OUT STD_LOGIC;
    matU_V_we0 : OUT STD_LOGIC;
    matU_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matU_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_0_ce0 : OUT STD_LOGIC;
    A_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_0_ce1 : OUT STD_LOGIC;
    A_i_V_0_we1 : OUT STD_LOGIC;
    A_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_1_ce0 : OUT STD_LOGIC;
    A_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_1_ce1 : OUT STD_LOGIC;
    A_i_V_1_we1 : OUT STD_LOGIC;
    A_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_0_ce0 : OUT STD_LOGIC;
    A_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_0_ce1 : OUT STD_LOGIC;
    A_j_V_0_we1 : OUT STD_LOGIC;
    A_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_1_ce0 : OUT STD_LOGIC;
    A_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_1_ce1 : OUT STD_LOGIC;
    A_j_V_1_we1 : OUT STD_LOGIC;
    A_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_0_ce0 : OUT STD_LOGIC;
    matA_V_0_we0 : OUT STD_LOGIC;
    matA_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_0_ce1 : OUT STD_LOGIC;
    matA_V_0_we1 : OUT STD_LOGIC;
    matA_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_1_ce0 : OUT STD_LOGIC;
    matA_V_1_we0 : OUT STD_LOGIC;
    matA_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_1_ce1 : OUT STD_LOGIC;
    matA_V_1_we1 : OUT STD_LOGIC;
    matA_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_0_ce0 : OUT STD_LOGIC;
    V_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_0_ce1 : OUT STD_LOGIC;
    V_i_V_0_we1 : OUT STD_LOGIC;
    V_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_1_ce0 : OUT STD_LOGIC;
    V_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_1_ce1 : OUT STD_LOGIC;
    V_i_V_1_we1 : OUT STD_LOGIC;
    V_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_0_ce0 : OUT STD_LOGIC;
    V_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_0_ce1 : OUT STD_LOGIC;
    V_j_V_0_we1 : OUT STD_LOGIC;
    V_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_1_ce0 : OUT STD_LOGIC;
    V_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_1_ce1 : OUT STD_LOGIC;
    V_j_V_1_we1 : OUT STD_LOGIC;
    V_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_0_ce0 : OUT STD_LOGIC;
    matV_V_0_we0 : OUT STD_LOGIC;
    matV_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_0_ce1 : OUT STD_LOGIC;
    matV_V_0_we1 : OUT STD_LOGIC;
    matV_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_1_ce0 : OUT STD_LOGIC;
    matV_V_1_we0 : OUT STD_LOGIC;
    matV_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_1_ce1 : OUT STD_LOGIC;
    matV_V_1_we1 : OUT STD_LOGIC;
    matV_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    U_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    U_V_ce0 : OUT STD_LOGIC;
    U_V_we0 : OUT STD_LOGIC;
    U_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    U_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    U_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    U_V_ce1 : OUT STD_LOGIC;
    U_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    S_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    S_V_ce0 : OUT STD_LOGIC;
    S_V_we0 : OUT STD_LOGIC;
    S_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    S_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    V_V_ce0 : OUT STD_LOGIC;
    V_V_we0 : OUT STD_LOGIC;
    V_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    V_V_ce1 : OUT STD_LOGIC;
    V_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    UT_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    UT_V_ce0 : OUT STD_LOGIC;
    UT_V_we0 : OUT STD_LOGIC;
    UT_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    UT_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_pinv_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    A_pinv_V_ce0 : OUT STD_LOGIC;
    A_pinv_V_we0 : OUT STD_LOGIC;
    A_pinv_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_pinv_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2133_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2133_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2133_p_ce : OUT STD_LOGIC );
end;


architecture behav of LLSSineReconstruction_computeFirstChannel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_80000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv7_6C : STD_LOGIC_VECTOR (6 downto 0) := "1101100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv107_9D1462CEAA19E : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000001001110100010100011000101100111010101010000110011110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_59 : STD_LOGIC_VECTOR (6 downto 0) := "1011001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv43_0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_2B : STD_LOGIC_VECTOR (11 downto 0) := "000000101011";
    constant ap_const_lv12_FD5 : STD_LOGIC_VECTOR (11 downto 0) := "111111010101";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv11_7D4 : STD_LOGIC_VECTOR (10 downto 0) := "11111010100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_3013 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_sample_V_addr_36_reg_5463 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln22_fu_3110_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln22_reg_5468 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln22_fu_3118_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln22_reg_5473 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln22_1_fu_3122_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln22_1_reg_5478 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln257_fu_3126_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln257_reg_5483 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln34_fu_3203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_5491 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln257_fu_3132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_20_fu_3231_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_6047 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln263_fu_3239_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln263_reg_6052 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln263_fu_3265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln263_reg_6057 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln263_reg_6057_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln263_reg_6057_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln268_fu_3276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_reg_6061 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_reg_6061_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln279_fu_3297_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln279_reg_6131 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln279_reg_6131_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln279_reg_6131_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal sample_period_samples_2_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_reg_6137 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sample_period_samples_3_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_reg_6142 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_reg_6147 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_reg_6152 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_reg_6157 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_reg_6162 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_reg_6167 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_reg_6172 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_reg_6177 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_reg_6182 : STD_LOGIC_VECTOR (11 downto 0);
    signal time_V_reg_6187 : STD_LOGIC_VECTOR (63 downto 0);
    signal angle_4_fu_3339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal angle_4_reg_6192 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state23_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal p_Result_172_reg_6199 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_4_fu_3353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_4_reg_6205 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_V_31_fu_3363_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_31_reg_6210 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln944_4_fu_3391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_4_reg_6216 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln954_4_fu_3489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_4_reg_6222 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_10_fu_3509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_10_reg_6227 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_4_fu_3517_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_4_reg_6232 : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_val_reg_6237 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_val_reg_6243 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_176_fu_3666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_176_reg_6249 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_fu_3710_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_reg_6254 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln575_fu_3730_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln575_reg_6261 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln585_fu_3770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_reg_6266 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_fu_3792_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln586_reg_6271 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln591_fu_3806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_reg_6276 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_3836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_reg_6281 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_3860_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_reg_6286 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln571_fu_3868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_reg_6291 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_12_fu_3880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_12_reg_6296 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_178_reg_6301 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_3_reg_6307 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_3_fu_3912_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_3_reg_6312 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_3_fu_3916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_3_reg_6317 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_20_fu_4050_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_20_reg_6325 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state12_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state26_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal trunc_ln575_3_fu_4063_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln575_3_reg_6332 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln585_3_fu_4103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_3_reg_6337 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_3_fu_4125_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln586_3_reg_6342 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln591_4_fu_4139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_4_reg_6347 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_3_fu_4167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_3_reg_6352 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_18_fu_4191_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_18_reg_6357 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln571_13_fu_4198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_13_reg_6362 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_15_fu_4209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_15_reg_6367 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln935_fu_4323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_6382 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal p_Result_180_fu_4329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_180_reg_6387 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_32_fu_4343_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_32_reg_6392 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln954_fu_4471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_reg_6398 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_fu_4483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln955_reg_6403 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln954_fu_4497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln954_reg_6408 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln954_fu_4503_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_reg_6413 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_4511_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_6418 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln935_3_fu_4515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_3_reg_6423 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_184_fu_4521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_184_reg_6428 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_33_fu_4535_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_33_reg_6433 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln954_3_fu_4663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_3_reg_6439 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_3_fu_4675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln955_3_reg_6444 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln954_3_fu_4689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln954_3_reg_6449 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln954_8_fu_4695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_8_reg_6454 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_3_fu_4703_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_3_reg_6459 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln935_fu_4807_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_6464 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal select_ln935_3_fu_4915_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_3_reg_6469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state13_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state27_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal sample_period_samples_0_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_sample_V_ce0 : STD_LOGIC;
    signal mag_samples_sample_V_we0 : STD_LOGIC;
    signal mag_samples_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_sample_V_ce1 : STD_LOGIC;
    signal mag_samples_sample_V_we1 : STD_LOGIC;
    signal mag_samples_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_V_ce0 : STD_LOGIC;
    signal x_V_we0 : STD_LOGIC;
    signal x_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_V_ce1 : STD_LOGIC;
    signal x_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_done : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_idle : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_ready : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_atan2_cordic_float_s_fu_3071_ap_start : STD_LOGIC;
    signal grp_atan2_cordic_float_s_fu_3071_ap_done : STD_LOGIC;
    signal grp_atan2_cordic_float_s_fu_3071_ap_idle : STD_LOGIC;
    signal grp_atan2_cordic_float_s_fu_3071_ap_ready : STD_LOGIC;
    signal grp_atan2_cordic_float_s_fu_3071_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_sincos_float_s_fu_3079_ap_start : STD_LOGIC;
    signal grp_generic_sincos_float_s_fu_3079_ap_done : STD_LOGIC;
    signal grp_generic_sincos_float_s_fu_3079_ap_idle : STD_LOGIC;
    signal grp_generic_sincos_float_s_fu_3079_ap_ready : STD_LOGIC;
    signal grp_generic_sincos_float_s_fu_3079_t_in : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_sincos_float_s_fu_3079_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_sincos_float_s_fu_3079_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_3001 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_phi_mux_j_phi_fu_3017_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_atan2_cordic_float_s_fu_3071_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_generic_sincos_float_s_fu_3079_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal idxprom_fu_3101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_fu_3245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln279_fu_3303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln280_fu_4025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln281_fu_4318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal select_ln571_17_fu_4012_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal select_ln571_21_fu_4305_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state11_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_3098_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln22_fu_3110_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln22_1_fu_3122_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_3138_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln22_fu_3142_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln22_1_fu_3148_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_3_fu_3152_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_idx_fu_3158_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_5_fu_3163_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_122_fu_3174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_3182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_3168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_idx_6_fu_3188_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_idx_7_fu_3196_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast_fu_3261_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln266_fu_3271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln279_fu_3285_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_3289_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln268_1_fu_3281_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_3311_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal r_V_fu_3311_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal tmp_124_fu_3327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_fu_3317_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_fu_3335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_29_fu_3358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_173_fu_3369_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_3379_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_7_fu_3387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_7_fu_3397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_126_fu_3403_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_4_fu_3419_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln947_4_fu_3423_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln947_4_fu_3429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln949_4_fu_3439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln947_4_fu_3433_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln949_4_fu_3443_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln949_6_fu_3449_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln949_11_fu_3455_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_fu_3467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_174_fu_3481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_4_fu_3475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_4_fu_3413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_4_fu_3461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_4_fu_3501_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_9_fu_3495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_4_fu_3521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_4_fu_3526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln954_4_fu_3535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_4_fu_3540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln954_4_fu_3544_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln955_4_fu_3530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_44_fu_3549_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_4_fu_3556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_45_fu_3559_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_48_fu_3565_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_164_fu_3579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_4_fu_3595_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_4_fu_3587_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_4_fu_3600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_4_fu_3575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_3606_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_175_fu_3613_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_12_fu_3625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_3_fu_3629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_3098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_3658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_fu_3674_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_3688_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_177_fu_3692_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_3700_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_15_fu_3704_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln555_fu_3662_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_fu_3684_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_3724_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_3734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_3740_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_3746_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_3752_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_130_fu_3776_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln583_fu_3766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln604_fu_3796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln571_fu_3718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_3760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_3812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_3824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_3830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_3842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_3786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_3848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_3800_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln603_fu_3854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_fu_3818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_11_fu_3874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ireg_3_fu_3886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln555_3_fu_3890_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln586_fu_3925_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln702_fu_3933_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_131_fu_3936_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ashr_ln586_fu_3928_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln588_cast_fu_3944_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln585_fu_3952_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal add_ln591_fu_3963_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln591_fu_3968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_168_fu_3972_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_fu_3979_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln591_fu_3959_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln415_18_fu_3985_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal add_ln415_fu_3989_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln585_fu_3922_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal select_ln571_15_fu_3995_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln571_fu_4002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_16_fu_4006_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln280_fu_4020_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_179_fu_4033_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_3_fu_4040_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_19_fu_4044_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln455_3_fu_4030_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_3_fu_4057_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_4_fu_4067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_5_fu_4073_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_3_fu_4079_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_3_fu_4085_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_133_fu_4109_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln583_3_fu_4099_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln604_3_fu_4129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln582_3_fu_4093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_3_fu_4145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_3_fu_4156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_3_fu_4161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_3_fu_4173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_3_fu_4119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_3_fu_4179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_2_fu_4133_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln603_3_fu_4185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_3_fu_4150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_14_fu_4203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln586_5_fu_4218_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln702_4_fu_4226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_fu_4229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ashr_ln586_3_fu_4221_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln588_3_cast_fu_4237_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln585_2_fu_4245_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal add_ln591_4_fu_4256_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln591_4_fu_4261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_171_fu_4265_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_3_fu_4272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln591_2_fu_4252_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln415_19_fu_4278_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal add_ln415_18_fu_4282_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln585_2_fu_4215_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal select_ln571_19_fu_4288_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln571_3_fu_4295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_20_fu_4299_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln281_fu_4313_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_fu_4337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_181_fu_4351_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_4361_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_4369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_4373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_4379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_fu_4385_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_4401_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln947_fu_4405_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln947_fu_4411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln949_fu_4421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln947_fu_4415_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln949_fu_4425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln949_5_fu_4431_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln949_fu_4437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_fu_4449_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_182_fu_4463_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_4457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_fu_4395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_4443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_fu_4489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_7_fu_4477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_27_fu_4529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_185_fu_4543_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_4553_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_6_fu_4561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_3_fu_4565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_6_fu_4571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_fu_4577_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_3_fu_4593_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln947_3_fu_4597_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln947_3_fu_4603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln949_3_fu_4613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln947_3_fu_4607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln949_3_fu_4617_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln949_fu_4623_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln949_10_fu_4629_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_fu_4641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_186_fu_4655_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_3_fu_4649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_3_fu_4587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_3_fu_4635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_3_fu_4681_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_8_fu_4669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln955_fu_4707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln954_fu_4715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln954_fu_4718_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln955_fu_4710_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_4723_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_4730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_38_fu_4733_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_49_fu_4739_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_4753_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_4769_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_fu_4761_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_4774_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_4749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_4780_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_183_fu_4787_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_4799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_fu_4803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_3_fu_4815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln954_3_fu_4823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln954_3_fu_4826_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln955_3_fu_4818_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_41_fu_4831_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_3_fu_4838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_42_fu_4841_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_50_fu_4847_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_160_fu_4861_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_3_fu_4877_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_3_fu_4869_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_3_fu_4882_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_3_fu_4857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_4888_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_187_fu_4895_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_11_fu_4907_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_4_fu_4911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_3098_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_computeLeastSquaresSolution_160_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (54 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_we0 : OUT STD_LOGIC;
        x_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        sigma_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        sigma_V_ce0 : OUT STD_LOGIC;
        sigma_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sigma_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        sigma_V_ce1 : OUT STD_LOGIC;
        sigma_V_we1 : OUT STD_LOGIC;
        sigma_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matU_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        matU_V_ce0 : OUT STD_LOGIC;
        matU_V_we0 : OUT STD_LOGIC;
        matU_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matU_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_i_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_V_0_ce0 : OUT STD_LOGIC;
        A_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_i_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_V_0_ce1 : OUT STD_LOGIC;
        A_i_V_0_we1 : OUT STD_LOGIC;
        A_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_i_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_V_1_ce0 : OUT STD_LOGIC;
        A_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_i_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_V_1_ce1 : OUT STD_LOGIC;
        A_i_V_1_we1 : OUT STD_LOGIC;
        A_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_j_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_V_0_ce0 : OUT STD_LOGIC;
        A_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_j_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_V_0_ce1 : OUT STD_LOGIC;
        A_j_V_0_we1 : OUT STD_LOGIC;
        A_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_j_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_V_1_ce0 : OUT STD_LOGIC;
        A_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_j_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_V_1_ce1 : OUT STD_LOGIC;
        A_j_V_1_we1 : OUT STD_LOGIC;
        A_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_V_0_ce0 : OUT STD_LOGIC;
        matA_V_0_we0 : OUT STD_LOGIC;
        matA_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        matA_V_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_V_0_ce1 : OUT STD_LOGIC;
        matA_V_0_we1 : OUT STD_LOGIC;
        matA_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        matA_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_V_1_ce0 : OUT STD_LOGIC;
        matA_V_1_we0 : OUT STD_LOGIC;
        matA_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        matA_V_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_V_1_ce1 : OUT STD_LOGIC;
        matA_V_1_we1 : OUT STD_LOGIC;
        matA_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_i_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_i_V_0_ce0 : OUT STD_LOGIC;
        V_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_i_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_i_V_0_ce1 : OUT STD_LOGIC;
        V_i_V_0_we1 : OUT STD_LOGIC;
        V_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        V_i_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_i_V_1_ce0 : OUT STD_LOGIC;
        V_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_i_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_i_V_1_ce1 : OUT STD_LOGIC;
        V_i_V_1_we1 : OUT STD_LOGIC;
        V_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        V_j_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_j_V_0_ce0 : OUT STD_LOGIC;
        V_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_j_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_j_V_0_ce1 : OUT STD_LOGIC;
        V_j_V_0_we1 : OUT STD_LOGIC;
        V_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        V_j_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_j_V_1_ce0 : OUT STD_LOGIC;
        V_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_j_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_j_V_1_ce1 : OUT STD_LOGIC;
        V_j_V_1_we1 : OUT STD_LOGIC;
        V_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        matV_V_0_ce0 : OUT STD_LOGIC;
        matV_V_0_we0 : OUT STD_LOGIC;
        matV_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        matV_V_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        matV_V_0_ce1 : OUT STD_LOGIC;
        matV_V_0_we1 : OUT STD_LOGIC;
        matV_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        matV_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        matV_V_1_ce0 : OUT STD_LOGIC;
        matV_V_1_we0 : OUT STD_LOGIC;
        matV_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        matV_V_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        matV_V_1_ce1 : OUT STD_LOGIC;
        matV_V_1_we1 : OUT STD_LOGIC;
        matV_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        U_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        U_V_ce0 : OUT STD_LOGIC;
        U_V_we0 : OUT STD_LOGIC;
        U_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        U_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        U_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        U_V_ce1 : OUT STD_LOGIC;
        U_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        S_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        S_V_ce0 : OUT STD_LOGIC;
        S_V_we0 : OUT STD_LOGIC;
        S_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        S_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V_V_ce0 : OUT STD_LOGIC;
        V_V_we0 : OUT STD_LOGIC;
        V_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        V_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V_V_ce1 : OUT STD_LOGIC;
        V_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        UT_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        UT_V_ce0 : OUT STD_LOGIC;
        UT_V_we0 : OUT STD_LOGIC;
        UT_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        UT_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_pinv_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        A_pinv_V_ce0 : OUT STD_LOGIC;
        A_pinv_V_we0 : OUT STD_LOGIC;
        A_pinv_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_pinv_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_atan2_cordic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_in : IN STD_LOGIC_VECTOR (31 downto 0);
        x_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LLSSineReconstruction_generic_sincos_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LLSSineReconstruction_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_mul_64s_53ns_107_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        dout : OUT STD_LOGIC_VECTOR (106 downto 0) );
    end component;


    component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_loadData_mag_samples_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_computeFirstChannel_x_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    sample_period_samples_0_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_0_sample_V_address0,
        ce0 => sample_period_samples_0_sample_V_ce0,
        we0 => sample_period_samples_0_sample_V_we0,
        d0 => sample_period_samples_0_sample_V_d0,
        q0 => sample_period_samples_0_sample_V_q0,
        address1 => sample_period_samples_0_sample_V_address1,
        ce1 => sample_period_samples_0_sample_V_ce1,
        we1 => sample_period_samples_0_sample_V_we1,
        d1 => sample_period_samples_0_sample_V_d1);

    sample_period_samples_1_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_1_sample_V_address0,
        ce0 => sample_period_samples_1_sample_V_ce0,
        we0 => sample_period_samples_1_sample_V_we0,
        d0 => sample_period_samples_1_sample_V_d0,
        q0 => sample_period_samples_1_sample_V_q0,
        address1 => sample_period_samples_1_sample_V_address1,
        ce1 => sample_period_samples_1_sample_V_ce1,
        we1 => sample_period_samples_1_sample_V_we1,
        d1 => sample_period_samples_1_sample_V_d1);

    sample_period_samples_2_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_2_sample_V_address0,
        ce0 => sample_period_samples_2_sample_V_ce0,
        we0 => sample_period_samples_2_sample_V_we0,
        d0 => sample_period_samples_2_sample_V_d0,
        q0 => sample_period_samples_2_sample_V_q0,
        address1 => sample_period_samples_2_sample_V_address1,
        ce1 => sample_period_samples_2_sample_V_ce1,
        we1 => sample_period_samples_2_sample_V_we1,
        d1 => sample_period_samples_2_sample_V_d1);

    sample_period_samples_3_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_3_sample_V_address0,
        ce0 => sample_period_samples_3_sample_V_ce0,
        we0 => sample_period_samples_3_sample_V_we0,
        d0 => sample_period_samples_3_sample_V_d0,
        q0 => sample_period_samples_3_sample_V_q0,
        address1 => sample_period_samples_3_sample_V_address1,
        ce1 => sample_period_samples_3_sample_V_ce1,
        we1 => sample_period_samples_3_sample_V_we1,
        d1 => sample_period_samples_3_sample_V_d1);

    sample_period_samples_4_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_4_sample_V_address0,
        ce0 => sample_period_samples_4_sample_V_ce0,
        we0 => sample_period_samples_4_sample_V_we0,
        d0 => sample_period_samples_4_sample_V_d0,
        q0 => sample_period_samples_4_sample_V_q0,
        address1 => sample_period_samples_4_sample_V_address1,
        ce1 => sample_period_samples_4_sample_V_ce1,
        we1 => sample_period_samples_4_sample_V_we1,
        d1 => sample_period_samples_4_sample_V_d1);

    sample_period_samples_5_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_5_sample_V_address0,
        ce0 => sample_period_samples_5_sample_V_ce0,
        we0 => sample_period_samples_5_sample_V_we0,
        d0 => sample_period_samples_5_sample_V_d0,
        q0 => sample_period_samples_5_sample_V_q0,
        address1 => sample_period_samples_5_sample_V_address1,
        ce1 => sample_period_samples_5_sample_V_ce1,
        we1 => sample_period_samples_5_sample_V_we1,
        d1 => sample_period_samples_5_sample_V_d1);

    sample_period_samples_6_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_6_sample_V_address0,
        ce0 => sample_period_samples_6_sample_V_ce0,
        we0 => sample_period_samples_6_sample_V_we0,
        d0 => sample_period_samples_6_sample_V_d0,
        q0 => sample_period_samples_6_sample_V_q0,
        address1 => sample_period_samples_6_sample_V_address1,
        ce1 => sample_period_samples_6_sample_V_ce1,
        we1 => sample_period_samples_6_sample_V_we1,
        d1 => sample_period_samples_6_sample_V_d1);

    sample_period_samples_7_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_7_sample_V_address0,
        ce0 => sample_period_samples_7_sample_V_ce0,
        we0 => sample_period_samples_7_sample_V_we0,
        d0 => sample_period_samples_7_sample_V_d0,
        q0 => sample_period_samples_7_sample_V_q0,
        address1 => sample_period_samples_7_sample_V_address1,
        ce1 => sample_period_samples_7_sample_V_ce1,
        we1 => sample_period_samples_7_sample_V_we1,
        d1 => sample_period_samples_7_sample_V_d1);

    sample_period_samples_8_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_8_sample_V_address0,
        ce0 => sample_period_samples_8_sample_V_ce0,
        we0 => sample_period_samples_8_sample_V_we0,
        d0 => sample_period_samples_8_sample_V_d0,
        q0 => sample_period_samples_8_sample_V_q0,
        address1 => sample_period_samples_8_sample_V_address1,
        ce1 => sample_period_samples_8_sample_V_ce1,
        we1 => sample_period_samples_8_sample_V_we1,
        d1 => sample_period_samples_8_sample_V_d1);

    sample_period_samples_9_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_9_sample_V_address0,
        ce0 => sample_period_samples_9_sample_V_ce0,
        we0 => sample_period_samples_9_sample_V_we0,
        d0 => sample_period_samples_9_sample_V_d0,
        q0 => sample_period_samples_9_sample_V_q0,
        address1 => sample_period_samples_9_sample_V_address1,
        ce1 => sample_period_samples_9_sample_V_ce1,
        we1 => sample_period_samples_9_sample_V_we1,
        d1 => sample_period_samples_9_sample_V_d1);

    sample_period_samples_10_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_10_sample_V_address0,
        ce0 => sample_period_samples_10_sample_V_ce0,
        we0 => sample_period_samples_10_sample_V_we0,
        d0 => sample_period_samples_10_sample_V_d0,
        q0 => sample_period_samples_10_sample_V_q0,
        address1 => sample_period_samples_10_sample_V_address1,
        ce1 => sample_period_samples_10_sample_V_ce1,
        we1 => sample_period_samples_10_sample_V_we1,
        d1 => sample_period_samples_10_sample_V_d1);

    sample_period_samples_11_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_11_sample_V_address0,
        ce0 => sample_period_samples_11_sample_V_ce0,
        we0 => sample_period_samples_11_sample_V_we0,
        d0 => sample_period_samples_11_sample_V_d0,
        q0 => sample_period_samples_11_sample_V_q0,
        address1 => sample_period_samples_11_sample_V_address1,
        ce1 => sample_period_samples_11_sample_V_ce1,
        we1 => sample_period_samples_11_sample_V_we1,
        d1 => sample_period_samples_11_sample_V_d1);

    mag_samples_sample_V_U : component LLSSineReconstruction_loadData_mag_samples_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mag_samples_sample_V_address0,
        ce0 => mag_samples_sample_V_ce0,
        we0 => mag_samples_sample_V_we0,
        d0 => mag_samples_sample_V_d0,
        q0 => mag_samples_sample_V_q0,
        address1 => mag_samples_sample_V_address1,
        ce1 => mag_samples_sample_V_ce1,
        we1 => mag_samples_sample_V_we1,
        d1 => mag_samples_sample_V_d1);

    x_V_U : component LLSSineReconstruction_computeFirstChannel_x_V
    generic map (
        DataWidth => 64,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_V_address0,
        ce0 => x_V_ce0,
        we0 => x_V_we0,
        d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_d0,
        q0 => x_V_q0,
        address1 => x_V_address1,
        ce1 => x_V_ce1,
        q1 => x_V_q1);

    grp_computeLeastSquaresSolution_160_3_s_fu_3024 : component LLSSineReconstruction_computeLeastSquaresSolution_160_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start,
        ap_done => grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_done,
        ap_idle => grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_idle,
        ap_ready => grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_ready,
        A_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_address0,
        A_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_ce0,
        A_q0 => this_A_q0,
        b_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_address0,
        b_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_ce0,
        b_q0 => this_b_q0,
        x_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_address0,
        x_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_ce0,
        x_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_we0,
        x_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_d0,
        sigma_V_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address0,
        sigma_V_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce0,
        sigma_V_q0 => sigma_V_q0,
        sigma_V_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address1,
        sigma_V_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce1,
        sigma_V_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_we1,
        sigma_V_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_d1,
        matU_V_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_address0,
        matU_V_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_ce0,
        matU_V_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_we0,
        matU_V_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_d0,
        matU_V_q0 => matU_V_q0,
        A_i_V_0_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address0,
        A_i_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce0,
        A_i_V_0_q0 => A_i_V_0_q0,
        A_i_V_0_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address1,
        A_i_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce1,
        A_i_V_0_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_we1,
        A_i_V_0_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_d1,
        A_i_V_1_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address0,
        A_i_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce0,
        A_i_V_1_q0 => A_i_V_1_q0,
        A_i_V_1_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address1,
        A_i_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce1,
        A_i_V_1_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_we1,
        A_i_V_1_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_d1,
        A_j_V_0_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address0,
        A_j_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce0,
        A_j_V_0_q0 => A_j_V_0_q0,
        A_j_V_0_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address1,
        A_j_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce1,
        A_j_V_0_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_we1,
        A_j_V_0_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_d1,
        A_j_V_1_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address0,
        A_j_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce0,
        A_j_V_1_q0 => A_j_V_1_q0,
        A_j_V_1_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address1,
        A_j_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce1,
        A_j_V_1_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_we1,
        A_j_V_1_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_d1,
        matA_V_0_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address0,
        matA_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce0,
        matA_V_0_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we0,
        matA_V_0_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d0,
        matA_V_0_q0 => matA_V_0_q0,
        matA_V_0_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address1,
        matA_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce1,
        matA_V_0_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we1,
        matA_V_0_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d1,
        matA_V_0_q1 => matA_V_0_q1,
        matA_V_1_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address0,
        matA_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce0,
        matA_V_1_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we0,
        matA_V_1_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d0,
        matA_V_1_q0 => matA_V_1_q0,
        matA_V_1_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address1,
        matA_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce1,
        matA_V_1_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we1,
        matA_V_1_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d1,
        matA_V_1_q1 => matA_V_1_q1,
        V_i_V_0_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address0,
        V_i_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce0,
        V_i_V_0_q0 => V_i_V_0_q0,
        V_i_V_0_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address1,
        V_i_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce1,
        V_i_V_0_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_we1,
        V_i_V_0_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_d1,
        V_i_V_1_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address0,
        V_i_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce0,
        V_i_V_1_q0 => V_i_V_1_q0,
        V_i_V_1_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address1,
        V_i_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce1,
        V_i_V_1_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_we1,
        V_i_V_1_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_d1,
        V_j_V_0_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address0,
        V_j_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce0,
        V_j_V_0_q0 => V_j_V_0_q0,
        V_j_V_0_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address1,
        V_j_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce1,
        V_j_V_0_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_we1,
        V_j_V_0_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_d1,
        V_j_V_1_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address0,
        V_j_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce0,
        V_j_V_1_q0 => V_j_V_1_q0,
        V_j_V_1_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address1,
        V_j_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce1,
        V_j_V_1_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_we1,
        V_j_V_1_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_d1,
        matV_V_0_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address0,
        matV_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce0,
        matV_V_0_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we0,
        matV_V_0_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d0,
        matV_V_0_q0 => matV_V_0_q0,
        matV_V_0_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address1,
        matV_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce1,
        matV_V_0_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we1,
        matV_V_0_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d1,
        matV_V_0_q1 => matV_V_0_q1,
        matV_V_1_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address0,
        matV_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce0,
        matV_V_1_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we0,
        matV_V_1_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d0,
        matV_V_1_q0 => matV_V_1_q0,
        matV_V_1_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address1,
        matV_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce1,
        matV_V_1_we1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we1,
        matV_V_1_d1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d1,
        matV_V_1_q1 => matV_V_1_q1,
        U_V_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address0,
        U_V_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce0,
        U_V_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_we0,
        U_V_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_d0,
        U_V_q0 => U_V_q0,
        U_V_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address1,
        U_V_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce1,
        U_V_q1 => U_V_q1,
        S_V_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_address0,
        S_V_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_ce0,
        S_V_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_we0,
        S_V_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_d0,
        S_V_q0 => S_V_q0,
        V_V_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address0,
        V_V_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce0,
        V_V_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_we0,
        V_V_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_d0,
        V_V_q0 => V_V_q0,
        V_V_address1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address1,
        V_V_ce1 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce1,
        V_V_q1 => V_V_q1,
        UT_V_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_address0,
        UT_V_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_ce0,
        UT_V_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_we0,
        UT_V_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_d0,
        UT_V_q0 => UT_V_q0,
        A_pinv_V_address0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_address0,
        A_pinv_V_ce0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_ce0,
        A_pinv_V_we0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_we0,
        A_pinv_V_d0 => grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_d0,
        A_pinv_V_q0 => A_pinv_V_q0);

    grp_atan2_cordic_float_s_fu_3071 : component LLSSineReconstruction_atan2_cordic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_atan2_cordic_float_s_fu_3071_ap_start,
        ap_done => grp_atan2_cordic_float_s_fu_3071_ap_done,
        ap_idle => grp_atan2_cordic_float_s_fu_3071_ap_idle,
        ap_ready => grp_atan2_cordic_float_s_fu_3071_ap_ready,
        y_in => select_ln935_reg_6464,
        x_in => select_ln935_3_reg_6469,
        ap_return => grp_atan2_cordic_float_s_fu_3071_ap_return);

    grp_generic_sincos_float_s_fu_3079 : component LLSSineReconstruction_generic_sincos_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_sincos_float_s_fu_3079_ap_start,
        ap_done => grp_generic_sincos_float_s_fu_3079_ap_done,
        ap_idle => grp_generic_sincos_float_s_fu_3079_ap_idle,
        ap_ready => grp_generic_sincos_float_s_fu_3079_ap_ready,
        t_in => grp_generic_sincos_float_s_fu_3079_t_in,
        ap_return_0 => grp_generic_sincos_float_s_fu_3079_ap_return_0,
        ap_return_1 => grp_generic_sincos_float_s_fu_3079_ap_return_1);

    mul_64s_53ns_107_1_1_U721 : component LLSSineReconstruction_mul_64s_53ns_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 53,
        dout_WIDTH => 107)
    port map (
        din0 => time_V_reg_6187,
        din1 => r_V_fu_3311_p1,
        dout => r_V_fu_3311_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_atan2_cordic_float_s_fu_3071_ap_done = ap_const_logic_1))) then 
                    ap_return_preg <= grp_atan2_cordic_float_s_fu_3071_ap_return;
                end if; 
            end if;
        end if;
    end process;


    grp_atan2_cordic_float_s_fu_3071_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_atan2_cordic_float_s_fu_3071_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    grp_atan2_cordic_float_s_fu_3071_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_atan2_cordic_float_s_fu_3071_ap_ready = ap_const_logic_1)) then 
                    grp_atan2_cordic_float_s_fu_3071_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln257_fu_3132_p2 = ap_const_lv1_1))) then 
                    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_ready = ap_const_logic_1)) then 
                    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_sincos_float_s_fu_3079_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_sincos_float_s_fu_3079_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    grp_generic_sincos_float_s_fu_3079_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_sincos_float_s_fu_3079_ap_ready = ap_const_logic_1)) then 
                    grp_generic_sincos_float_s_fu_3079_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_3001_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_reg_3001 <= add_ln257_reg_5483;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_3001 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_3013_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_3013 <= add_ln263_reg_6052;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_3013 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln257_reg_5483 <= add_ln257_fu_3126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln263_reg_6052 <= add_ln263_fu_3239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                add_ln954_3_reg_6449 <= add_ln954_3_fu_4689_p2;
                add_ln954_reg_6408 <= add_ln954_fu_4497_p2;
                icmp_ln935_3_reg_6423 <= icmp_ln935_3_fu_4515_p2;
                icmp_ln935_reg_6382 <= icmp_ln935_fu_4323_p2;
                icmp_ln954_3_reg_6439 <= icmp_ln954_3_fu_4663_p2;
                icmp_ln954_reg_6398 <= icmp_ln954_fu_4471_p2;
                p_Result_180_reg_6387 <= x_V_q1(63 downto 63);
                p_Result_184_reg_6428 <= x_V_q0(63 downto 63);
                select_ln954_8_reg_6454 <= select_ln954_8_fu_4695_p3;
                select_ln954_reg_6413 <= select_ln954_fu_4503_p3;
                sub_ln955_3_reg_6444 <= sub_ln955_3_fu_4675_p2;
                sub_ln955_reg_6403 <= sub_ln955_fu_4483_p2;
                tmp_V_32_reg_6392 <= tmp_V_32_fu_4343_p3;
                tmp_V_33_reg_6433 <= tmp_V_33_fu_4535_p3;
                trunc_ln943_3_reg_6459 <= trunc_ln943_3_fu_4703_p1;
                trunc_ln943_reg_6418 <= trunc_ln943_fu_4511_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln263_reg_6057_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                and_ln581_3_reg_6352 <= and_ln581_3_fu_4167_p2;
                icmp_ln585_3_reg_6337 <= icmp_ln585_3_fu_4103_p2;
                icmp_ln591_4_reg_6347 <= icmp_ln591_4_fu_4139_p2;
                man_V_20_reg_6325 <= man_V_20_fu_4050_p3;
                or_ln571_13_reg_6362 <= or_ln571_13_fu_4198_p2;
                or_ln571_15_reg_6367 <= or_ln571_15_fu_4209_p2;
                select_ln571_18_reg_6357 <= select_ln571_18_fu_4191_p3;
                trunc_ln575_3_reg_6332 <= trunc_ln575_3_fu_4063_p1;
                trunc_ln586_3_reg_6342 <= trunc_ln586_3_fu_4125_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln263_reg_6057_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                and_ln581_reg_6281 <= and_ln581_fu_3836_p2;
                icmp_ln585_reg_6266 <= icmp_ln585_fu_3770_p2;
                icmp_ln591_reg_6276 <= icmp_ln591_fu_3806_p2;
                man_V_reg_6254 <= man_V_fu_3710_p3;
                or_ln571_12_reg_6296 <= or_ln571_12_fu_3880_p2;
                or_ln571_reg_6291 <= or_ln571_fu_3868_p2;
                p_Result_176_reg_6249 <= ireg_fu_3658_p1(63 downto 63);
                select_ln571_reg_6286 <= select_ln571_fu_3860_p3;
                trunc_ln575_reg_6261 <= trunc_ln575_fu_3730_p1;
                trunc_ln586_reg_6271 <= trunc_ln586_fu_3792_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                angle_4_reg_6192 <= angle_4_fu_3339_p2;
                p_Result_172_reg_6199 <= angle_4_fu_3339_p2(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln263_reg_6057_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cos_val_reg_6243 <= grp_generic_sincos_float_s_fu_3079_ap_return_1;
                sin_val_reg_6237 <= grp_generic_sincos_float_s_fu_3079_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln263_reg_6057_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                exp_tmp_3_reg_6307 <= ireg_3_fu_3886_p1(62 downto 52);
                icmp_ln571_3_reg_6317 <= icmp_ln571_3_fu_3916_p2;
                p_Result_178_reg_6301 <= ireg_3_fu_3886_p1(63 downto 63);
                trunc_ln565_3_reg_6312 <= trunc_ln565_3_fu_3912_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln263_reg_6057 <= icmp_ln263_fu_3265_p2;
                icmp_ln263_reg_6057_pp0_iter1_reg <= icmp_ln263_reg_6057;
                icmp_ln263_reg_6057_pp0_iter2_reg <= icmp_ln263_reg_6057_pp0_iter1_reg;
                sub_ln279_reg_6131_pp0_iter1_reg <= sub_ln279_reg_6131;
                sub_ln279_reg_6131_pp0_iter2_reg <= sub_ln279_reg_6131_pp0_iter1_reg;
                    zext_ln268_reg_6061_pp0_iter1_reg(7 downto 0) <= zext_ln268_reg_6061(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                icmp_ln935_4_reg_6205 <= icmp_ln935_4_fu_3353_p2;
                icmp_ln954_4_reg_6222 <= icmp_ln954_4_fu_3489_p2;
                select_ln954_10_reg_6227 <= select_ln954_10_fu_3509_p3;
                sub_ln944_4_reg_6216 <= sub_ln944_4_fu_3391_p2;
                tmp_V_31_reg_6210 <= tmp_V_31_fu_3363_p3;
                trunc_ln943_4_reg_6232 <= trunc_ln943_4_fu_3517_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mag_samples_sample_V_addr_36_reg_5463 <= idxprom_fu_3101_p1(4 - 1 downto 0);
                sext_ln22_reg_5468 <= sext_ln22_fu_3110_p1;
                trunc_ln22_1_reg_5478 <= trunc_ln22_1_fu_3122_p1;
                trunc_ln22_reg_5473 <= trunc_ln22_fu_3118_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                sample_period_samples_10_sample_V_load_reg_6177 <= sample_period_samples_10_sample_V_q0;
                sample_period_samples_11_sample_V_load_reg_6182 <= sample_period_samples_11_sample_V_q0;
                sample_period_samples_2_sample_V_load_reg_6137 <= sample_period_samples_2_sample_V_q0;
                sample_period_samples_3_sample_V_load_reg_6142 <= sample_period_samples_3_sample_V_q0;
                sample_period_samples_4_sample_V_load_reg_6147 <= sample_period_samples_4_sample_V_q0;
                sample_period_samples_5_sample_V_load_reg_6152 <= sample_period_samples_5_sample_V_q0;
                sample_period_samples_6_sample_V_load_reg_6157 <= sample_period_samples_6_sample_V_q0;
                sample_period_samples_7_sample_V_load_reg_6162 <= sample_period_samples_7_sample_V_q0;
                sample_period_samples_8_sample_V_load_reg_6167 <= sample_period_samples_8_sample_V_q0;
                sample_period_samples_9_sample_V_load_reg_6172 <= sample_period_samples_9_sample_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                select_ln935_3_reg_6469 <= select_ln935_3_fu_4915_p3;
                select_ln935_reg_6464 <= select_ln935_fu_4807_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln263_fu_3265_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln279_reg_6131 <= sub_ln279_fu_3297_p2;
                    zext_ln268_reg_6061(7 downto 0) <= zext_ln268_fu_3276_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                time_V_reg_6187 <= this_times_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp_20_reg_6047(7 downto 3) <= tmp_20_fu_3231_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln257_fu_3132_p2 = ap_const_lv1_0))) then
                    zext_ln34_reg_5491(4 downto 0) <= zext_ln34_fu_3203_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln34_reg_5491(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_20_reg_6047(2 downto 0) <= "000";
    zext_ln268_reg_6061(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln268_reg_6061_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln257_fu_3132_p2, ap_enable_reg_pp0_iter0, icmp_ln263_fu_3265_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage6_subdone, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter2, grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_done, grp_atan2_cordic_float_s_fu_3071_ap_done, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln257_fu_3132_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln263_fu_3265_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln263_fu_3265_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_atan2_cordic_float_s_fu_3071_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_i_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address0;
    A_i_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address1;
    A_i_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce0;
    A_i_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce1;
    A_i_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_d1;
    A_i_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_we1;
    A_i_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address0;
    A_i_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address1;
    A_i_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce0;
    A_i_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce1;
    A_i_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_d1;
    A_i_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_we1;
    A_j_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address0;
    A_j_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address1;
    A_j_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce0;
    A_j_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce1;
    A_j_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_d1;
    A_j_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_we1;
    A_j_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address0;
    A_j_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address1;
    A_j_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce0;
    A_j_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce1;
    A_j_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_d1;
    A_j_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_we1;
    A_pinv_V_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_address0;
    A_pinv_V_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_ce0;
    A_pinv_V_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_d0;
    A_pinv_V_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_we0;
    F2_3_fu_4057_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_3_fu_4030_p1));
    F2_fu_3724_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_3684_p1));
    LD_11_fu_4907_p1 <= p_Result_187_fu_4895_p5(32 - 1 downto 0);
    LD_12_fu_3625_p1 <= p_Result_175_fu_3613_p5(32 - 1 downto 0);
    LD_fu_4799_p1 <= p_Result_183_fu_4787_p5(32 - 1 downto 0);
    S_V_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_address0;
    S_V_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_ce0;
    S_V_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_d0;
    S_V_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_we0;
    UT_V_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_address0;
    UT_V_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_ce0;
    UT_V_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_d0;
    UT_V_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_we0;
    U_V_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address0;
    U_V_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address1;
    U_V_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce0;
    U_V_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce1;
    U_V_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_d0;
    U_V_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_we0;
    V_V_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address0;
    V_V_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address1;
    V_V_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce0;
    V_V_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce1;
    V_V_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_d0;
    V_V_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_we0;
    V_i_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address0;
    V_i_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address1;
    V_i_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce0;
    V_i_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce1;
    V_i_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_d1;
    V_i_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_we1;
    V_i_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address0;
    V_i_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address1;
    V_i_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce0;
    V_i_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce1;
    V_i_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_d1;
    V_i_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_we1;
    V_j_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address0;
    V_j_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address1;
    V_j_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce0;
    V_j_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce1;
    V_j_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_d1;
    V_j_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_we1;
    V_j_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address0;
    V_j_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address1;
    V_j_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce0;
    V_j_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce1;
    V_j_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_d1;
    V_j_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_we1;
    add_ln22_3_fu_3152_p2 <= std_logic_vector(unsigned(i_reg_3001) + unsigned(ap_const_lv5_D));
    add_ln22_5_fu_3163_p2 <= std_logic_vector(unsigned(add_ln22_3_fu_3152_p2) + unsigned(trunc_ln22_1_reg_5478));
    add_ln22_fu_3142_p2 <= std_logic_vector(unsigned(zext_ln22_fu_3138_p1) + unsigned(ap_const_lv6_2D));
    add_ln257_fu_3126_p2 <= std_logic_vector(unsigned(i_reg_3001) + unsigned(ap_const_lv5_1));
    add_ln263_fu_3239_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_3017_p4) + unsigned(ap_const_lv4_1));
    add_ln266_fu_3271_p2 <= std_logic_vector(unsigned(tmp_20_reg_6047) + unsigned(j_cast_fu_3261_p1));
    add_ln280_fu_4020_p2 <= std_logic_vector(unsigned(sub_ln279_reg_6131_pp0_iter2_reg) + unsigned(ap_const_lv9_1));
    add_ln281_fu_4313_p2 <= std_logic_vector(unsigned(sub_ln279_reg_6131_pp0_iter2_reg) + unsigned(ap_const_lv9_2));
    add_ln30_fu_3182_p2 <= std_logic_vector(unsigned(add_ln22_5_fu_3163_p2) + unsigned(ap_const_lv5_14));
    add_ln415_18_fu_4282_p2 <= std_logic_vector(signed(sext_ln591_2_fu_4252_p1) + signed(zext_ln415_19_fu_4278_p1));
    add_ln415_fu_3989_p2 <= std_logic_vector(signed(sext_ln591_fu_3959_p1) + signed(zext_ln415_18_fu_3985_p1));
    add_ln581_5_fu_4073_p2 <= std_logic_vector(unsigned(F2_3_fu_4057_p2) + unsigned(ap_const_lv12_FD5));
    add_ln581_fu_3740_p2 <= std_logic_vector(unsigned(F2_fu_3724_p2) + unsigned(ap_const_lv12_FD5));
    add_ln591_4_fu_4256_p2 <= std_logic_vector(unsigned(trunc_ln575_3_reg_6332) + unsigned(ap_const_lv11_7D4));
    add_ln591_fu_3963_p2 <= std_logic_vector(unsigned(trunc_ln575_reg_6261) + unsigned(ap_const_lv11_7D4));
    add_ln954_3_fu_4689_p2 <= std_logic_vector(unsigned(sub_ln944_3_fu_4565_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln954_4_fu_3535_p2 <= std_logic_vector(unsigned(sub_ln944_4_reg_6216) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln954_fu_4497_p2 <= std_logic_vector(unsigned(sub_ln944_fu_4373_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln964_3_fu_4882_p2 <= std_logic_vector(unsigned(sub_ln964_3_fu_4877_p2) + unsigned(select_ln943_3_fu_4869_p3));
    add_ln964_4_fu_3600_p2 <= std_logic_vector(unsigned(sub_ln964_4_fu_3595_p2) + unsigned(select_ln943_4_fu_3587_p3));
    add_ln964_fu_4774_p2 <= std_logic_vector(unsigned(sub_ln964_fu_4769_p2) + unsigned(select_ln943_fu_4761_p3));
    and_ln581_3_fu_4167_p2 <= (xor_ln582_3_fu_4161_p2 and icmp_ln581_4_fu_4067_p2);
    and_ln581_fu_3836_p2 <= (xor_ln582_fu_3830_p2 and icmp_ln581_fu_3734_p2);
    and_ln582_3_fu_4150_p2 <= (xor_ln571_3_fu_4145_p2 and icmp_ln582_3_fu_4093_p2);
    and_ln582_fu_3818_p2 <= (xor_ln571_fu_3812_p2 and icmp_ln582_fu_3760_p2);
    and_ln603_3_fu_4185_p2 <= (xor_ln581_3_fu_4179_p2 and icmp_ln603_3_fu_4119_p2);
    and_ln603_fu_3854_p2 <= (xor_ln581_fu_3848_p2 and icmp_ln603_fu_3786_p2);
    and_ln949_10_fu_4629_p2 <= (tmp_V_33_fu_4535_p3 and or_ln949_fu_4623_p2);
    and_ln949_11_fu_3455_p2 <= (tmp_V_31_fu_3363_p3 and or_ln949_6_fu_3449_p2);
    and_ln949_7_fu_4477_p2 <= (xor_ln949_fu_4457_p2 and p_Result_182_fu_4463_p3);
    and_ln949_8_fu_4669_p2 <= (xor_ln949_3_fu_4649_p2 and p_Result_186_fu_4655_p3);
    and_ln949_9_fu_3495_p2 <= (xor_ln949_4_fu_3475_p2 and p_Result_174_fu_3481_p3);
    and_ln949_fu_4437_p2 <= (tmp_V_32_fu_4343_p3 and or_ln949_5_fu_4431_p2);
    angle_4_fu_3339_p2 <= std_logic_vector(unsigned(angle_fu_3317_p4) + unsigned(zext_ln415_fu_3335_p1));
    angle_fu_3317_p4 <= r_V_fu_3311_p2(106 downto 43);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(13);
    ap_CS_fsm_state29 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(15);
    ap_CS_fsm_state31 <= ap_CS_fsm(16);
    ap_CS_fsm_state32 <= ap_CS_fsm(17);
    ap_CS_fsm_state33 <= ap_CS_fsm(18);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln263_fu_3265_p2)
    begin
        if ((icmp_ln263_fu_3265_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_atan2_cordic_float_s_fu_3071_ap_done, ap_CS_fsm_state33)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_atan2_cordic_float_s_fu_3071_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_3017_p4_assign_proc : process(j_reg_3013, add_ln263_reg_6052, ap_CS_fsm_pp0_stage0, icmp_ln263_reg_6057, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_3017_p4 <= add_ln263_reg_6052;
        else 
            ap_phi_mux_j_phi_fu_3017_p4 <= j_reg_3013;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_atan2_cordic_float_s_fu_3071_ap_done, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_atan2_cordic_float_s_fu_3071_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_atan2_cordic_float_s_fu_3071_ap_done, grp_atan2_cordic_float_s_fu_3071_ap_return, ap_CS_fsm_state33, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_atan2_cordic_float_s_fu_3071_ap_done = ap_const_logic_1))) then 
            ap_return <= grp_atan2_cordic_float_s_fu_3071_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    ashr_ln586_3_fu_4221_p2 <= std_logic_vector(shift_right(signed(man_V_20_reg_6325),to_integer(unsigned('0' & zext_ln586_5_fu_4218_p1(31-1 downto 0)))));
    ashr_ln586_fu_3928_p2 <= std_logic_vector(shift_right(signed(man_V_reg_6254),to_integer(unsigned('0' & zext_ln586_fu_3925_p1(31-1 downto 0)))));
    bitcast_ln702_4_fu_4226_p1 <= cos_val_reg_6243;
    bitcast_ln702_fu_3933_p1 <= sin_val_reg_6237;
    bitcast_ln744_3_fu_3629_p1 <= LD_12_fu_3625_p1;
    bitcast_ln744_4_fu_4911_p1 <= LD_11_fu_4907_p1;
    bitcast_ln744_fu_4803_p1 <= LD_fu_4799_p1;
    buffer_idx_6_fu_3188_p3 <= 
        add_ln30_fu_3182_p2 when (tmp_122_fu_3174_p3(0) = '1') else 
        add_ln22_5_fu_3163_p2;
    buffer_idx_7_fu_3196_p3 <= 
        trunc_ln22_reg_5473 when (icmp_ln24_fu_3168_p2(0) = '1') else 
        buffer_idx_6_fu_3188_p3;
    buffer_idx_fu_3158_p2 <= std_logic_vector(signed(sext_ln22_1_fu_3148_p1) + signed(sext_ln22_reg_5468));
    exp_tmp_fu_3674_p4 <= ireg_fu_3658_p1(62 downto 52);
    grp_atan2_cordic_float_s_fu_3071_ap_start <= grp_atan2_cordic_float_s_fu_3071_ap_start_reg;
    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg;
    grp_fu_2133_p_ce <= ap_const_logic_1;
    grp_fu_2133_p_din0 <= grp_fu_3098_p0;
    grp_fu_3098_ce <= ap_const_logic_1;

    grp_fu_3098_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, sin_val_reg_6237, cos_val_reg_6243, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                grp_fu_3098_p0 <= cos_val_reg_6243;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_3098_p0 <= sin_val_reg_6237;
            else 
                grp_fu_3098_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_3098_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_3098_p1 <= grp_fu_2133_p_dout0;
    grp_generic_sincos_float_s_fu_3079_ap_start <= grp_generic_sincos_float_s_fu_3079_ap_start_reg;
    grp_generic_sincos_float_s_fu_3079_t_in <= 
        ap_const_lv32_0 when (icmp_ln935_4_reg_6205(0) = '1') else 
        bitcast_ln744_3_fu_3629_p1;
    icmp_ln24_fu_3168_p2 <= "1" when (signed(buffer_idx_fu_3158_p2) < signed(ap_const_lv7_6C)) else "0";
    icmp_ln257_fu_3132_p2 <= "1" when (i_reg_3001 = ap_const_lv5_14) else "0";
    icmp_ln263_fu_3265_p2 <= "1" when (ap_phi_mux_j_phi_fu_3017_p4 = ap_const_lv4_8) else "0";
    icmp_ln571_3_fu_3916_p2 <= "1" when (trunc_ln555_3_fu_3890_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_3718_p2 <= "1" when (trunc_ln555_fu_3662_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_4_fu_4067_p2 <= "1" when (signed(F2_3_fu_4057_p2) > signed(ap_const_lv12_2B)) else "0";
    icmp_ln581_fu_3734_p2 <= "1" when (signed(F2_fu_3724_p2) > signed(ap_const_lv12_2B)) else "0";
    icmp_ln582_3_fu_4093_p2 <= "1" when (F2_3_fu_4057_p2 = ap_const_lv12_2B) else "0";
    icmp_ln582_fu_3760_p2 <= "1" when (F2_fu_3724_p2 = ap_const_lv12_2B) else "0";
    icmp_ln585_3_fu_4103_p2 <= "1" when (unsigned(sh_amt_3_fu_4085_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_3770_p2 <= "1" when (unsigned(sh_amt_fu_3752_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln591_4_fu_4139_p2 <= "1" when (signed(add_ln581_5_fu_4073_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln591_fu_3806_p2 <= "1" when (signed(add_ln581_fu_3740_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln603_3_fu_4119_p2 <= "1" when (tmp_133_fu_4109_p4 = ap_const_lv6_0) else "0";
    icmp_ln603_fu_3786_p2 <= "1" when (tmp_130_fu_3776_p4 = ap_const_lv6_0) else "0";
    icmp_ln935_3_fu_4515_p2 <= "1" when (x_V_q0 = ap_const_lv64_0) else "0";
    icmp_ln935_4_fu_3353_p2 <= "1" when (angle_4_reg_6192 = ap_const_lv64_0) else "0";
    icmp_ln935_fu_4323_p2 <= "1" when (x_V_q1 = ap_const_lv64_0) else "0";
    icmp_ln946_3_fu_4587_p2 <= "1" when (signed(tmp_119_fu_4577_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_4_fu_3413_p2 <= "1" when (signed(tmp_126_fu_3403_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_fu_4395_p2 <= "1" when (signed(tmp_115_fu_4385_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_3_fu_4635_p2 <= "0" when (and_ln949_10_fu_4629_p2 = ap_const_lv64_0) else "1";
    icmp_ln949_4_fu_3461_p2 <= "0" when (and_ln949_11_fu_3455_p2 = ap_const_lv64_0) else "1";
    icmp_ln949_fu_4443_p2 <= "0" when (and_ln949_fu_4437_p2 = ap_const_lv64_0) else "1";
    icmp_ln954_3_fu_4663_p2 <= "1" when (signed(lsb_index_6_fu_4571_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln954_4_fu_3489_p2 <= "1" when (signed(lsb_index_7_fu_3397_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln954_fu_4471_p2 <= "1" when (signed(lsb_index_fu_4379_p2) > signed(ap_const_lv32_0)) else "0";
    idxprom_fu_3101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),64));
    ireg_3_fu_3886_p1 <= grp_fu_2133_p_dout0;
    ireg_fu_3658_p1 <= grp_fu_2133_p_dout0;
    j_cast2_fu_3245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_3017_p4),64));
    j_cast_fu_3261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_3017_p4),8));
    l_6_fu_4561_p1 <= tmp_15_fu_4553_p3(32 - 1 downto 0);
    l_7_fu_3387_p1 <= tmp_s_fu_3379_p3(32 - 1 downto 0);
    l_fu_4369_p1 <= tmp_fu_4361_p3(32 - 1 downto 0);
    lsb_index_6_fu_4571_p2 <= std_logic_vector(unsigned(sub_ln944_3_fu_4565_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_7_fu_3397_p2 <= std_logic_vector(unsigned(sub_ln944_4_fu_3391_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_4379_p2 <= std_logic_vector(unsigned(sub_ln944_fu_4373_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln947_3_fu_4607_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_3_fu_4603_p1(31-1 downto 0)))));
    lshr_ln947_4_fu_3433_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_4_fu_3429_p1(31-1 downto 0)))));
    lshr_ln947_fu_4415_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_4411_p1(31-1 downto 0)))));
    lshr_ln954_3_fu_4826_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_33_reg_6433),to_integer(unsigned('0' & zext_ln954_3_fu_4823_p1(31-1 downto 0)))));
    lshr_ln954_4_fu_3544_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_31_reg_6210),to_integer(unsigned('0' & zext_ln954_4_fu_3540_p1(31-1 downto 0)))));
    lshr_ln954_fu_4718_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_32_reg_6392),to_integer(unsigned('0' & zext_ln954_fu_4715_p1(31-1 downto 0)))));
    m_38_fu_4733_p2 <= std_logic_vector(unsigned(m_fu_4723_p3) + unsigned(zext_ln961_fu_4730_p1));
    m_41_fu_4831_p3 <= 
        lshr_ln954_3_fu_4826_p2 when (icmp_ln954_3_reg_6439(0) = '1') else 
        shl_ln955_3_fu_4818_p2;
    m_42_fu_4841_p2 <= std_logic_vector(unsigned(m_41_fu_4831_p3) + unsigned(zext_ln961_3_fu_4838_p1));
    m_44_fu_3549_p3 <= 
        lshr_ln954_4_fu_3544_p2 when (icmp_ln954_4_reg_6222(0) = '1') else 
        shl_ln955_4_fu_3530_p2;
    m_45_fu_3559_p2 <= std_logic_vector(unsigned(m_44_fu_3549_p3) + unsigned(zext_ln961_4_fu_3556_p1));
    m_48_fu_3565_p4 <= m_45_fu_3559_p2(63 downto 1);
    m_49_fu_4739_p4 <= m_38_fu_4733_p2(63 downto 1);
    m_50_fu_4847_p4 <= m_42_fu_4841_p2(63 downto 1);
    m_fu_4723_p3 <= 
        lshr_ln954_fu_4718_p2 when (icmp_ln954_reg_6398(0) = '1') else 
        shl_ln955_fu_4710_p2;

    mag_samples_sample_V_address0_assign_proc : process(mag_samples_sample_V_addr_36_reg_5463, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mag_samples_sample_V_address0 <= mag_samples_sample_V_addr_36_reg_5463;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            mag_samples_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    mag_samples_sample_V_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                mag_samples_sample_V_address1 <= "XXXX";
            end if;
        else 
            mag_samples_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    mag_samples_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage6_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            mag_samples_sample_V_ce0 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage6_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            mag_samples_sample_V_ce1 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_d0_assign_proc : process(ap_enable_reg_pp0_iter0, sample_period_samples_2_sample_V_load_reg_6137, ap_CS_fsm_pp0_stage1, sample_period_samples_4_sample_V_load_reg_6147, sample_period_samples_6_sample_V_load_reg_6157, sample_period_samples_8_sample_V_load_reg_6167, sample_period_samples_10_sample_V_load_reg_6177, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, sample_period_samples_1_sample_V_q0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_10_sample_V_load_reg_6177;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_8_sample_V_load_reg_6167;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_6_sample_V_load_reg_6157;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_4_sample_V_load_reg_6147;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_2_sample_V_load_reg_6137;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_1_sample_V_q0;
            else 
                mag_samples_sample_V_d0 <= "XXXXXXXXXXXX";
            end if;
        else 
            mag_samples_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    mag_samples_sample_V_d1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, sample_period_samples_3_sample_V_load_reg_6142, sample_period_samples_5_sample_V_load_reg_6152, sample_period_samples_7_sample_V_load_reg_6162, sample_period_samples_9_sample_V_load_reg_6172, sample_period_samples_11_sample_V_load_reg_6182, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, sample_period_samples_0_sample_V_q0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_11_sample_V_load_reg_6182;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_9_sample_V_load_reg_6172;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_7_sample_V_load_reg_6162;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_5_sample_V_load_reg_6152;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_3_sample_V_load_reg_6142;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_0_sample_V_q0;
            else 
                mag_samples_sample_V_d1 <= "XXXXXXXXXXXX";
            end if;
        else 
            mag_samples_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    mag_samples_sample_V_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln263_reg_6057, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage6_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            mag_samples_sample_V_we0 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_we1_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln263_reg_6057, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage6_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln263_reg_6057 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            mag_samples_sample_V_we1 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    man_V_15_fu_3704_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_3700_p1));
    man_V_19_fu_4044_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_3_fu_4040_p1));
    man_V_20_fu_4050_p3 <= 
        man_V_19_fu_4044_p2 when (p_Result_178_reg_6301(0) = '1') else 
        zext_ln569_3_fu_4040_p1;
    man_V_fu_3710_p3 <= 
        man_V_15_fu_3704_p2 when (p_Result_176_fu_3666_p3(0) = '1') else 
        zext_ln569_fu_3700_p1;
    matA_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address0;
    matA_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address1;
    matA_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce0;
    matA_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce1;
    matA_V_0_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d0;
    matA_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d1;
    matA_V_0_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we0;
    matA_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we1;
    matA_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address0;
    matA_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address1;
    matA_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce0;
    matA_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce1;
    matA_V_1_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d0;
    matA_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d1;
    matA_V_1_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we0;
    matA_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we1;
    matU_V_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_address0;
    matU_V_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_ce0;
    matU_V_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_d0;
    matU_V_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_we0;
    matV_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address0;
    matV_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address1;
    matV_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce0;
    matV_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce1;
    matV_V_0_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d0;
    matV_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d1;
    matV_V_0_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we0;
    matV_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we1;
    matV_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address0;
    matV_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address1;
    matV_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce0;
    matV_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce1;
    matV_V_1_d0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d0;
    matV_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d1;
    matV_V_1_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we0;
    matV_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we1;
    or_ln571_11_fu_3874_p2 <= (and_ln582_fu_3818_p2 or and_ln581_fu_3836_p2);
    or_ln571_12_fu_3880_p2 <= (or_ln571_fu_3868_p2 or or_ln571_11_fu_3874_p2);
    or_ln571_13_fu_4198_p2 <= (icmp_ln571_3_reg_6317 or and_ln603_3_fu_4185_p2);
    or_ln571_14_fu_4203_p2 <= (and_ln582_3_fu_4150_p2 or and_ln581_3_fu_4167_p2);
    or_ln571_15_fu_4209_p2 <= (or_ln571_14_fu_4203_p2 or or_ln571_13_fu_4198_p2);
    or_ln571_fu_3868_p2 <= (icmp_ln571_fu_3718_p2 or and_ln603_fu_3854_p2);
    or_ln581_3_fu_4173_p2 <= (or_ln582_3_fu_4156_p2 or icmp_ln581_4_fu_4067_p2);
    or_ln581_fu_3842_p2 <= (or_ln582_fu_3824_p2 or icmp_ln581_fu_3734_p2);
    or_ln582_3_fu_4156_p2 <= (icmp_ln582_3_fu_4093_p2 or icmp_ln571_3_reg_6317);
    or_ln582_fu_3824_p2 <= (icmp_ln582_fu_3760_p2 or icmp_ln571_fu_3718_p2);
    or_ln949_5_fu_4431_p2 <= (shl_ln949_fu_4425_p2 or lshr_ln947_fu_4415_p2);
    or_ln949_6_fu_3449_p2 <= (shl_ln949_4_fu_3443_p2 or lshr_ln947_4_fu_3433_p2);
    or_ln949_fu_4623_p2 <= (shl_ln949_3_fu_4617_p2 or lshr_ln947_3_fu_4607_p2);
    p_Result_160_fu_4861_p3 <= m_42_fu_4841_p2(25 downto 25);
    p_Result_164_fu_3579_p3 <= m_45_fu_3559_p2(25 downto 25);
    p_Result_168_fu_3972_p3 <= man_V_reg_6254(to_integer(unsigned(zext_ln591_fu_3968_p1)) downto to_integer(unsigned(zext_ln591_fu_3968_p1))) when (to_integer(unsigned(zext_ln591_fu_3968_p1))>= 0 and to_integer(unsigned(zext_ln591_fu_3968_p1))<=53) else "-";
    p_Result_171_fu_4265_p3 <= man_V_20_reg_6325(to_integer(unsigned(zext_ln591_4_fu_4261_p1)) downto to_integer(unsigned(zext_ln591_4_fu_4261_p1))) when (to_integer(unsigned(zext_ln591_4_fu_4261_p1))>= 0 and to_integer(unsigned(zext_ln591_4_fu_4261_p1))<=53) else "-";
    
    p_Result_173_fu_3369_p4_proc : process(tmp_V_31_fu_3363_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable p_Result_173_fu_3369_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_31_fu_3363_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for p_Result_173_fu_3369_p4_i in 0 to 64-1 loop
                v0_cpy(p_Result_173_fu_3369_p4_i) := tmp_V_31_fu_3363_p3(64-1-p_Result_173_fu_3369_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_173_fu_3369_p4 <= resvalue(64-1 downto 0);
    end process;

    p_Result_174_fu_3481_p3 <= tmp_V_31_fu_3363_p3(to_integer(unsigned(lsb_index_7_fu_3397_p2)) downto to_integer(unsigned(lsb_index_7_fu_3397_p2))) when (to_integer(unsigned(lsb_index_7_fu_3397_p2))>= 0 and to_integer(unsigned(lsb_index_7_fu_3397_p2))<=63) else "-";
    p_Result_175_fu_3613_p5 <= (zext_ln962_4_fu_3575_p1(63 downto 32) & tmp_17_fu_3606_p3 & zext_ln962_4_fu_3575_p1(22 downto 0));
    p_Result_176_fu_3666_p3 <= ireg_fu_3658_p1(63 downto 63);
    p_Result_177_fu_3692_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_3688_p1);
    p_Result_179_fu_4033_p3 <= (ap_const_lv1_1 & trunc_ln565_3_reg_6312);
    p_Result_180_fu_4329_p3 <= x_V_q1(63 downto 63);
    
    p_Result_181_fu_4351_p4_proc : process(tmp_V_32_fu_4343_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable p_Result_181_fu_4351_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_32_fu_4343_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for p_Result_181_fu_4351_p4_i in 0 to 64-1 loop
                v0_cpy(p_Result_181_fu_4351_p4_i) := tmp_V_32_fu_4343_p3(64-1-p_Result_181_fu_4351_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_181_fu_4351_p4 <= resvalue(64-1 downto 0);
    end process;

    p_Result_182_fu_4463_p3 <= tmp_V_32_fu_4343_p3(to_integer(unsigned(lsb_index_fu_4379_p2)) downto to_integer(unsigned(lsb_index_fu_4379_p2))) when (to_integer(unsigned(lsb_index_fu_4379_p2))>= 0 and to_integer(unsigned(lsb_index_fu_4379_p2))<=63) else "-";
    p_Result_183_fu_4787_p5 <= (zext_ln962_fu_4749_p1(63 downto 32) & tmp_14_fu_4780_p3 & zext_ln962_fu_4749_p1(22 downto 0));
    p_Result_184_fu_4521_p3 <= x_V_q0(63 downto 63);
    
    p_Result_185_fu_4543_p4_proc : process(tmp_V_33_fu_4535_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable p_Result_185_fu_4543_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_33_fu_4535_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for p_Result_185_fu_4543_p4_i in 0 to 64-1 loop
                v0_cpy(p_Result_185_fu_4543_p4_i) := tmp_V_33_fu_4535_p3(64-1-p_Result_185_fu_4543_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_185_fu_4543_p4 <= resvalue(64-1 downto 0);
    end process;

    p_Result_186_fu_4655_p3 <= tmp_V_33_fu_4535_p3(to_integer(unsigned(lsb_index_6_fu_4571_p2)) downto to_integer(unsigned(lsb_index_6_fu_4571_p2))) when (to_integer(unsigned(lsb_index_6_fu_4571_p2))>= 0 and to_integer(unsigned(lsb_index_6_fu_4571_p2))<=63) else "-";
    p_Result_187_fu_4895_p5 <= (zext_ln962_3_fu_4857_p1(63 downto 32) & tmp_16_fu_4888_p3 & zext_ln962_3_fu_4857_p1(22 downto 0));
    p_Result_s_fu_4753_p3 <= m_38_fu_4733_p2(25 downto 25);
    qb_3_fu_4272_p3 <= 
        p_Result_178_reg_6301 when (icmp_ln591_4_reg_6347(0) = '1') else 
        p_Result_171_fu_4265_p3;
    qb_fu_3979_p3 <= 
        p_Result_176_reg_6249 when (icmp_ln591_reg_6276(0) = '1') else 
        p_Result_168_fu_3972_p3;
    r_V_fu_3311_p1 <= ap_const_lv107_9D1462CEAA19E(53 - 1 downto 0);

    sample_period_samples_0_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_0_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_0_q0, sliding_window_buffer_samples_sample_V_5_0_q0, sliding_window_buffer_samples_sample_V_3_0_q0, sliding_window_buffer_samples_sample_V_1_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_0_q0;
        else 
            sample_period_samples_0_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_0_q0, sliding_window_buffer_samples_sample_V_4_0_q0, sliding_window_buffer_samples_sample_V_2_0_q0, sliding_window_buffer_samples_sample_V_0_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_0_q0;
        else 
            sample_period_samples_0_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_10_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_10_q0, sliding_window_buffer_samples_sample_V_5_10_q0, sliding_window_buffer_samples_sample_V_3_10_q0, sliding_window_buffer_samples_sample_V_1_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_10_q0;
        else 
            sample_period_samples_10_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_10_q0, sliding_window_buffer_samples_sample_V_4_10_q0, sliding_window_buffer_samples_sample_V_2_10_q0, sliding_window_buffer_samples_sample_V_0_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_10_q0;
        else 
            sample_period_samples_10_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_11_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_11_q0, sliding_window_buffer_samples_sample_V_5_11_q0, sliding_window_buffer_samples_sample_V_3_11_q0, sliding_window_buffer_samples_sample_V_1_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_11_q0;
        else 
            sample_period_samples_11_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_11_q0, sliding_window_buffer_samples_sample_V_4_11_q0, sliding_window_buffer_samples_sample_V_2_11_q0, sliding_window_buffer_samples_sample_V_0_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_11_q0;
        else 
            sample_period_samples_11_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_1_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_1_q0, sliding_window_buffer_samples_sample_V_5_1_q0, sliding_window_buffer_samples_sample_V_3_1_q0, sliding_window_buffer_samples_sample_V_1_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_1_q0;
        else 
            sample_period_samples_1_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_1_q0, sliding_window_buffer_samples_sample_V_4_1_q0, sliding_window_buffer_samples_sample_V_2_1_q0, sliding_window_buffer_samples_sample_V_0_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_1_q0;
        else 
            sample_period_samples_1_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_2_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_2_q0, sliding_window_buffer_samples_sample_V_5_2_q0, sliding_window_buffer_samples_sample_V_3_2_q0, sliding_window_buffer_samples_sample_V_1_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_2_q0;
        else 
            sample_period_samples_2_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_2_q0, sliding_window_buffer_samples_sample_V_4_2_q0, sliding_window_buffer_samples_sample_V_2_2_q0, sliding_window_buffer_samples_sample_V_0_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_2_q0;
        else 
            sample_period_samples_2_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_3_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_3_q0, sliding_window_buffer_samples_sample_V_5_3_q0, sliding_window_buffer_samples_sample_V_3_3_q0, sliding_window_buffer_samples_sample_V_1_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_3_q0;
        else 
            sample_period_samples_3_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_3_q0, sliding_window_buffer_samples_sample_V_4_3_q0, sliding_window_buffer_samples_sample_V_2_3_q0, sliding_window_buffer_samples_sample_V_0_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_3_q0;
        else 
            sample_period_samples_3_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_4_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_4_q0, sliding_window_buffer_samples_sample_V_5_4_q0, sliding_window_buffer_samples_sample_V_3_4_q0, sliding_window_buffer_samples_sample_V_1_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_4_q0;
        else 
            sample_period_samples_4_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_4_q0, sliding_window_buffer_samples_sample_V_4_4_q0, sliding_window_buffer_samples_sample_V_2_4_q0, sliding_window_buffer_samples_sample_V_0_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_4_q0;
        else 
            sample_period_samples_4_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_5_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_5_q0, sliding_window_buffer_samples_sample_V_5_5_q0, sliding_window_buffer_samples_sample_V_3_5_q0, sliding_window_buffer_samples_sample_V_1_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_5_q0;
        else 
            sample_period_samples_5_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_5_q0, sliding_window_buffer_samples_sample_V_4_5_q0, sliding_window_buffer_samples_sample_V_2_5_q0, sliding_window_buffer_samples_sample_V_0_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_5_q0;
        else 
            sample_period_samples_5_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_6_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_6_q0, sliding_window_buffer_samples_sample_V_5_6_q0, sliding_window_buffer_samples_sample_V_3_6_q0, sliding_window_buffer_samples_sample_V_1_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_6_q0;
        else 
            sample_period_samples_6_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_6_q0, sliding_window_buffer_samples_sample_V_4_6_q0, sliding_window_buffer_samples_sample_V_2_6_q0, sliding_window_buffer_samples_sample_V_0_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_6_q0;
        else 
            sample_period_samples_6_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_7_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_7_q0, sliding_window_buffer_samples_sample_V_5_7_q0, sliding_window_buffer_samples_sample_V_3_7_q0, sliding_window_buffer_samples_sample_V_1_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_7_q0;
        else 
            sample_period_samples_7_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_7_q0, sliding_window_buffer_samples_sample_V_4_7_q0, sliding_window_buffer_samples_sample_V_2_7_q0, sliding_window_buffer_samples_sample_V_0_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_7_q0;
        else 
            sample_period_samples_7_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_8_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_8_q0, sliding_window_buffer_samples_sample_V_5_8_q0, sliding_window_buffer_samples_sample_V_3_8_q0, sliding_window_buffer_samples_sample_V_1_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_8_q0;
        else 
            sample_period_samples_8_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_8_q0, sliding_window_buffer_samples_sample_V_4_8_q0, sliding_window_buffer_samples_sample_V_2_8_q0, sliding_window_buffer_samples_sample_V_0_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_8_q0;
        else 
            sample_period_samples_8_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3245_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_9_sample_V_address0 <= j_cast2_fu_3245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_9_q0, sliding_window_buffer_samples_sample_V_5_9_q0, sliding_window_buffer_samples_sample_V_3_9_q0, sliding_window_buffer_samples_sample_V_1_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_9_q0;
        else 
            sample_period_samples_9_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_9_q0, sliding_window_buffer_samples_sample_V_4_9_q0, sliding_window_buffer_samples_sample_V_2_9_q0, sliding_window_buffer_samples_sample_V_0_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_9_q0;
        else 
            sample_period_samples_9_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln571_15_fu_3995_p3 <= 
        add_ln415_fu_3989_p2 when (and_ln581_reg_6281(0) = '1') else 
        sext_ln585_fu_3922_p1;
    select_ln571_16_fu_4006_p3 <= 
        select_ln571_reg_6286 when (or_ln571_reg_6291(0) = '1') else 
        sext_ln571_fu_4002_p1;
    select_ln571_17_fu_4012_p3 <= 
        select_ln571_16_fu_4006_p3 when (or_ln571_12_reg_6296(0) = '1') else 
        ap_const_lv64_0;
    select_ln571_18_fu_4191_p3 <= 
        ap_const_lv64_0 when (icmp_ln571_3_reg_6317(0) = '1') else 
        shl_ln604_2_fu_4133_p2;
    select_ln571_19_fu_4288_p3 <= 
        add_ln415_18_fu_4282_p2 when (and_ln581_3_reg_6352(0) = '1') else 
        sext_ln585_2_fu_4215_p1;
    select_ln571_20_fu_4299_p3 <= 
        select_ln571_18_reg_6357 when (or_ln571_13_reg_6362(0) = '1') else 
        sext_ln571_3_fu_4295_p1;
    select_ln571_21_fu_4305_p3 <= 
        select_ln571_20_fu_4299_p3 when (or_ln571_15_reg_6367(0) = '1') else 
        ap_const_lv64_0;
    select_ln571_fu_3860_p3 <= 
        ap_const_lv64_0 when (icmp_ln571_fu_3718_p2(0) = '1') else 
        shl_ln604_fu_3800_p2;
    select_ln585_2_fu_4245_p3 <= 
        ashr_ln586_3_fu_4221_p2 when (icmp_ln585_3_reg_6337(0) = '1') else 
        trunc_ln588_3_cast_fu_4237_p3;
    select_ln585_fu_3952_p3 <= 
        ashr_ln586_fu_3928_p2 when (icmp_ln585_reg_6266(0) = '1') else 
        trunc_ln588_cast_fu_3944_p3;
    select_ln935_3_fu_4915_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_3_reg_6423(0) = '1') else 
        bitcast_ln744_4_fu_4911_p1;
    select_ln935_fu_4807_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_6382(0) = '1') else 
        bitcast_ln744_fu_4803_p1;
    select_ln943_3_fu_4869_p3 <= 
        ap_const_lv8_7F when (p_Result_160_fu_4861_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_4_fu_3587_p3 <= 
        ap_const_lv8_7F when (p_Result_164_fu_3579_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_fu_4761_p3 <= 
        ap_const_lv8_7F when (p_Result_s_fu_4753_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_3_fu_4681_p3 <= 
        icmp_ln949_3_fu_4635_p2 when (icmp_ln946_3_fu_4587_p2(0) = '1') else 
        p_Result_186_fu_4655_p3;
    select_ln946_4_fu_3501_p3 <= 
        icmp_ln949_4_fu_3461_p2 when (icmp_ln946_4_fu_3413_p2(0) = '1') else 
        p_Result_174_fu_3481_p3;
    select_ln946_fu_4489_p3 <= 
        icmp_ln949_fu_4443_p2 when (icmp_ln946_fu_4395_p2(0) = '1') else 
        p_Result_182_fu_4463_p3;
    select_ln954_10_fu_3509_p3 <= 
        select_ln946_4_fu_3501_p3 when (icmp_ln954_4_fu_3489_p2(0) = '1') else 
        and_ln949_9_fu_3495_p2;
    select_ln954_8_fu_4695_p3 <= 
        select_ln946_3_fu_4681_p3 when (icmp_ln954_3_fu_4663_p2(0) = '1') else 
        and_ln949_8_fu_4669_p2;
    select_ln954_fu_4503_p3 <= 
        select_ln946_fu_4489_p3 when (icmp_ln954_fu_4471_p2(0) = '1') else 
        and_ln949_7_fu_4477_p2;
        sext_ln22_1_fu_3148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln22_fu_3142_p2),7));

    sext_ln22_fu_3110_p0 <= sliding_window_front_ptr_s;
        sext_ln22_fu_3110_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln22_fu_3110_p0),7));

        sext_ln571_3_fu_4295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln571_19_fu_4288_p3),64));

        sext_ln571_fu_4002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln571_15_fu_3995_p3),64));

        sext_ln583_3_fu_4099_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_20_fu_4050_p3),64));

        sext_ln583_fu_3766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_fu_3710_p3),64));

        sext_ln585_2_fu_4215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_20_reg_6325),55));

        sext_ln585_fu_3922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_reg_6254),55));

        sext_ln591_2_fu_4252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln585_2_fu_4245_p3),55));

        sext_ln591_fu_3959_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln585_fu_3952_p3),55));

    sh_amt_3_fu_4085_p3 <= 
        add_ln581_5_fu_4073_p2 when (icmp_ln581_4_fu_4067_p2(0) = '1') else 
        sub_ln581_3_fu_4079_p2;
    sh_amt_fu_3752_p3 <= 
        add_ln581_fu_3740_p2 when (icmp_ln581_fu_3734_p2(0) = '1') else 
        sub_ln581_fu_3746_p2;
    shl_ln604_2_fu_4133_p2 <= std_logic_vector(shift_left(unsigned(sext_ln583_3_fu_4099_p1),to_integer(unsigned('0' & zext_ln604_3_fu_4129_p1(31-1 downto 0)))));
    shl_ln604_fu_3800_p2 <= std_logic_vector(shift_left(unsigned(sext_ln583_fu_3766_p1),to_integer(unsigned('0' & zext_ln604_fu_3796_p1(31-1 downto 0)))));
    shl_ln949_3_fu_4617_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln949_3_fu_4613_p1(31-1 downto 0)))));
    shl_ln949_4_fu_3443_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln949_4_fu_3439_p1(31-1 downto 0)))));
    shl_ln949_fu_4425_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln949_fu_4421_p1(31-1 downto 0)))));
    shl_ln955_3_fu_4818_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_33_reg_6433),to_integer(unsigned('0' & zext_ln955_3_fu_4815_p1(31-1 downto 0)))));
    shl_ln955_4_fu_3530_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_31_reg_6210),to_integer(unsigned('0' & zext_ln955_4_fu_3526_p1(31-1 downto 0)))));
    shl_ln955_fu_4710_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_32_reg_6392),to_integer(unsigned('0' & zext_ln955_fu_4707_p1(31-1 downto 0)))));
    shl_ln_fu_3289_p3 <= (trunc_ln279_fu_3285_p1 & ap_const_lv2_0);
    sigma_V_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address0;
    sigma_V_address1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address1;
    sigma_V_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce0;
    sigma_V_ce1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce1;
    sigma_V_d1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_d1;
    sigma_V_we1 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_we1;
    sliding_window_buffer_samples_sample_V_0_0_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_10_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_11_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_1_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_2_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_3_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_4_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_5_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_6_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_7_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_8_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_9_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_0_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_10_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_11_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_1_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_2_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_3_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_4_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_5_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_6_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_7_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_8_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_9_address0 <= zext_ln34_fu_3203_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_0_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_10_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_11_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_1_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_2_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_3_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_4_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_5_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_6_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_7_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_8_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_9_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_0_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_10_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_11_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_1_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_2_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_3_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_4_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_5_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_6_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_7_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_8_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_9_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_0_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_10_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_11_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_1_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_2_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_3_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_4_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_5_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_6_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_7_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_8_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_9_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_0_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_10_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_11_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_1_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_2_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_3_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_4_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_5_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_6_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_7_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_8_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_9_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_0_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_10_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_11_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_1_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_2_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_3_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_4_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_5_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_6_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_7_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_8_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_9_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_0_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_10_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_11_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_1_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_2_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_3_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_4_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_5_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_6_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_7_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_8_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_9_address0 <= zext_ln34_reg_5491(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln279_fu_3297_p2 <= std_logic_vector(unsigned(shl_ln_fu_3289_p3) - unsigned(zext_ln268_1_fu_3281_p1));
    sub_ln581_3_fu_4079_p2 <= std_logic_vector(unsigned(ap_const_lv12_2B) - unsigned(F2_3_fu_4057_p2));
    sub_ln581_fu_3746_p2 <= std_logic_vector(unsigned(ap_const_lv12_2B) - unsigned(F2_fu_3724_p2));
    sub_ln944_3_fu_4565_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(l_6_fu_4561_p1));
    sub_ln944_4_fu_3391_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(l_7_fu_3387_p1));
    sub_ln944_fu_4373_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(l_fu_4369_p1));
    sub_ln947_3_fu_4597_p2 <= std_logic_vector(signed(ap_const_lv7_59) - signed(trunc_ln947_3_fu_4593_p1));
    sub_ln947_4_fu_3423_p2 <= std_logic_vector(signed(ap_const_lv7_59) - signed(trunc_ln947_4_fu_3419_p1));
    sub_ln947_fu_4405_p2 <= std_logic_vector(signed(ap_const_lv7_59) - signed(trunc_ln947_fu_4401_p1));
    sub_ln955_3_fu_4675_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_3_fu_4565_p2));
    sub_ln955_4_fu_3521_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_4_reg_6216));
    sub_ln955_fu_4483_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_fu_4373_p2));
    sub_ln964_3_fu_4877_p2 <= std_logic_vector(unsigned(ap_const_lv8_15) - unsigned(trunc_ln943_3_reg_6459));
    sub_ln964_4_fu_3595_p2 <= std_logic_vector(unsigned(ap_const_lv8_15) - unsigned(trunc_ln943_4_reg_6232));
    sub_ln964_fu_4769_p2 <= std_logic_vector(unsigned(ap_const_lv8_15) - unsigned(trunc_ln943_reg_6418));

    this_A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter2, grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_address0, ap_block_pp0_stage0, ap_CS_fsm_state29, ap_block_pp0_stage5, zext_ln279_fu_3303_p1, zext_ln280_fu_4025_p1, zext_ln281_fu_4318_p1, ap_block_pp0_stage6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            this_A_address0 <= zext_ln281_fu_4318_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            this_A_address0 <= zext_ln280_fu_4025_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            this_A_address0 <= zext_ln279_fu_3303_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            this_A_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_address0;
        else 
            this_A_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    this_A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter2, grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_ce0, ap_CS_fsm_state29, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            this_A_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            this_A_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_ce0;
        else 
            this_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_A_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage5, ap_block_pp0_stage6, select_ln571_17_fu_4012_p3, select_ln571_21_fu_4305_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
            this_A_d0 <= select_ln571_21_fu_4305_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            this_A_d0 <= select_ln571_17_fu_4012_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            this_A_d0 <= ap_const_lv64_80000000000;
        else 
            this_A_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    this_A_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, icmp_ln263_fu_3265_p2, icmp_ln263_reg_6057_pp0_iter2_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_enable_reg_pp0_iter2, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln263_reg_6057_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln263_reg_6057_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln263_fu_3265_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            this_A_we0 <= ap_const_logic_1;
        else 
            this_A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    this_b_address0_assign_proc : process(zext_ln268_reg_6061_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_address0, ap_CS_fsm_state29, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            this_b_address0 <= zext_ln268_reg_6061_pp0_iter1_reg(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            this_b_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_address0;
        else 
            this_b_address0 <= "XXXXXXXX";
        end if; 
    end process;


    this_b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_ce0, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            this_b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            this_b_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_ce0;
        else 
            this_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    this_b_d0 <= (mag_samples_sample_V_q0 & ap_const_lv43_0);

    this_b_we0_assign_proc : process(icmp_ln263_reg_6057_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln263_reg_6057_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            this_b_we0 <= ap_const_logic_1;
        else 
            this_b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    this_times_address0 <= zext_ln268_fu_3276_p1(8 - 1 downto 0);

    this_times_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            this_times_ce0 <= ap_const_logic_1;
        else 
            this_times_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_115_fu_4385_p4 <= lsb_index_fu_4379_p2(31 downto 1);
    tmp_116_fu_4449_p3 <= lsb_index_fu_4379_p2(31 downto 31);
    tmp_119_fu_4577_p4 <= lsb_index_6_fu_4571_p2(31 downto 1);
    tmp_120_fu_4641_p3 <= lsb_index_6_fu_4571_p2(31 downto 31);
    tmp_122_fu_3174_p3 <= buffer_idx_fu_3158_p2(6 downto 6);
    tmp_124_fu_3327_p3 <= r_V_fu_3311_p2(42 downto 42);
    tmp_126_fu_3403_p4 <= lsb_index_7_fu_3397_p2(31 downto 1);
    tmp_127_fu_3467_p3 <= lsb_index_7_fu_3397_p2(31 downto 31);
    tmp_130_fu_3776_p4 <= sh_amt_fu_3752_p3(11 downto 6);
    tmp_131_fu_3936_p3 <= bitcast_ln702_fu_3933_p1(31 downto 31);
    tmp_133_fu_4109_p4 <= sh_amt_3_fu_4085_p3(11 downto 6);
    tmp_134_fu_4229_p3 <= bitcast_ln702_4_fu_4226_p1(31 downto 31);
    tmp_14_fu_4780_p3 <= (p_Result_180_reg_6387 & add_ln964_fu_4774_p2);
    
    tmp_15_fu_4553_p3_proc : process(p_Result_185_fu_4543_p4)
    begin
        tmp_15_fu_4553_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_185_fu_4543_p4(i) = '1' then
                tmp_15_fu_4553_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_16_fu_4888_p3 <= (p_Result_184_reg_6428 & add_ln964_3_fu_4882_p2);
    tmp_17_fu_3606_p3 <= (p_Result_172_reg_6199 & add_ln964_4_fu_3600_p2);
    tmp_20_fu_3231_p3 <= (i_reg_3001 & ap_const_lv3_0);
    tmp_V_27_fu_4529_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(x_V_q0));
    tmp_V_29_fu_3358_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(angle_4_reg_6192));
    tmp_V_31_fu_3363_p3 <= 
        tmp_V_29_fu_3358_p2 when (p_Result_172_reg_6199(0) = '1') else 
        angle_4_reg_6192;
    tmp_V_32_fu_4343_p3 <= 
        tmp_V_fu_4337_p2 when (p_Result_180_fu_4329_p3(0) = '1') else 
        x_V_q1;
    tmp_V_33_fu_4535_p3 <= 
        tmp_V_27_fu_4529_p2 when (p_Result_184_fu_4521_p3(0) = '1') else 
        x_V_q0;
    tmp_V_fu_4337_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(x_V_q1));
    
    tmp_fu_4361_p3_proc : process(p_Result_181_fu_4351_p4)
    begin
        tmp_fu_4361_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_181_fu_4351_p4(i) = '1' then
                tmp_fu_4361_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_s_fu_3379_p3_proc : process(p_Result_173_fu_3369_p4)
    begin
        tmp_s_fu_3379_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_173_fu_3369_p4(i) = '1' then
                tmp_s_fu_3379_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln22_1_fu_3122_p0 <= sliding_window_front_ptr_s;
    trunc_ln22_1_fu_3122_p1 <= trunc_ln22_1_fu_3122_p0(5 - 1 downto 0);
    trunc_ln22_fu_3118_p1 <= sliding_window_back_ptr_s(5 - 1 downto 0);
    trunc_ln279_fu_3285_p1 <= add_ln266_fu_3271_p2(7 - 1 downto 0);
    trunc_ln555_3_fu_3890_p1 <= ireg_3_fu_3886_p1(63 - 1 downto 0);
    trunc_ln555_fu_3662_p1 <= ireg_fu_3658_p1(63 - 1 downto 0);
    trunc_ln565_3_fu_3912_p1 <= ireg_3_fu_3886_p1(52 - 1 downto 0);
    trunc_ln565_fu_3688_p1 <= ireg_fu_3658_p1(52 - 1 downto 0);
    trunc_ln575_3_fu_4063_p1 <= F2_3_fu_4057_p2(11 - 1 downto 0);
    trunc_ln575_fu_3730_p1 <= F2_fu_3724_p2(11 - 1 downto 0);
    trunc_ln586_3_fu_4125_p1 <= sh_amt_3_fu_4085_p3(6 - 1 downto 0);
    trunc_ln586_fu_3792_p1 <= sh_amt_fu_3752_p3(6 - 1 downto 0);
    trunc_ln588_3_cast_fu_4237_p3 <= 
        ap_const_lv54_3FFFFFFFFFFFFF when (tmp_134_fu_4229_p3(0) = '1') else 
        ap_const_lv54_0;
    trunc_ln588_cast_fu_3944_p3 <= 
        ap_const_lv54_3FFFFFFFFFFFFF when (tmp_131_fu_3936_p3(0) = '1') else 
        ap_const_lv54_0;
    trunc_ln943_3_fu_4703_p1 <= tmp_15_fu_4553_p3(8 - 1 downto 0);
    trunc_ln943_4_fu_3517_p1 <= tmp_s_fu_3379_p3(8 - 1 downto 0);
    trunc_ln943_fu_4511_p1 <= tmp_fu_4361_p3(8 - 1 downto 0);
    trunc_ln947_3_fu_4593_p1 <= sub_ln944_3_fu_4565_p2(7 - 1 downto 0);
    trunc_ln947_4_fu_3419_p1 <= sub_ln944_4_fu_3391_p2(7 - 1 downto 0);
    trunc_ln947_fu_4401_p1 <= sub_ln944_fu_4373_p2(7 - 1 downto 0);

    x_V_address0_assign_proc : process(ap_CS_fsm_state30, grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_address0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x_V_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x_V_address0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_address0;
        else 
            x_V_address0 <= "XX";
        end if; 
    end process;

    x_V_address1 <= ap_const_lv64_2(2 - 1 downto 0);

    x_V_ce0_assign_proc : process(ap_CS_fsm_state30, grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_ce0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x_V_ce0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_ce0;
        else 
            x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_ce1_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x_V_ce1 <= ap_const_logic_1;
        else 
            x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_we0_assign_proc : process(grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x_V_we0 <= grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_we0;
        else 
            x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_3_fu_4145_p2 <= (icmp_ln571_3_reg_6317 xor ap_const_lv1_1);
    xor_ln571_fu_3812_p2 <= (icmp_ln571_fu_3718_p2 xor ap_const_lv1_1);
    xor_ln581_3_fu_4179_p2 <= (or_ln581_3_fu_4173_p2 xor ap_const_lv1_1);
    xor_ln581_fu_3848_p2 <= (or_ln581_fu_3842_p2 xor ap_const_lv1_1);
    xor_ln582_3_fu_4161_p2 <= (or_ln582_3_fu_4156_p2 xor ap_const_lv1_1);
    xor_ln582_fu_3830_p2 <= (or_ln582_fu_3824_p2 xor ap_const_lv1_1);
    xor_ln949_3_fu_4649_p2 <= (tmp_120_fu_4641_p3 xor ap_const_lv1_1);
    xor_ln949_4_fu_3475_p2 <= (tmp_127_fu_3467_p3 xor ap_const_lv1_1);
    xor_ln949_fu_4457_p2 <= (tmp_116_fu_4449_p3 xor ap_const_lv1_1);
    zext_ln22_fu_3138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_3001),6));
    zext_ln268_1_fu_3281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln266_fu_3271_p2),9));
    zext_ln268_fu_3276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln266_fu_3271_p2),64));
    zext_ln279_fu_3303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln279_fu_3297_p2),64));
    zext_ln280_fu_4025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln280_fu_4020_p2),64));
    zext_ln281_fu_4318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln281_fu_4313_p2),64));
    zext_ln34_fu_3203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_idx_7_fu_3196_p3),64));
    zext_ln415_18_fu_3985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_3979_p3),55));
    zext_ln415_19_fu_4278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_3_fu_4272_p3),55));
    zext_ln415_fu_3335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_fu_3327_p3),64));
    zext_ln455_3_fu_4030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_3_reg_6307),12));
    zext_ln455_fu_3684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_3674_p4),12));
    zext_ln569_3_fu_4040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_179_fu_4033_p3),54));
    zext_ln569_fu_3700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_177_fu_3692_p3),54));
    zext_ln586_5_fu_4218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_3_reg_6342),54));
    zext_ln586_fu_3925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_reg_6271),54));
    zext_ln591_4_fu_4261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_4_fu_4256_p2),32));
    zext_ln591_fu_3968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_fu_3963_p2),32));
    zext_ln604_3_fu_4129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_3_fu_4125_p1),64));
    zext_ln604_fu_3796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_3792_p1),64));
    zext_ln947_3_fu_4603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_3_fu_4597_p2),64));
    zext_ln947_4_fu_3429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_4_fu_3423_p2),64));
    zext_ln947_fu_4411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_4405_p2),64));
    zext_ln949_3_fu_4613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_6_fu_4571_p2),64));
    zext_ln949_4_fu_3439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_7_fu_3397_p2),64));
    zext_ln949_fu_4421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_fu_4379_p2),64));
    zext_ln954_3_fu_4823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_3_reg_6449),64));
    zext_ln954_4_fu_3540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_4_fu_3535_p2),64));
    zext_ln954_fu_4715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_reg_6408),64));
    zext_ln955_3_fu_4815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_3_reg_6444),64));
    zext_ln955_4_fu_3526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_4_fu_3521_p2),64));
    zext_ln955_fu_4707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_reg_6403),64));
    zext_ln961_3_fu_4838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_8_reg_6454),64));
    zext_ln961_4_fu_3556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_10_reg_6227),64));
    zext_ln961_fu_4730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_reg_6413),64));
    zext_ln962_3_fu_4857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_50_fu_4847_p4),64));
    zext_ln962_4_fu_3575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_48_fu_3565_p4),64));
    zext_ln962_fu_4749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_49_fu_4739_p4),64));
end behav;
