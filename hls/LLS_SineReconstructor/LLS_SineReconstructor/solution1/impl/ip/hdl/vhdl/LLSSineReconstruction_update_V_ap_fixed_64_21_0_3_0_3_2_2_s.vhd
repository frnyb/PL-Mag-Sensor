-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_update_V_ap_fixed_64_21_0_3_0_3_2_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_i_empty_n : IN STD_LOGIC;
    col_i_read : OUT STD_LOGIC;
    col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_j_empty_n : IN STD_LOGIC;
    col_j_read : OUT STD_LOGIC;
    s_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    s_empty_n : IN STD_LOGIC;
    s_read : OUT STD_LOGIC;
    c_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    c_empty_n : IN STD_LOGIC;
    c_read : OUT STD_LOGIC;
    matV_V_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_0_ce0 : OUT STD_LOGIC;
    matV_V_0_we0 : OUT STD_LOGIC;
    matV_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_0_ce1 : OUT STD_LOGIC;
    matV_V_0_we1 : OUT STD_LOGIC;
    matV_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_1_ce0 : OUT STD_LOGIC;
    matV_V_1_we0 : OUT STD_LOGIC;
    matV_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_1_ce1 : OUT STD_LOGIC;
    matV_V_1_we1 : OUT STD_LOGIC;
    matV_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_0_ce0 : OUT STD_LOGIC;
    V_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_0_ce0 : OUT STD_LOGIC;
    V_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_1_ce0 : OUT STD_LOGIC;
    V_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_1_ce0 : OUT STD_LOGIC;
    V_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of LLSSineReconstruction_update_V_ap_fixed_64_21_0_3_0_3_2_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_i_blk_n : STD_LOGIC;
    signal col_j_blk_n : STD_LOGIC;
    signal s_blk_n : STD_LOGIC;
    signal c_blk_n : STD_LOGIC;
    signal k_reg_214 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_cast_i_i_i_fu_225_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal c_cast_i_i_i_reg_514 : STD_LOGIC_VECTOR (106 downto 0);
    signal s_cast_i_i_i_fu_229_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal s_cast_i_i_i_reg_522 : STD_LOGIC_VECTOR (106 downto 0);
    signal col_i_load_cast_fu_233_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_i_load_cast_reg_530 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln155_1_fu_237_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln155_1_reg_535 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln155_fu_241_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln155_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_545_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_545_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln162_fu_277_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln162_reg_549 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln162_reg_549_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1118_fu_283_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_reg_575 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_10_fu_287_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_10_reg_580 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_1_fu_292_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_1_reg_585 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_11_fu_296_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_11_reg_590 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_2_fu_301_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_2_reg_595 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_12_fu_305_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_12_reg_600 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_3_fu_310_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_3_reg_605 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_13_fu_314_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_13_reg_610 : STD_LOGIC_VECTOR (106 downto 0);
    signal add_ln163_fu_329_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln163_reg_615 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln708_1_reg_620 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_3_reg_630 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal zext_ln155_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln162_1_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln162_fu_265_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_269_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln162_fu_261_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_10_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_11_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_12_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_13_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln162_fu_319_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_fu_333_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal tmp_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_337_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_4_fu_366_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_4_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_5_fu_370_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_5_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_4_fu_366_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_5_fu_370_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_1_fu_382_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln1192_1_fu_378_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1192_fu_374_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln713_fu_398_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_2_fu_412_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal tmp_2_fu_426_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_2_fu_416_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_2_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_8_fu_445_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_8_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_9_fu_449_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_9_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_8_fu_445_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_9_fu_449_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_3_fu_461_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln1192_3_fu_457_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1192_2_fu_453_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln713_1_fu_477_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln415_1_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_3_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_mul_64s_64s_107_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (106 downto 0) );
    end component;



begin
    mul_64s_64s_107_1_1_U604 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => V_i_V_0_q0,
        din1 => r_V_10_fu_287_p1,
        dout => r_V_10_fu_287_p2);

    mul_64s_64s_107_1_1_U605 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => V_j_V_0_q0,
        din1 => r_V_11_fu_296_p1,
        dout => r_V_11_fu_296_p2);

    mul_64s_64s_107_1_1_U606 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => V_i_V_1_q0,
        din1 => r_V_12_fu_305_p1,
        dout => r_V_12_fu_305_p2);

    mul_64s_64s_107_1_1_U607 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => V_j_V_1_q0,
        din1 => r_V_13_fu_314_p1,
        dout => r_V_13_fu_314_p2);

    mul_64s_64s_107_1_1_U608 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_4_fu_366_p0,
        din1 => r_V_4_fu_366_p1,
        dout => r_V_4_fu_366_p2);

    mul_64s_64s_107_1_1_U609 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_5_fu_370_p0,
        din1 => r_V_5_fu_370_p1,
        dout => r_V_5_fu_370_p2);

    mul_64s_64s_107_1_1_U610 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_8_fu_445_p0,
        din1 => r_V_8_fu_445_p1,
        dout => r_V_8_fu_445_p2);

    mul_64s_64s_107_1_1_U611 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_9_fu_449_p0,
        din1 => r_V_9_fu_449_p1,
        dout => r_V_9_fu_449_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln155_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                k_reg_214 <= add_ln155_fu_241_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_214 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln155_reg_545_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln163_reg_615 <= add_ln163_fu_329_p2;
                tmp_1_reg_625 <= add_ln713_fu_398_p2(42 downto 42);
                tmp_3_reg_635 <= add_ln713_1_fu_477_p2(42 downto 42);
                trunc_ln708_1_reg_620 <= ret_V_1_fu_382_p2(106 downto 43);
                trunc_ln708_3_reg_630 <= ret_V_3_fu_461_p2(106 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                c_cast_i_i_i_reg_514 <= c_cast_i_i_i_fu_225_p1;
                    col_i_load_cast_reg_530(1 downto 0) <= col_i_load_cast_fu_233_p1(1 downto 0);
                s_cast_i_i_i_reg_522 <= s_cast_i_i_i_fu_229_p1;
                    zext_ln155_1_reg_535(1 downto 0) <= zext_ln155_1_fu_237_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln155_reg_545 <= icmp_ln155_fu_247_p2;
                icmp_ln155_reg_545_pp0_iter1_reg <= icmp_ln155_reg_545;
                sub_ln162_reg_549_pp0_iter1_reg <= sub_ln162_reg_549;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln155_reg_545_pp0_iter2_reg <= icmp_ln155_reg_545_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln155_reg_545 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_10_reg_580 <= r_V_10_fu_287_p2;
                r_V_11_reg_590 <= r_V_11_fu_296_p2;
                r_V_12_reg_600 <= r_V_12_fu_305_p2;
                r_V_13_reg_610 <= r_V_13_fu_314_p2;
                sext_ln1118_1_reg_585 <= sext_ln1118_1_fu_292_p1;
                sext_ln1118_2_reg_595 <= sext_ln1118_2_fu_301_p1;
                sext_ln1118_3_reg_605 <= sext_ln1118_3_fu_310_p1;
                sext_ln1118_reg_575 <= sext_ln1118_fu_283_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln155_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln162_reg_549 <= sub_ln162_fu_277_p2;
            end if;
        end if;
    end process;
    col_i_load_cast_reg_530(2) <= '0';
    zext_ln155_1_reg_535(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n, ap_enable_reg_pp0_iter0, icmp_ln155_fu_247_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln155_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln155_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    V_i_V_0_address0 <= zext_ln155_fu_253_p1(1 - 1 downto 0);

    V_i_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            V_i_V_0_ce0 <= ap_const_logic_1;
        else 
            V_i_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_i_V_1_address0 <= zext_ln155_fu_253_p1(1 - 1 downto 0);

    V_i_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            V_i_V_1_ce0 <= ap_const_logic_1;
        else 
            V_i_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_V_0_address0 <= zext_ln155_fu_253_p1(1 - 1 downto 0);

    V_j_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            V_j_V_0_ce0 <= ap_const_logic_1;
        else 
            V_j_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_V_1_address0 <= zext_ln155_fu_253_p1(1 - 1 downto 0);

    V_j_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            V_j_V_1_ce0 <= ap_const_logic_1;
        else 
            V_j_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln155_fu_241_p2 <= std_logic_vector(unsigned(k_reg_214) + unsigned(ap_const_lv2_1));
    add_ln162_fu_319_p2 <= std_logic_vector(unsigned(sub_ln162_reg_549_pp0_iter1_reg) + unsigned(col_i_load_cast_reg_530));
    add_ln163_fu_329_p2 <= std_logic_vector(unsigned(sub_ln162_reg_549_pp0_iter1_reg) + unsigned(zext_ln155_1_reg_535));
    add_ln713_1_fu_477_p2 <= std_logic_vector(unsigned(trunc_ln1192_3_fu_457_p1) + unsigned(trunc_ln1192_2_fu_453_p1));
    add_ln713_fu_398_p2 <= std_logic_vector(unsigned(trunc_ln1192_1_fu_378_p1) + unsigned(trunc_ln1192_fu_374_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln155_fu_247_p2)
    begin
        if ((icmp_ln155_fu_247_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_blk_n <= c_empty_n;
        else 
            c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        c_cast_i_i_i_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_dout),107));


    c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_read <= ap_const_logic_1;
        else 
            c_read <= ap_const_logic_0;
        end if; 
    end process;


    col_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_blk_n <= col_i_empty_n;
        else 
            col_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_i_load_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_dout),3));

    col_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_read <= ap_const_logic_1;
        else 
            col_i_read <= ap_const_logic_0;
        end if; 
    end process;


    col_j_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_blk_n <= col_j_empty_n;
        else 
            col_j_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_j_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_read <= ap_const_logic_1;
        else 
            col_j_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln155_fu_247_p2 <= "1" when (k_reg_214 = ap_const_lv2_2) else "0";
    matV_V_0_address0 <= zext_ln163_fu_491_p1(3 - 1 downto 0);
    matV_V_0_address1 <= zext_ln162_1_fu_323_p1(3 - 1 downto 0);

    matV_V_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matV_V_0_ce0 <= ap_const_logic_1;
        else 
            matV_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matV_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matV_V_0_ce1 <= ap_const_logic_1;
        else 
            matV_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    matV_V_0_d0 <= std_logic_vector(unsigned(trunc_ln708_1_reg_620) + unsigned(zext_ln415_1_fu_496_p1));
    matV_V_0_d1 <= std_logic_vector(unsigned(trunc_ln_fu_337_p4) + unsigned(zext_ln415_fu_355_p1));

    matV_V_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln155_reg_545_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln155_reg_545_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matV_V_0_we0 <= ap_const_logic_1;
        else 
            matV_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matV_V_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln155_reg_545_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln155_reg_545_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matV_V_0_we1 <= ap_const_logic_1;
        else 
            matV_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    matV_V_1_address0 <= zext_ln163_fu_491_p1(3 - 1 downto 0);
    matV_V_1_address1 <= zext_ln162_1_fu_323_p1(3 - 1 downto 0);

    matV_V_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matV_V_1_ce0 <= ap_const_logic_1;
        else 
            matV_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matV_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matV_V_1_ce1 <= ap_const_logic_1;
        else 
            matV_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    matV_V_1_d0 <= std_logic_vector(unsigned(trunc_ln708_3_reg_630) + unsigned(zext_ln415_3_fu_505_p1));
    matV_V_1_d1 <= std_logic_vector(unsigned(trunc_ln708_2_fu_416_p4) + unsigned(zext_ln415_2_fu_434_p1));

    matV_V_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln155_reg_545_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln155_reg_545_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matV_V_1_we0 <= ap_const_logic_1;
        else 
            matV_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matV_V_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln155_reg_545_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln155_reg_545_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matV_V_1_we1 <= ap_const_logic_1;
        else 
            matV_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_10_fu_287_p1 <= c_cast_i_i_i_reg_514(64 - 1 downto 0);
    r_V_11_fu_296_p1 <= s_cast_i_i_i_reg_522(64 - 1 downto 0);
    r_V_12_fu_305_p1 <= c_cast_i_i_i_reg_514(64 - 1 downto 0);
    r_V_13_fu_314_p1 <= s_cast_i_i_i_reg_522(64 - 1 downto 0);
    r_V_4_fu_366_p0 <= sext_ln1118_reg_575(64 - 1 downto 0);
    r_V_4_fu_366_p1 <= s_cast_i_i_i_reg_522(64 - 1 downto 0);
    r_V_5_fu_370_p0 <= sext_ln1118_1_reg_585(64 - 1 downto 0);
    r_V_5_fu_370_p1 <= c_cast_i_i_i_reg_514(64 - 1 downto 0);
    r_V_8_fu_445_p0 <= sext_ln1118_2_reg_595(64 - 1 downto 0);
    r_V_8_fu_445_p1 <= s_cast_i_i_i_reg_522(64 - 1 downto 0);
    r_V_9_fu_449_p0 <= sext_ln1118_3_reg_605(64 - 1 downto 0);
    r_V_9_fu_449_p1 <= c_cast_i_i_i_reg_514(64 - 1 downto 0);
    ret_V_1_fu_382_p2 <= std_logic_vector(unsigned(r_V_5_fu_370_p2) + unsigned(r_V_4_fu_366_p2));
    ret_V_2_fu_412_p2 <= std_logic_vector(unsigned(r_V_12_reg_600) - unsigned(r_V_13_reg_610));
    ret_V_3_fu_461_p2 <= std_logic_vector(unsigned(r_V_9_fu_449_p2) + unsigned(r_V_8_fu_445_p2));
    ret_V_fu_333_p2 <= std_logic_vector(unsigned(r_V_10_reg_580) - unsigned(r_V_11_reg_590));

    s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_blk_n <= s_empty_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        s_cast_i_i_i_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_dout),107));


    s_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_read <= ap_const_logic_1;
        else 
            s_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1118_1_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(V_j_V_0_q0),107));

        sext_ln1118_2_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(V_i_V_1_q0),107));

        sext_ln1118_3_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(V_j_V_1_q0),107));

        sext_ln1118_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(V_i_V_0_q0),107));

    sub_ln162_fu_277_p2 <= std_logic_vector(unsigned(tmp_cast_fu_269_p3) - unsigned(zext_ln162_fu_261_p1));
    tmp_2_fu_426_p3 <= ret_V_2_fu_412_p2(42 downto 42);
    tmp_cast_fu_269_p3 <= (trunc_ln162_fu_265_p1 & ap_const_lv2_0);
    tmp_fu_347_p3 <= ret_V_fu_333_p2(42 downto 42);
    trunc_ln1192_1_fu_378_p1 <= r_V_5_fu_370_p2(43 - 1 downto 0);
    trunc_ln1192_2_fu_453_p1 <= r_V_8_fu_445_p2(43 - 1 downto 0);
    trunc_ln1192_3_fu_457_p1 <= r_V_9_fu_449_p2(43 - 1 downto 0);
    trunc_ln1192_fu_374_p1 <= r_V_4_fu_366_p2(43 - 1 downto 0);
    trunc_ln162_fu_265_p1 <= k_reg_214(1 - 1 downto 0);
    trunc_ln708_2_fu_416_p4 <= ret_V_2_fu_412_p2(106 downto 43);
    trunc_ln_fu_337_p4 <= ret_V_fu_333_p2(106 downto 43);
    zext_ln155_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_j_dout),3));
    zext_ln155_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_214),64));
    zext_ln162_1_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln162_fu_319_p2),64));
    zext_ln162_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_214),3));
    zext_ln163_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln163_reg_615),64));
    zext_ln415_1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_625),64));
    zext_ln415_2_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_426_p3),64));
    zext_ln415_3_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_635),64));
    zext_ln415_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_347_p3),64));
end behav;
