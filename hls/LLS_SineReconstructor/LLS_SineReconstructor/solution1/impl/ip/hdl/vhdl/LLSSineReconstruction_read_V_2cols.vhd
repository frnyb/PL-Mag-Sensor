-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_read_V_2cols is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matV_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    matV_0_ce0 : OUT STD_LOGIC;
    matV_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    matV_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    matV_0_ce1 : OUT STD_LOGIC;
    matV_0_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    V_i_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    V_i_0_ce0 : OUT STD_LOGIC;
    V_i_0_we0 : OUT STD_LOGIC;
    V_i_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    V_j_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    V_j_0_ce0 : OUT STD_LOGIC;
    V_j_0_we0 : OUT STD_LOGIC;
    V_j_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    n_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    n_empty_n : IN STD_LOGIC;
    n_read : OUT STD_LOGIC;
    col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_i_empty_n : IN STD_LOGIC;
    col_i_read : OUT STD_LOGIC;
    col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_j_empty_n : IN STD_LOGIC;
    col_j_read : OUT STD_LOGIC );
end;


architecture behav of LLSSineReconstruction_read_V_2cols is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n_blk_n : STD_LOGIC;
    signal col_i_blk_n : STD_LOGIC;
    signal col_j_blk_n : STD_LOGIC;
    signal n_read_reg_195 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i_load_cast_fu_128_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_i_load_cast_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln689_1_fu_132_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln689_1_reg_205 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln689_fu_136_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln689_reg_210 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln689_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_reg_215 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln696_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln696_reg_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln689_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_117 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln697_1_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln698_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_150_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln697_fu_146_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln697_fu_158_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln697_fu_164_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln698_fu_174_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln689_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    k_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_117 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_reg_117 <= add_ln689_reg_210;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln689_reg_210 <= add_ln689_fu_136_p2;
                    zext_ln689_reg_215(1 downto 0) <= zext_ln689_fu_142_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    col_i_load_cast_reg_200(1 downto 0) <= col_i_load_cast_fu_128_p1(1 downto 0);
                n_read_reg_195 <= n_dout;
                    zext_ln689_1_reg_205(1 downto 0) <= zext_ln689_1_fu_132_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln689_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln696_reg_234 <= icmp_ln696_fu_190_p2;
            end if;
        end if;
    end process;
    col_i_load_cast_reg_200(3 downto 2) <= "00";
    zext_ln689_1_reg_205(3 downto 2) <= "00";
    zext_ln689_reg_215(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, n_empty_n, col_i_empty_n, col_j_empty_n, ap_CS_fsm_state2, icmp_ln689_fu_184_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln689_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    V_i_0_address0 <= zext_ln689_reg_215(2 - 1 downto 0);

    V_i_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_i_0_ce0 <= ap_const_logic_1;
        else 
            V_i_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_i_0_d0 <= matV_0_q1;

    V_i_0_we0_assign_proc : process(icmp_ln696_reg_234, ap_CS_fsm_state3)
    begin
        if (((icmp_ln696_reg_234 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            V_i_0_we0 <= ap_const_logic_1;
        else 
            V_i_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_0_address0 <= zext_ln689_reg_215(2 - 1 downto 0);

    V_j_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_j_0_ce0 <= ap_const_logic_1;
        else 
            V_j_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_0_d0 <= matV_0_q0;

    V_j_0_we0_assign_proc : process(icmp_ln696_reg_234, ap_CS_fsm_state3)
    begin
        if (((icmp_ln696_reg_234 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            V_j_0_we0 <= ap_const_logic_1;
        else 
            V_j_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln689_fu_136_p2 <= std_logic_vector(unsigned(k_reg_117) + unsigned(ap_const_lv2_1));
    add_ln697_fu_164_p2 <= std_logic_vector(unsigned(sub_ln697_fu_158_p2) + unsigned(col_i_load_cast_reg_200));
    add_ln698_fu_174_p2 <= std_logic_vector(unsigned(sub_ln697_fu_158_p2) + unsigned(zext_ln689_1_reg_205));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, n_empty_n, col_i_empty_n, col_j_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln689_fu_184_p2)
    begin
        if (((icmp_ln689_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln689_fu_184_p2)
    begin
        if (((icmp_ln689_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    col_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_blk_n <= col_i_empty_n;
        else 
            col_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_i_load_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_dout),4));

    col_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_read <= ap_const_logic_1;
        else 
            col_i_read <= ap_const_logic_0;
        end if; 
    end process;


    col_j_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_blk_n <= col_j_empty_n;
        else 
            col_j_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_j_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_read <= ap_const_logic_1;
        else 
            col_j_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln689_fu_184_p2 <= "1" when (k_reg_117 = ap_const_lv2_3) else "0";
    icmp_ln696_fu_190_p2 <= "1" when (unsigned(k_reg_117) < unsigned(n_read_reg_195)) else "0";
    matV_0_address0 <= zext_ln698_fu_179_p1(4 - 1 downto 0);
    matV_0_address1 <= zext_ln697_1_fu_169_p1(4 - 1 downto 0);

    matV_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            matV_0_ce0 <= ap_const_logic_1;
        else 
            matV_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matV_0_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            matV_0_ce1 <= ap_const_logic_1;
        else 
            matV_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_blk_n <= n_empty_n;
        else 
            n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_read <= ap_const_logic_1;
        else 
            n_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln697_fu_158_p2 <= std_logic_vector(unsigned(tmp_fu_150_p3) - unsigned(zext_ln697_fu_146_p1));
    tmp_fu_150_p3 <= (k_reg_117 & ap_const_lv2_0);
    zext_ln689_1_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_j_dout),4));
    zext_ln689_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_117),64));
    zext_ln697_1_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln697_fu_164_p2),64));
    zext_ln697_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_117),4));
    zext_ln698_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln698_fu_174_p2),64));
end behav;
