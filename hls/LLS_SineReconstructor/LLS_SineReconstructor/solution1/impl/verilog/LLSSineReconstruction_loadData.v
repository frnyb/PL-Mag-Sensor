// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_loadData (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_times_address0,
        this_times_ce0,
        this_times_we0,
        this_times_d0,
        sliding_window_front_ptr_s,
        sliding_window_back_ptr_s,
        sliding_window_buffer_samples_timestamp_V_7_11_address0,
        sliding_window_buffer_samples_timestamp_V_7_11_ce0,
        sliding_window_buffer_samples_timestamp_V_7_11_q0,
        sliding_window_buffer_samples_timestamp_V_7_10_address0,
        sliding_window_buffer_samples_timestamp_V_7_10_ce0,
        sliding_window_buffer_samples_timestamp_V_7_10_q0,
        sliding_window_buffer_samples_timestamp_V_7_9_address0,
        sliding_window_buffer_samples_timestamp_V_7_9_ce0,
        sliding_window_buffer_samples_timestamp_V_7_9_q0,
        sliding_window_buffer_samples_timestamp_V_7_8_address0,
        sliding_window_buffer_samples_timestamp_V_7_8_ce0,
        sliding_window_buffer_samples_timestamp_V_7_8_q0,
        sliding_window_buffer_samples_timestamp_V_7_7_address0,
        sliding_window_buffer_samples_timestamp_V_7_7_ce0,
        sliding_window_buffer_samples_timestamp_V_7_7_q0,
        sliding_window_buffer_samples_timestamp_V_7_6_address0,
        sliding_window_buffer_samples_timestamp_V_7_6_ce0,
        sliding_window_buffer_samples_timestamp_V_7_6_q0,
        sliding_window_buffer_samples_timestamp_V_7_5_address0,
        sliding_window_buffer_samples_timestamp_V_7_5_ce0,
        sliding_window_buffer_samples_timestamp_V_7_5_q0,
        sliding_window_buffer_samples_timestamp_V_7_4_address0,
        sliding_window_buffer_samples_timestamp_V_7_4_ce0,
        sliding_window_buffer_samples_timestamp_V_7_4_q0,
        sliding_window_buffer_samples_timestamp_V_7_3_address0,
        sliding_window_buffer_samples_timestamp_V_7_3_ce0,
        sliding_window_buffer_samples_timestamp_V_7_3_q0,
        sliding_window_buffer_samples_timestamp_V_7_2_address0,
        sliding_window_buffer_samples_timestamp_V_7_2_ce0,
        sliding_window_buffer_samples_timestamp_V_7_2_q0,
        sliding_window_buffer_samples_timestamp_V_7_1_address0,
        sliding_window_buffer_samples_timestamp_V_7_1_ce0,
        sliding_window_buffer_samples_timestamp_V_7_1_q0,
        sliding_window_buffer_samples_timestamp_V_7_0_address0,
        sliding_window_buffer_samples_timestamp_V_7_0_ce0,
        sliding_window_buffer_samples_timestamp_V_7_0_q0,
        sliding_window_buffer_samples_sample_V_7_11_address0,
        sliding_window_buffer_samples_sample_V_7_11_ce0,
        sliding_window_buffer_samples_sample_V_7_11_q0,
        sliding_window_buffer_samples_sample_V_7_10_address0,
        sliding_window_buffer_samples_sample_V_7_10_ce0,
        sliding_window_buffer_samples_sample_V_7_10_q0,
        sliding_window_buffer_samples_sample_V_7_9_address0,
        sliding_window_buffer_samples_sample_V_7_9_ce0,
        sliding_window_buffer_samples_sample_V_7_9_q0,
        sliding_window_buffer_samples_sample_V_7_8_address0,
        sliding_window_buffer_samples_sample_V_7_8_ce0,
        sliding_window_buffer_samples_sample_V_7_8_q0,
        sliding_window_buffer_samples_sample_V_7_7_address0,
        sliding_window_buffer_samples_sample_V_7_7_ce0,
        sliding_window_buffer_samples_sample_V_7_7_q0,
        sliding_window_buffer_samples_sample_V_7_6_address0,
        sliding_window_buffer_samples_sample_V_7_6_ce0,
        sliding_window_buffer_samples_sample_V_7_6_q0,
        sliding_window_buffer_samples_sample_V_7_5_address0,
        sliding_window_buffer_samples_sample_V_7_5_ce0,
        sliding_window_buffer_samples_sample_V_7_5_q0,
        sliding_window_buffer_samples_sample_V_7_4_address0,
        sliding_window_buffer_samples_sample_V_7_4_ce0,
        sliding_window_buffer_samples_sample_V_7_4_q0,
        sliding_window_buffer_samples_sample_V_7_3_address0,
        sliding_window_buffer_samples_sample_V_7_3_ce0,
        sliding_window_buffer_samples_sample_V_7_3_q0,
        sliding_window_buffer_samples_sample_V_7_2_address0,
        sliding_window_buffer_samples_sample_V_7_2_ce0,
        sliding_window_buffer_samples_sample_V_7_2_q0,
        sliding_window_buffer_samples_sample_V_7_1_address0,
        sliding_window_buffer_samples_sample_V_7_1_ce0,
        sliding_window_buffer_samples_sample_V_7_1_q0,
        sliding_window_buffer_samples_sample_V_7_0_address0,
        sliding_window_buffer_samples_sample_V_7_0_ce0,
        sliding_window_buffer_samples_sample_V_7_0_q0,
        sliding_window_buffer_samples_timestamp_V_6_11_address0,
        sliding_window_buffer_samples_timestamp_V_6_11_ce0,
        sliding_window_buffer_samples_timestamp_V_6_11_q0,
        sliding_window_buffer_samples_timestamp_V_6_10_address0,
        sliding_window_buffer_samples_timestamp_V_6_10_ce0,
        sliding_window_buffer_samples_timestamp_V_6_10_q0,
        sliding_window_buffer_samples_timestamp_V_6_9_address0,
        sliding_window_buffer_samples_timestamp_V_6_9_ce0,
        sliding_window_buffer_samples_timestamp_V_6_9_q0,
        sliding_window_buffer_samples_timestamp_V_6_8_address0,
        sliding_window_buffer_samples_timestamp_V_6_8_ce0,
        sliding_window_buffer_samples_timestamp_V_6_8_q0,
        sliding_window_buffer_samples_timestamp_V_6_7_address0,
        sliding_window_buffer_samples_timestamp_V_6_7_ce0,
        sliding_window_buffer_samples_timestamp_V_6_7_q0,
        sliding_window_buffer_samples_timestamp_V_6_6_address0,
        sliding_window_buffer_samples_timestamp_V_6_6_ce0,
        sliding_window_buffer_samples_timestamp_V_6_6_q0,
        sliding_window_buffer_samples_timestamp_V_6_5_address0,
        sliding_window_buffer_samples_timestamp_V_6_5_ce0,
        sliding_window_buffer_samples_timestamp_V_6_5_q0,
        sliding_window_buffer_samples_timestamp_V_6_4_address0,
        sliding_window_buffer_samples_timestamp_V_6_4_ce0,
        sliding_window_buffer_samples_timestamp_V_6_4_q0,
        sliding_window_buffer_samples_timestamp_V_6_3_address0,
        sliding_window_buffer_samples_timestamp_V_6_3_ce0,
        sliding_window_buffer_samples_timestamp_V_6_3_q0,
        sliding_window_buffer_samples_timestamp_V_6_2_address0,
        sliding_window_buffer_samples_timestamp_V_6_2_ce0,
        sliding_window_buffer_samples_timestamp_V_6_2_q0,
        sliding_window_buffer_samples_timestamp_V_6_1_address0,
        sliding_window_buffer_samples_timestamp_V_6_1_ce0,
        sliding_window_buffer_samples_timestamp_V_6_1_q0,
        sliding_window_buffer_samples_timestamp_V_6_0_address0,
        sliding_window_buffer_samples_timestamp_V_6_0_ce0,
        sliding_window_buffer_samples_timestamp_V_6_0_q0,
        sliding_window_buffer_samples_sample_V_6_11_address0,
        sliding_window_buffer_samples_sample_V_6_11_ce0,
        sliding_window_buffer_samples_sample_V_6_11_q0,
        sliding_window_buffer_samples_sample_V_6_10_address0,
        sliding_window_buffer_samples_sample_V_6_10_ce0,
        sliding_window_buffer_samples_sample_V_6_10_q0,
        sliding_window_buffer_samples_sample_V_6_9_address0,
        sliding_window_buffer_samples_sample_V_6_9_ce0,
        sliding_window_buffer_samples_sample_V_6_9_q0,
        sliding_window_buffer_samples_sample_V_6_8_address0,
        sliding_window_buffer_samples_sample_V_6_8_ce0,
        sliding_window_buffer_samples_sample_V_6_8_q0,
        sliding_window_buffer_samples_sample_V_6_7_address0,
        sliding_window_buffer_samples_sample_V_6_7_ce0,
        sliding_window_buffer_samples_sample_V_6_7_q0,
        sliding_window_buffer_samples_sample_V_6_6_address0,
        sliding_window_buffer_samples_sample_V_6_6_ce0,
        sliding_window_buffer_samples_sample_V_6_6_q0,
        sliding_window_buffer_samples_sample_V_6_5_address0,
        sliding_window_buffer_samples_sample_V_6_5_ce0,
        sliding_window_buffer_samples_sample_V_6_5_q0,
        sliding_window_buffer_samples_sample_V_6_4_address0,
        sliding_window_buffer_samples_sample_V_6_4_ce0,
        sliding_window_buffer_samples_sample_V_6_4_q0,
        sliding_window_buffer_samples_sample_V_6_3_address0,
        sliding_window_buffer_samples_sample_V_6_3_ce0,
        sliding_window_buffer_samples_sample_V_6_3_q0,
        sliding_window_buffer_samples_sample_V_6_2_address0,
        sliding_window_buffer_samples_sample_V_6_2_ce0,
        sliding_window_buffer_samples_sample_V_6_2_q0,
        sliding_window_buffer_samples_sample_V_6_1_address0,
        sliding_window_buffer_samples_sample_V_6_1_ce0,
        sliding_window_buffer_samples_sample_V_6_1_q0,
        sliding_window_buffer_samples_sample_V_6_0_address0,
        sliding_window_buffer_samples_sample_V_6_0_ce0,
        sliding_window_buffer_samples_sample_V_6_0_q0,
        sliding_window_buffer_samples_timestamp_V_5_11_address0,
        sliding_window_buffer_samples_timestamp_V_5_11_ce0,
        sliding_window_buffer_samples_timestamp_V_5_11_q0,
        sliding_window_buffer_samples_timestamp_V_5_10_address0,
        sliding_window_buffer_samples_timestamp_V_5_10_ce0,
        sliding_window_buffer_samples_timestamp_V_5_10_q0,
        sliding_window_buffer_samples_timestamp_V_5_9_address0,
        sliding_window_buffer_samples_timestamp_V_5_9_ce0,
        sliding_window_buffer_samples_timestamp_V_5_9_q0,
        sliding_window_buffer_samples_timestamp_V_5_8_address0,
        sliding_window_buffer_samples_timestamp_V_5_8_ce0,
        sliding_window_buffer_samples_timestamp_V_5_8_q0,
        sliding_window_buffer_samples_timestamp_V_5_7_address0,
        sliding_window_buffer_samples_timestamp_V_5_7_ce0,
        sliding_window_buffer_samples_timestamp_V_5_7_q0,
        sliding_window_buffer_samples_timestamp_V_5_6_address0,
        sliding_window_buffer_samples_timestamp_V_5_6_ce0,
        sliding_window_buffer_samples_timestamp_V_5_6_q0,
        sliding_window_buffer_samples_timestamp_V_5_5_address0,
        sliding_window_buffer_samples_timestamp_V_5_5_ce0,
        sliding_window_buffer_samples_timestamp_V_5_5_q0,
        sliding_window_buffer_samples_timestamp_V_5_4_address0,
        sliding_window_buffer_samples_timestamp_V_5_4_ce0,
        sliding_window_buffer_samples_timestamp_V_5_4_q0,
        sliding_window_buffer_samples_timestamp_V_5_3_address0,
        sliding_window_buffer_samples_timestamp_V_5_3_ce0,
        sliding_window_buffer_samples_timestamp_V_5_3_q0,
        sliding_window_buffer_samples_timestamp_V_5_2_address0,
        sliding_window_buffer_samples_timestamp_V_5_2_ce0,
        sliding_window_buffer_samples_timestamp_V_5_2_q0,
        sliding_window_buffer_samples_timestamp_V_5_1_address0,
        sliding_window_buffer_samples_timestamp_V_5_1_ce0,
        sliding_window_buffer_samples_timestamp_V_5_1_q0,
        sliding_window_buffer_samples_timestamp_V_5_0_address0,
        sliding_window_buffer_samples_timestamp_V_5_0_ce0,
        sliding_window_buffer_samples_timestamp_V_5_0_q0,
        sliding_window_buffer_samples_sample_V_5_11_address0,
        sliding_window_buffer_samples_sample_V_5_11_ce0,
        sliding_window_buffer_samples_sample_V_5_11_q0,
        sliding_window_buffer_samples_sample_V_5_10_address0,
        sliding_window_buffer_samples_sample_V_5_10_ce0,
        sliding_window_buffer_samples_sample_V_5_10_q0,
        sliding_window_buffer_samples_sample_V_5_9_address0,
        sliding_window_buffer_samples_sample_V_5_9_ce0,
        sliding_window_buffer_samples_sample_V_5_9_q0,
        sliding_window_buffer_samples_sample_V_5_8_address0,
        sliding_window_buffer_samples_sample_V_5_8_ce0,
        sliding_window_buffer_samples_sample_V_5_8_q0,
        sliding_window_buffer_samples_sample_V_5_7_address0,
        sliding_window_buffer_samples_sample_V_5_7_ce0,
        sliding_window_buffer_samples_sample_V_5_7_q0,
        sliding_window_buffer_samples_sample_V_5_6_address0,
        sliding_window_buffer_samples_sample_V_5_6_ce0,
        sliding_window_buffer_samples_sample_V_5_6_q0,
        sliding_window_buffer_samples_sample_V_5_5_address0,
        sliding_window_buffer_samples_sample_V_5_5_ce0,
        sliding_window_buffer_samples_sample_V_5_5_q0,
        sliding_window_buffer_samples_sample_V_5_4_address0,
        sliding_window_buffer_samples_sample_V_5_4_ce0,
        sliding_window_buffer_samples_sample_V_5_4_q0,
        sliding_window_buffer_samples_sample_V_5_3_address0,
        sliding_window_buffer_samples_sample_V_5_3_ce0,
        sliding_window_buffer_samples_sample_V_5_3_q0,
        sliding_window_buffer_samples_sample_V_5_2_address0,
        sliding_window_buffer_samples_sample_V_5_2_ce0,
        sliding_window_buffer_samples_sample_V_5_2_q0,
        sliding_window_buffer_samples_sample_V_5_1_address0,
        sliding_window_buffer_samples_sample_V_5_1_ce0,
        sliding_window_buffer_samples_sample_V_5_1_q0,
        sliding_window_buffer_samples_sample_V_5_0_address0,
        sliding_window_buffer_samples_sample_V_5_0_ce0,
        sliding_window_buffer_samples_sample_V_5_0_q0,
        sliding_window_buffer_samples_timestamp_V_4_11_address0,
        sliding_window_buffer_samples_timestamp_V_4_11_ce0,
        sliding_window_buffer_samples_timestamp_V_4_11_q0,
        sliding_window_buffer_samples_timestamp_V_4_10_address0,
        sliding_window_buffer_samples_timestamp_V_4_10_ce0,
        sliding_window_buffer_samples_timestamp_V_4_10_q0,
        sliding_window_buffer_samples_timestamp_V_4_9_address0,
        sliding_window_buffer_samples_timestamp_V_4_9_ce0,
        sliding_window_buffer_samples_timestamp_V_4_9_q0,
        sliding_window_buffer_samples_timestamp_V_4_8_address0,
        sliding_window_buffer_samples_timestamp_V_4_8_ce0,
        sliding_window_buffer_samples_timestamp_V_4_8_q0,
        sliding_window_buffer_samples_timestamp_V_4_7_address0,
        sliding_window_buffer_samples_timestamp_V_4_7_ce0,
        sliding_window_buffer_samples_timestamp_V_4_7_q0,
        sliding_window_buffer_samples_timestamp_V_4_6_address0,
        sliding_window_buffer_samples_timestamp_V_4_6_ce0,
        sliding_window_buffer_samples_timestamp_V_4_6_q0,
        sliding_window_buffer_samples_timestamp_V_4_5_address0,
        sliding_window_buffer_samples_timestamp_V_4_5_ce0,
        sliding_window_buffer_samples_timestamp_V_4_5_q0,
        sliding_window_buffer_samples_timestamp_V_4_4_address0,
        sliding_window_buffer_samples_timestamp_V_4_4_ce0,
        sliding_window_buffer_samples_timestamp_V_4_4_q0,
        sliding_window_buffer_samples_timestamp_V_4_3_address0,
        sliding_window_buffer_samples_timestamp_V_4_3_ce0,
        sliding_window_buffer_samples_timestamp_V_4_3_q0,
        sliding_window_buffer_samples_timestamp_V_4_2_address0,
        sliding_window_buffer_samples_timestamp_V_4_2_ce0,
        sliding_window_buffer_samples_timestamp_V_4_2_q0,
        sliding_window_buffer_samples_timestamp_V_4_1_address0,
        sliding_window_buffer_samples_timestamp_V_4_1_ce0,
        sliding_window_buffer_samples_timestamp_V_4_1_q0,
        sliding_window_buffer_samples_timestamp_V_4_0_address0,
        sliding_window_buffer_samples_timestamp_V_4_0_ce0,
        sliding_window_buffer_samples_timestamp_V_4_0_q0,
        sliding_window_buffer_samples_sample_V_4_11_address0,
        sliding_window_buffer_samples_sample_V_4_11_ce0,
        sliding_window_buffer_samples_sample_V_4_11_q0,
        sliding_window_buffer_samples_sample_V_4_10_address0,
        sliding_window_buffer_samples_sample_V_4_10_ce0,
        sliding_window_buffer_samples_sample_V_4_10_q0,
        sliding_window_buffer_samples_sample_V_4_9_address0,
        sliding_window_buffer_samples_sample_V_4_9_ce0,
        sliding_window_buffer_samples_sample_V_4_9_q0,
        sliding_window_buffer_samples_sample_V_4_8_address0,
        sliding_window_buffer_samples_sample_V_4_8_ce0,
        sliding_window_buffer_samples_sample_V_4_8_q0,
        sliding_window_buffer_samples_sample_V_4_7_address0,
        sliding_window_buffer_samples_sample_V_4_7_ce0,
        sliding_window_buffer_samples_sample_V_4_7_q0,
        sliding_window_buffer_samples_sample_V_4_6_address0,
        sliding_window_buffer_samples_sample_V_4_6_ce0,
        sliding_window_buffer_samples_sample_V_4_6_q0,
        sliding_window_buffer_samples_sample_V_4_5_address0,
        sliding_window_buffer_samples_sample_V_4_5_ce0,
        sliding_window_buffer_samples_sample_V_4_5_q0,
        sliding_window_buffer_samples_sample_V_4_4_address0,
        sliding_window_buffer_samples_sample_V_4_4_ce0,
        sliding_window_buffer_samples_sample_V_4_4_q0,
        sliding_window_buffer_samples_sample_V_4_3_address0,
        sliding_window_buffer_samples_sample_V_4_3_ce0,
        sliding_window_buffer_samples_sample_V_4_3_q0,
        sliding_window_buffer_samples_sample_V_4_2_address0,
        sliding_window_buffer_samples_sample_V_4_2_ce0,
        sliding_window_buffer_samples_sample_V_4_2_q0,
        sliding_window_buffer_samples_sample_V_4_1_address0,
        sliding_window_buffer_samples_sample_V_4_1_ce0,
        sliding_window_buffer_samples_sample_V_4_1_q0,
        sliding_window_buffer_samples_sample_V_4_0_address0,
        sliding_window_buffer_samples_sample_V_4_0_ce0,
        sliding_window_buffer_samples_sample_V_4_0_q0,
        sliding_window_buffer_samples_timestamp_V_3_11_address0,
        sliding_window_buffer_samples_timestamp_V_3_11_ce0,
        sliding_window_buffer_samples_timestamp_V_3_11_q0,
        sliding_window_buffer_samples_timestamp_V_3_10_address0,
        sliding_window_buffer_samples_timestamp_V_3_10_ce0,
        sliding_window_buffer_samples_timestamp_V_3_10_q0,
        sliding_window_buffer_samples_timestamp_V_3_9_address0,
        sliding_window_buffer_samples_timestamp_V_3_9_ce0,
        sliding_window_buffer_samples_timestamp_V_3_9_q0,
        sliding_window_buffer_samples_timestamp_V_3_8_address0,
        sliding_window_buffer_samples_timestamp_V_3_8_ce0,
        sliding_window_buffer_samples_timestamp_V_3_8_q0,
        sliding_window_buffer_samples_timestamp_V_3_7_address0,
        sliding_window_buffer_samples_timestamp_V_3_7_ce0,
        sliding_window_buffer_samples_timestamp_V_3_7_q0,
        sliding_window_buffer_samples_timestamp_V_3_6_address0,
        sliding_window_buffer_samples_timestamp_V_3_6_ce0,
        sliding_window_buffer_samples_timestamp_V_3_6_q0,
        sliding_window_buffer_samples_timestamp_V_3_5_address0,
        sliding_window_buffer_samples_timestamp_V_3_5_ce0,
        sliding_window_buffer_samples_timestamp_V_3_5_q0,
        sliding_window_buffer_samples_timestamp_V_3_4_address0,
        sliding_window_buffer_samples_timestamp_V_3_4_ce0,
        sliding_window_buffer_samples_timestamp_V_3_4_q0,
        sliding_window_buffer_samples_timestamp_V_3_3_address0,
        sliding_window_buffer_samples_timestamp_V_3_3_ce0,
        sliding_window_buffer_samples_timestamp_V_3_3_q0,
        sliding_window_buffer_samples_timestamp_V_3_2_address0,
        sliding_window_buffer_samples_timestamp_V_3_2_ce0,
        sliding_window_buffer_samples_timestamp_V_3_2_q0,
        sliding_window_buffer_samples_timestamp_V_3_1_address0,
        sliding_window_buffer_samples_timestamp_V_3_1_ce0,
        sliding_window_buffer_samples_timestamp_V_3_1_q0,
        sliding_window_buffer_samples_timestamp_V_3_0_address0,
        sliding_window_buffer_samples_timestamp_V_3_0_ce0,
        sliding_window_buffer_samples_timestamp_V_3_0_q0,
        sliding_window_buffer_samples_sample_V_3_11_address0,
        sliding_window_buffer_samples_sample_V_3_11_ce0,
        sliding_window_buffer_samples_sample_V_3_11_q0,
        sliding_window_buffer_samples_sample_V_3_10_address0,
        sliding_window_buffer_samples_sample_V_3_10_ce0,
        sliding_window_buffer_samples_sample_V_3_10_q0,
        sliding_window_buffer_samples_sample_V_3_9_address0,
        sliding_window_buffer_samples_sample_V_3_9_ce0,
        sliding_window_buffer_samples_sample_V_3_9_q0,
        sliding_window_buffer_samples_sample_V_3_8_address0,
        sliding_window_buffer_samples_sample_V_3_8_ce0,
        sliding_window_buffer_samples_sample_V_3_8_q0,
        sliding_window_buffer_samples_sample_V_3_7_address0,
        sliding_window_buffer_samples_sample_V_3_7_ce0,
        sliding_window_buffer_samples_sample_V_3_7_q0,
        sliding_window_buffer_samples_sample_V_3_6_address0,
        sliding_window_buffer_samples_sample_V_3_6_ce0,
        sliding_window_buffer_samples_sample_V_3_6_q0,
        sliding_window_buffer_samples_sample_V_3_5_address0,
        sliding_window_buffer_samples_sample_V_3_5_ce0,
        sliding_window_buffer_samples_sample_V_3_5_q0,
        sliding_window_buffer_samples_sample_V_3_4_address0,
        sliding_window_buffer_samples_sample_V_3_4_ce0,
        sliding_window_buffer_samples_sample_V_3_4_q0,
        sliding_window_buffer_samples_sample_V_3_3_address0,
        sliding_window_buffer_samples_sample_V_3_3_ce0,
        sliding_window_buffer_samples_sample_V_3_3_q0,
        sliding_window_buffer_samples_sample_V_3_2_address0,
        sliding_window_buffer_samples_sample_V_3_2_ce0,
        sliding_window_buffer_samples_sample_V_3_2_q0,
        sliding_window_buffer_samples_sample_V_3_1_address0,
        sliding_window_buffer_samples_sample_V_3_1_ce0,
        sliding_window_buffer_samples_sample_V_3_1_q0,
        sliding_window_buffer_samples_sample_V_3_0_address0,
        sliding_window_buffer_samples_sample_V_3_0_ce0,
        sliding_window_buffer_samples_sample_V_3_0_q0,
        sliding_window_buffer_samples_timestamp_V_2_11_address0,
        sliding_window_buffer_samples_timestamp_V_2_11_ce0,
        sliding_window_buffer_samples_timestamp_V_2_11_q0,
        sliding_window_buffer_samples_timestamp_V_2_10_address0,
        sliding_window_buffer_samples_timestamp_V_2_10_ce0,
        sliding_window_buffer_samples_timestamp_V_2_10_q0,
        sliding_window_buffer_samples_timestamp_V_2_9_address0,
        sliding_window_buffer_samples_timestamp_V_2_9_ce0,
        sliding_window_buffer_samples_timestamp_V_2_9_q0,
        sliding_window_buffer_samples_timestamp_V_2_8_address0,
        sliding_window_buffer_samples_timestamp_V_2_8_ce0,
        sliding_window_buffer_samples_timestamp_V_2_8_q0,
        sliding_window_buffer_samples_timestamp_V_2_7_address0,
        sliding_window_buffer_samples_timestamp_V_2_7_ce0,
        sliding_window_buffer_samples_timestamp_V_2_7_q0,
        sliding_window_buffer_samples_timestamp_V_2_6_address0,
        sliding_window_buffer_samples_timestamp_V_2_6_ce0,
        sliding_window_buffer_samples_timestamp_V_2_6_q0,
        sliding_window_buffer_samples_timestamp_V_2_5_address0,
        sliding_window_buffer_samples_timestamp_V_2_5_ce0,
        sliding_window_buffer_samples_timestamp_V_2_5_q0,
        sliding_window_buffer_samples_timestamp_V_2_4_address0,
        sliding_window_buffer_samples_timestamp_V_2_4_ce0,
        sliding_window_buffer_samples_timestamp_V_2_4_q0,
        sliding_window_buffer_samples_timestamp_V_2_3_address0,
        sliding_window_buffer_samples_timestamp_V_2_3_ce0,
        sliding_window_buffer_samples_timestamp_V_2_3_q0,
        sliding_window_buffer_samples_timestamp_V_2_2_address0,
        sliding_window_buffer_samples_timestamp_V_2_2_ce0,
        sliding_window_buffer_samples_timestamp_V_2_2_q0,
        sliding_window_buffer_samples_timestamp_V_2_1_address0,
        sliding_window_buffer_samples_timestamp_V_2_1_ce0,
        sliding_window_buffer_samples_timestamp_V_2_1_q0,
        sliding_window_buffer_samples_timestamp_V_2_0_address0,
        sliding_window_buffer_samples_timestamp_V_2_0_ce0,
        sliding_window_buffer_samples_timestamp_V_2_0_q0,
        sliding_window_buffer_samples_sample_V_2_11_address0,
        sliding_window_buffer_samples_sample_V_2_11_ce0,
        sliding_window_buffer_samples_sample_V_2_11_q0,
        sliding_window_buffer_samples_sample_V_2_10_address0,
        sliding_window_buffer_samples_sample_V_2_10_ce0,
        sliding_window_buffer_samples_sample_V_2_10_q0,
        sliding_window_buffer_samples_sample_V_2_9_address0,
        sliding_window_buffer_samples_sample_V_2_9_ce0,
        sliding_window_buffer_samples_sample_V_2_9_q0,
        sliding_window_buffer_samples_sample_V_2_8_address0,
        sliding_window_buffer_samples_sample_V_2_8_ce0,
        sliding_window_buffer_samples_sample_V_2_8_q0,
        sliding_window_buffer_samples_sample_V_2_7_address0,
        sliding_window_buffer_samples_sample_V_2_7_ce0,
        sliding_window_buffer_samples_sample_V_2_7_q0,
        sliding_window_buffer_samples_sample_V_2_6_address0,
        sliding_window_buffer_samples_sample_V_2_6_ce0,
        sliding_window_buffer_samples_sample_V_2_6_q0,
        sliding_window_buffer_samples_sample_V_2_5_address0,
        sliding_window_buffer_samples_sample_V_2_5_ce0,
        sliding_window_buffer_samples_sample_V_2_5_q0,
        sliding_window_buffer_samples_sample_V_2_4_address0,
        sliding_window_buffer_samples_sample_V_2_4_ce0,
        sliding_window_buffer_samples_sample_V_2_4_q0,
        sliding_window_buffer_samples_sample_V_2_3_address0,
        sliding_window_buffer_samples_sample_V_2_3_ce0,
        sliding_window_buffer_samples_sample_V_2_3_q0,
        sliding_window_buffer_samples_sample_V_2_2_address0,
        sliding_window_buffer_samples_sample_V_2_2_ce0,
        sliding_window_buffer_samples_sample_V_2_2_q0,
        sliding_window_buffer_samples_sample_V_2_1_address0,
        sliding_window_buffer_samples_sample_V_2_1_ce0,
        sliding_window_buffer_samples_sample_V_2_1_q0,
        sliding_window_buffer_samples_sample_V_2_0_address0,
        sliding_window_buffer_samples_sample_V_2_0_ce0,
        sliding_window_buffer_samples_sample_V_2_0_q0,
        sliding_window_buffer_samples_timestamp_V_1_11_address0,
        sliding_window_buffer_samples_timestamp_V_1_11_ce0,
        sliding_window_buffer_samples_timestamp_V_1_11_q0,
        sliding_window_buffer_samples_timestamp_V_1_10_address0,
        sliding_window_buffer_samples_timestamp_V_1_10_ce0,
        sliding_window_buffer_samples_timestamp_V_1_10_q0,
        sliding_window_buffer_samples_timestamp_V_1_9_address0,
        sliding_window_buffer_samples_timestamp_V_1_9_ce0,
        sliding_window_buffer_samples_timestamp_V_1_9_q0,
        sliding_window_buffer_samples_timestamp_V_1_8_address0,
        sliding_window_buffer_samples_timestamp_V_1_8_ce0,
        sliding_window_buffer_samples_timestamp_V_1_8_q0,
        sliding_window_buffer_samples_timestamp_V_1_7_address0,
        sliding_window_buffer_samples_timestamp_V_1_7_ce0,
        sliding_window_buffer_samples_timestamp_V_1_7_q0,
        sliding_window_buffer_samples_timestamp_V_1_6_address0,
        sliding_window_buffer_samples_timestamp_V_1_6_ce0,
        sliding_window_buffer_samples_timestamp_V_1_6_q0,
        sliding_window_buffer_samples_timestamp_V_1_5_address0,
        sliding_window_buffer_samples_timestamp_V_1_5_ce0,
        sliding_window_buffer_samples_timestamp_V_1_5_q0,
        sliding_window_buffer_samples_timestamp_V_1_4_address0,
        sliding_window_buffer_samples_timestamp_V_1_4_ce0,
        sliding_window_buffer_samples_timestamp_V_1_4_q0,
        sliding_window_buffer_samples_timestamp_V_1_3_address0,
        sliding_window_buffer_samples_timestamp_V_1_3_ce0,
        sliding_window_buffer_samples_timestamp_V_1_3_q0,
        sliding_window_buffer_samples_timestamp_V_1_2_address0,
        sliding_window_buffer_samples_timestamp_V_1_2_ce0,
        sliding_window_buffer_samples_timestamp_V_1_2_q0,
        sliding_window_buffer_samples_timestamp_V_1_1_address0,
        sliding_window_buffer_samples_timestamp_V_1_1_ce0,
        sliding_window_buffer_samples_timestamp_V_1_1_q0,
        sliding_window_buffer_samples_timestamp_V_1_0_address0,
        sliding_window_buffer_samples_timestamp_V_1_0_ce0,
        sliding_window_buffer_samples_timestamp_V_1_0_q0,
        sliding_window_buffer_samples_sample_V_1_11_address0,
        sliding_window_buffer_samples_sample_V_1_11_ce0,
        sliding_window_buffer_samples_sample_V_1_11_q0,
        sliding_window_buffer_samples_sample_V_1_10_address0,
        sliding_window_buffer_samples_sample_V_1_10_ce0,
        sliding_window_buffer_samples_sample_V_1_10_q0,
        sliding_window_buffer_samples_sample_V_1_9_address0,
        sliding_window_buffer_samples_sample_V_1_9_ce0,
        sliding_window_buffer_samples_sample_V_1_9_q0,
        sliding_window_buffer_samples_sample_V_1_8_address0,
        sliding_window_buffer_samples_sample_V_1_8_ce0,
        sliding_window_buffer_samples_sample_V_1_8_q0,
        sliding_window_buffer_samples_sample_V_1_7_address0,
        sliding_window_buffer_samples_sample_V_1_7_ce0,
        sliding_window_buffer_samples_sample_V_1_7_q0,
        sliding_window_buffer_samples_sample_V_1_6_address0,
        sliding_window_buffer_samples_sample_V_1_6_ce0,
        sliding_window_buffer_samples_sample_V_1_6_q0,
        sliding_window_buffer_samples_sample_V_1_5_address0,
        sliding_window_buffer_samples_sample_V_1_5_ce0,
        sliding_window_buffer_samples_sample_V_1_5_q0,
        sliding_window_buffer_samples_sample_V_1_4_address0,
        sliding_window_buffer_samples_sample_V_1_4_ce0,
        sliding_window_buffer_samples_sample_V_1_4_q0,
        sliding_window_buffer_samples_sample_V_1_3_address0,
        sliding_window_buffer_samples_sample_V_1_3_ce0,
        sliding_window_buffer_samples_sample_V_1_3_q0,
        sliding_window_buffer_samples_sample_V_1_2_address0,
        sliding_window_buffer_samples_sample_V_1_2_ce0,
        sliding_window_buffer_samples_sample_V_1_2_q0,
        sliding_window_buffer_samples_sample_V_1_1_address0,
        sliding_window_buffer_samples_sample_V_1_1_ce0,
        sliding_window_buffer_samples_sample_V_1_1_q0,
        sliding_window_buffer_samples_sample_V_1_0_address0,
        sliding_window_buffer_samples_sample_V_1_0_ce0,
        sliding_window_buffer_samples_sample_V_1_0_q0,
        sliding_window_buffer_samples_timestamp_V_0_11_address0,
        sliding_window_buffer_samples_timestamp_V_0_11_ce0,
        sliding_window_buffer_samples_timestamp_V_0_11_q0,
        sliding_window_buffer_samples_timestamp_V_0_10_address0,
        sliding_window_buffer_samples_timestamp_V_0_10_ce0,
        sliding_window_buffer_samples_timestamp_V_0_10_q0,
        sliding_window_buffer_samples_timestamp_V_0_9_address0,
        sliding_window_buffer_samples_timestamp_V_0_9_ce0,
        sliding_window_buffer_samples_timestamp_V_0_9_q0,
        sliding_window_buffer_samples_timestamp_V_0_8_address0,
        sliding_window_buffer_samples_timestamp_V_0_8_ce0,
        sliding_window_buffer_samples_timestamp_V_0_8_q0,
        sliding_window_buffer_samples_timestamp_V_0_7_address0,
        sliding_window_buffer_samples_timestamp_V_0_7_ce0,
        sliding_window_buffer_samples_timestamp_V_0_7_q0,
        sliding_window_buffer_samples_timestamp_V_0_6_address0,
        sliding_window_buffer_samples_timestamp_V_0_6_ce0,
        sliding_window_buffer_samples_timestamp_V_0_6_q0,
        sliding_window_buffer_samples_timestamp_V_0_5_address0,
        sliding_window_buffer_samples_timestamp_V_0_5_ce0,
        sliding_window_buffer_samples_timestamp_V_0_5_q0,
        sliding_window_buffer_samples_timestamp_V_0_4_address0,
        sliding_window_buffer_samples_timestamp_V_0_4_ce0,
        sliding_window_buffer_samples_timestamp_V_0_4_q0,
        sliding_window_buffer_samples_timestamp_V_0_3_address0,
        sliding_window_buffer_samples_timestamp_V_0_3_ce0,
        sliding_window_buffer_samples_timestamp_V_0_3_q0,
        sliding_window_buffer_samples_timestamp_V_0_2_address0,
        sliding_window_buffer_samples_timestamp_V_0_2_ce0,
        sliding_window_buffer_samples_timestamp_V_0_2_q0,
        sliding_window_buffer_samples_timestamp_V_0_1_address0,
        sliding_window_buffer_samples_timestamp_V_0_1_ce0,
        sliding_window_buffer_samples_timestamp_V_0_1_q0,
        sliding_window_buffer_samples_timestamp_V_0_0_address0,
        sliding_window_buffer_samples_timestamp_V_0_0_ce0,
        sliding_window_buffer_samples_timestamp_V_0_0_q0,
        sliding_window_buffer_samples_sample_V_0_11_address0,
        sliding_window_buffer_samples_sample_V_0_11_ce0,
        sliding_window_buffer_samples_sample_V_0_11_q0,
        sliding_window_buffer_samples_sample_V_0_10_address0,
        sliding_window_buffer_samples_sample_V_0_10_ce0,
        sliding_window_buffer_samples_sample_V_0_10_q0,
        sliding_window_buffer_samples_sample_V_0_9_address0,
        sliding_window_buffer_samples_sample_V_0_9_ce0,
        sliding_window_buffer_samples_sample_V_0_9_q0,
        sliding_window_buffer_samples_sample_V_0_8_address0,
        sliding_window_buffer_samples_sample_V_0_8_ce0,
        sliding_window_buffer_samples_sample_V_0_8_q0,
        sliding_window_buffer_samples_sample_V_0_7_address0,
        sliding_window_buffer_samples_sample_V_0_7_ce0,
        sliding_window_buffer_samples_sample_V_0_7_q0,
        sliding_window_buffer_samples_sample_V_0_6_address0,
        sliding_window_buffer_samples_sample_V_0_6_ce0,
        sliding_window_buffer_samples_sample_V_0_6_q0,
        sliding_window_buffer_samples_sample_V_0_5_address0,
        sliding_window_buffer_samples_sample_V_0_5_ce0,
        sliding_window_buffer_samples_sample_V_0_5_q0,
        sliding_window_buffer_samples_sample_V_0_4_address0,
        sliding_window_buffer_samples_sample_V_0_4_ce0,
        sliding_window_buffer_samples_sample_V_0_4_q0,
        sliding_window_buffer_samples_sample_V_0_3_address0,
        sliding_window_buffer_samples_sample_V_0_3_ce0,
        sliding_window_buffer_samples_sample_V_0_3_q0,
        sliding_window_buffer_samples_sample_V_0_2_address0,
        sliding_window_buffer_samples_sample_V_0_2_ce0,
        sliding_window_buffer_samples_sample_V_0_2_q0,
        sliding_window_buffer_samples_sample_V_0_1_address0,
        sliding_window_buffer_samples_sample_V_0_1_ce0,
        sliding_window_buffer_samples_sample_V_0_1_q0,
        sliding_window_buffer_samples_sample_V_0_0_address0,
        sliding_window_buffer_samples_sample_V_0_0_ce0,
        sliding_window_buffer_samples_sample_V_0_0_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_pp0_stage0 = 17'd8192;
parameter    ap_ST_fsm_state17 = 17'd16384;
parameter    ap_ST_fsm_state18 = 17'd32768;
parameter    ap_ST_fsm_state19 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] this_times_address0;
output   this_times_ce0;
output   this_times_we0;
output  [63:0] this_times_d0;
input  [5:0] sliding_window_front_ptr_s;
input  [5:0] sliding_window_back_ptr_s;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_11_address0;
output   sliding_window_buffer_samples_timestamp_V_7_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_10_address0;
output   sliding_window_buffer_samples_timestamp_V_7_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_9_address0;
output   sliding_window_buffer_samples_timestamp_V_7_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_8_address0;
output   sliding_window_buffer_samples_timestamp_V_7_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_7_address0;
output   sliding_window_buffer_samples_timestamp_V_7_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_6_address0;
output   sliding_window_buffer_samples_timestamp_V_7_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_5_address0;
output   sliding_window_buffer_samples_timestamp_V_7_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_4_address0;
output   sliding_window_buffer_samples_timestamp_V_7_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_3_address0;
output   sliding_window_buffer_samples_timestamp_V_7_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_2_address0;
output   sliding_window_buffer_samples_timestamp_V_7_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_1_address0;
output   sliding_window_buffer_samples_timestamp_V_7_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_0_address0;
output   sliding_window_buffer_samples_timestamp_V_7_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_11_address0;
output   sliding_window_buffer_samples_sample_V_7_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_10_address0;
output   sliding_window_buffer_samples_sample_V_7_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_9_address0;
output   sliding_window_buffer_samples_sample_V_7_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_8_address0;
output   sliding_window_buffer_samples_sample_V_7_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_7_address0;
output   sliding_window_buffer_samples_sample_V_7_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_6_address0;
output   sliding_window_buffer_samples_sample_V_7_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_5_address0;
output   sliding_window_buffer_samples_sample_V_7_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_4_address0;
output   sliding_window_buffer_samples_sample_V_7_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_3_address0;
output   sliding_window_buffer_samples_sample_V_7_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_2_address0;
output   sliding_window_buffer_samples_sample_V_7_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_1_address0;
output   sliding_window_buffer_samples_sample_V_7_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_0_address0;
output   sliding_window_buffer_samples_sample_V_7_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_11_address0;
output   sliding_window_buffer_samples_timestamp_V_6_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_10_address0;
output   sliding_window_buffer_samples_timestamp_V_6_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_9_address0;
output   sliding_window_buffer_samples_timestamp_V_6_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_8_address0;
output   sliding_window_buffer_samples_timestamp_V_6_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_7_address0;
output   sliding_window_buffer_samples_timestamp_V_6_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_6_address0;
output   sliding_window_buffer_samples_timestamp_V_6_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_5_address0;
output   sliding_window_buffer_samples_timestamp_V_6_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_4_address0;
output   sliding_window_buffer_samples_timestamp_V_6_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_3_address0;
output   sliding_window_buffer_samples_timestamp_V_6_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_2_address0;
output   sliding_window_buffer_samples_timestamp_V_6_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_1_address0;
output   sliding_window_buffer_samples_timestamp_V_6_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_0_address0;
output   sliding_window_buffer_samples_timestamp_V_6_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_11_address0;
output   sliding_window_buffer_samples_sample_V_6_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_10_address0;
output   sliding_window_buffer_samples_sample_V_6_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_9_address0;
output   sliding_window_buffer_samples_sample_V_6_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_8_address0;
output   sliding_window_buffer_samples_sample_V_6_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_7_address0;
output   sliding_window_buffer_samples_sample_V_6_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_6_address0;
output   sliding_window_buffer_samples_sample_V_6_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_5_address0;
output   sliding_window_buffer_samples_sample_V_6_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_4_address0;
output   sliding_window_buffer_samples_sample_V_6_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_3_address0;
output   sliding_window_buffer_samples_sample_V_6_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_2_address0;
output   sliding_window_buffer_samples_sample_V_6_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_1_address0;
output   sliding_window_buffer_samples_sample_V_6_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_0_address0;
output   sliding_window_buffer_samples_sample_V_6_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_11_address0;
output   sliding_window_buffer_samples_timestamp_V_5_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_10_address0;
output   sliding_window_buffer_samples_timestamp_V_5_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_9_address0;
output   sliding_window_buffer_samples_timestamp_V_5_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_8_address0;
output   sliding_window_buffer_samples_timestamp_V_5_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_7_address0;
output   sliding_window_buffer_samples_timestamp_V_5_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_6_address0;
output   sliding_window_buffer_samples_timestamp_V_5_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_5_address0;
output   sliding_window_buffer_samples_timestamp_V_5_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_4_address0;
output   sliding_window_buffer_samples_timestamp_V_5_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_3_address0;
output   sliding_window_buffer_samples_timestamp_V_5_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_2_address0;
output   sliding_window_buffer_samples_timestamp_V_5_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_1_address0;
output   sliding_window_buffer_samples_timestamp_V_5_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_0_address0;
output   sliding_window_buffer_samples_timestamp_V_5_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_11_address0;
output   sliding_window_buffer_samples_sample_V_5_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_10_address0;
output   sliding_window_buffer_samples_sample_V_5_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_9_address0;
output   sliding_window_buffer_samples_sample_V_5_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_8_address0;
output   sliding_window_buffer_samples_sample_V_5_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_7_address0;
output   sliding_window_buffer_samples_sample_V_5_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_6_address0;
output   sliding_window_buffer_samples_sample_V_5_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_5_address0;
output   sliding_window_buffer_samples_sample_V_5_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_4_address0;
output   sliding_window_buffer_samples_sample_V_5_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_3_address0;
output   sliding_window_buffer_samples_sample_V_5_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_2_address0;
output   sliding_window_buffer_samples_sample_V_5_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_1_address0;
output   sliding_window_buffer_samples_sample_V_5_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_0_address0;
output   sliding_window_buffer_samples_sample_V_5_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_11_address0;
output   sliding_window_buffer_samples_timestamp_V_4_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_10_address0;
output   sliding_window_buffer_samples_timestamp_V_4_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_9_address0;
output   sliding_window_buffer_samples_timestamp_V_4_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_8_address0;
output   sliding_window_buffer_samples_timestamp_V_4_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_7_address0;
output   sliding_window_buffer_samples_timestamp_V_4_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_6_address0;
output   sliding_window_buffer_samples_timestamp_V_4_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_5_address0;
output   sliding_window_buffer_samples_timestamp_V_4_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_4_address0;
output   sliding_window_buffer_samples_timestamp_V_4_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_3_address0;
output   sliding_window_buffer_samples_timestamp_V_4_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_2_address0;
output   sliding_window_buffer_samples_timestamp_V_4_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_1_address0;
output   sliding_window_buffer_samples_timestamp_V_4_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_0_address0;
output   sliding_window_buffer_samples_timestamp_V_4_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_11_address0;
output   sliding_window_buffer_samples_sample_V_4_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_10_address0;
output   sliding_window_buffer_samples_sample_V_4_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_9_address0;
output   sliding_window_buffer_samples_sample_V_4_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_8_address0;
output   sliding_window_buffer_samples_sample_V_4_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_7_address0;
output   sliding_window_buffer_samples_sample_V_4_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_6_address0;
output   sliding_window_buffer_samples_sample_V_4_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_5_address0;
output   sliding_window_buffer_samples_sample_V_4_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_4_address0;
output   sliding_window_buffer_samples_sample_V_4_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_3_address0;
output   sliding_window_buffer_samples_sample_V_4_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_2_address0;
output   sliding_window_buffer_samples_sample_V_4_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_1_address0;
output   sliding_window_buffer_samples_sample_V_4_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_0_address0;
output   sliding_window_buffer_samples_sample_V_4_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_11_address0;
output   sliding_window_buffer_samples_timestamp_V_3_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_10_address0;
output   sliding_window_buffer_samples_timestamp_V_3_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_9_address0;
output   sliding_window_buffer_samples_timestamp_V_3_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_8_address0;
output   sliding_window_buffer_samples_timestamp_V_3_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_7_address0;
output   sliding_window_buffer_samples_timestamp_V_3_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_6_address0;
output   sliding_window_buffer_samples_timestamp_V_3_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_5_address0;
output   sliding_window_buffer_samples_timestamp_V_3_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_4_address0;
output   sliding_window_buffer_samples_timestamp_V_3_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_3_address0;
output   sliding_window_buffer_samples_timestamp_V_3_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_2_address0;
output   sliding_window_buffer_samples_timestamp_V_3_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_1_address0;
output   sliding_window_buffer_samples_timestamp_V_3_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_0_address0;
output   sliding_window_buffer_samples_timestamp_V_3_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_11_address0;
output   sliding_window_buffer_samples_sample_V_3_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_10_address0;
output   sliding_window_buffer_samples_sample_V_3_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_9_address0;
output   sliding_window_buffer_samples_sample_V_3_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_8_address0;
output   sliding_window_buffer_samples_sample_V_3_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_7_address0;
output   sliding_window_buffer_samples_sample_V_3_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_6_address0;
output   sliding_window_buffer_samples_sample_V_3_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_5_address0;
output   sliding_window_buffer_samples_sample_V_3_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_4_address0;
output   sliding_window_buffer_samples_sample_V_3_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_3_address0;
output   sliding_window_buffer_samples_sample_V_3_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_2_address0;
output   sliding_window_buffer_samples_sample_V_3_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_1_address0;
output   sliding_window_buffer_samples_sample_V_3_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_0_address0;
output   sliding_window_buffer_samples_sample_V_3_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_11_address0;
output   sliding_window_buffer_samples_timestamp_V_2_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_10_address0;
output   sliding_window_buffer_samples_timestamp_V_2_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_9_address0;
output   sliding_window_buffer_samples_timestamp_V_2_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_8_address0;
output   sliding_window_buffer_samples_timestamp_V_2_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_7_address0;
output   sliding_window_buffer_samples_timestamp_V_2_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_6_address0;
output   sliding_window_buffer_samples_timestamp_V_2_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_5_address0;
output   sliding_window_buffer_samples_timestamp_V_2_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_4_address0;
output   sliding_window_buffer_samples_timestamp_V_2_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_3_address0;
output   sliding_window_buffer_samples_timestamp_V_2_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_2_address0;
output   sliding_window_buffer_samples_timestamp_V_2_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_1_address0;
output   sliding_window_buffer_samples_timestamp_V_2_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_0_address0;
output   sliding_window_buffer_samples_timestamp_V_2_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_11_address0;
output   sliding_window_buffer_samples_sample_V_2_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_10_address0;
output   sliding_window_buffer_samples_sample_V_2_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_9_address0;
output   sliding_window_buffer_samples_sample_V_2_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_8_address0;
output   sliding_window_buffer_samples_sample_V_2_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_7_address0;
output   sliding_window_buffer_samples_sample_V_2_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_6_address0;
output   sliding_window_buffer_samples_sample_V_2_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_5_address0;
output   sliding_window_buffer_samples_sample_V_2_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_4_address0;
output   sliding_window_buffer_samples_sample_V_2_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_3_address0;
output   sliding_window_buffer_samples_sample_V_2_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_2_address0;
output   sliding_window_buffer_samples_sample_V_2_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_1_address0;
output   sliding_window_buffer_samples_sample_V_2_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_0_address0;
output   sliding_window_buffer_samples_sample_V_2_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_11_address0;
output   sliding_window_buffer_samples_timestamp_V_1_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_10_address0;
output   sliding_window_buffer_samples_timestamp_V_1_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_9_address0;
output   sliding_window_buffer_samples_timestamp_V_1_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_8_address0;
output   sliding_window_buffer_samples_timestamp_V_1_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_7_address0;
output   sliding_window_buffer_samples_timestamp_V_1_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_6_address0;
output   sliding_window_buffer_samples_timestamp_V_1_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_5_address0;
output   sliding_window_buffer_samples_timestamp_V_1_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_4_address0;
output   sliding_window_buffer_samples_timestamp_V_1_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_3_address0;
output   sliding_window_buffer_samples_timestamp_V_1_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_2_address0;
output   sliding_window_buffer_samples_timestamp_V_1_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_1_address0;
output   sliding_window_buffer_samples_timestamp_V_1_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_0_address0;
output   sliding_window_buffer_samples_timestamp_V_1_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_11_address0;
output   sliding_window_buffer_samples_sample_V_1_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_10_address0;
output   sliding_window_buffer_samples_sample_V_1_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_9_address0;
output   sliding_window_buffer_samples_sample_V_1_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_8_address0;
output   sliding_window_buffer_samples_sample_V_1_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_7_address0;
output   sliding_window_buffer_samples_sample_V_1_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_6_address0;
output   sliding_window_buffer_samples_sample_V_1_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_5_address0;
output   sliding_window_buffer_samples_sample_V_1_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_4_address0;
output   sliding_window_buffer_samples_sample_V_1_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_3_address0;
output   sliding_window_buffer_samples_sample_V_1_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_2_address0;
output   sliding_window_buffer_samples_sample_V_1_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_1_address0;
output   sliding_window_buffer_samples_sample_V_1_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_0_address0;
output   sliding_window_buffer_samples_sample_V_1_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_11_address0;
output   sliding_window_buffer_samples_timestamp_V_0_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_10_address0;
output   sliding_window_buffer_samples_timestamp_V_0_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_9_address0;
output   sliding_window_buffer_samples_timestamp_V_0_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_8_address0;
output   sliding_window_buffer_samples_timestamp_V_0_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_7_address0;
output   sliding_window_buffer_samples_timestamp_V_0_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_6_address0;
output   sliding_window_buffer_samples_timestamp_V_0_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_5_address0;
output   sliding_window_buffer_samples_timestamp_V_0_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_4_address0;
output   sliding_window_buffer_samples_timestamp_V_0_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_3_address0;
output   sliding_window_buffer_samples_timestamp_V_0_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_2_address0;
output   sliding_window_buffer_samples_timestamp_V_0_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_1_address0;
output   sliding_window_buffer_samples_timestamp_V_0_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_0_address0;
output   sliding_window_buffer_samples_timestamp_V_0_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_11_address0;
output   sliding_window_buffer_samples_sample_V_0_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_10_address0;
output   sliding_window_buffer_samples_sample_V_0_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_9_address0;
output   sliding_window_buffer_samples_sample_V_0_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_8_address0;
output   sliding_window_buffer_samples_sample_V_0_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_7_address0;
output   sliding_window_buffer_samples_sample_V_0_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_6_address0;
output   sliding_window_buffer_samples_sample_V_0_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_5_address0;
output   sliding_window_buffer_samples_sample_V_0_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_4_address0;
output   sliding_window_buffer_samples_sample_V_0_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_3_address0;
output   sliding_window_buffer_samples_sample_V_0_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_2_address0;
output   sliding_window_buffer_samples_sample_V_0_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_1_address0;
output   sliding_window_buffer_samples_sample_V_0_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_0_address0;
output   sliding_window_buffer_samples_sample_V_0_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_0_q0;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg this_times_ce0;
reg this_times_we0;
reg sliding_window_buffer_samples_timestamp_V_7_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_0_ce0;
reg sliding_window_buffer_samples_sample_V_7_11_ce0;
reg sliding_window_buffer_samples_sample_V_7_10_ce0;
reg sliding_window_buffer_samples_sample_V_7_9_ce0;
reg sliding_window_buffer_samples_sample_V_7_8_ce0;
reg sliding_window_buffer_samples_sample_V_7_7_ce0;
reg sliding_window_buffer_samples_sample_V_7_6_ce0;
reg sliding_window_buffer_samples_sample_V_7_5_ce0;
reg sliding_window_buffer_samples_sample_V_7_4_ce0;
reg sliding_window_buffer_samples_sample_V_7_3_ce0;
reg sliding_window_buffer_samples_sample_V_7_2_ce0;
reg sliding_window_buffer_samples_sample_V_7_1_ce0;
reg sliding_window_buffer_samples_sample_V_7_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_0_ce0;
reg sliding_window_buffer_samples_sample_V_6_11_ce0;
reg sliding_window_buffer_samples_sample_V_6_10_ce0;
reg sliding_window_buffer_samples_sample_V_6_9_ce0;
reg sliding_window_buffer_samples_sample_V_6_8_ce0;
reg sliding_window_buffer_samples_sample_V_6_7_ce0;
reg sliding_window_buffer_samples_sample_V_6_6_ce0;
reg sliding_window_buffer_samples_sample_V_6_5_ce0;
reg sliding_window_buffer_samples_sample_V_6_4_ce0;
reg sliding_window_buffer_samples_sample_V_6_3_ce0;
reg sliding_window_buffer_samples_sample_V_6_2_ce0;
reg sliding_window_buffer_samples_sample_V_6_1_ce0;
reg sliding_window_buffer_samples_sample_V_6_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_0_ce0;
reg sliding_window_buffer_samples_sample_V_5_11_ce0;
reg sliding_window_buffer_samples_sample_V_5_10_ce0;
reg sliding_window_buffer_samples_sample_V_5_9_ce0;
reg sliding_window_buffer_samples_sample_V_5_8_ce0;
reg sliding_window_buffer_samples_sample_V_5_7_ce0;
reg sliding_window_buffer_samples_sample_V_5_6_ce0;
reg sliding_window_buffer_samples_sample_V_5_5_ce0;
reg sliding_window_buffer_samples_sample_V_5_4_ce0;
reg sliding_window_buffer_samples_sample_V_5_3_ce0;
reg sliding_window_buffer_samples_sample_V_5_2_ce0;
reg sliding_window_buffer_samples_sample_V_5_1_ce0;
reg sliding_window_buffer_samples_sample_V_5_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_0_ce0;
reg sliding_window_buffer_samples_sample_V_4_11_ce0;
reg sliding_window_buffer_samples_sample_V_4_10_ce0;
reg sliding_window_buffer_samples_sample_V_4_9_ce0;
reg sliding_window_buffer_samples_sample_V_4_8_ce0;
reg sliding_window_buffer_samples_sample_V_4_7_ce0;
reg sliding_window_buffer_samples_sample_V_4_6_ce0;
reg sliding_window_buffer_samples_sample_V_4_5_ce0;
reg sliding_window_buffer_samples_sample_V_4_4_ce0;
reg sliding_window_buffer_samples_sample_V_4_3_ce0;
reg sliding_window_buffer_samples_sample_V_4_2_ce0;
reg sliding_window_buffer_samples_sample_V_4_1_ce0;
reg sliding_window_buffer_samples_sample_V_4_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_0_ce0;
reg sliding_window_buffer_samples_sample_V_3_11_ce0;
reg sliding_window_buffer_samples_sample_V_3_10_ce0;
reg sliding_window_buffer_samples_sample_V_3_9_ce0;
reg sliding_window_buffer_samples_sample_V_3_8_ce0;
reg sliding_window_buffer_samples_sample_V_3_7_ce0;
reg sliding_window_buffer_samples_sample_V_3_6_ce0;
reg sliding_window_buffer_samples_sample_V_3_5_ce0;
reg sliding_window_buffer_samples_sample_V_3_4_ce0;
reg sliding_window_buffer_samples_sample_V_3_3_ce0;
reg sliding_window_buffer_samples_sample_V_3_2_ce0;
reg sliding_window_buffer_samples_sample_V_3_1_ce0;
reg sliding_window_buffer_samples_sample_V_3_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_0_ce0;
reg sliding_window_buffer_samples_sample_V_2_11_ce0;
reg sliding_window_buffer_samples_sample_V_2_10_ce0;
reg sliding_window_buffer_samples_sample_V_2_9_ce0;
reg sliding_window_buffer_samples_sample_V_2_8_ce0;
reg sliding_window_buffer_samples_sample_V_2_7_ce0;
reg sliding_window_buffer_samples_sample_V_2_6_ce0;
reg sliding_window_buffer_samples_sample_V_2_5_ce0;
reg sliding_window_buffer_samples_sample_V_2_4_ce0;
reg sliding_window_buffer_samples_sample_V_2_3_ce0;
reg sliding_window_buffer_samples_sample_V_2_2_ce0;
reg sliding_window_buffer_samples_sample_V_2_1_ce0;
reg sliding_window_buffer_samples_sample_V_2_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_0_ce0;
reg sliding_window_buffer_samples_sample_V_1_11_ce0;
reg sliding_window_buffer_samples_sample_V_1_10_ce0;
reg sliding_window_buffer_samples_sample_V_1_9_ce0;
reg sliding_window_buffer_samples_sample_V_1_8_ce0;
reg sliding_window_buffer_samples_sample_V_1_7_ce0;
reg sliding_window_buffer_samples_sample_V_1_6_ce0;
reg sliding_window_buffer_samples_sample_V_1_5_ce0;
reg sliding_window_buffer_samples_sample_V_1_4_ce0;
reg sliding_window_buffer_samples_sample_V_1_3_ce0;
reg sliding_window_buffer_samples_sample_V_1_2_ce0;
reg sliding_window_buffer_samples_sample_V_1_1_ce0;
reg sliding_window_buffer_samples_sample_V_1_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_0_ce0;
reg sliding_window_buffer_samples_sample_V_0_11_ce0;
reg sliding_window_buffer_samples_sample_V_0_10_ce0;
reg sliding_window_buffer_samples_sample_V_0_9_ce0;
reg sliding_window_buffer_samples_sample_V_0_8_ce0;
reg sliding_window_buffer_samples_sample_V_0_7_ce0;
reg sliding_window_buffer_samples_sample_V_0_6_ce0;
reg sliding_window_buffer_samples_sample_V_0_5_ce0;
reg sliding_window_buffer_samples_sample_V_0_4_ce0;
reg sliding_window_buffer_samples_sample_V_0_3_ce0;
reg sliding_window_buffer_samples_sample_V_0_2_ce0;
reg sliding_window_buffer_samples_sample_V_0_1_ce0;
reg sliding_window_buffer_samples_sample_V_0_0_ce0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] k_reg_5609;
reg   [3:0] k_reg_5609_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state14_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_state16_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] trunc_ln170_fu_5750_p1;
reg   [4:0] trunc_ln170_reg_7629;
wire  signed [6:0] sext_ln170_fu_5754_p1;
reg  signed [6:0] sext_ln170_reg_7634;
wire   [4:0] trunc_ln22_fu_5762_p1;
reg   [4:0] trunc_ln22_reg_7639;
wire   [4:0] i_3_fu_5771_p2;
reg   [4:0] i_3_reg_7644;
wire    ap_CS_fsm_state2;
reg   [11:0] max_vals_V_11_load_reg_7649;
reg   [11:0] max_vals_V_11_1_load_reg_7654;
reg   [11:0] max_vals_V_11_2_load_reg_7659;
reg   [11:0] max_vals_V_11_3_load_reg_7664;
reg   [11:0] max_vals_V_11_4_load_reg_7669;
reg   [11:0] max_vals_V_11_5_load_reg_7674;
reg   [11:0] max_vals_V_11_6_load_reg_7679;
reg   [11:0] max_vals_V_11_7_load_reg_7684;
reg   [11:0] max_vals_V_11_8_load_reg_7689;
reg   [11:0] max_vals_V_11_9_load_reg_7694;
reg   [11:0] max_vals_V_11_10_load_reg_7699;
wire   [0:0] icmp_ln170_fu_5781_p2;
wire   [63:0] zext_ln34_fu_5842_p1;
reg   [63:0] zext_ln34_reg_7708;
wire   [11:0] max_diff_V_fu_5900_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_fu_5906_p3;
reg   [7:0] tmp_reg_8821;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln176_fu_5914_p2;
reg   [3:0] add_ln176_reg_8826;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln176_fu_5920_p1;
reg   [63:0] zext_ln176_reg_8831;
wire   [7:0] add_ln179_fu_5938_p2;
reg   [7:0] add_ln179_reg_8858;
wire   [0:0] icmp_ln176_fu_5932_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [0:0] cmp16_fu_5947_p2;
reg   [0:0] cmp16_reg_8984;
wire    ap_CS_fsm_state13;
reg   [7:0] this_times_addr_reg_8992;
wire   [0:0] sel_tmp25_fu_5952_p2;
reg   [0:0] sel_tmp25_reg_8997;
wire   [3:0] add_ln184_fu_5958_p2;
reg   [3:0] add_ln184_reg_9002;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln184_fu_5964_p2;
reg   [0:0] icmp_ln184_reg_9007;
wire   [63:0] trunc_ln190_cast_fu_5970_p1;
reg   [63:0] trunc_ln190_cast_reg_9011;
wire   [0:0] icmp_ln211_fu_5975_p2;
reg   [0:0] icmp_ln211_reg_9026;
wire   [79:0] r_V_42_fu_5993_p2;
reg   [79:0] r_V_42_reg_9030;
wire   [3:0] add_ln241_fu_6306_p2;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln241_fu_6300_p2;
wire   [31:0] select_ln245_fu_6366_p3;
wire   [11:0] max_diff_V_3_fu_6374_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state14;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [2:0] sample_period_samples_0_sample_V_address0;
reg    sample_period_samples_0_sample_V_ce0;
reg    sample_period_samples_0_sample_V_we0;
reg   [11:0] sample_period_samples_0_sample_V_d0;
wire   [11:0] sample_period_samples_0_sample_V_q0;
reg   [2:0] sample_period_samples_0_sample_V_address1;
reg    sample_period_samples_0_sample_V_ce1;
reg    sample_period_samples_0_sample_V_we1;
reg   [11:0] sample_period_samples_0_sample_V_d1;
reg   [2:0] sample_period_samples_1_sample_V_address0;
reg    sample_period_samples_1_sample_V_ce0;
reg    sample_period_samples_1_sample_V_we0;
reg   [11:0] sample_period_samples_1_sample_V_d0;
wire   [11:0] sample_period_samples_1_sample_V_q0;
reg   [2:0] sample_period_samples_1_sample_V_address1;
reg    sample_period_samples_1_sample_V_ce1;
reg    sample_period_samples_1_sample_V_we1;
reg   [11:0] sample_period_samples_1_sample_V_d1;
reg   [2:0] sample_period_samples_2_sample_V_address0;
reg    sample_period_samples_2_sample_V_ce0;
reg    sample_period_samples_2_sample_V_we0;
reg   [11:0] sample_period_samples_2_sample_V_d0;
wire   [11:0] sample_period_samples_2_sample_V_q0;
reg   [2:0] sample_period_samples_2_sample_V_address1;
reg    sample_period_samples_2_sample_V_ce1;
reg    sample_period_samples_2_sample_V_we1;
reg   [11:0] sample_period_samples_2_sample_V_d1;
reg   [2:0] sample_period_samples_3_sample_V_address0;
reg    sample_period_samples_3_sample_V_ce0;
reg    sample_period_samples_3_sample_V_we0;
reg   [11:0] sample_period_samples_3_sample_V_d0;
wire   [11:0] sample_period_samples_3_sample_V_q0;
reg   [2:0] sample_period_samples_3_sample_V_address1;
reg    sample_period_samples_3_sample_V_ce1;
reg    sample_period_samples_3_sample_V_we1;
reg   [11:0] sample_period_samples_3_sample_V_d1;
reg   [2:0] sample_period_samples_4_sample_V_address0;
reg    sample_period_samples_4_sample_V_ce0;
reg    sample_period_samples_4_sample_V_we0;
reg   [11:0] sample_period_samples_4_sample_V_d0;
wire   [11:0] sample_period_samples_4_sample_V_q0;
reg   [2:0] sample_period_samples_4_sample_V_address1;
reg    sample_period_samples_4_sample_V_ce1;
reg    sample_period_samples_4_sample_V_we1;
reg   [11:0] sample_period_samples_4_sample_V_d1;
reg   [2:0] sample_period_samples_5_sample_V_address0;
reg    sample_period_samples_5_sample_V_ce0;
reg    sample_period_samples_5_sample_V_we0;
reg   [11:0] sample_period_samples_5_sample_V_d0;
wire   [11:0] sample_period_samples_5_sample_V_q0;
reg   [2:0] sample_period_samples_5_sample_V_address1;
reg    sample_period_samples_5_sample_V_ce1;
reg    sample_period_samples_5_sample_V_we1;
reg   [11:0] sample_period_samples_5_sample_V_d1;
reg   [2:0] sample_period_samples_6_sample_V_address0;
reg    sample_period_samples_6_sample_V_ce0;
reg    sample_period_samples_6_sample_V_we0;
reg   [11:0] sample_period_samples_6_sample_V_d0;
wire   [11:0] sample_period_samples_6_sample_V_q0;
reg   [2:0] sample_period_samples_6_sample_V_address1;
reg    sample_period_samples_6_sample_V_ce1;
reg    sample_period_samples_6_sample_V_we1;
reg   [11:0] sample_period_samples_6_sample_V_d1;
reg   [2:0] sample_period_samples_7_sample_V_address0;
reg    sample_period_samples_7_sample_V_ce0;
reg    sample_period_samples_7_sample_V_we0;
reg   [11:0] sample_period_samples_7_sample_V_d0;
wire   [11:0] sample_period_samples_7_sample_V_q0;
reg   [2:0] sample_period_samples_7_sample_V_address1;
reg    sample_period_samples_7_sample_V_ce1;
reg    sample_period_samples_7_sample_V_we1;
reg   [11:0] sample_period_samples_7_sample_V_d1;
reg   [2:0] sample_period_samples_8_sample_V_address0;
reg    sample_period_samples_8_sample_V_ce0;
reg    sample_period_samples_8_sample_V_we0;
reg   [11:0] sample_period_samples_8_sample_V_d0;
wire   [11:0] sample_period_samples_8_sample_V_q0;
reg   [2:0] sample_period_samples_8_sample_V_address1;
reg    sample_period_samples_8_sample_V_ce1;
reg    sample_period_samples_8_sample_V_we1;
reg   [11:0] sample_period_samples_8_sample_V_d1;
reg   [2:0] sample_period_samples_9_sample_V_address0;
reg    sample_period_samples_9_sample_V_ce0;
reg    sample_period_samples_9_sample_V_we0;
reg   [11:0] sample_period_samples_9_sample_V_d0;
wire   [11:0] sample_period_samples_9_sample_V_q0;
reg   [2:0] sample_period_samples_9_sample_V_address1;
reg    sample_period_samples_9_sample_V_ce1;
reg    sample_period_samples_9_sample_V_we1;
reg   [11:0] sample_period_samples_9_sample_V_d1;
reg   [2:0] sample_period_samples_10_sample_V_address0;
reg    sample_period_samples_10_sample_V_ce0;
reg    sample_period_samples_10_sample_V_we0;
reg   [11:0] sample_period_samples_10_sample_V_d0;
wire   [11:0] sample_period_samples_10_sample_V_q0;
reg   [2:0] sample_period_samples_10_sample_V_address1;
reg    sample_period_samples_10_sample_V_ce1;
reg    sample_period_samples_10_sample_V_we1;
reg   [11:0] sample_period_samples_10_sample_V_d1;
reg   [2:0] sample_period_samples_11_sample_V_address0;
reg    sample_period_samples_11_sample_V_ce0;
reg    sample_period_samples_11_sample_V_we0;
reg   [11:0] sample_period_samples_11_sample_V_d0;
wire   [11:0] sample_period_samples_11_sample_V_q0;
reg   [2:0] sample_period_samples_11_sample_V_address1;
reg    sample_period_samples_11_sample_V_ce1;
reg    sample_period_samples_11_sample_V_we1;
reg   [11:0] sample_period_samples_11_sample_V_d1;
reg   [2:0] sample_period_samples_0_timestamp_V_address0;
reg    sample_period_samples_0_timestamp_V_ce0;
reg    sample_period_samples_0_timestamp_V_we0;
reg   [19:0] sample_period_samples_0_timestamp_V_d0;
wire   [19:0] sample_period_samples_0_timestamp_V_q0;
reg   [2:0] sample_period_samples_0_timestamp_V_address1;
reg    sample_period_samples_0_timestamp_V_ce1;
reg    sample_period_samples_0_timestamp_V_we1;
reg   [19:0] sample_period_samples_0_timestamp_V_d1;
reg   [2:0] sample_period_samples_1_timestamp_V_address0;
reg    sample_period_samples_1_timestamp_V_ce0;
reg    sample_period_samples_1_timestamp_V_we0;
reg   [19:0] sample_period_samples_1_timestamp_V_d0;
wire   [19:0] sample_period_samples_1_timestamp_V_q0;
reg   [2:0] sample_period_samples_1_timestamp_V_address1;
reg    sample_period_samples_1_timestamp_V_ce1;
reg    sample_period_samples_1_timestamp_V_we1;
reg   [19:0] sample_period_samples_1_timestamp_V_d1;
reg   [2:0] sample_period_samples_2_timestamp_V_address0;
reg    sample_period_samples_2_timestamp_V_ce0;
reg    sample_period_samples_2_timestamp_V_we0;
reg   [19:0] sample_period_samples_2_timestamp_V_d0;
wire   [19:0] sample_period_samples_2_timestamp_V_q0;
reg   [2:0] sample_period_samples_2_timestamp_V_address1;
reg    sample_period_samples_2_timestamp_V_ce1;
reg    sample_period_samples_2_timestamp_V_we1;
reg   [19:0] sample_period_samples_2_timestamp_V_d1;
reg   [2:0] sample_period_samples_3_timestamp_V_address0;
reg    sample_period_samples_3_timestamp_V_ce0;
reg    sample_period_samples_3_timestamp_V_we0;
reg   [19:0] sample_period_samples_3_timestamp_V_d0;
wire   [19:0] sample_period_samples_3_timestamp_V_q0;
reg   [2:0] sample_period_samples_3_timestamp_V_address1;
reg    sample_period_samples_3_timestamp_V_ce1;
reg    sample_period_samples_3_timestamp_V_we1;
reg   [19:0] sample_period_samples_3_timestamp_V_d1;
reg   [2:0] sample_period_samples_4_timestamp_V_address0;
reg    sample_period_samples_4_timestamp_V_ce0;
reg    sample_period_samples_4_timestamp_V_we0;
reg   [19:0] sample_period_samples_4_timestamp_V_d0;
wire   [19:0] sample_period_samples_4_timestamp_V_q0;
reg   [2:0] sample_period_samples_4_timestamp_V_address1;
reg    sample_period_samples_4_timestamp_V_ce1;
reg    sample_period_samples_4_timestamp_V_we1;
reg   [19:0] sample_period_samples_4_timestamp_V_d1;
reg   [2:0] sample_period_samples_5_timestamp_V_address0;
reg    sample_period_samples_5_timestamp_V_ce0;
reg    sample_period_samples_5_timestamp_V_we0;
reg   [19:0] sample_period_samples_5_timestamp_V_d0;
wire   [19:0] sample_period_samples_5_timestamp_V_q0;
reg   [2:0] sample_period_samples_5_timestamp_V_address1;
reg    sample_period_samples_5_timestamp_V_ce1;
reg    sample_period_samples_5_timestamp_V_we1;
reg   [19:0] sample_period_samples_5_timestamp_V_d1;
reg   [2:0] sample_period_samples_6_timestamp_V_address0;
reg    sample_period_samples_6_timestamp_V_ce0;
reg    sample_period_samples_6_timestamp_V_we0;
reg   [19:0] sample_period_samples_6_timestamp_V_d0;
wire   [19:0] sample_period_samples_6_timestamp_V_q0;
reg   [2:0] sample_period_samples_6_timestamp_V_address1;
reg    sample_period_samples_6_timestamp_V_ce1;
reg    sample_period_samples_6_timestamp_V_we1;
reg   [19:0] sample_period_samples_6_timestamp_V_d1;
reg   [2:0] sample_period_samples_7_timestamp_V_address0;
reg    sample_period_samples_7_timestamp_V_ce0;
reg    sample_period_samples_7_timestamp_V_we0;
reg   [19:0] sample_period_samples_7_timestamp_V_d0;
wire   [19:0] sample_period_samples_7_timestamp_V_q0;
reg   [2:0] sample_period_samples_7_timestamp_V_address1;
reg    sample_period_samples_7_timestamp_V_ce1;
reg    sample_period_samples_7_timestamp_V_we1;
reg   [19:0] sample_period_samples_7_timestamp_V_d1;
reg   [2:0] sample_period_samples_8_timestamp_V_address0;
reg    sample_period_samples_8_timestamp_V_ce0;
reg    sample_period_samples_8_timestamp_V_we0;
reg   [19:0] sample_period_samples_8_timestamp_V_d0;
wire   [19:0] sample_period_samples_8_timestamp_V_q0;
reg   [2:0] sample_period_samples_8_timestamp_V_address1;
reg    sample_period_samples_8_timestamp_V_ce1;
reg    sample_period_samples_8_timestamp_V_we1;
reg   [19:0] sample_period_samples_8_timestamp_V_d1;
reg   [2:0] sample_period_samples_9_timestamp_V_address0;
reg    sample_period_samples_9_timestamp_V_ce0;
reg    sample_period_samples_9_timestamp_V_we0;
reg   [19:0] sample_period_samples_9_timestamp_V_d0;
wire   [19:0] sample_period_samples_9_timestamp_V_q0;
reg   [2:0] sample_period_samples_9_timestamp_V_address1;
reg    sample_period_samples_9_timestamp_V_ce1;
reg    sample_period_samples_9_timestamp_V_we1;
reg   [19:0] sample_period_samples_9_timestamp_V_d1;
reg   [2:0] sample_period_samples_10_timestamp_V_address0;
reg    sample_period_samples_10_timestamp_V_ce0;
reg    sample_period_samples_10_timestamp_V_we0;
reg   [19:0] sample_period_samples_10_timestamp_V_d0;
wire   [19:0] sample_period_samples_10_timestamp_V_q0;
reg   [2:0] sample_period_samples_10_timestamp_V_address1;
reg    sample_period_samples_10_timestamp_V_ce1;
reg    sample_period_samples_10_timestamp_V_we1;
reg   [19:0] sample_period_samples_10_timestamp_V_d1;
reg   [2:0] sample_period_samples_11_timestamp_V_address0;
reg    sample_period_samples_11_timestamp_V_ce0;
reg    sample_period_samples_11_timestamp_V_we0;
reg   [19:0] sample_period_samples_11_timestamp_V_d0;
wire   [19:0] sample_period_samples_11_timestamp_V_q0;
reg   [2:0] sample_period_samples_11_timestamp_V_address1;
reg    sample_period_samples_11_timestamp_V_ce1;
reg    sample_period_samples_11_timestamp_V_we1;
reg   [19:0] sample_period_samples_11_timestamp_V_d1;
reg   [3:0] mag_samples_sample_V_address0;
reg    mag_samples_sample_V_ce0;
reg    mag_samples_sample_V_we0;
reg   [11:0] mag_samples_sample_V_d0;
wire   [11:0] mag_samples_sample_V_q0;
reg   [3:0] mag_samples_sample_V_address1;
reg    mag_samples_sample_V_ce1;
reg    mag_samples_sample_V_we1;
reg   [11:0] mag_samples_sample_V_d1;
reg   [3:0] mag_samples_timestamp_V_address0;
reg    mag_samples_timestamp_V_ce0;
reg    mag_samples_timestamp_V_we0;
reg   [19:0] mag_samples_timestamp_V_d0;
wire   [19:0] mag_samples_timestamp_V_q0;
reg   [3:0] mag_samples_timestamp_V_address1;
reg    mag_samples_timestamp_V_ce1;
reg    mag_samples_timestamp_V_we1;
reg   [19:0] mag_samples_timestamp_V_d1;
reg   [4:0] i_reg_5586;
reg   [3:0] j_reg_5598;
wire    ap_CS_fsm_state17;
reg   [3:0] ap_phi_mux_k_phi_fu_5613_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] this_phase_ref_idx_0_reg_5621;
wire   [3:0] ap_phi_mux_i_2_phi_fu_5637_p4;
reg   [3:0] i_2_reg_5633;
reg   [11:0] max_diff_V_1_reg_5644;
reg   [11:0] ap_phi_mux_phi_ln215_phi_fu_5656_p22;
wire   [63:0] zext_ln181_fu_5943_p1;
reg   [11:0] max_vals_V_11_fu_506;
wire   [11:0] max_vals_V_0_fu_6097_p3;
reg   [11:0] max_vals_V_11_1_fu_510;
reg   [11:0] max_vals_V_11_2_fu_514;
reg   [11:0] max_vals_V_11_3_fu_518;
reg   [11:0] max_vals_V_11_4_fu_522;
reg   [11:0] max_vals_V_11_5_fu_526;
reg   [11:0] max_vals_V_11_6_fu_530;
reg   [11:0] max_vals_V_11_7_fu_534;
reg   [11:0] max_vals_V_11_8_fu_538;
reg   [11:0] max_vals_V_11_9_fu_542;
reg   [11:0] max_vals_V_11_10_fu_546;
reg   [63:0] mag_time_ch0_V_fu_550;
wire   [63:0] mag_time_ch0_V_2_fu_6280_p3;
reg   [11:0] max_vals_V_11_11_fu_554;
reg   [11:0] min_vals_V_11_fu_558;
wire   [11:0] min_vals_V_0_fu_6112_p3;
reg   [11:0] max_vals_V_11_12_fu_562;
reg   [11:0] min_vals_V_11_1_fu_566;
reg   [11:0] min_vals_V_11_2_fu_570;
reg   [11:0] min_vals_V_11_3_fu_574;
reg   [11:0] min_vals_V_11_4_fu_578;
reg   [11:0] min_vals_V_11_5_fu_582;
reg   [11:0] min_vals_V_11_6_fu_586;
reg   [11:0] min_vals_V_11_7_fu_590;
reg   [11:0] min_vals_V_11_8_fu_594;
reg   [11:0] min_vals_V_11_9_fu_598;
reg   [11:0] min_vals_V_11_10_fu_602;
reg   [11:0] min_vals_V_11_11_fu_606;
reg   [11:0] min_vals_V_11_12_fu_610;
wire  signed [5:0] trunc_ln170_fu_5750_p0;
wire  signed [5:0] sext_ln170_fu_5754_p0;
wire   [5:0] zext_ln170_fu_5777_p1;
wire   [5:0] add_ln22_fu_5787_p2;
wire  signed [6:0] sext_ln22_fu_5793_p1;
wire   [6:0] add_ln22_1_fu_5797_p2;
wire   [0:0] tmp_23_fu_5808_p3;
wire   [4:0] select_ln28_fu_5816_p3;
wire   [4:0] add_ln28_fu_5824_p2;
wire   [0:0] icmp_ln24_fu_5802_p2;
wire   [4:0] buffer_idx_fu_5830_p2;
wire   [4:0] buffer_idx_2_fu_5835_p3;
wire   [7:0] zext_ln176_1_fu_5928_p1;
wire   [62:0] r_V_fu_5981_p3;
wire   [62:0] r_V_42_fu_5993_p0;
wire   [17:0] r_V_42_fu_5993_p1;
wire   [11:0] max_val_V_fu_6005_p14;
wire   [11:0] min_val_V_fu_6035_p14;
wire   [0:0] icmp_ln878_fu_6071_p2;
wire   [0:0] icmp_ln886_1_fu_6065_p2;
wire   [0:0] and_ln886_fu_6092_p2;
wire   [11:0] sel_tmp_fu_6085_p3;
wire   [11:0] min_val_V_1_fu_6077_p3;
wire   [11:0] sel_tmp28_fu_6105_p3;
wire   [106:0] lhs_fu_6253_p3;
wire   [106:0] zext_ln1192_fu_6261_p1;
wire   [106:0] ret_V_fu_6264_p2;
wire   [63:0] mag_time_ch0_V_1_fu_6270_p4;
wire   [11:0] phi_ln215_1_fu_6312_p18;
wire   [11:0] max_diff_V_4_fu_6350_p2;
wire   [0:0] icmp_ln886_fu_6356_p2;
wire   [31:0] zext_ln247_fu_6362_p1;
wire    ap_CS_fsm_state19;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [79:0] r_V_42_fu_5993_p00;
reg    ap_condition_3204;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_0_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_0_sample_V_address0),
    .ce0(sample_period_samples_0_sample_V_ce0),
    .we0(sample_period_samples_0_sample_V_we0),
    .d0(sample_period_samples_0_sample_V_d0),
    .q0(sample_period_samples_0_sample_V_q0),
    .address1(sample_period_samples_0_sample_V_address1),
    .ce1(sample_period_samples_0_sample_V_ce1),
    .we1(sample_period_samples_0_sample_V_we1),
    .d1(sample_period_samples_0_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_1_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_1_sample_V_address0),
    .ce0(sample_period_samples_1_sample_V_ce0),
    .we0(sample_period_samples_1_sample_V_we0),
    .d0(sample_period_samples_1_sample_V_d0),
    .q0(sample_period_samples_1_sample_V_q0),
    .address1(sample_period_samples_1_sample_V_address1),
    .ce1(sample_period_samples_1_sample_V_ce1),
    .we1(sample_period_samples_1_sample_V_we1),
    .d1(sample_period_samples_1_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_2_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_2_sample_V_address0),
    .ce0(sample_period_samples_2_sample_V_ce0),
    .we0(sample_period_samples_2_sample_V_we0),
    .d0(sample_period_samples_2_sample_V_d0),
    .q0(sample_period_samples_2_sample_V_q0),
    .address1(sample_period_samples_2_sample_V_address1),
    .ce1(sample_period_samples_2_sample_V_ce1),
    .we1(sample_period_samples_2_sample_V_we1),
    .d1(sample_period_samples_2_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_3_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_3_sample_V_address0),
    .ce0(sample_period_samples_3_sample_V_ce0),
    .we0(sample_period_samples_3_sample_V_we0),
    .d0(sample_period_samples_3_sample_V_d0),
    .q0(sample_period_samples_3_sample_V_q0),
    .address1(sample_period_samples_3_sample_V_address1),
    .ce1(sample_period_samples_3_sample_V_ce1),
    .we1(sample_period_samples_3_sample_V_we1),
    .d1(sample_period_samples_3_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_4_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_4_sample_V_address0),
    .ce0(sample_period_samples_4_sample_V_ce0),
    .we0(sample_period_samples_4_sample_V_we0),
    .d0(sample_period_samples_4_sample_V_d0),
    .q0(sample_period_samples_4_sample_V_q0),
    .address1(sample_period_samples_4_sample_V_address1),
    .ce1(sample_period_samples_4_sample_V_ce1),
    .we1(sample_period_samples_4_sample_V_we1),
    .d1(sample_period_samples_4_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_5_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_5_sample_V_address0),
    .ce0(sample_period_samples_5_sample_V_ce0),
    .we0(sample_period_samples_5_sample_V_we0),
    .d0(sample_period_samples_5_sample_V_d0),
    .q0(sample_period_samples_5_sample_V_q0),
    .address1(sample_period_samples_5_sample_V_address1),
    .ce1(sample_period_samples_5_sample_V_ce1),
    .we1(sample_period_samples_5_sample_V_we1),
    .d1(sample_period_samples_5_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_6_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_6_sample_V_address0),
    .ce0(sample_period_samples_6_sample_V_ce0),
    .we0(sample_period_samples_6_sample_V_we0),
    .d0(sample_period_samples_6_sample_V_d0),
    .q0(sample_period_samples_6_sample_V_q0),
    .address1(sample_period_samples_6_sample_V_address1),
    .ce1(sample_period_samples_6_sample_V_ce1),
    .we1(sample_period_samples_6_sample_V_we1),
    .d1(sample_period_samples_6_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_7_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_7_sample_V_address0),
    .ce0(sample_period_samples_7_sample_V_ce0),
    .we0(sample_period_samples_7_sample_V_we0),
    .d0(sample_period_samples_7_sample_V_d0),
    .q0(sample_period_samples_7_sample_V_q0),
    .address1(sample_period_samples_7_sample_V_address1),
    .ce1(sample_period_samples_7_sample_V_ce1),
    .we1(sample_period_samples_7_sample_V_we1),
    .d1(sample_period_samples_7_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_8_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_8_sample_V_address0),
    .ce0(sample_period_samples_8_sample_V_ce0),
    .we0(sample_period_samples_8_sample_V_we0),
    .d0(sample_period_samples_8_sample_V_d0),
    .q0(sample_period_samples_8_sample_V_q0),
    .address1(sample_period_samples_8_sample_V_address1),
    .ce1(sample_period_samples_8_sample_V_ce1),
    .we1(sample_period_samples_8_sample_V_we1),
    .d1(sample_period_samples_8_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_9_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_9_sample_V_address0),
    .ce0(sample_period_samples_9_sample_V_ce0),
    .we0(sample_period_samples_9_sample_V_we0),
    .d0(sample_period_samples_9_sample_V_d0),
    .q0(sample_period_samples_9_sample_V_q0),
    .address1(sample_period_samples_9_sample_V_address1),
    .ce1(sample_period_samples_9_sample_V_ce1),
    .we1(sample_period_samples_9_sample_V_we1),
    .d1(sample_period_samples_9_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_10_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_10_sample_V_address0),
    .ce0(sample_period_samples_10_sample_V_ce0),
    .we0(sample_period_samples_10_sample_V_we0),
    .d0(sample_period_samples_10_sample_V_d0),
    .q0(sample_period_samples_10_sample_V_q0),
    .address1(sample_period_samples_10_sample_V_address1),
    .ce1(sample_period_samples_10_sample_V_ce1),
    .we1(sample_period_samples_10_sample_V_we1),
    .d1(sample_period_samples_10_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_11_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_11_sample_V_address0),
    .ce0(sample_period_samples_11_sample_V_ce0),
    .we0(sample_period_samples_11_sample_V_we0),
    .d0(sample_period_samples_11_sample_V_d0),
    .q0(sample_period_samples_11_sample_V_q0),
    .address1(sample_period_samples_11_sample_V_address1),
    .ce1(sample_period_samples_11_sample_V_ce1),
    .we1(sample_period_samples_11_sample_V_we1),
    .d1(sample_period_samples_11_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_0_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_0_timestamp_V_address0),
    .ce0(sample_period_samples_0_timestamp_V_ce0),
    .we0(sample_period_samples_0_timestamp_V_we0),
    .d0(sample_period_samples_0_timestamp_V_d0),
    .q0(sample_period_samples_0_timestamp_V_q0),
    .address1(sample_period_samples_0_timestamp_V_address1),
    .ce1(sample_period_samples_0_timestamp_V_ce1),
    .we1(sample_period_samples_0_timestamp_V_we1),
    .d1(sample_period_samples_0_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_1_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_1_timestamp_V_address0),
    .ce0(sample_period_samples_1_timestamp_V_ce0),
    .we0(sample_period_samples_1_timestamp_V_we0),
    .d0(sample_period_samples_1_timestamp_V_d0),
    .q0(sample_period_samples_1_timestamp_V_q0),
    .address1(sample_period_samples_1_timestamp_V_address1),
    .ce1(sample_period_samples_1_timestamp_V_ce1),
    .we1(sample_period_samples_1_timestamp_V_we1),
    .d1(sample_period_samples_1_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_2_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_2_timestamp_V_address0),
    .ce0(sample_period_samples_2_timestamp_V_ce0),
    .we0(sample_period_samples_2_timestamp_V_we0),
    .d0(sample_period_samples_2_timestamp_V_d0),
    .q0(sample_period_samples_2_timestamp_V_q0),
    .address1(sample_period_samples_2_timestamp_V_address1),
    .ce1(sample_period_samples_2_timestamp_V_ce1),
    .we1(sample_period_samples_2_timestamp_V_we1),
    .d1(sample_period_samples_2_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_3_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_3_timestamp_V_address0),
    .ce0(sample_period_samples_3_timestamp_V_ce0),
    .we0(sample_period_samples_3_timestamp_V_we0),
    .d0(sample_period_samples_3_timestamp_V_d0),
    .q0(sample_period_samples_3_timestamp_V_q0),
    .address1(sample_period_samples_3_timestamp_V_address1),
    .ce1(sample_period_samples_3_timestamp_V_ce1),
    .we1(sample_period_samples_3_timestamp_V_we1),
    .d1(sample_period_samples_3_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_4_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_4_timestamp_V_address0),
    .ce0(sample_period_samples_4_timestamp_V_ce0),
    .we0(sample_period_samples_4_timestamp_V_we0),
    .d0(sample_period_samples_4_timestamp_V_d0),
    .q0(sample_period_samples_4_timestamp_V_q0),
    .address1(sample_period_samples_4_timestamp_V_address1),
    .ce1(sample_period_samples_4_timestamp_V_ce1),
    .we1(sample_period_samples_4_timestamp_V_we1),
    .d1(sample_period_samples_4_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_5_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_5_timestamp_V_address0),
    .ce0(sample_period_samples_5_timestamp_V_ce0),
    .we0(sample_period_samples_5_timestamp_V_we0),
    .d0(sample_period_samples_5_timestamp_V_d0),
    .q0(sample_period_samples_5_timestamp_V_q0),
    .address1(sample_period_samples_5_timestamp_V_address1),
    .ce1(sample_period_samples_5_timestamp_V_ce1),
    .we1(sample_period_samples_5_timestamp_V_we1),
    .d1(sample_period_samples_5_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_6_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_6_timestamp_V_address0),
    .ce0(sample_period_samples_6_timestamp_V_ce0),
    .we0(sample_period_samples_6_timestamp_V_we0),
    .d0(sample_period_samples_6_timestamp_V_d0),
    .q0(sample_period_samples_6_timestamp_V_q0),
    .address1(sample_period_samples_6_timestamp_V_address1),
    .ce1(sample_period_samples_6_timestamp_V_ce1),
    .we1(sample_period_samples_6_timestamp_V_we1),
    .d1(sample_period_samples_6_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_7_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_7_timestamp_V_address0),
    .ce0(sample_period_samples_7_timestamp_V_ce0),
    .we0(sample_period_samples_7_timestamp_V_we0),
    .d0(sample_period_samples_7_timestamp_V_d0),
    .q0(sample_period_samples_7_timestamp_V_q0),
    .address1(sample_period_samples_7_timestamp_V_address1),
    .ce1(sample_period_samples_7_timestamp_V_ce1),
    .we1(sample_period_samples_7_timestamp_V_we1),
    .d1(sample_period_samples_7_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_8_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_8_timestamp_V_address0),
    .ce0(sample_period_samples_8_timestamp_V_ce0),
    .we0(sample_period_samples_8_timestamp_V_we0),
    .d0(sample_period_samples_8_timestamp_V_d0),
    .q0(sample_period_samples_8_timestamp_V_q0),
    .address1(sample_period_samples_8_timestamp_V_address1),
    .ce1(sample_period_samples_8_timestamp_V_ce1),
    .we1(sample_period_samples_8_timestamp_V_we1),
    .d1(sample_period_samples_8_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_9_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_9_timestamp_V_address0),
    .ce0(sample_period_samples_9_timestamp_V_ce0),
    .we0(sample_period_samples_9_timestamp_V_we0),
    .d0(sample_period_samples_9_timestamp_V_d0),
    .q0(sample_period_samples_9_timestamp_V_q0),
    .address1(sample_period_samples_9_timestamp_V_address1),
    .ce1(sample_period_samples_9_timestamp_V_ce1),
    .we1(sample_period_samples_9_timestamp_V_we1),
    .d1(sample_period_samples_9_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_10_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_10_timestamp_V_address0),
    .ce0(sample_period_samples_10_timestamp_V_ce0),
    .we0(sample_period_samples_10_timestamp_V_we0),
    .d0(sample_period_samples_10_timestamp_V_d0),
    .q0(sample_period_samples_10_timestamp_V_q0),
    .address1(sample_period_samples_10_timestamp_V_address1),
    .ce1(sample_period_samples_10_timestamp_V_ce1),
    .we1(sample_period_samples_10_timestamp_V_we1),
    .d1(sample_period_samples_10_timestamp_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_11_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_11_timestamp_V_address0),
    .ce0(sample_period_samples_11_timestamp_V_ce0),
    .we0(sample_period_samples_11_timestamp_V_we0),
    .d0(sample_period_samples_11_timestamp_V_d0),
    .q0(sample_period_samples_11_timestamp_V_q0),
    .address1(sample_period_samples_11_timestamp_V_address1),
    .ce1(sample_period_samples_11_timestamp_V_ce1),
    .we1(sample_period_samples_11_timestamp_V_we1),
    .d1(sample_period_samples_11_timestamp_V_d1)
);

LLSSineReconstruction_loadData_mag_samples_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mag_samples_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mag_samples_sample_V_address0),
    .ce0(mag_samples_sample_V_ce0),
    .we0(mag_samples_sample_V_we0),
    .d0(mag_samples_sample_V_d0),
    .q0(mag_samples_sample_V_q0),
    .address1(mag_samples_sample_V_address1),
    .ce1(mag_samples_sample_V_ce1),
    .we1(mag_samples_sample_V_we1),
    .d1(mag_samples_sample_V_d1)
);

LLSSineReconstruction_loadData_mag_samples_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mag_samples_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mag_samples_timestamp_V_address0),
    .ce0(mag_samples_timestamp_V_ce0),
    .we0(mag_samples_timestamp_V_we0),
    .d0(mag_samples_timestamp_V_d0),
    .q0(mag_samples_timestamp_V_q0),
    .address1(mag_samples_timestamp_V_address1),
    .ce1(mag_samples_timestamp_V_ce1),
    .we1(mag_samples_timestamp_V_we1),
    .d1(mag_samples_timestamp_V_d1)
);

LLSSineReconstruction_mul_63ns_18ns_80_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 80 ))
mul_63ns_18ns_80_1_1_U215(
    .din0(r_V_42_fu_5993_p0),
    .din1(r_V_42_fu_5993_p1),
    .dout(r_V_42_fu_5993_p2)
);

LLSSineReconstruction_mux_124_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 12 ),
    .din5_WIDTH( 12 ),
    .din6_WIDTH( 12 ),
    .din7_WIDTH( 12 ),
    .din8_WIDTH( 12 ),
    .din9_WIDTH( 12 ),
    .din10_WIDTH( 12 ),
    .din11_WIDTH( 12 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
mux_124_12_1_1_U216(
    .din0(max_vals_V_11_12_fu_562),
    .din1(max_vals_V_11_fu_506),
    .din2(max_vals_V_11_1_fu_510),
    .din3(max_vals_V_11_2_fu_514),
    .din4(max_vals_V_11_3_fu_518),
    .din5(max_vals_V_11_4_fu_522),
    .din6(max_vals_V_11_5_fu_526),
    .din7(max_vals_V_11_6_fu_530),
    .din8(max_vals_V_11_7_fu_534),
    .din9(max_vals_V_11_8_fu_538),
    .din10(max_vals_V_11_9_fu_542),
    .din11(max_vals_V_11_10_fu_546),
    .din12(k_reg_5609_pp0_iter1_reg),
    .dout(max_val_V_fu_6005_p14)
);

LLSSineReconstruction_mux_124_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 12 ),
    .din5_WIDTH( 12 ),
    .din6_WIDTH( 12 ),
    .din7_WIDTH( 12 ),
    .din8_WIDTH( 12 ),
    .din9_WIDTH( 12 ),
    .din10_WIDTH( 12 ),
    .din11_WIDTH( 12 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
mux_124_12_1_1_U217(
    .din0(min_vals_V_11_1_fu_566),
    .din1(min_vals_V_11_2_fu_570),
    .din2(min_vals_V_11_3_fu_574),
    .din3(min_vals_V_11_4_fu_578),
    .din4(min_vals_V_11_5_fu_582),
    .din5(min_vals_V_11_6_fu_586),
    .din6(min_vals_V_11_7_fu_590),
    .din7(min_vals_V_11_8_fu_594),
    .din8(min_vals_V_11_9_fu_598),
    .din9(min_vals_V_11_10_fu_602),
    .din10(min_vals_V_11_11_fu_606),
    .din11(min_vals_V_11_12_fu_610),
    .din12(k_reg_5609_pp0_iter1_reg),
    .dout(min_val_V_fu_6035_p14)
);

LLSSineReconstruction_mux_164_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 12 ),
    .din5_WIDTH( 12 ),
    .din6_WIDTH( 12 ),
    .din7_WIDTH( 12 ),
    .din8_WIDTH( 12 ),
    .din9_WIDTH( 12 ),
    .din10_WIDTH( 12 ),
    .din11_WIDTH( 12 ),
    .din12_WIDTH( 12 ),
    .din13_WIDTH( 12 ),
    .din14_WIDTH( 12 ),
    .din15_WIDTH( 12 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
mux_164_12_1_1_U218(
    .din0(min_vals_V_11_12_fu_610),
    .din1(min_vals_V_11_2_fu_570),
    .din2(min_vals_V_11_3_fu_574),
    .din3(min_vals_V_11_4_fu_578),
    .din4(min_vals_V_11_5_fu_582),
    .din5(min_vals_V_11_6_fu_586),
    .din6(min_vals_V_11_7_fu_590),
    .din7(min_vals_V_11_8_fu_594),
    .din8(min_vals_V_11_9_fu_598),
    .din9(min_vals_V_11_10_fu_602),
    .din10(min_vals_V_11_11_fu_606),
    .din11(min_vals_V_11_12_fu_610),
    .din12(min_vals_V_11_12_fu_610),
    .din13(min_vals_V_11_12_fu_610),
    .din14(min_vals_V_11_12_fu_610),
    .din15(min_vals_V_11_12_fu_610),
    .din16(i_2_reg_5633),
    .dout(phi_ln215_1_fu_6312_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state14)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_fu_6300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        i_2_reg_5633 <= add_ln241_fu_6306_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln170_fu_5781_p2 == 1'd1))) begin
        i_2_reg_5633 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_5932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_reg_5586 <= i_3_reg_7644;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_5586 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_reg_5598 <= add_ln176_reg_8826;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_5598 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln184_reg_9007 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_5609 <= add_ln184_reg_9002;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        k_reg_5609 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mag_time_ch0_V_fu_550 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln211_reg_9026 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mag_time_ch0_V_fu_550 <= mag_time_ch0_V_2_fu_6280_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_fu_6300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        max_diff_V_1_reg_5644 <= max_diff_V_3_fu_6374_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln170_fu_5781_p2 == 1'd1))) begin
        max_diff_V_1_reg_5644 <= max_diff_V_fu_5900_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_fu_6300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        this_phase_ref_idx_0_reg_5621 <= select_ln245_fu_6366_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln170_fu_5781_p2 == 1'd1))) begin
        this_phase_ref_idx_0_reg_5621 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln176_reg_8826 <= add_ln176_fu_5914_p2;
        zext_ln176_reg_8831[3 : 0] <= zext_ln176_fu_5920_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_5932_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln179_reg_8858 <= add_ln179_fu_5938_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln184_reg_9002 <= add_ln184_fu_5958_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        cmp16_reg_8984 <= cmp16_fu_5947_p2;
        sel_tmp25_reg_8997 <= sel_tmp25_fu_5952_p2;
        this_times_addr_reg_8992 <= zext_ln181_fu_5943_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_7644 <= i_3_fu_5771_p2;
        max_vals_V_11_10_load_reg_7699 <= max_vals_V_11_10_fu_546;
        max_vals_V_11_1_load_reg_7654 <= max_vals_V_11_1_fu_510;
        max_vals_V_11_2_load_reg_7659 <= max_vals_V_11_2_fu_514;
        max_vals_V_11_3_load_reg_7664 <= max_vals_V_11_3_fu_518;
        max_vals_V_11_4_load_reg_7669 <= max_vals_V_11_4_fu_522;
        max_vals_V_11_5_load_reg_7674 <= max_vals_V_11_5_fu_526;
        max_vals_V_11_6_load_reg_7679 <= max_vals_V_11_6_fu_530;
        max_vals_V_11_7_load_reg_7684 <= max_vals_V_11_7_fu_534;
        max_vals_V_11_8_load_reg_7689 <= max_vals_V_11_8_fu_538;
        max_vals_V_11_9_load_reg_7694 <= max_vals_V_11_9_fu_542;
        max_vals_V_11_load_reg_7649 <= max_vals_V_11_fu_506;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln184_reg_9007 <= icmp_ln184_fu_5964_p2;
        icmp_ln211_reg_9026 <= icmp_ln211_fu_5975_p2;
        k_reg_5609_pp0_iter1_reg <= k_reg_5609;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((k_reg_5609_pp0_iter1_reg == 4'd11) | ((k_reg_5609_pp0_iter1_reg == 4'd12) | ((k_reg_5609_pp0_iter1_reg == 4'd13) | ((k_reg_5609_pp0_iter1_reg == 4'd14) | (k_reg_5609_pp0_iter1_reg == 4'd15))))))) begin
        max_vals_V_11_10_fu_546 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_12_fu_610 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd0))) begin
        max_vals_V_11_11_fu_554 <= max_vals_V_0_fu_6097_p3;
        max_vals_V_11_12_fu_562 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_1_fu_566 <= min_vals_V_0_fu_6112_p3;
        min_vals_V_11_fu_558 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd2))) begin
        max_vals_V_11_1_fu_510 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_3_fu_574 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd3))) begin
        max_vals_V_11_2_fu_514 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_4_fu_578 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd4))) begin
        max_vals_V_11_3_fu_518 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_5_fu_582 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd5))) begin
        max_vals_V_11_4_fu_522 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_6_fu_586 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd6))) begin
        max_vals_V_11_5_fu_526 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_7_fu_590 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd7))) begin
        max_vals_V_11_6_fu_530 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_8_fu_594 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd8))) begin
        max_vals_V_11_7_fu_534 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_9_fu_598 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd9))) begin
        max_vals_V_11_8_fu_538 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_10_fu_602 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd10))) begin
        max_vals_V_11_9_fu_542 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_11_fu_606 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (k_reg_5609_pp0_iter1_reg == 4'd1))) begin
        max_vals_V_11_fu_506 <= max_vals_V_0_fu_6097_p3;
        min_vals_V_11_2_fu_570 <= min_vals_V_0_fu_6112_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln211_fu_5975_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_42_reg_9030 <= r_V_42_fu_5993_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln170_reg_7634 <= sext_ln170_fu_5754_p1;
        trunc_ln170_reg_7629 <= trunc_ln170_fu_5750_p1;
        trunc_ln22_reg_7639 <= trunc_ln22_fu_5762_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_8821[7 : 3] <= tmp_fu_5906_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln184_fu_5964_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln190_cast_reg_9011[3 : 0] <= trunc_ln190_cast_fu_5970_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln170_fu_5781_p2 == 1'd0))) begin
        zext_ln34_reg_7708[4 : 0] <= zext_ln34_fu_5842_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln184_fu_5964_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln184_reg_9007 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k_phi_fu_5613_p4 = add_ln184_reg_9002;
    end else begin
        ap_phi_mux_k_phi_fu_5613_p4 = k_reg_5609;
    end
end

always @ (*) begin
    if (((icmp_ln241_fu_6300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd1)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_load_reg_7649;
        end else if ((1'b1 == ap_condition_3204)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_10_load_reg_7699;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd10)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_9_load_reg_7694;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd9)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_8_load_reg_7689;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd8)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_7_load_reg_7684;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd7)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_6_load_reg_7679;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd6)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_5_load_reg_7674;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd5)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_4_load_reg_7669;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd4)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_3_load_reg_7664;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd3)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_2_load_reg_7659;
        end else if ((ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd2)) begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = max_vals_V_11_1_load_reg_7654;
        end else begin
            ap_phi_mux_phi_ln215_phi_fu_5656_p22 = 'bx;
        end
    end else begin
        ap_phi_mux_phi_ln215_phi_fu_5656_p22 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mag_samples_sample_V_address0 = trunc_ln190_cast_reg_9011;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        mag_samples_sample_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mag_samples_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mag_samples_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mag_samples_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mag_samples_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mag_samples_sample_V_address0 = 64'd1;
    end else begin
        mag_samples_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mag_samples_sample_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mag_samples_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mag_samples_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mag_samples_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mag_samples_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mag_samples_sample_V_address1 = 64'd0;
    end else begin
        mag_samples_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        mag_samples_sample_V_ce0 = 1'b1;
    end else begin
        mag_samples_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        mag_samples_sample_V_ce1 = 1'b1;
    end else begin
        mag_samples_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mag_samples_sample_V_d0 = sample_period_samples_11_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mag_samples_sample_V_d0 = sample_period_samples_9_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mag_samples_sample_V_d0 = sample_period_samples_7_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mag_samples_sample_V_d0 = sample_period_samples_5_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mag_samples_sample_V_d0 = sample_period_samples_3_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mag_samples_sample_V_d0 = sample_period_samples_1_sample_V_q0;
    end else begin
        mag_samples_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mag_samples_sample_V_d1 = sample_period_samples_10_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mag_samples_sample_V_d1 = sample_period_samples_8_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mag_samples_sample_V_d1 = sample_period_samples_6_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mag_samples_sample_V_d1 = sample_period_samples_4_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mag_samples_sample_V_d1 = sample_period_samples_2_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mag_samples_sample_V_d1 = sample_period_samples_0_sample_V_q0;
    end else begin
        mag_samples_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        mag_samples_sample_V_we0 = 1'b1;
    end else begin
        mag_samples_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        mag_samples_sample_V_we1 = 1'b1;
    end else begin
        mag_samples_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mag_samples_timestamp_V_address0 = trunc_ln190_cast_fu_5970_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        mag_samples_timestamp_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mag_samples_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mag_samples_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mag_samples_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mag_samples_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mag_samples_timestamp_V_address0 = 64'd1;
    end else begin
        mag_samples_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mag_samples_timestamp_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mag_samples_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mag_samples_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mag_samples_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mag_samples_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mag_samples_timestamp_V_address1 = 64'd0;
    end else begin
        mag_samples_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        mag_samples_timestamp_V_ce0 = 1'b1;
    end else begin
        mag_samples_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        mag_samples_timestamp_V_ce1 = 1'b1;
    end else begin
        mag_samples_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mag_samples_timestamp_V_d0 = sample_period_samples_11_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mag_samples_timestamp_V_d0 = sample_period_samples_9_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mag_samples_timestamp_V_d0 = sample_period_samples_7_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mag_samples_timestamp_V_d0 = sample_period_samples_5_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mag_samples_timestamp_V_d0 = sample_period_samples_3_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mag_samples_timestamp_V_d0 = sample_period_samples_1_timestamp_V_q0;
    end else begin
        mag_samples_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mag_samples_timestamp_V_d1 = sample_period_samples_10_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mag_samples_timestamp_V_d1 = sample_period_samples_8_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mag_samples_timestamp_V_d1 = sample_period_samples_6_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mag_samples_timestamp_V_d1 = sample_period_samples_4_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        mag_samples_timestamp_V_d1 = sample_period_samples_2_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mag_samples_timestamp_V_d1 = sample_period_samples_0_timestamp_V_q0;
    end else begin
        mag_samples_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        mag_samples_timestamp_V_we0 = 1'b1;
    end else begin
        mag_samples_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        mag_samples_timestamp_V_we1 = 1'b1;
    end else begin
        mag_samples_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_address0 = zext_ln176_fu_5920_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_0_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_0_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_0_q0;
    end else begin
        sample_period_samples_0_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_0_q0;
    end else begin
        sample_period_samples_0_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_timestamp_V_address0 = zext_ln176_fu_5920_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_0_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_0_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_0_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_0_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_0_q0;
    end else begin
        sample_period_samples_0_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_0_q0;
    end else begin
        sample_period_samples_0_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_0_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_0_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_period_samples_10_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_10_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_10_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_10_q0;
    end else begin
        sample_period_samples_10_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_10_q0;
    end else begin
        sample_period_samples_10_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_period_samples_10_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_10_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_10_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_10_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_10_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_10_q0;
    end else begin
        sample_period_samples_10_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_10_q0;
    end else begin
        sample_period_samples_10_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_10_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_10_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_period_samples_11_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_11_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_11_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_11_q0;
    end else begin
        sample_period_samples_11_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_11_q0;
    end else begin
        sample_period_samples_11_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_period_samples_11_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_11_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_11_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_11_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_11_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_11_q0;
    end else begin
        sample_period_samples_11_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_11_q0;
    end else begin
        sample_period_samples_11_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_11_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_11_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_address0 = zext_ln176_fu_5920_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_1_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_1_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_1_q0;
    end else begin
        sample_period_samples_1_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_1_q0;
    end else begin
        sample_period_samples_1_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_timestamp_V_address0 = zext_ln176_fu_5920_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_1_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_1_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_1_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_1_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_1_q0;
    end else begin
        sample_period_samples_1_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_1_q0;
    end else begin
        sample_period_samples_1_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_1_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_1_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_2_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_2_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_2_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_2_q0;
    end else begin
        sample_period_samples_2_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_2_q0;
    end else begin
        sample_period_samples_2_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_2_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_2_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_2_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_2_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_2_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_2_q0;
    end else begin
        sample_period_samples_2_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_2_q0;
    end else begin
        sample_period_samples_2_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_2_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_2_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_3_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_3_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_3_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_3_q0;
    end else begin
        sample_period_samples_3_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_3_q0;
    end else begin
        sample_period_samples_3_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_3_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_3_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_3_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_3_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_3_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_3_q0;
    end else begin
        sample_period_samples_3_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_3_q0;
    end else begin
        sample_period_samples_3_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_3_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_3_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_period_samples_4_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_4_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_4_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_4_q0;
    end else begin
        sample_period_samples_4_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_4_q0;
    end else begin
        sample_period_samples_4_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_period_samples_4_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_4_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_4_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_4_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_4_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_4_q0;
    end else begin
        sample_period_samples_4_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_4_q0;
    end else begin
        sample_period_samples_4_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_4_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_4_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_period_samples_5_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_5_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_5_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_5_q0;
    end else begin
        sample_period_samples_5_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_5_q0;
    end else begin
        sample_period_samples_5_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_period_samples_5_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_5_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_5_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_5_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_5_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_5_q0;
    end else begin
        sample_period_samples_5_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_5_q0;
    end else begin
        sample_period_samples_5_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_5_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_5_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_period_samples_6_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_6_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_6_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_6_q0;
    end else begin
        sample_period_samples_6_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_6_q0;
    end else begin
        sample_period_samples_6_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_period_samples_6_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_6_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_6_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_6_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_6_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_6_q0;
    end else begin
        sample_period_samples_6_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_6_q0;
    end else begin
        sample_period_samples_6_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_6_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_6_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_period_samples_7_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_7_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_7_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_7_q0;
    end else begin
        sample_period_samples_7_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_7_q0;
    end else begin
        sample_period_samples_7_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_period_samples_7_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_7_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_7_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_7_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_7_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_7_q0;
    end else begin
        sample_period_samples_7_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_7_q0;
    end else begin
        sample_period_samples_7_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_7_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_7_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_period_samples_8_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_8_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_8_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_8_q0;
    end else begin
        sample_period_samples_8_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_8_q0;
    end else begin
        sample_period_samples_8_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_period_samples_8_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_8_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_8_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_8_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_8_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_8_q0;
    end else begin
        sample_period_samples_8_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_8_q0;
    end else begin
        sample_period_samples_8_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_8_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_8_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_period_samples_9_sample_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_9_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_9_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_9_q0;
    end else begin
        sample_period_samples_9_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_9_q0;
    end else begin
        sample_period_samples_9_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_period_samples_9_timestamp_V_address0 = zext_ln176_reg_8831;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_9_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_9_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_9_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_9_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_9_q0;
    end else begin
        sample_period_samples_9_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_9_q0;
    end else begin
        sample_period_samples_9_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_9_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_9_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        this_times_ce0 = 1'b1;
    end else begin
        this_times_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln211_reg_9026 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        this_times_we0 = 1'b1;
    end else begin
        this_times_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln170_fu_5781_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln176_fu_5932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln184_fu_5964_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln184_fu_5964_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln241_fu_6300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln176_fu_5914_p2 = (j_reg_5598 + 4'd1);

assign add_ln179_fu_5938_p2 = (tmp_reg_8821 + zext_ln176_1_fu_5928_p1);

assign add_ln184_fu_5958_p2 = (ap_phi_mux_k_phi_fu_5613_p4 + 4'd1);

assign add_ln22_1_fu_5797_p2 = ($signed(sext_ln22_fu_5793_p1) + $signed(sext_ln170_reg_7634));

assign add_ln22_fu_5787_p2 = ($signed(zext_ln170_fu_5777_p1) + $signed(6'd45));

assign add_ln241_fu_6306_p2 = (i_2_reg_5633 + 4'd1);

assign add_ln28_fu_5824_p2 = (select_ln28_fu_5816_p3 + i_reg_5586);

assign and_ln886_fu_6092_p2 = (sel_tmp25_reg_8997 & icmp_ln886_1_fu_6065_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_3204 = (~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd1) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd10) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd9) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd8) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd7) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd6) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd5) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd4) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd3) & ~(ap_phi_mux_i_2_phi_fu_5637_p4 == 4'd2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_i_2_phi_fu_5637_p4 = i_2_reg_5633;

assign ap_return = this_phase_ref_idx_0_reg_5621[3:0];

assign buffer_idx_2_fu_5835_p3 = ((icmp_ln24_fu_5802_p2[0:0] == 1'b1) ? trunc_ln22_reg_7639 : buffer_idx_fu_5830_p2);

assign buffer_idx_fu_5830_p2 = (add_ln28_fu_5824_p2 + trunc_ln170_reg_7629);

assign cmp16_fu_5947_p2 = ((add_ln179_reg_8858 == 8'd0) ? 1'b1 : 1'b0);

assign i_3_fu_5771_p2 = (i_reg_5586 + 5'd1);

assign icmp_ln170_fu_5781_p2 = ((i_reg_5586 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_5932_p2 = ((j_reg_5598 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_5964_p2 = ((ap_phi_mux_k_phi_fu_5613_p4 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln211_fu_5975_p2 = ((k_reg_5609 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_6300_p2 = ((i_2_reg_5633 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_5802_p2 = (($signed(add_ln22_1_fu_5797_p2) < $signed(7'd108)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_6071_p2 = ((mag_samples_sample_V_q0 < min_val_V_fu_6035_p14) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_6065_p2 = ((mag_samples_sample_V_q0 > max_val_V_fu_6005_p14) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_6356_p2 = ((max_diff_V_4_fu_6350_p2 > max_diff_V_1_reg_5644) ? 1'b1 : 1'b0);

assign lhs_fu_6253_p3 = {{mag_time_ch0_V_fu_550}, {43'd0}};

assign mag_time_ch0_V_1_fu_6270_p4 = {{ret_V_fu_6264_p2[106:43]}};

assign mag_time_ch0_V_2_fu_6280_p3 = ((cmp16_reg_8984[0:0] == 1'b1) ? mag_time_ch0_V_fu_550 : mag_time_ch0_V_1_fu_6270_p4);

assign max_diff_V_3_fu_6374_p3 = ((icmp_ln886_fu_6356_p2[0:0] == 1'b1) ? max_diff_V_4_fu_6350_p2 : max_diff_V_1_reg_5644);

assign max_diff_V_4_fu_6350_p2 = (ap_phi_mux_phi_ln215_phi_fu_5656_p22 - phi_ln215_1_fu_6312_p18);

assign max_diff_V_fu_5900_p2 = (max_vals_V_11_11_fu_554 - min_vals_V_11_fu_558);

assign max_vals_V_0_fu_6097_p3 = ((and_ln886_fu_6092_p2[0:0] == 1'b1) ? mag_samples_sample_V_q0 : sel_tmp_fu_6085_p3);

assign min_val_V_1_fu_6077_p3 = ((icmp_ln878_fu_6071_p2[0:0] == 1'b1) ? mag_samples_sample_V_q0 : min_val_V_fu_6035_p14);

assign min_vals_V_0_fu_6112_p3 = ((and_ln886_fu_6092_p2[0:0] == 1'b1) ? min_val_V_fu_6035_p14 : sel_tmp28_fu_6105_p3);

assign r_V_42_fu_5993_p0 = r_V_42_fu_5993_p00;

assign r_V_42_fu_5993_p00 = r_V_fu_5981_p3;

assign r_V_42_fu_5993_p1 = 80'd87961;

assign r_V_fu_5981_p3 = {{mag_samples_timestamp_V_q0}, {43'd0}};

assign ret_V_fu_6264_p2 = (lhs_fu_6253_p3 + zext_ln1192_fu_6261_p1);

assign sel_tmp25_fu_5952_p2 = (cmp16_fu_5947_p2 ^ 1'd1);

assign sel_tmp28_fu_6105_p3 = ((cmp16_reg_8984[0:0] == 1'b1) ? mag_samples_sample_V_q0 : min_val_V_1_fu_6077_p3);

assign sel_tmp_fu_6085_p3 = ((cmp16_reg_8984[0:0] == 1'b1) ? mag_samples_sample_V_q0 : max_val_V_fu_6005_p14);

assign select_ln245_fu_6366_p3 = ((icmp_ln886_fu_6356_p2[0:0] == 1'b1) ? zext_ln247_fu_6362_p1 : this_phase_ref_idx_0_reg_5621);

assign select_ln28_fu_5816_p3 = ((tmp_23_fu_5808_p3[0:0] == 1'b1) ? 5'd1 : 5'd13);

assign sext_ln170_fu_5754_p0 = sliding_window_front_ptr_s;

assign sext_ln170_fu_5754_p1 = sext_ln170_fu_5754_p0;

assign sext_ln22_fu_5793_p1 = $signed(add_ln22_fu_5787_p2);

assign sliding_window_buffer_samples_sample_V_0_0_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_10_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_11_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_1_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_2_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_3_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_4_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_5_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_6_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_7_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_8_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_0_9_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_0_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_10_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_11_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_1_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_2_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_3_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_4_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_5_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_6_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_7_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_8_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_1_9_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_sample_V_2_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_2_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_3_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_4_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_5_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_6_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_sample_V_7_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_0_0_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_10_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_11_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_1_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_2_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_3_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_4_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_5_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_6_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_7_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_8_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_0_9_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_0_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_10_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_11_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_1_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_2_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_3_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_4_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_5_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_6_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_7_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_8_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_1_9_address0 = zext_ln34_fu_5842_p1;

assign sliding_window_buffer_samples_timestamp_V_2_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_2_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_3_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_4_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_5_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_6_9_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_0_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_10_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_11_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_1_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_2_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_3_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_4_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_5_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_6_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_7_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_8_address0 = zext_ln34_reg_7708;

assign sliding_window_buffer_samples_timestamp_V_7_9_address0 = zext_ln34_reg_7708;

assign this_times_address0 = this_times_addr_reg_8992;

assign this_times_d0 = ((cmp16_reg_8984[0:0] == 1'b1) ? 64'd0 : mag_time_ch0_V_1_fu_6270_p4);

assign tmp_23_fu_5808_p3 = add_ln22_1_fu_5797_p2[32'd6];

assign tmp_fu_5906_p3 = {{i_reg_5586}, {3'd0}};

assign trunc_ln170_fu_5750_p0 = sliding_window_front_ptr_s;

assign trunc_ln170_fu_5750_p1 = trunc_ln170_fu_5750_p0[4:0];

assign trunc_ln190_cast_fu_5970_p1 = ap_phi_mux_k_phi_fu_5613_p4;

assign trunc_ln22_fu_5762_p1 = sliding_window_back_ptr_s[4:0];

assign zext_ln1192_fu_6261_p1 = r_V_42_reg_9030;

assign zext_ln170_fu_5777_p1 = i_reg_5586;

assign zext_ln176_1_fu_5928_p1 = j_reg_5598;

assign zext_ln176_fu_5920_p1 = j_reg_5598;

assign zext_ln181_fu_5943_p1 = add_ln179_reg_8858;

assign zext_ln247_fu_6362_p1 = i_2_reg_5633;

assign zext_ln34_fu_5842_p1 = buffer_idx_2_fu_5835_p3;

always @ (posedge ap_clk) begin
    zext_ln34_reg_7708[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_reg_8821[2:0] <= 3'b000;
    zext_ln176_reg_8831[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    trunc_ln190_cast_reg_9011[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //LLSSineReconstruction_loadData
