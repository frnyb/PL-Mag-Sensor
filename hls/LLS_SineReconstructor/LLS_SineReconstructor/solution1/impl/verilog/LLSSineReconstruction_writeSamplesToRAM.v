// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_writeSamplesToRAM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        samples_buffer_out_address0,
        samples_buffer_out_ce0,
        samples_buffer_out_we0,
        samples_buffer_out_d0,
        sliding_window_front_ptr_s,
        sliding_window_back_ptr_s,
        sliding_window_buffer_samples_timestamp_V_11_address0,
        sliding_window_buffer_samples_timestamp_V_11_ce0,
        sliding_window_buffer_samples_timestamp_V_11_q0,
        sliding_window_buffer_samples_timestamp_V_10_address0,
        sliding_window_buffer_samples_timestamp_V_10_ce0,
        sliding_window_buffer_samples_timestamp_V_10_q0,
        sliding_window_buffer_samples_timestamp_V_9_address0,
        sliding_window_buffer_samples_timestamp_V_9_ce0,
        sliding_window_buffer_samples_timestamp_V_9_q0,
        sliding_window_buffer_samples_timestamp_V_8_address0,
        sliding_window_buffer_samples_timestamp_V_8_ce0,
        sliding_window_buffer_samples_timestamp_V_8_q0,
        sliding_window_buffer_samples_timestamp_V_7_address0,
        sliding_window_buffer_samples_timestamp_V_7_ce0,
        sliding_window_buffer_samples_timestamp_V_7_q0,
        sliding_window_buffer_samples_timestamp_V_6_address0,
        sliding_window_buffer_samples_timestamp_V_6_ce0,
        sliding_window_buffer_samples_timestamp_V_6_q0,
        sliding_window_buffer_samples_timestamp_V_5_address0,
        sliding_window_buffer_samples_timestamp_V_5_ce0,
        sliding_window_buffer_samples_timestamp_V_5_q0,
        sliding_window_buffer_samples_timestamp_V_4_address0,
        sliding_window_buffer_samples_timestamp_V_4_ce0,
        sliding_window_buffer_samples_timestamp_V_4_q0,
        sliding_window_buffer_samples_timestamp_V_3_address0,
        sliding_window_buffer_samples_timestamp_V_3_ce0,
        sliding_window_buffer_samples_timestamp_V_3_q0,
        sliding_window_buffer_samples_timestamp_V_2_address0,
        sliding_window_buffer_samples_timestamp_V_2_ce0,
        sliding_window_buffer_samples_timestamp_V_2_q0,
        sliding_window_buffer_samples_timestamp_V_1_address0,
        sliding_window_buffer_samples_timestamp_V_1_ce0,
        sliding_window_buffer_samples_timestamp_V_1_q0,
        sliding_window_buffer_samples_timestamp_V_0_address0,
        sliding_window_buffer_samples_timestamp_V_0_ce0,
        sliding_window_buffer_samples_timestamp_V_0_q0,
        sliding_window_buffer_samples_sample_V_address0,
        sliding_window_buffer_samples_sample_V_ce0,
        sliding_window_buffer_samples_sample_V_q0,
        sliding_window_buffer_samples_sample_V_address1,
        sliding_window_buffer_samples_sample_V_ce1,
        sliding_window_buffer_samples_sample_V_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_pp0_stage0 = 11'd512;
parameter    ap_ST_fsm_state12 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] samples_buffer_out_address0;
output   samples_buffer_out_ce0;
output   samples_buffer_out_we0;
output  [31:0] samples_buffer_out_d0;
input  [4:0] sliding_window_front_ptr_s;
input  [4:0] sliding_window_back_ptr_s;
output  [6:0] sliding_window_buffer_samples_timestamp_V_11_address0;
output   sliding_window_buffer_samples_timestamp_V_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_11_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_10_address0;
output   sliding_window_buffer_samples_timestamp_V_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_10_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_9_address0;
output   sliding_window_buffer_samples_timestamp_V_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_8_address0;
output   sliding_window_buffer_samples_timestamp_V_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_7_address0;
output   sliding_window_buffer_samples_timestamp_V_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_6_address0;
output   sliding_window_buffer_samples_timestamp_V_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_5_address0;
output   sliding_window_buffer_samples_timestamp_V_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_4_address0;
output   sliding_window_buffer_samples_timestamp_V_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_3_address0;
output   sliding_window_buffer_samples_timestamp_V_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_2_address0;
output   sliding_window_buffer_samples_timestamp_V_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_1_address0;
output   sliding_window_buffer_samples_timestamp_V_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_q0;
output  [6:0] sliding_window_buffer_samples_timestamp_V_0_address0;
output   sliding_window_buffer_samples_timestamp_V_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_q0;
output  [9:0] sliding_window_buffer_samples_sample_V_address0;
output   sliding_window_buffer_samples_sample_V_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_q0;
output  [9:0] sliding_window_buffer_samples_sample_V_address1;
output   sliding_window_buffer_samples_sample_V_ce1;
input  [11:0] sliding_window_buffer_samples_sample_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg samples_buffer_out_ce0;
reg samples_buffer_out_we0;
reg sliding_window_buffer_samples_timestamp_V_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_ce0;
reg[9:0] sliding_window_buffer_samples_sample_V_address0;
reg sliding_window_buffer_samples_sample_V_ce0;
reg[9:0] sliding_window_buffer_samples_sample_V_address1;
reg sliding_window_buffer_samples_sample_V_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] idx_2_reg_702;
reg   [3:0] k_reg_713;
wire  signed [5:0] sliding_window_front_ptr_load_cast_fu_728_p1;
reg  signed [5:0] sliding_window_front_ptr_load_cast_reg_1173;
wire   [7:0] zext_ln158_fu_804_p1;
reg   [7:0] zext_ln158_reg_1184;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_740_p3;
wire   [3:0] add_ln158_1_fu_808_p2;
reg   [3:0] add_ln158_1_reg_1189;
wire    ap_CS_fsm_state3;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_2_reg_1204;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_3_reg_1209;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_4_reg_1214;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_5_reg_1219;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_6_reg_1224;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_7_reg_1229;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_8_reg_1234;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_9_reg_1239;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_10_reg_1244;
reg   [9:0] sliding_window_buffer_samples_sample_V_addr_11_reg_1249;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_10_addr_reg_1264;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_11_addr_reg_1269;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_2_addr_reg_1274;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_3_addr_reg_1279;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_4_addr_reg_1284;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_5_addr_reg_1289;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_6_addr_reg_1294;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_7_addr_reg_1299;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_8_addr_reg_1304;
reg   [6:0] sliding_window_buffer_samples_timestamp_V_9_addr_reg_1309;
wire   [9:0] add_ln158_fu_997_p2;
wire   [0:0] icmp_ln158_fu_991_p2;
wire   [4:0] i_1_fu_1003_p2;
wire   [3:0] add_ln164_fu_1009_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state10_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln164_fu_1021_p2;
reg   [0:0] icmp_ln164_reg_1332;
wire   [9:0] add_ln172_fu_1036_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [9:0] add_ln158_2_fu_1047_p2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state9;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg   [3:0] sample_sample_V_address0;
reg    sample_sample_V_ce0;
reg    sample_sample_V_we0;
wire   [11:0] sample_sample_V_q0;
reg   [3:0] sample_sample_V_address1;
reg    sample_sample_V_ce1;
reg    sample_sample_V_we1;
reg   [3:0] sample_timestamp_V_address0;
reg    sample_timestamp_V_ce0;
reg    sample_timestamp_V_we0;
reg   [19:0] sample_timestamp_V_d0;
wire   [19:0] sample_timestamp_V_q0;
reg   [3:0] sample_timestamp_V_address1;
reg    sample_timestamp_V_ce1;
reg    sample_timestamp_V_we1;
reg   [19:0] sample_timestamp_V_d1;
reg   [9:0] idx_reg_656;
reg  signed [4:0] i_reg_668;
reg   [9:0] idx_1_reg_680;
reg   [3:0] j_reg_691;
wire   [63:0] zext_ln161_3_fu_876_p1;
wire   [63:0] zext_ln161_4_fu_887_p1;
wire   [63:0] zext_ln161_5_fu_898_p1;
wire   [63:0] zext_ln161_6_fu_909_p1;
wire   [63:0] zext_ln161_7_fu_920_p1;
wire   [63:0] zext_ln161_8_fu_931_p1;
wire   [63:0] zext_ln161_9_fu_942_p1;
wire   [63:0] zext_ln161_10_fu_953_p1;
wire   [63:0] zext_ln161_11_fu_964_p1;
wire   [63:0] zext_ln161_12_fu_975_p1;
wire   [63:0] zext_ln161_13_fu_986_p1;
wire   [63:0] zext_ln161_2_fu_865_p1;
wire   [63:0] zext_ln161_1_fu_823_p1;
wire   [63:0] k_cast_fu_1015_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln172_fu_1042_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire  signed [5:0] sext_ln154_fu_736_p1;
wire   [5:0] sub_i_fu_748_p2;
wire   [3:0] empty_fu_753_p1;
wire   [0:0] tmp_1_fu_763_p3;
wire   [3:0] add_i_fu_771_p2;
wire   [0:0] cmp_i_fu_757_p2;
wire   [3:0] trunc_ln161_fu_777_p1;
wire   [3:0] empty_127_fu_780_p3;
wire   [3:0] empty_128_fu_788_p3;
wire   [6:0] tmp_2_fu_796_p3;
wire   [7:0] zext_ln161_fu_814_p1;
wire   [7:0] add_ln161_fu_818_p2;
wire   [5:0] trunc_ln161_1_fu_839_p1;
wire   [9:0] p_shl_cast_fu_843_p3;
wire   [9:0] p_shl1_cast_fu_851_p3;
wire   [9:0] sub_ln161_fu_859_p2;
wire   [9:0] add_ln161_1_fu_870_p2;
wire   [9:0] add_ln161_2_fu_881_p2;
wire   [9:0] add_ln161_3_fu_892_p2;
wire   [9:0] add_ln161_4_fu_903_p2;
wire   [9:0] add_ln161_5_fu_914_p2;
wire   [9:0] add_ln161_6_fu_925_p2;
wire   [9:0] add_ln161_7_fu_936_p2;
wire   [9:0] add_ln161_8_fu_947_p2;
wire   [9:0] or_ln161_fu_958_p2;
wire   [9:0] or_ln161_1_fu_969_p2;
wire   [9:0] or_ln161_2_fu_980_p2;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

LLSSineReconstruction_writeSamplesToRAM_sample_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
sample_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_sample_V_address0),
    .ce0(sample_sample_V_ce0),
    .we0(sample_sample_V_we0),
    .d0(sliding_window_buffer_samples_sample_V_q1),
    .q0(sample_sample_V_q0),
    .address1(sample_sample_V_address1),
    .ce1(sample_sample_V_ce1),
    .we1(sample_sample_V_we1),
    .d1(sliding_window_buffer_samples_sample_V_q0)
);

LLSSineReconstruction_writeSamplesToRAM_sample_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
sample_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_timestamp_V_address0),
    .ce0(sample_timestamp_V_ce0),
    .we0(sample_timestamp_V_we0),
    .d0(sample_timestamp_V_d0),
    .q0(sample_timestamp_V_q0),
    .address1(sample_timestamp_V_address1),
    .ce1(sample_timestamp_V_ce1),
    .we1(sample_timestamp_V_we1),
    .d1(sample_timestamp_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_668 <= 5'd9;
    end else if (((icmp_ln158_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_668 <= i_1_fu_1003_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_740_p3 == 1'd0))) begin
        idx_1_reg_680 <= idx_reg_656;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        idx_1_reg_680 <= add_ln158_2_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        idx_2_reg_702 <= idx_1_reg_680;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln164_reg_1332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_2_reg_702 <= add_ln172_fu_1036_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx_reg_656 <= 10'd0;
    end else if (((icmp_ln158_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        idx_reg_656 <= add_ln158_fu_997_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_740_p3 == 1'd0))) begin
        j_reg_691 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_691 <= add_ln158_1_reg_1189;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_reg_713 <= 4'd0;
    end else if (((icmp_ln164_fu_1021_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_713 <= add_ln164_fu_1009_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln158_1_reg_1189 <= add_ln158_1_fu_808_p2;
        sliding_window_buffer_samples_sample_V_addr_10_reg_1244[9 : 2] <= zext_ln161_13_fu_986_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_11_reg_1249[9 : 2] <= zext_ln161_2_fu_865_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_2_reg_1204[9 : 2] <= zext_ln161_5_fu_898_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_3_reg_1209[9 : 2] <= zext_ln161_6_fu_909_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_4_reg_1214[9 : 2] <= zext_ln161_7_fu_920_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_5_reg_1219[9 : 2] <= zext_ln161_8_fu_931_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_6_reg_1224[9 : 2] <= zext_ln161_9_fu_942_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_7_reg_1229[9 : 2] <= zext_ln161_10_fu_953_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_8_reg_1234[9 : 2] <= zext_ln161_11_fu_964_p1[9 : 2];
        sliding_window_buffer_samples_sample_V_addr_9_reg_1239[9 : 2] <= zext_ln161_12_fu_975_p1[9 : 2];
        sliding_window_buffer_samples_timestamp_V_10_addr_reg_1264 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_11_addr_reg_1269 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_2_addr_reg_1274 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_3_addr_reg_1279 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_4_addr_reg_1284 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_5_addr_reg_1289 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_6_addr_reg_1294 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_7_addr_reg_1299 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_8_addr_reg_1304 <= zext_ln161_1_fu_823_p1;
        sliding_window_buffer_samples_timestamp_V_9_addr_reg_1309 <= zext_ln161_1_fu_823_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln164_reg_1332 <= icmp_ln164_fu_1021_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sliding_window_front_ptr_load_cast_reg_1173 <= sliding_window_front_ptr_load_cast_fu_728_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_740_p3 == 1'd0))) begin
        zext_ln158_reg_1184[6 : 3] <= zext_ln158_fu_804_p1[6 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln164_fu_1021_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_740_p3 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_740_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_sample_V_address0 = k_cast_fu_1015_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_sample_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_sample_V_address0 = 64'd11;
    end else begin
        sample_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_sample_V_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_sample_V_address1 = 64'd10;
    end else begin
        sample_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sample_sample_V_ce0 = 1'b1;
    end else begin
        sample_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_sample_V_ce1 = 1'b1;
    end else begin
        sample_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_sample_V_we0 = 1'b1;
    end else begin
        sample_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_sample_V_we1 = 1'b1;
    end else begin
        sample_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_timestamp_V_address0 = k_cast_fu_1015_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_timestamp_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_timestamp_V_address0 = 64'd1;
    end else begin
        sample_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_timestamp_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_timestamp_V_address1 = 64'd0;
    end else begin
        sample_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sample_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_q0;
    end else begin
        sample_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_q0;
    end else begin
        sample_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_timestamp_V_we0 = 1'b1;
    end else begin
        sample_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_timestamp_V_we1 = 1'b1;
    end else begin
        sample_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        samples_buffer_out_ce0 = 1'b1;
    end else begin
        samples_buffer_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln164_reg_1332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        samples_buffer_out_we0 = 1'b1;
    end else begin
        samples_buffer_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sliding_window_buffer_samples_sample_V_address0 = sliding_window_buffer_samples_sample_V_addr_11_reg_1249;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_address0 = sliding_window_buffer_samples_sample_V_addr_9_reg_1239;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_address0 = sliding_window_buffer_samples_sample_V_addr_7_reg_1229;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_address0 = sliding_window_buffer_samples_sample_V_addr_5_reg_1219;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_address0 = sliding_window_buffer_samples_sample_V_addr_3_reg_1209;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_address0 = zext_ln161_4_fu_887_p1;
    end else begin
        sliding_window_buffer_samples_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sliding_window_buffer_samples_sample_V_address1 = sliding_window_buffer_samples_sample_V_addr_10_reg_1244;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_address1 = sliding_window_buffer_samples_sample_V_addr_8_reg_1234;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_address1 = sliding_window_buffer_samples_sample_V_addr_6_reg_1224;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_address1 = sliding_window_buffer_samples_sample_V_addr_4_reg_1214;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_address1 = sliding_window_buffer_samples_sample_V_addr_2_reg_1204;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_address1 = zext_ln161_3_fu_876_p1;
    end else begin
        sliding_window_buffer_samples_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sliding_window_buffer_samples_sample_V_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sliding_window_buffer_samples_sample_V_ce1 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sliding_window_buffer_samples_timestamp_V_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sliding_window_buffer_samples_timestamp_V_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_timestamp_V_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_timestamp_V_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_740_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln158_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln164_fu_1021_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln164_fu_1021_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_fu_771_p2 = ($signed(empty_fu_753_p1) + $signed(4'd10));

assign add_ln158_1_fu_808_p2 = (j_reg_691 + 4'd1);

assign add_ln158_2_fu_1047_p2 = (idx_1_reg_680 + 10'd12);

assign add_ln158_fu_997_p2 = (idx_reg_656 + 10'd96);

assign add_ln161_1_fu_870_p2 = (sub_ln161_fu_859_p2 + 10'd11);

assign add_ln161_2_fu_881_p2 = (sub_ln161_fu_859_p2 + 10'd10);

assign add_ln161_3_fu_892_p2 = (sub_ln161_fu_859_p2 + 10'd9);

assign add_ln161_4_fu_903_p2 = (sub_ln161_fu_859_p2 + 10'd8);

assign add_ln161_5_fu_914_p2 = (sub_ln161_fu_859_p2 + 10'd7);

assign add_ln161_6_fu_925_p2 = (sub_ln161_fu_859_p2 + 10'd6);

assign add_ln161_7_fu_936_p2 = (sub_ln161_fu_859_p2 + 10'd5);

assign add_ln161_8_fu_947_p2 = (sub_ln161_fu_859_p2 + 10'd4);

assign add_ln161_fu_818_p2 = (zext_ln158_reg_1184 + zext_ln161_fu_814_p1);

assign add_ln164_fu_1009_p2 = (k_reg_713 + 4'd1);

assign add_ln172_fu_1036_p2 = (idx_2_reg_702 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cmp_i_fu_757_p2 = (($signed(sub_i_fu_748_p2) < $signed(6'd54)) ? 1'b1 : 1'b0);

assign empty_127_fu_780_p3 = ((tmp_1_fu_763_p3[0:0] == 1'b1) ? add_i_fu_771_p2 : empty_fu_753_p1);

assign empty_128_fu_788_p3 = ((cmp_i_fu_757_p2[0:0] == 1'b1) ? trunc_ln161_fu_777_p1 : empty_127_fu_780_p3);

assign empty_fu_753_p1 = sub_i_fu_748_p2[3:0];

assign i_1_fu_1003_p2 = ($signed(i_reg_668) + $signed(5'd31));

assign icmp_ln158_fu_991_p2 = ((j_reg_691 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_1021_p2 = ((k_reg_713 == 4'd12) ? 1'b1 : 1'b0);

assign k_cast_fu_1015_p1 = k_reg_713;

assign or_ln161_1_fu_969_p2 = (sub_ln161_fu_859_p2 | 10'd2);

assign or_ln161_2_fu_980_p2 = (sub_ln161_fu_859_p2 | 10'd1);

assign or_ln161_fu_958_p2 = (sub_ln161_fu_859_p2 | 10'd3);

assign p_shl1_cast_fu_851_p3 = {{add_ln161_fu_818_p2}, {2'd0}};

assign p_shl_cast_fu_843_p3 = {{trunc_ln161_1_fu_839_p1}, {4'd0}};

assign samples_buffer_out_address0 = zext_ln172_fu_1042_p1;

assign samples_buffer_out_d0 = {{sample_timestamp_V_q0}, {sample_sample_V_q0}};

assign sext_ln154_fu_736_p1 = i_reg_668;

assign sliding_window_buffer_samples_timestamp_V_0_address0 = zext_ln161_1_fu_823_p1;

assign sliding_window_buffer_samples_timestamp_V_10_address0 = sliding_window_buffer_samples_timestamp_V_10_addr_reg_1264;

assign sliding_window_buffer_samples_timestamp_V_11_address0 = sliding_window_buffer_samples_timestamp_V_11_addr_reg_1269;

assign sliding_window_buffer_samples_timestamp_V_1_address0 = zext_ln161_1_fu_823_p1;

assign sliding_window_buffer_samples_timestamp_V_2_address0 = sliding_window_buffer_samples_timestamp_V_2_addr_reg_1274;

assign sliding_window_buffer_samples_timestamp_V_3_address0 = sliding_window_buffer_samples_timestamp_V_3_addr_reg_1279;

assign sliding_window_buffer_samples_timestamp_V_4_address0 = sliding_window_buffer_samples_timestamp_V_4_addr_reg_1284;

assign sliding_window_buffer_samples_timestamp_V_5_address0 = sliding_window_buffer_samples_timestamp_V_5_addr_reg_1289;

assign sliding_window_buffer_samples_timestamp_V_6_address0 = sliding_window_buffer_samples_timestamp_V_6_addr_reg_1294;

assign sliding_window_buffer_samples_timestamp_V_7_address0 = sliding_window_buffer_samples_timestamp_V_7_addr_reg_1299;

assign sliding_window_buffer_samples_timestamp_V_8_address0 = sliding_window_buffer_samples_timestamp_V_8_addr_reg_1304;

assign sliding_window_buffer_samples_timestamp_V_9_address0 = sliding_window_buffer_samples_timestamp_V_9_addr_reg_1309;

assign sliding_window_front_ptr_load_cast_fu_728_p1 = $signed(sliding_window_front_ptr_s);

assign sub_i_fu_748_p2 = ($signed(sliding_window_front_ptr_load_cast_reg_1173) - $signed(sext_ln154_fu_736_p1));

assign sub_ln161_fu_859_p2 = (p_shl_cast_fu_843_p3 - p_shl1_cast_fu_851_p3);

assign tmp_1_fu_763_p3 = sub_i_fu_748_p2[32'd5];

assign tmp_2_fu_796_p3 = {{empty_128_fu_788_p3}, {3'd0}};

assign tmp_fu_740_p3 = i_reg_668[32'd4];

assign trunc_ln161_1_fu_839_p1 = add_ln161_fu_818_p2[5:0];

assign trunc_ln161_fu_777_p1 = sliding_window_back_ptr_s[3:0];

assign zext_ln158_fu_804_p1 = tmp_2_fu_796_p3;

assign zext_ln161_10_fu_953_p1 = add_ln161_8_fu_947_p2;

assign zext_ln161_11_fu_964_p1 = or_ln161_fu_958_p2;

assign zext_ln161_12_fu_975_p1 = or_ln161_1_fu_969_p2;

assign zext_ln161_13_fu_986_p1 = or_ln161_2_fu_980_p2;

assign zext_ln161_1_fu_823_p1 = add_ln161_fu_818_p2;

assign zext_ln161_2_fu_865_p1 = sub_ln161_fu_859_p2;

assign zext_ln161_3_fu_876_p1 = add_ln161_1_fu_870_p2;

assign zext_ln161_4_fu_887_p1 = add_ln161_2_fu_881_p2;

assign zext_ln161_5_fu_898_p1 = add_ln161_3_fu_892_p2;

assign zext_ln161_6_fu_909_p1 = add_ln161_4_fu_903_p2;

assign zext_ln161_7_fu_920_p1 = add_ln161_5_fu_914_p2;

assign zext_ln161_8_fu_931_p1 = add_ln161_6_fu_925_p2;

assign zext_ln161_9_fu_942_p1 = add_ln161_7_fu_936_p2;

assign zext_ln161_fu_814_p1 = j_reg_691;

assign zext_ln172_fu_1042_p1 = add_ln172_fu_1036_p2;

always @ (posedge ap_clk) begin
    zext_ln158_reg_1184[2:0] <= 3'b000;
    zext_ln158_reg_1184[7] <= 1'b0;
    sliding_window_buffer_samples_sample_V_addr_2_reg_1204[1:0] <= 2'b01;
    sliding_window_buffer_samples_sample_V_addr_3_reg_1209[1:0] <= 2'b00;
    sliding_window_buffer_samples_sample_V_addr_4_reg_1214[1:0] <= 2'b11;
    sliding_window_buffer_samples_sample_V_addr_5_reg_1219[1:0] <= 2'b10;
    sliding_window_buffer_samples_sample_V_addr_6_reg_1224[1:0] <= 2'b01;
    sliding_window_buffer_samples_sample_V_addr_7_reg_1229[1:0] <= 2'b00;
    sliding_window_buffer_samples_sample_V_addr_8_reg_1234[1:0] <= 2'b11;
    sliding_window_buffer_samples_sample_V_addr_9_reg_1239[1:0] <= 2'b10;
    sliding_window_buffer_samples_sample_V_addr_10_reg_1244[1:0] <= 2'b01;
    sliding_window_buffer_samples_sample_V_addr_11_reg_1249[1:0] <= 2'b00;
end

endmodule //LLSSineReconstruction_writeSamplesToRAM
