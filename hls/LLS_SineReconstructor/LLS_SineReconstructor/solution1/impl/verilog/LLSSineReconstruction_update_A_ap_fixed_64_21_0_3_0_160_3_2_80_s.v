// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_update_A_ap_fixed_64_21_0_3_0_160_3_2_80_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        col_i_dout,
        col_i_empty_n,
        col_i_read,
        col_j_dout,
        col_j_empty_n,
        col_j_read,
        s_dout,
        s_empty_n,
        s_read,
        c_dout,
        c_empty_n,
        c_read,
        matA_V_0_address0,
        matA_V_0_ce0,
        matA_V_0_we0,
        matA_V_0_d0,
        matA_V_0_address1,
        matA_V_0_ce1,
        matA_V_0_we1,
        matA_V_0_d1,
        matA_V_1_address0,
        matA_V_1_ce0,
        matA_V_1_we0,
        matA_V_1_d0,
        matA_V_1_address1,
        matA_V_1_ce1,
        matA_V_1_we1,
        matA_V_1_d1,
        A_i_V_0_address0,
        A_i_V_0_ce0,
        A_i_V_0_q0,
        A_j_V_0_address0,
        A_j_V_0_ce0,
        A_j_V_0_q0,
        A_i_V_1_address0,
        A_i_V_1_ce0,
        A_i_V_1_q0,
        A_j_V_1_address0,
        A_j_V_1_ce0,
        A_j_V_1_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1:0] col_i_dout;
input   col_i_empty_n;
output   col_i_read;
input  [1:0] col_j_dout;
input   col_j_empty_n;
output   col_j_read;
input  [63:0] s_dout;
input   s_empty_n;
output   s_read;
input  [63:0] c_dout;
input   c_empty_n;
output   c_read;
output  [7:0] matA_V_0_address0;
output   matA_V_0_ce0;
output   matA_V_0_we0;
output  [63:0] matA_V_0_d0;
output  [7:0] matA_V_0_address1;
output   matA_V_0_ce1;
output   matA_V_0_we1;
output  [63:0] matA_V_0_d1;
output  [7:0] matA_V_1_address0;
output   matA_V_1_ce0;
output   matA_V_1_we0;
output  [63:0] matA_V_1_d0;
output  [7:0] matA_V_1_address1;
output   matA_V_1_ce1;
output   matA_V_1_we1;
output  [63:0] matA_V_1_d1;
output  [6:0] A_i_V_0_address0;
output   A_i_V_0_ce0;
input  [63:0] A_i_V_0_q0;
output  [6:0] A_j_V_0_address0;
output   A_j_V_0_ce0;
input  [63:0] A_j_V_0_q0;
output  [6:0] A_i_V_1_address0;
output   A_i_V_1_ce0;
input  [63:0] A_i_V_1_q0;
output  [6:0] A_j_V_1_address0;
output   A_j_V_1_ce0;
input  [63:0] A_j_V_1_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_i_read;
reg col_j_read;
reg s_read;
reg c_read;
reg matA_V_0_ce0;
reg matA_V_0_we0;
reg matA_V_0_ce1;
reg matA_V_0_we1;
reg matA_V_1_ce0;
reg matA_V_1_we0;
reg matA_V_1_ce1;
reg matA_V_1_we1;
reg A_i_V_0_ce0;
reg A_j_V_0_ce0;
reg A_i_V_1_ce0;
reg A_j_V_1_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    col_i_blk_n;
reg    col_j_blk_n;
reg    s_blk_n;
reg    c_blk_n;
reg   [6:0] k_reg_216;
wire  signed [106:0] c_cast_i_i_fu_227_p1;
reg  signed [106:0] c_cast_i_i_reg_516;
wire  signed [106:0] s_cast_i_i_fu_231_p1;
reg  signed [106:0] s_cast_i_i_reg_524;
wire   [7:0] col_i_load_cast_fu_235_p1;
reg   [7:0] col_i_load_cast_reg_532;
wire   [7:0] zext_ln137_1_fu_239_p1;
reg   [7:0] zext_ln137_1_reg_537;
wire   [6:0] add_ln137_fu_243_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln137_fu_249_p2;
reg   [0:0] icmp_ln137_reg_547;
reg   [0:0] icmp_ln137_reg_547_pp0_iter1_reg;
reg   [0:0] icmp_ln137_reg_547_pp0_iter2_reg;
wire   [7:0] sub_ln144_fu_279_p2;
reg   [7:0] sub_ln144_reg_551;
reg   [7:0] sub_ln144_reg_551_pp0_iter1_reg;
wire  signed [106:0] sext_ln1118_fu_285_p1;
reg  signed [106:0] sext_ln1118_reg_577;
wire   [106:0] r_V_23_fu_289_p2;
reg   [106:0] r_V_23_reg_582;
wire  signed [106:0] sext_ln1118_4_fu_294_p1;
reg  signed [106:0] sext_ln1118_4_reg_587;
wire   [106:0] r_V_24_fu_298_p2;
reg   [106:0] r_V_24_reg_592;
wire  signed [106:0] sext_ln1118_5_fu_303_p1;
reg  signed [106:0] sext_ln1118_5_reg_597;
wire   [106:0] r_V_25_fu_307_p2;
reg   [106:0] r_V_25_reg_602;
wire  signed [106:0] sext_ln1118_6_fu_312_p1;
reg  signed [106:0] sext_ln1118_6_reg_607;
wire   [106:0] r_V_26_fu_316_p2;
reg   [106:0] r_V_26_reg_612;
wire   [7:0] add_ln145_fu_331_p2;
reg   [7:0] add_ln145_reg_617;
reg   [63:0] trunc_ln708_4_reg_622;
reg   [0:0] tmp_4_reg_627;
reg   [63:0] trunc_ln708_6_reg_632;
reg   [0:0] tmp_6_reg_637;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln137_fu_255_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln144_1_fu_325_p1;
wire   [63:0] zext_ln145_fu_493_p1;
wire   [5:0] trunc_ln144_fu_267_p1;
wire   [7:0] tmp_cast_fu_271_p3;
wire   [7:0] zext_ln144_fu_263_p1;
wire  signed [63:0] r_V_23_fu_289_p1;
wire  signed [63:0] r_V_24_fu_298_p1;
wire  signed [63:0] r_V_25_fu_307_p1;
wire  signed [63:0] r_V_26_fu_316_p1;
wire   [7:0] add_ln144_fu_321_p2;
wire   [106:0] ret_V_fu_335_p2;
wire   [0:0] tmp_fu_349_p3;
wire   [63:0] trunc_ln_fu_339_p4;
wire   [63:0] zext_ln415_fu_357_p1;
wire  signed [63:0] r_V_17_fu_368_p0;
wire  signed [63:0] r_V_17_fu_368_p1;
wire  signed [63:0] r_V_18_fu_372_p0;
wire  signed [63:0] r_V_18_fu_372_p1;
wire   [106:0] r_V_17_fu_368_p2;
wire   [106:0] r_V_18_fu_372_p2;
wire   [106:0] ret_V_4_fu_384_p2;
wire   [42:0] trunc_ln1192_4_fu_380_p1;
wire   [42:0] trunc_ln1192_fu_376_p1;
wire   [42:0] add_ln713_fu_400_p2;
wire   [106:0] ret_V_5_fu_414_p2;
wire   [0:0] tmp_5_fu_428_p3;
wire   [63:0] trunc_ln708_5_fu_418_p4;
wire   [63:0] zext_ln415_5_fu_436_p1;
wire  signed [63:0] r_V_21_fu_447_p0;
wire  signed [63:0] r_V_21_fu_447_p1;
wire  signed [63:0] r_V_22_fu_451_p0;
wire  signed [63:0] r_V_22_fu_451_p1;
wire   [106:0] r_V_21_fu_447_p2;
wire   [106:0] r_V_22_fu_451_p2;
wire   [106:0] ret_V_6_fu_463_p2;
wire   [42:0] trunc_ln1192_6_fu_459_p1;
wire   [42:0] trunc_ln1192_5_fu_455_p1;
wire   [42:0] add_ln713_2_fu_479_p2;
wire   [63:0] zext_ln415_4_fu_498_p1;
wire   [63:0] zext_ln415_6_fu_507_p1;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U586(
    .din0(A_i_V_0_q0),
    .din1(r_V_23_fu_289_p1),
    .dout(r_V_23_fu_289_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U587(
    .din0(A_j_V_0_q0),
    .din1(r_V_24_fu_298_p1),
    .dout(r_V_24_fu_298_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U588(
    .din0(A_i_V_1_q0),
    .din1(r_V_25_fu_307_p1),
    .dout(r_V_25_fu_307_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U589(
    .din0(A_j_V_1_q0),
    .din1(r_V_26_fu_316_p1),
    .dout(r_V_26_fu_316_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U590(
    .din0(r_V_17_fu_368_p0),
    .din1(r_V_17_fu_368_p1),
    .dout(r_V_17_fu_368_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U591(
    .din0(r_V_18_fu_372_p0),
    .din1(r_V_18_fu_372_p1),
    .dout(r_V_18_fu_372_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U592(
    .din0(r_V_21_fu_447_p0),
    .din1(r_V_21_fu_447_p1),
    .dout(r_V_21_fu_447_p2)
);

LLSSineReconstruction_mul_64s_64s_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 107 ))
mul_64s_64s_107_1_1_U593(
    .din0(r_V_22_fu_451_p0),
    .din1(r_V_22_fu_451_p1),
    .dout(r_V_22_fu_451_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln137_fu_249_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        k_reg_216 <= add_ln137_fu_243_p2;
    end else if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_216 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_reg_547_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln145_reg_617 <= add_ln145_fu_331_p2;
        tmp_4_reg_627 <= add_ln713_fu_400_p2[32'd42];
        tmp_6_reg_637 <= add_ln713_2_fu_479_p2[32'd42];
        trunc_ln708_4_reg_622 <= {{ret_V_4_fu_384_p2[106:43]}};
        trunc_ln708_6_reg_632 <= {{ret_V_6_fu_463_p2[106:43]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        c_cast_i_i_reg_516 <= c_cast_i_i_fu_227_p1;
        col_i_load_cast_reg_532[1 : 0] <= col_i_load_cast_fu_235_p1[1 : 0];
        s_cast_i_i_reg_524 <= s_cast_i_i_fu_231_p1;
        zext_ln137_1_reg_537[1 : 0] <= zext_ln137_1_fu_239_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln137_reg_547 <= icmp_ln137_fu_249_p2;
        icmp_ln137_reg_547_pp0_iter1_reg <= icmp_ln137_reg_547;
        sub_ln144_reg_551_pp0_iter1_reg <= sub_ln144_reg_551;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln137_reg_547_pp0_iter2_reg <= icmp_ln137_reg_547_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln137_reg_547 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_23_reg_582 <= r_V_23_fu_289_p2;
        r_V_24_reg_592 <= r_V_24_fu_298_p2;
        r_V_25_reg_602 <= r_V_25_fu_307_p2;
        r_V_26_reg_612 <= r_V_26_fu_316_p2;
        sext_ln1118_4_reg_587 <= sext_ln1118_4_fu_294_p1;
        sext_ln1118_5_reg_597 <= sext_ln1118_5_fu_303_p1;
        sext_ln1118_6_reg_607 <= sext_ln1118_6_fu_312_p1;
        sext_ln1118_reg_577 <= sext_ln1118_fu_285_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln137_fu_249_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln144_reg_551 <= sub_ln144_fu_279_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_i_V_0_ce0 = 1'b1;
    end else begin
        A_i_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_i_V_1_ce0 = 1'b1;
    end else begin
        A_i_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_j_V_0_ce0 = 1'b1;
    end else begin
        A_j_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_j_V_1_ce0 = 1'b1;
    end else begin
        A_j_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln137_fu_249_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_blk_n = c_empty_n;
    end else begin
        c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read = 1'b1;
    end else begin
        c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_blk_n = col_i_empty_n;
    end else begin
        col_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_read = 1'b1;
    end else begin
        col_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_blk_n = col_j_empty_n;
    end else begin
        col_j_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_read = 1'b1;
    end else begin
        col_j_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_V_0_ce0 = 1'b1;
    end else begin
        matA_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_V_0_ce1 = 1'b1;
    end else begin
        matA_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln137_reg_547_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_V_0_we0 = 1'b1;
    end else begin
        matA_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln137_reg_547_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_V_0_we1 = 1'b1;
    end else begin
        matA_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_V_1_ce0 = 1'b1;
    end else begin
        matA_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_V_1_ce1 = 1'b1;
    end else begin
        matA_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln137_reg_547_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_V_1_we0 = 1'b1;
    end else begin
        matA_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln137_reg_547_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        matA_V_1_we1 = 1'b1;
    end else begin
        matA_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_blk_n = s_empty_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_read = 1'b1;
    end else begin
        s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln137_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln137_fu_249_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_i_V_0_address0 = zext_ln137_fu_255_p1;

assign A_i_V_1_address0 = zext_ln137_fu_255_p1;

assign A_j_V_0_address0 = zext_ln137_fu_255_p1;

assign A_j_V_1_address0 = zext_ln137_fu_255_p1;

assign add_ln137_fu_243_p2 = (k_reg_216 + 7'd1);

assign add_ln144_fu_321_p2 = (sub_ln144_reg_551_pp0_iter1_reg + col_i_load_cast_reg_532);

assign add_ln145_fu_331_p2 = (sub_ln144_reg_551_pp0_iter1_reg + zext_ln137_1_reg_537);

assign add_ln713_2_fu_479_p2 = (trunc_ln1192_6_fu_459_p1 + trunc_ln1192_5_fu_455_p1);

assign add_ln713_fu_400_p2 = (trunc_ln1192_4_fu_380_p1 + trunc_ln1192_fu_376_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_cast_i_i_fu_227_p1 = $signed(c_dout);

assign col_i_load_cast_fu_235_p1 = col_i_dout;

assign icmp_ln137_fu_249_p2 = ((k_reg_216 == 7'd80) ? 1'b1 : 1'b0);

assign matA_V_0_address0 = zext_ln145_fu_493_p1;

assign matA_V_0_address1 = zext_ln144_1_fu_325_p1;

assign matA_V_0_d0 = (trunc_ln708_4_reg_622 + zext_ln415_4_fu_498_p1);

assign matA_V_0_d1 = (trunc_ln_fu_339_p4 + zext_ln415_fu_357_p1);

assign matA_V_1_address0 = zext_ln145_fu_493_p1;

assign matA_V_1_address1 = zext_ln144_1_fu_325_p1;

assign matA_V_1_d0 = (trunc_ln708_6_reg_632 + zext_ln415_6_fu_507_p1);

assign matA_V_1_d1 = (trunc_ln708_5_fu_418_p4 + zext_ln415_5_fu_436_p1);

assign r_V_17_fu_368_p0 = sext_ln1118_reg_577;

assign r_V_17_fu_368_p1 = s_cast_i_i_reg_524;

assign r_V_18_fu_372_p0 = sext_ln1118_4_reg_587;

assign r_V_18_fu_372_p1 = c_cast_i_i_reg_516;

assign r_V_21_fu_447_p0 = sext_ln1118_5_reg_597;

assign r_V_21_fu_447_p1 = s_cast_i_i_reg_524;

assign r_V_22_fu_451_p0 = sext_ln1118_6_reg_607;

assign r_V_22_fu_451_p1 = c_cast_i_i_reg_516;

assign r_V_23_fu_289_p1 = c_cast_i_i_reg_516;

assign r_V_24_fu_298_p1 = s_cast_i_i_reg_524;

assign r_V_25_fu_307_p1 = c_cast_i_i_reg_516;

assign r_V_26_fu_316_p1 = s_cast_i_i_reg_524;

assign ret_V_4_fu_384_p2 = (r_V_18_fu_372_p2 + r_V_17_fu_368_p2);

assign ret_V_5_fu_414_p2 = (r_V_25_reg_602 - r_V_26_reg_612);

assign ret_V_6_fu_463_p2 = (r_V_22_fu_451_p2 + r_V_21_fu_447_p2);

assign ret_V_fu_335_p2 = (r_V_23_reg_582 - r_V_24_reg_592);

assign s_cast_i_i_fu_231_p1 = $signed(s_dout);

assign sext_ln1118_4_fu_294_p1 = $signed(A_j_V_0_q0);

assign sext_ln1118_5_fu_303_p1 = $signed(A_i_V_1_q0);

assign sext_ln1118_6_fu_312_p1 = $signed(A_j_V_1_q0);

assign sext_ln1118_fu_285_p1 = $signed(A_i_V_0_q0);

assign sub_ln144_fu_279_p2 = (tmp_cast_fu_271_p3 - zext_ln144_fu_263_p1);

assign tmp_5_fu_428_p3 = ret_V_5_fu_414_p2[32'd42];

assign tmp_cast_fu_271_p3 = {{trunc_ln144_fu_267_p1}, {2'd0}};

assign tmp_fu_349_p3 = ret_V_fu_335_p2[32'd42];

assign trunc_ln1192_4_fu_380_p1 = r_V_18_fu_372_p2[42:0];

assign trunc_ln1192_5_fu_455_p1 = r_V_21_fu_447_p2[42:0];

assign trunc_ln1192_6_fu_459_p1 = r_V_22_fu_451_p2[42:0];

assign trunc_ln1192_fu_376_p1 = r_V_17_fu_368_p2[42:0];

assign trunc_ln144_fu_267_p1 = k_reg_216[5:0];

assign trunc_ln708_5_fu_418_p4 = {{ret_V_5_fu_414_p2[106:43]}};

assign trunc_ln_fu_339_p4 = {{ret_V_fu_335_p2[106:43]}};

assign zext_ln137_1_fu_239_p1 = col_j_dout;

assign zext_ln137_fu_255_p1 = k_reg_216;

assign zext_ln144_1_fu_325_p1 = add_ln144_fu_321_p2;

assign zext_ln144_fu_263_p1 = k_reg_216;

assign zext_ln145_fu_493_p1 = add_ln145_reg_617;

assign zext_ln415_4_fu_498_p1 = tmp_4_reg_627;

assign zext_ln415_5_fu_436_p1 = tmp_5_fu_428_p3;

assign zext_ln415_6_fu_507_p1 = tmp_6_reg_637;

assign zext_ln415_fu_357_p1 = tmp_fu_349_p3;

always @ (posedge ap_clk) begin
    col_i_load_cast_reg_532[7:2] <= 6'b000000;
    zext_ln137_1_reg_537[7:2] <= 6'b000000;
end

endmodule //LLSSineReconstruction_update_A_ap_fixed_64_21_0_3_0_160_3_2_80_s
