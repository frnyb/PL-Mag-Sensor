-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_update_A_ap_fixed_64_21_0_3_0_160_3_2_80_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_i_empty_n : IN STD_LOGIC;
    col_i_read : OUT STD_LOGIC;
    col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_j_empty_n : IN STD_LOGIC;
    col_j_read : OUT STD_LOGIC;
    s_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    s_empty_n : IN STD_LOGIC;
    s_read : OUT STD_LOGIC;
    c_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    c_empty_n : IN STD_LOGIC;
    c_read : OUT STD_LOGIC;
    matA_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_0_ce0 : OUT STD_LOGIC;
    matA_V_0_we0 : OUT STD_LOGIC;
    matA_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_0_ce1 : OUT STD_LOGIC;
    matA_V_0_we1 : OUT STD_LOGIC;
    matA_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_1_ce0 : OUT STD_LOGIC;
    matA_V_1_we0 : OUT STD_LOGIC;
    matA_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_1_ce1 : OUT STD_LOGIC;
    matA_V_1_we1 : OUT STD_LOGIC;
    matA_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_0_ce0 : OUT STD_LOGIC;
    A_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_0_ce0 : OUT STD_LOGIC;
    A_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_1_ce0 : OUT STD_LOGIC;
    A_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_1_ce0 : OUT STD_LOGIC;
    A_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of LLSSineReconstruction_update_A_ap_fixed_64_21_0_3_0_160_3_2_80_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_i_blk_n : STD_LOGIC;
    signal col_j_blk_n : STD_LOGIC;
    signal s_blk_n : STD_LOGIC;
    signal c_blk_n : STD_LOGIC;
    signal k_reg_216 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_cast_i_i_fu_227_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal c_cast_i_i_reg_516 : STD_LOGIC_VECTOR (106 downto 0);
    signal s_cast_i_i_fu_231_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal s_cast_i_i_reg_524 : STD_LOGIC_VECTOR (106 downto 0);
    signal col_i_load_cast_fu_235_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_i_load_cast_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln137_1_fu_239_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln137_1_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln137_fu_243_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln137_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_547_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_547_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln144_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln144_reg_551 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln144_reg_551_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1118_fu_285_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_reg_577 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_23_fu_289_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_23_reg_582 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_4_fu_294_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_4_reg_587 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_24_fu_298_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_24_reg_592 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_5_fu_303_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_5_reg_597 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_25_fu_307_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_25_reg_602 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_6_fu_312_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal sext_ln1118_6_reg_607 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_26_fu_316_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_26_reg_612 : STD_LOGIC_VECTOR (106 downto 0);
    signal add_ln145_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln145_reg_617 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln708_4_reg_622 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_6_reg_632 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal zext_ln137_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln144_1_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln144_fu_267_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_271_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln144_fu_263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_23_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_24_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_25_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_26_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln144_fu_321_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_335_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal tmp_fu_349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_339_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_17_fu_368_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_17_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_18_fu_372_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_18_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_17_fu_368_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_18_fu_372_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_4_fu_384_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln1192_4_fu_380_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1192_fu_376_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln713_fu_400_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_5_fu_414_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal tmp_5_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_5_fu_418_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_5_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_21_fu_447_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_21_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_22_fu_451_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_22_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_21_fu_447_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_22_fu_451_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_6_fu_463_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln1192_6_fu_459_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1192_5_fu_455_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln713_2_fu_479_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln415_4_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_6_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_mul_64s_64s_107_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (106 downto 0) );
    end component;



begin
    mul_64s_64s_107_1_1_U586 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => A_i_V_0_q0,
        din1 => r_V_23_fu_289_p1,
        dout => r_V_23_fu_289_p2);

    mul_64s_64s_107_1_1_U587 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => A_j_V_0_q0,
        din1 => r_V_24_fu_298_p1,
        dout => r_V_24_fu_298_p2);

    mul_64s_64s_107_1_1_U588 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => A_i_V_1_q0,
        din1 => r_V_25_fu_307_p1,
        dout => r_V_25_fu_307_p2);

    mul_64s_64s_107_1_1_U589 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => A_j_V_1_q0,
        din1 => r_V_26_fu_316_p1,
        dout => r_V_26_fu_316_p2);

    mul_64s_64s_107_1_1_U590 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_17_fu_368_p0,
        din1 => r_V_17_fu_368_p1,
        dout => r_V_17_fu_368_p2);

    mul_64s_64s_107_1_1_U591 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_18_fu_372_p0,
        din1 => r_V_18_fu_372_p1,
        dout => r_V_18_fu_372_p2);

    mul_64s_64s_107_1_1_U592 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_21_fu_447_p0,
        din1 => r_V_21_fu_447_p1,
        dout => r_V_21_fu_447_p2);

    mul_64s_64s_107_1_1_U593 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_22_fu_451_p0,
        din1 => r_V_22_fu_451_p1,
        dout => r_V_22_fu_451_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln137_fu_249_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                k_reg_216 <= add_ln137_fu_243_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_216 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_reg_547_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln145_reg_617 <= add_ln145_fu_331_p2;
                tmp_4_reg_627 <= add_ln713_fu_400_p2(42 downto 42);
                tmp_6_reg_637 <= add_ln713_2_fu_479_p2(42 downto 42);
                trunc_ln708_4_reg_622 <= ret_V_4_fu_384_p2(106 downto 43);
                trunc_ln708_6_reg_632 <= ret_V_6_fu_463_p2(106 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                c_cast_i_i_reg_516 <= c_cast_i_i_fu_227_p1;
                    col_i_load_cast_reg_532(1 downto 0) <= col_i_load_cast_fu_235_p1(1 downto 0);
                s_cast_i_i_reg_524 <= s_cast_i_i_fu_231_p1;
                    zext_ln137_1_reg_537(1 downto 0) <= zext_ln137_1_fu_239_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln137_reg_547 <= icmp_ln137_fu_249_p2;
                icmp_ln137_reg_547_pp0_iter1_reg <= icmp_ln137_reg_547;
                sub_ln144_reg_551_pp0_iter1_reg <= sub_ln144_reg_551;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln137_reg_547_pp0_iter2_reg <= icmp_ln137_reg_547_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln137_reg_547 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_23_reg_582 <= r_V_23_fu_289_p2;
                r_V_24_reg_592 <= r_V_24_fu_298_p2;
                r_V_25_reg_602 <= r_V_25_fu_307_p2;
                r_V_26_reg_612 <= r_V_26_fu_316_p2;
                sext_ln1118_4_reg_587 <= sext_ln1118_4_fu_294_p1;
                sext_ln1118_5_reg_597 <= sext_ln1118_5_fu_303_p1;
                sext_ln1118_6_reg_607 <= sext_ln1118_6_fu_312_p1;
                sext_ln1118_reg_577 <= sext_ln1118_fu_285_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln137_fu_249_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln144_reg_551 <= sub_ln144_fu_279_p2;
            end if;
        end if;
    end process;
    col_i_load_cast_reg_532(7 downto 2) <= "000000";
    zext_ln137_1_reg_537(7 downto 2) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n, ap_enable_reg_pp0_iter0, icmp_ln137_fu_249_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln137_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln137_fu_249_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_i_V_0_address0 <= zext_ln137_fu_255_p1(7 - 1 downto 0);

    A_i_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_i_V_0_ce0 <= ap_const_logic_1;
        else 
            A_i_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_i_V_1_address0 <= zext_ln137_fu_255_p1(7 - 1 downto 0);

    A_i_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_i_V_1_ce0 <= ap_const_logic_1;
        else 
            A_i_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_j_V_0_address0 <= zext_ln137_fu_255_p1(7 - 1 downto 0);

    A_j_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_j_V_0_ce0 <= ap_const_logic_1;
        else 
            A_j_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_j_V_1_address0 <= zext_ln137_fu_255_p1(7 - 1 downto 0);

    A_j_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_j_V_1_ce0 <= ap_const_logic_1;
        else 
            A_j_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln137_fu_243_p2 <= std_logic_vector(unsigned(k_reg_216) + unsigned(ap_const_lv7_1));
    add_ln144_fu_321_p2 <= std_logic_vector(unsigned(sub_ln144_reg_551_pp0_iter1_reg) + unsigned(col_i_load_cast_reg_532));
    add_ln145_fu_331_p2 <= std_logic_vector(unsigned(sub_ln144_reg_551_pp0_iter1_reg) + unsigned(zext_ln137_1_reg_537));
    add_ln713_2_fu_479_p2 <= std_logic_vector(unsigned(trunc_ln1192_6_fu_459_p1) + unsigned(trunc_ln1192_5_fu_455_p1));
    add_ln713_fu_400_p2 <= std_logic_vector(unsigned(trunc_ln1192_4_fu_380_p1) + unsigned(trunc_ln1192_fu_376_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln137_fu_249_p2)
    begin
        if ((icmp_ln137_fu_249_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_blk_n <= c_empty_n;
        else 
            c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        c_cast_i_i_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_dout),107));


    c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_read <= ap_const_logic_1;
        else 
            c_read <= ap_const_logic_0;
        end if; 
    end process;


    col_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_blk_n <= col_i_empty_n;
        else 
            col_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_i_load_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_dout),8));

    col_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_read <= ap_const_logic_1;
        else 
            col_i_read <= ap_const_logic_0;
        end if; 
    end process;


    col_j_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_j_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_blk_n <= col_j_empty_n;
        else 
            col_j_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_j_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_read <= ap_const_logic_1;
        else 
            col_j_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln137_fu_249_p2 <= "1" when (k_reg_216 = ap_const_lv7_50) else "0";
    matA_V_0_address0 <= zext_ln145_fu_493_p1(8 - 1 downto 0);
    matA_V_0_address1 <= zext_ln144_1_fu_325_p1(8 - 1 downto 0);

    matA_V_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matA_V_0_ce0 <= ap_const_logic_1;
        else 
            matA_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matA_V_0_ce1 <= ap_const_logic_1;
        else 
            matA_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    matA_V_0_d0 <= std_logic_vector(unsigned(trunc_ln708_4_reg_622) + unsigned(zext_ln415_4_fu_498_p1));
    matA_V_0_d1 <= std_logic_vector(unsigned(trunc_ln_fu_339_p4) + unsigned(zext_ln415_fu_357_p1));

    matA_V_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln137_reg_547_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln137_reg_547_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matA_V_0_we0 <= ap_const_logic_1;
        else 
            matA_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_V_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln137_reg_547_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln137_reg_547_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matA_V_0_we1 <= ap_const_logic_1;
        else 
            matA_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    matA_V_1_address0 <= zext_ln145_fu_493_p1(8 - 1 downto 0);
    matA_V_1_address1 <= zext_ln144_1_fu_325_p1(8 - 1 downto 0);

    matA_V_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matA_V_1_ce0 <= ap_const_logic_1;
        else 
            matA_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matA_V_1_ce1 <= ap_const_logic_1;
        else 
            matA_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    matA_V_1_d0 <= std_logic_vector(unsigned(trunc_ln708_6_reg_632) + unsigned(zext_ln415_6_fu_507_p1));
    matA_V_1_d1 <= std_logic_vector(unsigned(trunc_ln708_5_fu_418_p4) + unsigned(zext_ln415_5_fu_436_p1));

    matA_V_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln137_reg_547_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln137_reg_547_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matA_V_1_we0 <= ap_const_logic_1;
        else 
            matA_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_V_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln137_reg_547_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln137_reg_547_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            matA_V_1_we1 <= ap_const_logic_1;
        else 
            matA_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_17_fu_368_p0 <= sext_ln1118_reg_577(64 - 1 downto 0);
    r_V_17_fu_368_p1 <= s_cast_i_i_reg_524(64 - 1 downto 0);
    r_V_18_fu_372_p0 <= sext_ln1118_4_reg_587(64 - 1 downto 0);
    r_V_18_fu_372_p1 <= c_cast_i_i_reg_516(64 - 1 downto 0);
    r_V_21_fu_447_p0 <= sext_ln1118_5_reg_597(64 - 1 downto 0);
    r_V_21_fu_447_p1 <= s_cast_i_i_reg_524(64 - 1 downto 0);
    r_V_22_fu_451_p0 <= sext_ln1118_6_reg_607(64 - 1 downto 0);
    r_V_22_fu_451_p1 <= c_cast_i_i_reg_516(64 - 1 downto 0);
    r_V_23_fu_289_p1 <= c_cast_i_i_reg_516(64 - 1 downto 0);
    r_V_24_fu_298_p1 <= s_cast_i_i_reg_524(64 - 1 downto 0);
    r_V_25_fu_307_p1 <= c_cast_i_i_reg_516(64 - 1 downto 0);
    r_V_26_fu_316_p1 <= s_cast_i_i_reg_524(64 - 1 downto 0);
    ret_V_4_fu_384_p2 <= std_logic_vector(unsigned(r_V_18_fu_372_p2) + unsigned(r_V_17_fu_368_p2));
    ret_V_5_fu_414_p2 <= std_logic_vector(unsigned(r_V_25_reg_602) - unsigned(r_V_26_reg_612));
    ret_V_6_fu_463_p2 <= std_logic_vector(unsigned(r_V_22_fu_451_p2) + unsigned(r_V_21_fu_447_p2));
    ret_V_fu_335_p2 <= std_logic_vector(unsigned(r_V_23_reg_582) - unsigned(r_V_24_reg_592));

    s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_blk_n <= s_empty_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        s_cast_i_i_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_dout),107));


    s_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_read <= ap_const_logic_1;
        else 
            s_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1118_4_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_j_V_0_q0),107));

        sext_ln1118_5_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_i_V_1_q0),107));

        sext_ln1118_6_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_j_V_1_q0),107));

        sext_ln1118_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_i_V_0_q0),107));

    sub_ln144_fu_279_p2 <= std_logic_vector(unsigned(tmp_cast_fu_271_p3) - unsigned(zext_ln144_fu_263_p1));
    tmp_5_fu_428_p3 <= ret_V_5_fu_414_p2(42 downto 42);
    tmp_cast_fu_271_p3 <= (trunc_ln144_fu_267_p1 & ap_const_lv2_0);
    tmp_fu_349_p3 <= ret_V_fu_335_p2(42 downto 42);
    trunc_ln1192_4_fu_380_p1 <= r_V_18_fu_372_p2(43 - 1 downto 0);
    trunc_ln1192_5_fu_455_p1 <= r_V_21_fu_447_p2(43 - 1 downto 0);
    trunc_ln1192_6_fu_459_p1 <= r_V_22_fu_451_p2(43 - 1 downto 0);
    trunc_ln1192_fu_376_p1 <= r_V_17_fu_368_p2(43 - 1 downto 0);
    trunc_ln144_fu_267_p1 <= k_reg_216(6 - 1 downto 0);
    trunc_ln708_5_fu_418_p4 <= ret_V_5_fu_414_p2(106 downto 43);
    trunc_ln_fu_339_p4 <= ret_V_fu_335_p2(106 downto 43);
    zext_ln137_1_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_j_dout),8));
    zext_ln137_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_216),64));
    zext_ln144_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_321_p2),64));
    zext_ln144_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_216),8));
    zext_ln145_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln145_reg_617),64));
    zext_ln415_4_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_627),64));
    zext_ln415_5_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_428_p3),64));
    zext_ln415_6_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_637),64));
    zext_ln415_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_349_p3),64));
end behav;
