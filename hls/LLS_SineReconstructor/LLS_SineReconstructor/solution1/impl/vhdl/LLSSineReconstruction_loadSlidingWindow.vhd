-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_loadSlidingWindow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_in_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_0_ce0 : OUT STD_LOGIC;
    buffer_in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_1_ce0 : OUT STD_LOGIC;
    buffer_in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_2_ce0 : OUT STD_LOGIC;
    buffer_in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_3_ce0 : OUT STD_LOGIC;
    buffer_in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_4_ce0 : OUT STD_LOGIC;
    buffer_in_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_5_ce0 : OUT STD_LOGIC;
    buffer_in_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_6_ce0 : OUT STD_LOGIC;
    buffer_in_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_7_ce0 : OUT STD_LOGIC;
    buffer_in_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_8_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_8_ce0 : OUT STD_LOGIC;
    buffer_in_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_9_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_9_ce0 : OUT STD_LOGIC;
    buffer_in_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_10_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_10_ce0 : OUT STD_LOGIC;
    buffer_in_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_11_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buffer_in_11_ce0 : OUT STD_LOGIC;
    buffer_in_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sliding_window_front_ptr_s_i : IN STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_front_ptr_s_o : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_front_ptr_s_o_ap_vld : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sliding_window_buffer_samples_sample_V_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sliding_window_buffer_samples_sample_V_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_d1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_10_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_10_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_10_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_10_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_10_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_10_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_11_we0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_11_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_11_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_11_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_11_we1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_11_d1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_back_ptr_s_i : IN STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_back_ptr_s_o : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_back_ptr_s_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of LLSSineReconstruction_loadSlidingWindow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (119 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (119 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (119 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (119 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (119 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (119 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (119 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (119 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (119 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (119 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (119 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (119 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sliding_window_size_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_reg_6149 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln92_fu_6172_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln92_reg_9221 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln92_fu_6178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_9226 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_fu_6424_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_reg_9290 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln19_fu_6430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_reg_9295 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln19_fu_6458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sample_period_samples_0_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_load_reg_9686 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sample_period_samples_1_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_load_reg_9691 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_reg_9696 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_reg_9701 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_reg_9706 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_reg_9711 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_reg_9716 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_reg_9721 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_reg_9726 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_reg_9731 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_reg_9736 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_reg_9741 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_timestamp_V_load_reg_9746 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_load_reg_9751 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_load_reg_9756 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_load_reg_9761 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_load_reg_9766 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_load_reg_9771 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_load_reg_9776 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_load_reg_9781 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_load_reg_9786 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_load_reg_9791 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_load_reg_9796 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_load_reg_9801 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_load_1_reg_9806 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_load_1_reg_9811 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_1_reg_9816 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_1_reg_9821 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_1_reg_9826 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_1_reg_9831 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_1_reg_9836 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_1_reg_9841 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_1_reg_9846 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_1_reg_9851 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_1_reg_9856 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_1_reg_9861 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_timestamp_V_load_1_reg_9866 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_load_1_reg_9871 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_load_1_reg_9876 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_load_1_reg_9881 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_load_1_reg_9886 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_load_1_reg_9891 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_load_1_reg_9896 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_load_1_reg_9901 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_load_1_reg_9906 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_load_1_reg_9911 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_load_1_reg_9916 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_load_1_reg_9921 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_sample_V_load_2_reg_10166 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sample_period_samples_1_sample_V_load_2_reg_10171 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_2_reg_10176 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_2_reg_10181 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_2_reg_10186 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_2_reg_10191 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_2_reg_10196 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_2_reg_10201 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_2_reg_10206 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_2_reg_10211 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_2_reg_10216 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_2_reg_10221 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_load_2_reg_10226 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_load_2_reg_10232 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_load_2_reg_10238 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_load_2_reg_10244 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_load_2_reg_10250 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_load_2_reg_10256 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_load_2_reg_10262 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_load_2_reg_10268 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_load_2_reg_10274 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_load_2_reg_10280 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_load_2_reg_10286 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_load_2_reg_10292 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_sample_V_load_3_reg_10298 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_load_3_reg_10303 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_3_reg_10308 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_3_reg_10313 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_3_reg_10318 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_3_reg_10323 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_3_reg_10328 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_3_reg_10333 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_3_reg_10338 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_3_reg_10343 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_3_reg_10348 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_3_reg_10353 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_load_3_reg_10358 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_load_3_reg_10364 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_load_3_reg_10370 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_load_3_reg_10376 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_load_3_reg_10382 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_load_3_reg_10388 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_load_3_reg_10394 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_load_3_reg_10400 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_load_3_reg_10406 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_load_3_reg_10412 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_load_3_reg_10418 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_load_3_reg_10424 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_sample_V_load_4_reg_10670 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sample_period_samples_1_sample_V_load_4_reg_10675 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_4_reg_10680 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_4_reg_10685 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_4_reg_10690 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_4_reg_10695 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_4_reg_10700 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_4_reg_10705 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_4_reg_10710 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_4_reg_10715 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_4_reg_10720 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_4_reg_10725 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_load_4_reg_10730 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_load_4_reg_10735 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_load_4_reg_10740 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_load_4_reg_10745 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_load_4_reg_10750 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_load_4_reg_10755 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_load_4_reg_10760 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_load_4_reg_10765 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_load_4_reg_10770 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_load_4_reg_10775 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_load_4_reg_10780 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_load_4_reg_10785 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_sample_V_load_5_reg_10790 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_load_5_reg_10795 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_5_reg_10800 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_5_reg_10805 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_5_reg_10810 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_5_reg_10815 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_5_reg_10820 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_5_reg_10825 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_5_reg_10830 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_5_reg_10835 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_5_reg_10840 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_5_reg_10845 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_load_5_reg_10850 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_load_5_reg_10855 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_load_5_reg_10860 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_load_5_reg_10865 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_load_5_reg_10870 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_load_5_reg_10875 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_load_5_reg_10880 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_load_5_reg_10885 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_load_5_reg_10890 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_load_5_reg_10895 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_load_5_reg_10900 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_load_5_reg_10905 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_sample_V_load_6_reg_11150 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sample_period_samples_1_sample_V_load_6_reg_11155 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_6_reg_11160 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_6_reg_11165 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_6_reg_11170 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_6_reg_11175 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_6_reg_11180 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_6_reg_11185 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_6_reg_11190 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_6_reg_11195 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_6_reg_11200 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_6_reg_11205 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_load_6_reg_11210 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_load_6_reg_11215 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_load_6_reg_11220 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_load_6_reg_11225 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_load_6_reg_11230 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_load_6_reg_11235 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_load_6_reg_11240 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_load_6_reg_11245 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_load_6_reg_11250 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_load_6_reg_11255 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_load_6_reg_11260 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_load_6_reg_11265 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_sample_V_load_7_reg_11270 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_load_7_reg_11275 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_7_reg_11280 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_7_reg_11285 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_7_reg_11290 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_7_reg_11295 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_7_reg_11300 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_7_reg_11305 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_7_reg_11310 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_7_reg_11315 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_7_reg_11320 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_7_reg_11325 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_load_7_reg_11330 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_load_7_reg_11335 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_load_7_reg_11340 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_load_7_reg_11345 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_load_7_reg_11350 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_load_7_reg_11355 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_load_7_reg_11360 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_load_7_reg_11365 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_load_7_reg_11370 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_load_7_reg_11375 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_load_7_reg_11380 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_load_7_reg_11385 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln52_fu_6468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_11393 : STD_LOGIC_VECTOR (0 downto 0);
    signal sliding_window_front_ptr_load_reg_11397 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln54_fu_6514_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_reg_11407 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_6488_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal new_front_ptr_reg_11421 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln61_fu_6536_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln61_reg_11427 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln63_fu_6544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_11432 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_6587_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_11444 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sub_ln75_fu_6634_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_reg_11454 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_1_fu_6704_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_1_reg_11468 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_2_fu_6782_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_2_reg_11484 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sub_ln75_3_fu_6835_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_3_reg_11500 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_4_fu_6908_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_4_reg_11516 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sub_ln75_5_fu_6961_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_5_reg_11532 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_6_fu_7034_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_6_reg_11548 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal sub_ln75_7_fu_7087_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln75_7_reg_11564 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_8031_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_11580 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal sub_ln54_1_fu_8084_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_1_reg_11591 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_2_fu_8266_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_2_reg_11605 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal sub_ln54_3_fu_8433_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_3_reg_11619 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal sub_ln54_4_fu_8520_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_4_reg_11633 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal sub_ln54_5_fu_8571_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_5_reg_11649 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_6_fu_8642_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_6_reg_11665 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal sub_ln54_7_fu_8693_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln54_7_reg_11681 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal samples_0_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_0_sample_V_ce0 : STD_LOGIC;
    signal samples_0_sample_V_we0 : STD_LOGIC;
    signal samples_0_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_0_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_1_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_1_sample_V_ce0 : STD_LOGIC;
    signal samples_1_sample_V_we0 : STD_LOGIC;
    signal samples_1_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_1_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_2_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_2_sample_V_ce0 : STD_LOGIC;
    signal samples_2_sample_V_we0 : STD_LOGIC;
    signal samples_2_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_2_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_3_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_3_sample_V_ce0 : STD_LOGIC;
    signal samples_3_sample_V_we0 : STD_LOGIC;
    signal samples_3_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_3_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_4_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_4_sample_V_ce0 : STD_LOGIC;
    signal samples_4_sample_V_we0 : STD_LOGIC;
    signal samples_4_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_4_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_5_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_5_sample_V_ce0 : STD_LOGIC;
    signal samples_5_sample_V_we0 : STD_LOGIC;
    signal samples_5_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_5_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_6_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_6_sample_V_ce0 : STD_LOGIC;
    signal samples_6_sample_V_we0 : STD_LOGIC;
    signal samples_6_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_6_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_7_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_7_sample_V_ce0 : STD_LOGIC;
    signal samples_7_sample_V_we0 : STD_LOGIC;
    signal samples_7_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_7_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_8_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_8_sample_V_ce0 : STD_LOGIC;
    signal samples_8_sample_V_we0 : STD_LOGIC;
    signal samples_8_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_8_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_9_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_9_sample_V_ce0 : STD_LOGIC;
    signal samples_9_sample_V_we0 : STD_LOGIC;
    signal samples_9_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_9_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_10_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_10_sample_V_ce0 : STD_LOGIC;
    signal samples_10_sample_V_we0 : STD_LOGIC;
    signal samples_10_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_10_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_11_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_11_sample_V_ce0 : STD_LOGIC;
    signal samples_11_sample_V_we0 : STD_LOGIC;
    signal samples_11_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_11_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_0_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_0_timestamp_V_ce0 : STD_LOGIC;
    signal samples_0_timestamp_V_we0 : STD_LOGIC;
    signal samples_0_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_0_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_1_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_1_timestamp_V_ce0 : STD_LOGIC;
    signal samples_1_timestamp_V_we0 : STD_LOGIC;
    signal samples_1_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_1_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_2_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_2_timestamp_V_ce0 : STD_LOGIC;
    signal samples_2_timestamp_V_we0 : STD_LOGIC;
    signal samples_2_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_2_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_3_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_3_timestamp_V_ce0 : STD_LOGIC;
    signal samples_3_timestamp_V_we0 : STD_LOGIC;
    signal samples_3_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_3_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_4_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_4_timestamp_V_ce0 : STD_LOGIC;
    signal samples_4_timestamp_V_we0 : STD_LOGIC;
    signal samples_4_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_4_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_5_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_5_timestamp_V_ce0 : STD_LOGIC;
    signal samples_5_timestamp_V_we0 : STD_LOGIC;
    signal samples_5_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_5_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_6_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_6_timestamp_V_ce0 : STD_LOGIC;
    signal samples_6_timestamp_V_we0 : STD_LOGIC;
    signal samples_6_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_6_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_7_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_7_timestamp_V_ce0 : STD_LOGIC;
    signal samples_7_timestamp_V_we0 : STD_LOGIC;
    signal samples_7_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_7_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_8_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_8_timestamp_V_ce0 : STD_LOGIC;
    signal samples_8_timestamp_V_we0 : STD_LOGIC;
    signal samples_8_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_8_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_9_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_9_timestamp_V_ce0 : STD_LOGIC;
    signal samples_9_timestamp_V_we0 : STD_LOGIC;
    signal samples_9_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_9_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_10_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_10_timestamp_V_ce0 : STD_LOGIC;
    signal samples_10_timestamp_V_we0 : STD_LOGIC;
    signal samples_10_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_10_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_11_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal samples_11_timestamp_V_ce0 : STD_LOGIC;
    signal samples_11_timestamp_V_we0 : STD_LOGIC;
    signal samples_11_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_11_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_timestamp_V_ce1 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_6153_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_4_reg_6161 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln95_fu_6188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_6204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_fu_6520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_2_fu_6531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_2_fu_6640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_3_fu_6651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_6595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_6662_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_4_fu_6720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_5_fu_6730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_6740_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_6793_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_6_fu_6846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_7_fu_6856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_6866_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_6919_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_8_fu_6972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_9_fu_6982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_6992_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_7045_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_10_fu_7098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal zext_ln75_11_fu_7108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_12_fu_7118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal zext_ln75_13_fu_7128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_14_fu_7133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal zext_ln75_15_fu_7142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_16_fu_7152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal zext_ln75_17_fu_7162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_18_fu_7172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal zext_ln75_19_fu_7182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_20_fu_7192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal zext_ln75_21_fu_7202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_22_fu_7212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal zext_ln75_23_fu_7222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_24_fu_7232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal zext_ln75_25_fu_7242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_26_fu_7247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln75_27_fu_7256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_28_fu_7266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal zext_ln75_29_fu_7276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_30_fu_7286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal zext_ln75_31_fu_7296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_32_fu_7306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal zext_ln75_33_fu_7316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_34_fu_7326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal zext_ln75_35_fu_7336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_36_fu_7346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal zext_ln75_37_fu_7356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_38_fu_7361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal zext_ln75_39_fu_7370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_40_fu_7380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal zext_ln75_41_fu_7390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_42_fu_7400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal zext_ln75_43_fu_7410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_44_fu_7420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal zext_ln75_45_fu_7430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_46_fu_7440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal zext_ln75_47_fu_7450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_48_fu_7460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal zext_ln75_49_fu_7470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_50_fu_7475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal zext_ln75_51_fu_7484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_52_fu_7494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal zext_ln75_53_fu_7504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_54_fu_7514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal zext_ln75_55_fu_7524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_56_fu_7534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal zext_ln75_57_fu_7544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_58_fu_7554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal zext_ln75_59_fu_7564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_60_fu_7574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal zext_ln75_61_fu_7584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_62_fu_7589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal zext_ln75_63_fu_7598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_64_fu_7608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal zext_ln75_65_fu_7618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_66_fu_7628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal zext_ln75_67_fu_7638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_68_fu_7648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal zext_ln75_69_fu_7658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_70_fu_7668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal zext_ln75_71_fu_7678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_72_fu_7688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal zext_ln75_73_fu_7698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_74_fu_7703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal zext_ln75_75_fu_7712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_76_fu_7722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal zext_ln75_77_fu_7732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_78_fu_7742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal zext_ln75_79_fu_7752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_80_fu_7762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal zext_ln75_81_fu_7772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_82_fu_7782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal zext_ln75_83_fu_7792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_84_fu_7802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal zext_ln75_85_fu_7812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_86_fu_7817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal zext_ln75_87_fu_7826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_88_fu_7836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal zext_ln75_89_fu_7846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_90_fu_7856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal zext_ln75_91_fu_7866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_92_fu_7876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal zext_ln75_93_fu_7886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_94_fu_7896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal zext_ln75_95_fu_7906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_96_fu_7916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal zext_ln75_97_fu_7926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_3_fu_7936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal zext_ln54_4_fu_7946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_5_fu_7956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal zext_ln54_6_fu_7966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_7_fu_7976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal zext_ln54_8_fu_7986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_9_fu_7996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal zext_ln54_10_fu_8006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_11_fu_8016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal zext_ln54_12_fu_8026_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_13_fu_8090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_14_fu_8101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_8044_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_15_fu_8111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal zext_ln54_16_fu_8121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_17_fu_8131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal zext_ln54_18_fu_8141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_19_fu_8151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal zext_ln54_20_fu_8161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_21_fu_8171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal zext_ln54_22_fu_8181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_23_fu_8206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal zext_ln54_24_fu_8216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_8186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_25_fu_8272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_26_fu_8283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_8226_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_27_fu_8293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal zext_ln54_28_fu_8303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_29_fu_8313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal zext_ln54_30_fu_8323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_31_fu_8333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal zext_ln54_32_fu_8343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_33_fu_8353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal zext_ln54_34_fu_8363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_35_fu_8373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal zext_ln54_36_fu_8383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_37_fu_8439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_38_fu_8450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_8393_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_39_fu_8460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_40_fu_8470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_8480_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_8531_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_41_fu_8582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_42_fu_8592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_8602_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_8653_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_43_fu_8704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal zext_ln54_44_fu_8714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_45_fu_8724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal zext_ln54_46_fu_8734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_47_fu_8744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal zext_ln54_48_fu_8754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_49_fu_8759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal zext_ln54_50_fu_8768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_51_fu_8778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal zext_ln54_52_fu_8788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_53_fu_8798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal zext_ln54_54_fu_8808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_55_fu_8818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal zext_ln54_56_fu_8828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_57_fu_8838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal zext_ln54_58_fu_8848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_59_fu_8858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal zext_ln54_60_fu_8868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_61_fu_8873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal zext_ln54_62_fu_8882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_63_fu_8892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal zext_ln54_64_fu_8902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_65_fu_8912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal zext_ln54_66_fu_8922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_67_fu_8932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal zext_ln54_68_fu_8942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_69_fu_8952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal zext_ln54_70_fu_8962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_71_fu_8972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal zext_ln54_72_fu_8982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_73_fu_8987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal zext_ln54_74_fu_8996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_75_fu_9006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal zext_ln54_76_fu_9016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_77_fu_9026_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal zext_ln54_78_fu_9036_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_79_fu_9046_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal zext_ln54_80_fu_9056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_81_fu_9066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal zext_ln54_82_fu_9076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_83_fu_9086_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal zext_ln54_84_fu_9096_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_85_fu_9101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal zext_ln54_86_fu_9110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_87_fu_9120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal zext_ln54_88_fu_9130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_89_fu_9140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal zext_ln54_90_fu_9150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_91_fu_9160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal zext_ln54_92_fu_9170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_93_fu_9180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal zext_ln54_94_fu_9190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_95_fu_9200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal zext_ln54_96_fu_9210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln71_fu_6573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_fu_6568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_6556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln95_fu_6184_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln52_fu_6478_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln52_fu_6478_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_6488_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_6488_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln54_fu_6494_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln54_fu_6494_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_6506_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_cast_fu_6498_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_6506_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_fu_6525_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_6556_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln75_fu_6584_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln75_1_fu_6611_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_6622_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_31_cast_fu_6614_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln75_1_fu_6630_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_fu_6645_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_11_fu_6656_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln75_2_fu_6682_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl14_cast_fu_6686_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl15_cast_fu_6694_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_1_fu_6715_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_2_fu_6725_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_15_fu_6735_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln75_3_fu_6760_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl26_cast_fu_6764_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl27_cast_fu_6772_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_23_fu_6788_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln75_4_fu_6813_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl24_cast_fu_6817_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl25_cast_fu_6825_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_3_fu_6841_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_4_fu_6851_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_27_fu_6861_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln75_5_fu_6886_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl22_cast_fu_6890_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl23_cast_fu_6898_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_39_fu_6914_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln75_6_fu_6939_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl20_cast_fu_6943_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl21_cast_fu_6951_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_5_fu_6967_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_6_fu_6977_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_43_fu_6987_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln75_7_fu_7012_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl18_cast_fu_7016_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl19_cast_fu_7024_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_51_fu_7040_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln75_8_fu_7065_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl16_cast_fu_7069_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl17_cast_fu_7077_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_7_fu_7093_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_8_fu_7103_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_9_fu_7113_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_10_fu_7123_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_12_fu_7137_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_13_fu_7147_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_14_fu_7157_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_fu_7167_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_1_fu_7177_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_2_fu_7187_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_3_fu_7197_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_4_fu_7207_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_5_fu_7217_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_6_fu_7227_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_7_fu_7237_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_16_fu_7251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_17_fu_7261_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_18_fu_7271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_19_fu_7281_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_20_fu_7291_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_21_fu_7301_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_22_fu_7311_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_8_fu_7321_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_9_fu_7331_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_10_fu_7341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_11_fu_7351_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_24_fu_7365_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_25_fu_7375_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_26_fu_7385_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_12_fu_7395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_13_fu_7405_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_14_fu_7415_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_15_fu_7425_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_16_fu_7435_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_17_fu_7445_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_18_fu_7455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_19_fu_7465_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_28_fu_7479_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_29_fu_7489_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_30_fu_7499_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_31_fu_7509_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_32_fu_7519_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_33_fu_7529_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_34_fu_7539_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_35_fu_7549_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_36_fu_7559_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_37_fu_7569_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_38_fu_7579_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_40_fu_7593_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_41_fu_7603_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_42_fu_7613_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_20_fu_7623_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_21_fu_7633_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_22_fu_7643_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_23_fu_7653_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_24_fu_7663_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_25_fu_7673_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_26_fu_7683_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_27_fu_7693_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_44_fu_7707_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_45_fu_7717_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_46_fu_7727_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_47_fu_7737_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_48_fu_7747_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_49_fu_7757_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_50_fu_7767_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_28_fu_7777_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_29_fu_7787_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_30_fu_7797_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_31_fu_7807_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_52_fu_7821_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_53_fu_7831_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln75_54_fu_7841_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_32_fu_7851_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_33_fu_7861_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_34_fu_7871_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_35_fu_7881_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_36_fu_7891_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_37_fu_7901_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_38_fu_7911_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_39_fu_7921_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_1_fu_7931_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_2_fu_7941_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_3_fu_7951_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_4_fu_7961_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_5_fu_7971_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_6_fu_7981_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_7_fu_7991_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_8_fu_8001_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_9_fu_8011_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_10_fu_8021_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_11_fu_8038_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_1_fu_8064_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl12_cast_fu_8068_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl13_cast_fu_8076_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_12_fu_8095_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_13_fu_8106_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_14_fu_8116_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_fu_8126_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_1_fu_8136_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_2_fu_8146_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_3_fu_8156_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_4_fu_8166_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_5_fu_8176_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_6_fu_8201_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_7_fu_8211_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_15_fu_8221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_2_fu_8246_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl10_cast_fu_8250_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl11_cast_fu_8258_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_16_fu_8277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_17_fu_8288_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_18_fu_8298_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_19_fu_8308_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_20_fu_8318_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_21_fu_8328_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_22_fu_8338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_8_fu_8348_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_9_fu_8358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_10_fu_8368_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_11_fu_8378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_23_fu_8388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_3_fu_8413_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl8_cast_fu_8417_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_8425_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_24_fu_8444_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_25_fu_8455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_26_fu_8465_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_27_fu_8475_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_4_fu_8500_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_fu_8504_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_cast_fu_8512_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_39_fu_8526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_5_fu_8551_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_8555_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_8563_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_12_fu_8577_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_13_fu_8587_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_43_fu_8597_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_6_fu_8622_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_8626_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_8634_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_51_fu_8648_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln54_7_fu_8673_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_8677_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_8685_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_14_fu_8699_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_15_fu_8709_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_16_fu_8719_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_17_fu_8729_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_18_fu_8739_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_19_fu_8749_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_28_fu_8763_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_29_fu_8773_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_30_fu_8783_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_31_fu_8793_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_32_fu_8803_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_33_fu_8813_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_34_fu_8823_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_35_fu_8833_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_36_fu_8843_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_37_fu_8853_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_38_fu_8863_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_40_fu_8877_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_41_fu_8887_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_42_fu_8897_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_20_fu_8907_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_21_fu_8917_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_22_fu_8927_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_23_fu_8937_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_24_fu_8947_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_25_fu_8957_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_26_fu_8967_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_27_fu_8977_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_44_fu_8991_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_45_fu_9001_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_46_fu_9011_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_47_fu_9021_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_48_fu_9031_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_49_fu_9041_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_50_fu_9051_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_28_fu_9061_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_29_fu_9071_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_30_fu_9081_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_31_fu_9091_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_52_fu_9105_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_53_fu_9115_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_54_fu_9125_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_32_fu_9135_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_33_fu_9145_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_34_fu_9155_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_35_fu_9165_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_36_fu_9175_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_37_fu_9185_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_38_fu_9195_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_39_fu_9205_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_6488_ap_start : STD_LOGIC;
    signal grp_fu_6488_ap_done : STD_LOGIC;
    signal grp_fu_6556_ap_start : STD_LOGIC;
    signal grp_fu_6556_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_srem_6ns_5ns_5_10_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component LLSSineReconstruction_srem_5ns_5ns_5_9_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    samples_0_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_0_sample_V_address0,
        ce0 => samples_0_sample_V_ce0,
        we0 => samples_0_sample_V_we0,
        d0 => samples_0_sample_V_d0,
        q0 => samples_0_sample_V_q0);

    samples_1_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_1_sample_V_address0,
        ce0 => samples_1_sample_V_ce0,
        we0 => samples_1_sample_V_we0,
        d0 => samples_1_sample_V_d0,
        q0 => samples_1_sample_V_q0);

    samples_2_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_2_sample_V_address0,
        ce0 => samples_2_sample_V_ce0,
        we0 => samples_2_sample_V_we0,
        d0 => samples_2_sample_V_d0,
        q0 => samples_2_sample_V_q0);

    samples_3_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_3_sample_V_address0,
        ce0 => samples_3_sample_V_ce0,
        we0 => samples_3_sample_V_we0,
        d0 => samples_3_sample_V_d0,
        q0 => samples_3_sample_V_q0);

    samples_4_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_4_sample_V_address0,
        ce0 => samples_4_sample_V_ce0,
        we0 => samples_4_sample_V_we0,
        d0 => samples_4_sample_V_d0,
        q0 => samples_4_sample_V_q0);

    samples_5_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_5_sample_V_address0,
        ce0 => samples_5_sample_V_ce0,
        we0 => samples_5_sample_V_we0,
        d0 => samples_5_sample_V_d0,
        q0 => samples_5_sample_V_q0);

    samples_6_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_6_sample_V_address0,
        ce0 => samples_6_sample_V_ce0,
        we0 => samples_6_sample_V_we0,
        d0 => samples_6_sample_V_d0,
        q0 => samples_6_sample_V_q0);

    samples_7_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_7_sample_V_address0,
        ce0 => samples_7_sample_V_ce0,
        we0 => samples_7_sample_V_we0,
        d0 => samples_7_sample_V_d0,
        q0 => samples_7_sample_V_q0);

    samples_8_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_8_sample_V_address0,
        ce0 => samples_8_sample_V_ce0,
        we0 => samples_8_sample_V_we0,
        d0 => samples_8_sample_V_d0,
        q0 => samples_8_sample_V_q0);

    samples_9_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_9_sample_V_address0,
        ce0 => samples_9_sample_V_ce0,
        we0 => samples_9_sample_V_we0,
        d0 => samples_9_sample_V_d0,
        q0 => samples_9_sample_V_q0);

    samples_10_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_10_sample_V_address0,
        ce0 => samples_10_sample_V_ce0,
        we0 => samples_10_sample_V_we0,
        d0 => samples_10_sample_V_d0,
        q0 => samples_10_sample_V_q0);

    samples_11_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_11_sample_V_address0,
        ce0 => samples_11_sample_V_ce0,
        we0 => samples_11_sample_V_we0,
        d0 => samples_11_sample_V_d0,
        q0 => samples_11_sample_V_q0);

    samples_0_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_0_timestamp_V_address0,
        ce0 => samples_0_timestamp_V_ce0,
        we0 => samples_0_timestamp_V_we0,
        d0 => samples_0_timestamp_V_d0,
        q0 => samples_0_timestamp_V_q0);

    samples_1_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_1_timestamp_V_address0,
        ce0 => samples_1_timestamp_V_ce0,
        we0 => samples_1_timestamp_V_we0,
        d0 => samples_1_timestamp_V_d0,
        q0 => samples_1_timestamp_V_q0);

    samples_2_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_2_timestamp_V_address0,
        ce0 => samples_2_timestamp_V_ce0,
        we0 => samples_2_timestamp_V_we0,
        d0 => samples_2_timestamp_V_d0,
        q0 => samples_2_timestamp_V_q0);

    samples_3_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_3_timestamp_V_address0,
        ce0 => samples_3_timestamp_V_ce0,
        we0 => samples_3_timestamp_V_we0,
        d0 => samples_3_timestamp_V_d0,
        q0 => samples_3_timestamp_V_q0);

    samples_4_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_4_timestamp_V_address0,
        ce0 => samples_4_timestamp_V_ce0,
        we0 => samples_4_timestamp_V_we0,
        d0 => samples_4_timestamp_V_d0,
        q0 => samples_4_timestamp_V_q0);

    samples_5_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_5_timestamp_V_address0,
        ce0 => samples_5_timestamp_V_ce0,
        we0 => samples_5_timestamp_V_we0,
        d0 => samples_5_timestamp_V_d0,
        q0 => samples_5_timestamp_V_q0);

    samples_6_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_6_timestamp_V_address0,
        ce0 => samples_6_timestamp_V_ce0,
        we0 => samples_6_timestamp_V_we0,
        d0 => samples_6_timestamp_V_d0,
        q0 => samples_6_timestamp_V_q0);

    samples_7_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_7_timestamp_V_address0,
        ce0 => samples_7_timestamp_V_ce0,
        we0 => samples_7_timestamp_V_we0,
        d0 => samples_7_timestamp_V_d0,
        q0 => samples_7_timestamp_V_q0);

    samples_8_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_8_timestamp_V_address0,
        ce0 => samples_8_timestamp_V_ce0,
        we0 => samples_8_timestamp_V_we0,
        d0 => samples_8_timestamp_V_d0,
        q0 => samples_8_timestamp_V_q0);

    samples_9_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_9_timestamp_V_address0,
        ce0 => samples_9_timestamp_V_ce0,
        we0 => samples_9_timestamp_V_we0,
        d0 => samples_9_timestamp_V_d0,
        q0 => samples_9_timestamp_V_q0);

    samples_10_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_10_timestamp_V_address0,
        ce0 => samples_10_timestamp_V_ce0,
        we0 => samples_10_timestamp_V_we0,
        d0 => samples_10_timestamp_V_d0,
        q0 => samples_10_timestamp_V_q0);

    samples_11_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_11_timestamp_V_address0,
        ce0 => samples_11_timestamp_V_ce0,
        we0 => samples_11_timestamp_V_we0,
        d0 => samples_11_timestamp_V_d0,
        q0 => samples_11_timestamp_V_q0);

    sample_period_samples_0_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_0_sample_V_address0,
        ce0 => sample_period_samples_0_sample_V_ce0,
        we0 => sample_period_samples_0_sample_V_we0,
        d0 => samples_0_sample_V_q0,
        q0 => sample_period_samples_0_sample_V_q0,
        address1 => sample_period_samples_0_sample_V_address1,
        ce1 => sample_period_samples_0_sample_V_ce1,
        q1 => sample_period_samples_0_sample_V_q1);

    sample_period_samples_1_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_1_sample_V_address0,
        ce0 => sample_period_samples_1_sample_V_ce0,
        we0 => sample_period_samples_1_sample_V_we0,
        d0 => samples_1_sample_V_q0,
        q0 => sample_period_samples_1_sample_V_q0,
        address1 => sample_period_samples_1_sample_V_address1,
        ce1 => sample_period_samples_1_sample_V_ce1,
        q1 => sample_period_samples_1_sample_V_q1);

    sample_period_samples_2_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_2_sample_V_address0,
        ce0 => sample_period_samples_2_sample_V_ce0,
        we0 => sample_period_samples_2_sample_V_we0,
        d0 => samples_2_sample_V_q0,
        q0 => sample_period_samples_2_sample_V_q0,
        address1 => sample_period_samples_2_sample_V_address1,
        ce1 => sample_period_samples_2_sample_V_ce1,
        q1 => sample_period_samples_2_sample_V_q1);

    sample_period_samples_3_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_3_sample_V_address0,
        ce0 => sample_period_samples_3_sample_V_ce0,
        we0 => sample_period_samples_3_sample_V_we0,
        d0 => samples_3_sample_V_q0,
        q0 => sample_period_samples_3_sample_V_q0,
        address1 => sample_period_samples_3_sample_V_address1,
        ce1 => sample_period_samples_3_sample_V_ce1,
        q1 => sample_period_samples_3_sample_V_q1);

    sample_period_samples_4_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_4_sample_V_address0,
        ce0 => sample_period_samples_4_sample_V_ce0,
        we0 => sample_period_samples_4_sample_V_we0,
        d0 => samples_4_sample_V_q0,
        q0 => sample_period_samples_4_sample_V_q0,
        address1 => sample_period_samples_4_sample_V_address1,
        ce1 => sample_period_samples_4_sample_V_ce1,
        q1 => sample_period_samples_4_sample_V_q1);

    sample_period_samples_5_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_5_sample_V_address0,
        ce0 => sample_period_samples_5_sample_V_ce0,
        we0 => sample_period_samples_5_sample_V_we0,
        d0 => samples_5_sample_V_q0,
        q0 => sample_period_samples_5_sample_V_q0,
        address1 => sample_period_samples_5_sample_V_address1,
        ce1 => sample_period_samples_5_sample_V_ce1,
        q1 => sample_period_samples_5_sample_V_q1);

    sample_period_samples_6_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_6_sample_V_address0,
        ce0 => sample_period_samples_6_sample_V_ce0,
        we0 => sample_period_samples_6_sample_V_we0,
        d0 => samples_6_sample_V_q0,
        q0 => sample_period_samples_6_sample_V_q0,
        address1 => sample_period_samples_6_sample_V_address1,
        ce1 => sample_period_samples_6_sample_V_ce1,
        q1 => sample_period_samples_6_sample_V_q1);

    sample_period_samples_7_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_7_sample_V_address0,
        ce0 => sample_period_samples_7_sample_V_ce0,
        we0 => sample_period_samples_7_sample_V_we0,
        d0 => samples_7_sample_V_q0,
        q0 => sample_period_samples_7_sample_V_q0,
        address1 => sample_period_samples_7_sample_V_address1,
        ce1 => sample_period_samples_7_sample_V_ce1,
        q1 => sample_period_samples_7_sample_V_q1);

    sample_period_samples_8_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_8_sample_V_address0,
        ce0 => sample_period_samples_8_sample_V_ce0,
        we0 => sample_period_samples_8_sample_V_we0,
        d0 => samples_8_sample_V_q0,
        q0 => sample_period_samples_8_sample_V_q0,
        address1 => sample_period_samples_8_sample_V_address1,
        ce1 => sample_period_samples_8_sample_V_ce1,
        q1 => sample_period_samples_8_sample_V_q1);

    sample_period_samples_9_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_9_sample_V_address0,
        ce0 => sample_period_samples_9_sample_V_ce0,
        we0 => sample_period_samples_9_sample_V_we0,
        d0 => samples_9_sample_V_q0,
        q0 => sample_period_samples_9_sample_V_q0,
        address1 => sample_period_samples_9_sample_V_address1,
        ce1 => sample_period_samples_9_sample_V_ce1,
        q1 => sample_period_samples_9_sample_V_q1);

    sample_period_samples_10_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_10_sample_V_address0,
        ce0 => sample_period_samples_10_sample_V_ce0,
        we0 => sample_period_samples_10_sample_V_we0,
        d0 => samples_10_sample_V_q0,
        q0 => sample_period_samples_10_sample_V_q0,
        address1 => sample_period_samples_10_sample_V_address1,
        ce1 => sample_period_samples_10_sample_V_ce1,
        q1 => sample_period_samples_10_sample_V_q1);

    sample_period_samples_11_sample_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_11_sample_V_address0,
        ce0 => sample_period_samples_11_sample_V_ce0,
        we0 => sample_period_samples_11_sample_V_we0,
        d0 => samples_11_sample_V_q0,
        q0 => sample_period_samples_11_sample_V_q0,
        address1 => sample_period_samples_11_sample_V_address1,
        ce1 => sample_period_samples_11_sample_V_ce1,
        q1 => sample_period_samples_11_sample_V_q1);

    sample_period_samples_0_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_0_timestamp_V_address0,
        ce0 => sample_period_samples_0_timestamp_V_ce0,
        we0 => sample_period_samples_0_timestamp_V_we0,
        d0 => samples_0_timestamp_V_q0,
        q0 => sample_period_samples_0_timestamp_V_q0,
        address1 => sample_period_samples_0_timestamp_V_address1,
        ce1 => sample_period_samples_0_timestamp_V_ce1,
        q1 => sample_period_samples_0_timestamp_V_q1);

    sample_period_samples_1_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_1_timestamp_V_address0,
        ce0 => sample_period_samples_1_timestamp_V_ce0,
        we0 => sample_period_samples_1_timestamp_V_we0,
        d0 => samples_1_timestamp_V_q0,
        q0 => sample_period_samples_1_timestamp_V_q0,
        address1 => sample_period_samples_1_timestamp_V_address1,
        ce1 => sample_period_samples_1_timestamp_V_ce1,
        q1 => sample_period_samples_1_timestamp_V_q1);

    sample_period_samples_2_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_2_timestamp_V_address0,
        ce0 => sample_period_samples_2_timestamp_V_ce0,
        we0 => sample_period_samples_2_timestamp_V_we0,
        d0 => samples_2_timestamp_V_q0,
        q0 => sample_period_samples_2_timestamp_V_q0,
        address1 => sample_period_samples_2_timestamp_V_address1,
        ce1 => sample_period_samples_2_timestamp_V_ce1,
        q1 => sample_period_samples_2_timestamp_V_q1);

    sample_period_samples_3_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_3_timestamp_V_address0,
        ce0 => sample_period_samples_3_timestamp_V_ce0,
        we0 => sample_period_samples_3_timestamp_V_we0,
        d0 => samples_3_timestamp_V_q0,
        q0 => sample_period_samples_3_timestamp_V_q0,
        address1 => sample_period_samples_3_timestamp_V_address1,
        ce1 => sample_period_samples_3_timestamp_V_ce1,
        q1 => sample_period_samples_3_timestamp_V_q1);

    sample_period_samples_4_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_4_timestamp_V_address0,
        ce0 => sample_period_samples_4_timestamp_V_ce0,
        we0 => sample_period_samples_4_timestamp_V_we0,
        d0 => samples_4_timestamp_V_q0,
        q0 => sample_period_samples_4_timestamp_V_q0,
        address1 => sample_period_samples_4_timestamp_V_address1,
        ce1 => sample_period_samples_4_timestamp_V_ce1,
        q1 => sample_period_samples_4_timestamp_V_q1);

    sample_period_samples_5_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_5_timestamp_V_address0,
        ce0 => sample_period_samples_5_timestamp_V_ce0,
        we0 => sample_period_samples_5_timestamp_V_we0,
        d0 => samples_5_timestamp_V_q0,
        q0 => sample_period_samples_5_timestamp_V_q0,
        address1 => sample_period_samples_5_timestamp_V_address1,
        ce1 => sample_period_samples_5_timestamp_V_ce1,
        q1 => sample_period_samples_5_timestamp_V_q1);

    sample_period_samples_6_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_6_timestamp_V_address0,
        ce0 => sample_period_samples_6_timestamp_V_ce0,
        we0 => sample_period_samples_6_timestamp_V_we0,
        d0 => samples_6_timestamp_V_q0,
        q0 => sample_period_samples_6_timestamp_V_q0,
        address1 => sample_period_samples_6_timestamp_V_address1,
        ce1 => sample_period_samples_6_timestamp_V_ce1,
        q1 => sample_period_samples_6_timestamp_V_q1);

    sample_period_samples_7_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_7_timestamp_V_address0,
        ce0 => sample_period_samples_7_timestamp_V_ce0,
        we0 => sample_period_samples_7_timestamp_V_we0,
        d0 => samples_7_timestamp_V_q0,
        q0 => sample_period_samples_7_timestamp_V_q0,
        address1 => sample_period_samples_7_timestamp_V_address1,
        ce1 => sample_period_samples_7_timestamp_V_ce1,
        q1 => sample_period_samples_7_timestamp_V_q1);

    sample_period_samples_8_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_8_timestamp_V_address0,
        ce0 => sample_period_samples_8_timestamp_V_ce0,
        we0 => sample_period_samples_8_timestamp_V_we0,
        d0 => samples_8_timestamp_V_q0,
        q0 => sample_period_samples_8_timestamp_V_q0,
        address1 => sample_period_samples_8_timestamp_V_address1,
        ce1 => sample_period_samples_8_timestamp_V_ce1,
        q1 => sample_period_samples_8_timestamp_V_q1);

    sample_period_samples_9_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_9_timestamp_V_address0,
        ce0 => sample_period_samples_9_timestamp_V_ce0,
        we0 => sample_period_samples_9_timestamp_V_we0,
        d0 => samples_9_timestamp_V_q0,
        q0 => sample_period_samples_9_timestamp_V_q0,
        address1 => sample_period_samples_9_timestamp_V_address1,
        ce1 => sample_period_samples_9_timestamp_V_ce1,
        q1 => sample_period_samples_9_timestamp_V_q1);

    sample_period_samples_10_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_10_timestamp_V_address0,
        ce0 => sample_period_samples_10_timestamp_V_ce0,
        we0 => sample_period_samples_10_timestamp_V_we0,
        d0 => samples_10_timestamp_V_q0,
        q0 => sample_period_samples_10_timestamp_V_q0,
        address1 => sample_period_samples_10_timestamp_V_address1,
        ce1 => sample_period_samples_10_timestamp_V_ce1,
        q1 => sample_period_samples_10_timestamp_V_q1);

    sample_period_samples_11_timestamp_V_U : component LLSSineReconstruction_loadSlidingWindow_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_11_timestamp_V_address0,
        ce0 => sample_period_samples_11_timestamp_V_ce0,
        we0 => sample_period_samples_11_timestamp_V_we0,
        d0 => samples_11_timestamp_V_q0,
        q0 => sample_period_samples_11_timestamp_V_q0,
        address1 => sample_period_samples_11_timestamp_V_address1,
        ce1 => sample_period_samples_11_timestamp_V_ce1,
        q1 => sample_period_samples_11_timestamp_V_q1);

    srem_6ns_5ns_5_10_seq_1_U1 : component LLSSineReconstruction_srem_6ns_5ns_5_10_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_6488_ap_start,
        done => grp_fu_6488_ap_done,
        din0 => grp_fu_6488_p0,
        din1 => grp_fu_6488_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_6488_p2);

    srem_5ns_5ns_5_9_seq_1_U2 : component LLSSineReconstruction_srem_5ns_5ns_5_9_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_6556_ap_start,
        done => grp_fu_6556_ap_done,
        din0 => grp_fu_6556_p0,
        din1 => ap_const_lv5_A,
        ce => ap_const_logic_1,
        dout => grp_fu_6556_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_4_reg_6161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_4_reg_6161 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_4_reg_6161 <= add_ln19_reg_9290;
            end if; 
        end if;
    end process;

    i_reg_6149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_6149 <= ap_const_lv4_0;
            elsif (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_6149 <= add_ln92_reg_9221;
            end if; 
        end if;
    end process;

    sliding_window_size_s_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_6568_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                sliding_window_size_s <= add_ln71_fu_6573_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
                sliding_window_size_s <= ap_const_lv32_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln19_reg_9290 <= add_ln19_fu_6424_p2;
                    zext_ln19_reg_9295(3 downto 0) <= zext_ln19_fu_6430_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln92_reg_9221 <= add_ln92_fu_6172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln52_reg_11393 <= icmp_ln52_fu_6468_p2;
                sample_period_samples_0_sample_V_load_6_reg_11150 <= sample_period_samples_0_sample_V_q0;
                sample_period_samples_0_sample_V_load_7_reg_11270 <= sample_period_samples_0_sample_V_q1;
                sample_period_samples_0_timestamp_V_load_6_reg_11210 <= sample_period_samples_0_timestamp_V_q0;
                sample_period_samples_0_timestamp_V_load_7_reg_11330 <= sample_period_samples_0_timestamp_V_q1;
                sample_period_samples_10_sample_V_load_6_reg_11200 <= sample_period_samples_10_sample_V_q0;
                sample_period_samples_10_sample_V_load_7_reg_11320 <= sample_period_samples_10_sample_V_q1;
                sample_period_samples_10_timestamp_V_load_6_reg_11260 <= sample_period_samples_10_timestamp_V_q0;
                sample_period_samples_10_timestamp_V_load_7_reg_11380 <= sample_period_samples_10_timestamp_V_q1;
                sample_period_samples_11_sample_V_load_6_reg_11205 <= sample_period_samples_11_sample_V_q0;
                sample_period_samples_11_sample_V_load_7_reg_11325 <= sample_period_samples_11_sample_V_q1;
                sample_period_samples_11_timestamp_V_load_6_reg_11265 <= sample_period_samples_11_timestamp_V_q0;
                sample_period_samples_11_timestamp_V_load_7_reg_11385 <= sample_period_samples_11_timestamp_V_q1;
                sample_period_samples_1_sample_V_load_6_reg_11155 <= sample_period_samples_1_sample_V_q0;
                sample_period_samples_1_sample_V_load_7_reg_11275 <= sample_period_samples_1_sample_V_q1;
                sample_period_samples_1_timestamp_V_load_6_reg_11215 <= sample_period_samples_1_timestamp_V_q0;
                sample_period_samples_1_timestamp_V_load_7_reg_11335 <= sample_period_samples_1_timestamp_V_q1;
                sample_period_samples_2_sample_V_load_6_reg_11160 <= sample_period_samples_2_sample_V_q0;
                sample_period_samples_2_sample_V_load_7_reg_11280 <= sample_period_samples_2_sample_V_q1;
                sample_period_samples_2_timestamp_V_load_6_reg_11220 <= sample_period_samples_2_timestamp_V_q0;
                sample_period_samples_2_timestamp_V_load_7_reg_11340 <= sample_period_samples_2_timestamp_V_q1;
                sample_period_samples_3_sample_V_load_6_reg_11165 <= sample_period_samples_3_sample_V_q0;
                sample_period_samples_3_sample_V_load_7_reg_11285 <= sample_period_samples_3_sample_V_q1;
                sample_period_samples_3_timestamp_V_load_6_reg_11225 <= sample_period_samples_3_timestamp_V_q0;
                sample_period_samples_3_timestamp_V_load_7_reg_11345 <= sample_period_samples_3_timestamp_V_q1;
                sample_period_samples_4_sample_V_load_6_reg_11170 <= sample_period_samples_4_sample_V_q0;
                sample_period_samples_4_sample_V_load_7_reg_11290 <= sample_period_samples_4_sample_V_q1;
                sample_period_samples_4_timestamp_V_load_6_reg_11230 <= sample_period_samples_4_timestamp_V_q0;
                sample_period_samples_4_timestamp_V_load_7_reg_11350 <= sample_period_samples_4_timestamp_V_q1;
                sample_period_samples_5_sample_V_load_6_reg_11175 <= sample_period_samples_5_sample_V_q0;
                sample_period_samples_5_sample_V_load_7_reg_11295 <= sample_period_samples_5_sample_V_q1;
                sample_period_samples_5_timestamp_V_load_6_reg_11235 <= sample_period_samples_5_timestamp_V_q0;
                sample_period_samples_5_timestamp_V_load_7_reg_11355 <= sample_period_samples_5_timestamp_V_q1;
                sample_period_samples_6_sample_V_load_6_reg_11180 <= sample_period_samples_6_sample_V_q0;
                sample_period_samples_6_sample_V_load_7_reg_11300 <= sample_period_samples_6_sample_V_q1;
                sample_period_samples_6_timestamp_V_load_6_reg_11240 <= sample_period_samples_6_timestamp_V_q0;
                sample_period_samples_6_timestamp_V_load_7_reg_11360 <= sample_period_samples_6_timestamp_V_q1;
                sample_period_samples_7_sample_V_load_6_reg_11185 <= sample_period_samples_7_sample_V_q0;
                sample_period_samples_7_sample_V_load_7_reg_11305 <= sample_period_samples_7_sample_V_q1;
                sample_period_samples_7_timestamp_V_load_6_reg_11245 <= sample_period_samples_7_timestamp_V_q0;
                sample_period_samples_7_timestamp_V_load_7_reg_11365 <= sample_period_samples_7_timestamp_V_q1;
                sample_period_samples_8_sample_V_load_6_reg_11190 <= sample_period_samples_8_sample_V_q0;
                sample_period_samples_8_sample_V_load_7_reg_11310 <= sample_period_samples_8_sample_V_q1;
                sample_period_samples_8_timestamp_V_load_6_reg_11250 <= sample_period_samples_8_timestamp_V_q0;
                sample_period_samples_8_timestamp_V_load_7_reg_11370 <= sample_period_samples_8_timestamp_V_q1;
                sample_period_samples_9_sample_V_load_6_reg_11195 <= sample_period_samples_9_sample_V_q0;
                sample_period_samples_9_sample_V_load_7_reg_11315 <= sample_period_samples_9_sample_V_q1;
                sample_period_samples_9_timestamp_V_load_6_reg_11255 <= sample_period_samples_9_timestamp_V_q0;
                sample_period_samples_9_timestamp_V_load_7_reg_11375 <= sample_period_samples_9_timestamp_V_q1;
                sliding_window_front_ptr_load_reg_11397 <= sliding_window_front_ptr_s_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                icmp_ln63_reg_11432 <= icmp_ln63_fu_6544_p2;
                new_front_ptr_reg_11421 <= grp_fu_6488_p2;
                trunc_ln61_reg_11427 <= trunc_ln61_fu_6536_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln92_reg_9226 <= icmp_ln92_fu_6178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sample_period_samples_0_sample_V_load_1_reg_9806 <= sample_period_samples_0_sample_V_q0;
                sample_period_samples_0_sample_V_load_reg_9686 <= sample_period_samples_0_sample_V_q1;
                sample_period_samples_0_timestamp_V_load_1_reg_9866 <= sample_period_samples_0_timestamp_V_q0;
                sample_period_samples_0_timestamp_V_load_reg_9746 <= sample_period_samples_0_timestamp_V_q1;
                sample_period_samples_10_sample_V_load_1_reg_9856 <= sample_period_samples_10_sample_V_q0;
                sample_period_samples_10_sample_V_load_reg_9736 <= sample_period_samples_10_sample_V_q1;
                sample_period_samples_10_timestamp_V_load_1_reg_9916 <= sample_period_samples_10_timestamp_V_q0;
                sample_period_samples_10_timestamp_V_load_reg_9796 <= sample_period_samples_10_timestamp_V_q1;
                sample_period_samples_11_sample_V_load_1_reg_9861 <= sample_period_samples_11_sample_V_q0;
                sample_period_samples_11_sample_V_load_reg_9741 <= sample_period_samples_11_sample_V_q1;
                sample_period_samples_11_timestamp_V_load_1_reg_9921 <= sample_period_samples_11_timestamp_V_q0;
                sample_period_samples_11_timestamp_V_load_reg_9801 <= sample_period_samples_11_timestamp_V_q1;
                sample_period_samples_1_sample_V_load_1_reg_9811 <= sample_period_samples_1_sample_V_q0;
                sample_period_samples_1_sample_V_load_reg_9691 <= sample_period_samples_1_sample_V_q1;
                sample_period_samples_1_timestamp_V_load_1_reg_9871 <= sample_period_samples_1_timestamp_V_q0;
                sample_period_samples_1_timestamp_V_load_reg_9751 <= sample_period_samples_1_timestamp_V_q1;
                sample_period_samples_2_sample_V_load_1_reg_9816 <= sample_period_samples_2_sample_V_q0;
                sample_period_samples_2_sample_V_load_reg_9696 <= sample_period_samples_2_sample_V_q1;
                sample_period_samples_2_timestamp_V_load_1_reg_9876 <= sample_period_samples_2_timestamp_V_q0;
                sample_period_samples_2_timestamp_V_load_reg_9756 <= sample_period_samples_2_timestamp_V_q1;
                sample_period_samples_3_sample_V_load_1_reg_9821 <= sample_period_samples_3_sample_V_q0;
                sample_period_samples_3_sample_V_load_reg_9701 <= sample_period_samples_3_sample_V_q1;
                sample_period_samples_3_timestamp_V_load_1_reg_9881 <= sample_period_samples_3_timestamp_V_q0;
                sample_period_samples_3_timestamp_V_load_reg_9761 <= sample_period_samples_3_timestamp_V_q1;
                sample_period_samples_4_sample_V_load_1_reg_9826 <= sample_period_samples_4_sample_V_q0;
                sample_period_samples_4_sample_V_load_reg_9706 <= sample_period_samples_4_sample_V_q1;
                sample_period_samples_4_timestamp_V_load_1_reg_9886 <= sample_period_samples_4_timestamp_V_q0;
                sample_period_samples_4_timestamp_V_load_reg_9766 <= sample_period_samples_4_timestamp_V_q1;
                sample_period_samples_5_sample_V_load_1_reg_9831 <= sample_period_samples_5_sample_V_q0;
                sample_period_samples_5_sample_V_load_reg_9711 <= sample_period_samples_5_sample_V_q1;
                sample_period_samples_5_timestamp_V_load_1_reg_9891 <= sample_period_samples_5_timestamp_V_q0;
                sample_period_samples_5_timestamp_V_load_reg_9771 <= sample_period_samples_5_timestamp_V_q1;
                sample_period_samples_6_sample_V_load_1_reg_9836 <= sample_period_samples_6_sample_V_q0;
                sample_period_samples_6_sample_V_load_reg_9716 <= sample_period_samples_6_sample_V_q1;
                sample_period_samples_6_timestamp_V_load_1_reg_9896 <= sample_period_samples_6_timestamp_V_q0;
                sample_period_samples_6_timestamp_V_load_reg_9776 <= sample_period_samples_6_timestamp_V_q1;
                sample_period_samples_7_sample_V_load_1_reg_9841 <= sample_period_samples_7_sample_V_q0;
                sample_period_samples_7_sample_V_load_reg_9721 <= sample_period_samples_7_sample_V_q1;
                sample_period_samples_7_timestamp_V_load_1_reg_9901 <= sample_period_samples_7_timestamp_V_q0;
                sample_period_samples_7_timestamp_V_load_reg_9781 <= sample_period_samples_7_timestamp_V_q1;
                sample_period_samples_8_sample_V_load_1_reg_9846 <= sample_period_samples_8_sample_V_q0;
                sample_period_samples_8_sample_V_load_reg_9726 <= sample_period_samples_8_sample_V_q1;
                sample_period_samples_8_timestamp_V_load_1_reg_9906 <= sample_period_samples_8_timestamp_V_q0;
                sample_period_samples_8_timestamp_V_load_reg_9786 <= sample_period_samples_8_timestamp_V_q1;
                sample_period_samples_9_sample_V_load_1_reg_9851 <= sample_period_samples_9_sample_V_q0;
                sample_period_samples_9_sample_V_load_reg_9731 <= sample_period_samples_9_sample_V_q1;
                sample_period_samples_9_timestamp_V_load_1_reg_9911 <= sample_period_samples_9_timestamp_V_q0;
                sample_period_samples_9_timestamp_V_load_reg_9791 <= sample_period_samples_9_timestamp_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sample_period_samples_0_sample_V_load_2_reg_10166 <= sample_period_samples_0_sample_V_q0;
                sample_period_samples_0_sample_V_load_3_reg_10298 <= sample_period_samples_0_sample_V_q1;
                sample_period_samples_0_timestamp_V_load_2_reg_10226 <= sample_period_samples_0_timestamp_V_q0;
                sample_period_samples_0_timestamp_V_load_3_reg_10358 <= sample_period_samples_0_timestamp_V_q1;
                sample_period_samples_10_sample_V_load_2_reg_10216 <= sample_period_samples_10_sample_V_q0;
                sample_period_samples_10_sample_V_load_3_reg_10348 <= sample_period_samples_10_sample_V_q1;
                sample_period_samples_10_timestamp_V_load_2_reg_10286 <= sample_period_samples_10_timestamp_V_q0;
                sample_period_samples_10_timestamp_V_load_3_reg_10418 <= sample_period_samples_10_timestamp_V_q1;
                sample_period_samples_11_sample_V_load_2_reg_10221 <= sample_period_samples_11_sample_V_q0;
                sample_period_samples_11_sample_V_load_3_reg_10353 <= sample_period_samples_11_sample_V_q1;
                sample_period_samples_11_timestamp_V_load_2_reg_10292 <= sample_period_samples_11_timestamp_V_q0;
                sample_period_samples_11_timestamp_V_load_3_reg_10424 <= sample_period_samples_11_timestamp_V_q1;
                sample_period_samples_1_sample_V_load_2_reg_10171 <= sample_period_samples_1_sample_V_q0;
                sample_period_samples_1_sample_V_load_3_reg_10303 <= sample_period_samples_1_sample_V_q1;
                sample_period_samples_1_timestamp_V_load_2_reg_10232 <= sample_period_samples_1_timestamp_V_q0;
                sample_period_samples_1_timestamp_V_load_3_reg_10364 <= sample_period_samples_1_timestamp_V_q1;
                sample_period_samples_2_sample_V_load_2_reg_10176 <= sample_period_samples_2_sample_V_q0;
                sample_period_samples_2_sample_V_load_3_reg_10308 <= sample_period_samples_2_sample_V_q1;
                sample_period_samples_2_timestamp_V_load_2_reg_10238 <= sample_period_samples_2_timestamp_V_q0;
                sample_period_samples_2_timestamp_V_load_3_reg_10370 <= sample_period_samples_2_timestamp_V_q1;
                sample_period_samples_3_sample_V_load_2_reg_10181 <= sample_period_samples_3_sample_V_q0;
                sample_period_samples_3_sample_V_load_3_reg_10313 <= sample_period_samples_3_sample_V_q1;
                sample_period_samples_3_timestamp_V_load_2_reg_10244 <= sample_period_samples_3_timestamp_V_q0;
                sample_period_samples_3_timestamp_V_load_3_reg_10376 <= sample_period_samples_3_timestamp_V_q1;
                sample_period_samples_4_sample_V_load_2_reg_10186 <= sample_period_samples_4_sample_V_q0;
                sample_period_samples_4_sample_V_load_3_reg_10318 <= sample_period_samples_4_sample_V_q1;
                sample_period_samples_4_timestamp_V_load_2_reg_10250 <= sample_period_samples_4_timestamp_V_q0;
                sample_period_samples_4_timestamp_V_load_3_reg_10382 <= sample_period_samples_4_timestamp_V_q1;
                sample_period_samples_5_sample_V_load_2_reg_10191 <= sample_period_samples_5_sample_V_q0;
                sample_period_samples_5_sample_V_load_3_reg_10323 <= sample_period_samples_5_sample_V_q1;
                sample_period_samples_5_timestamp_V_load_2_reg_10256 <= sample_period_samples_5_timestamp_V_q0;
                sample_period_samples_5_timestamp_V_load_3_reg_10388 <= sample_period_samples_5_timestamp_V_q1;
                sample_period_samples_6_sample_V_load_2_reg_10196 <= sample_period_samples_6_sample_V_q0;
                sample_period_samples_6_sample_V_load_3_reg_10328 <= sample_period_samples_6_sample_V_q1;
                sample_period_samples_6_timestamp_V_load_2_reg_10262 <= sample_period_samples_6_timestamp_V_q0;
                sample_period_samples_6_timestamp_V_load_3_reg_10394 <= sample_period_samples_6_timestamp_V_q1;
                sample_period_samples_7_sample_V_load_2_reg_10201 <= sample_period_samples_7_sample_V_q0;
                sample_period_samples_7_sample_V_load_3_reg_10333 <= sample_period_samples_7_sample_V_q1;
                sample_period_samples_7_timestamp_V_load_2_reg_10268 <= sample_period_samples_7_timestamp_V_q0;
                sample_period_samples_7_timestamp_V_load_3_reg_10400 <= sample_period_samples_7_timestamp_V_q1;
                sample_period_samples_8_sample_V_load_2_reg_10206 <= sample_period_samples_8_sample_V_q0;
                sample_period_samples_8_sample_V_load_3_reg_10338 <= sample_period_samples_8_sample_V_q1;
                sample_period_samples_8_timestamp_V_load_2_reg_10274 <= sample_period_samples_8_timestamp_V_q0;
                sample_period_samples_8_timestamp_V_load_3_reg_10406 <= sample_period_samples_8_timestamp_V_q1;
                sample_period_samples_9_sample_V_load_2_reg_10211 <= sample_period_samples_9_sample_V_q0;
                sample_period_samples_9_sample_V_load_3_reg_10343 <= sample_period_samples_9_sample_V_q1;
                sample_period_samples_9_timestamp_V_load_2_reg_10280 <= sample_period_samples_9_timestamp_V_q0;
                sample_period_samples_9_timestamp_V_load_3_reg_10412 <= sample_period_samples_9_timestamp_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sample_period_samples_0_sample_V_load_4_reg_10670 <= sample_period_samples_0_sample_V_q0;
                sample_period_samples_0_sample_V_load_5_reg_10790 <= sample_period_samples_0_sample_V_q1;
                sample_period_samples_0_timestamp_V_load_4_reg_10730 <= sample_period_samples_0_timestamp_V_q0;
                sample_period_samples_0_timestamp_V_load_5_reg_10850 <= sample_period_samples_0_timestamp_V_q1;
                sample_period_samples_10_sample_V_load_4_reg_10720 <= sample_period_samples_10_sample_V_q0;
                sample_period_samples_10_sample_V_load_5_reg_10840 <= sample_period_samples_10_sample_V_q1;
                sample_period_samples_10_timestamp_V_load_4_reg_10780 <= sample_period_samples_10_timestamp_V_q0;
                sample_period_samples_10_timestamp_V_load_5_reg_10900 <= sample_period_samples_10_timestamp_V_q1;
                sample_period_samples_11_sample_V_load_4_reg_10725 <= sample_period_samples_11_sample_V_q0;
                sample_period_samples_11_sample_V_load_5_reg_10845 <= sample_period_samples_11_sample_V_q1;
                sample_period_samples_11_timestamp_V_load_4_reg_10785 <= sample_period_samples_11_timestamp_V_q0;
                sample_period_samples_11_timestamp_V_load_5_reg_10905 <= sample_period_samples_11_timestamp_V_q1;
                sample_period_samples_1_sample_V_load_4_reg_10675 <= sample_period_samples_1_sample_V_q0;
                sample_period_samples_1_sample_V_load_5_reg_10795 <= sample_period_samples_1_sample_V_q1;
                sample_period_samples_1_timestamp_V_load_4_reg_10735 <= sample_period_samples_1_timestamp_V_q0;
                sample_period_samples_1_timestamp_V_load_5_reg_10855 <= sample_period_samples_1_timestamp_V_q1;
                sample_period_samples_2_sample_V_load_4_reg_10680 <= sample_period_samples_2_sample_V_q0;
                sample_period_samples_2_sample_V_load_5_reg_10800 <= sample_period_samples_2_sample_V_q1;
                sample_period_samples_2_timestamp_V_load_4_reg_10740 <= sample_period_samples_2_timestamp_V_q0;
                sample_period_samples_2_timestamp_V_load_5_reg_10860 <= sample_period_samples_2_timestamp_V_q1;
                sample_period_samples_3_sample_V_load_4_reg_10685 <= sample_period_samples_3_sample_V_q0;
                sample_period_samples_3_sample_V_load_5_reg_10805 <= sample_period_samples_3_sample_V_q1;
                sample_period_samples_3_timestamp_V_load_4_reg_10745 <= sample_period_samples_3_timestamp_V_q0;
                sample_period_samples_3_timestamp_V_load_5_reg_10865 <= sample_period_samples_3_timestamp_V_q1;
                sample_period_samples_4_sample_V_load_4_reg_10690 <= sample_period_samples_4_sample_V_q0;
                sample_period_samples_4_sample_V_load_5_reg_10810 <= sample_period_samples_4_sample_V_q1;
                sample_period_samples_4_timestamp_V_load_4_reg_10750 <= sample_period_samples_4_timestamp_V_q0;
                sample_period_samples_4_timestamp_V_load_5_reg_10870 <= sample_period_samples_4_timestamp_V_q1;
                sample_period_samples_5_sample_V_load_4_reg_10695 <= sample_period_samples_5_sample_V_q0;
                sample_period_samples_5_sample_V_load_5_reg_10815 <= sample_period_samples_5_sample_V_q1;
                sample_period_samples_5_timestamp_V_load_4_reg_10755 <= sample_period_samples_5_timestamp_V_q0;
                sample_period_samples_5_timestamp_V_load_5_reg_10875 <= sample_period_samples_5_timestamp_V_q1;
                sample_period_samples_6_sample_V_load_4_reg_10700 <= sample_period_samples_6_sample_V_q0;
                sample_period_samples_6_sample_V_load_5_reg_10820 <= sample_period_samples_6_sample_V_q1;
                sample_period_samples_6_timestamp_V_load_4_reg_10760 <= sample_period_samples_6_timestamp_V_q0;
                sample_period_samples_6_timestamp_V_load_5_reg_10880 <= sample_period_samples_6_timestamp_V_q1;
                sample_period_samples_7_sample_V_load_4_reg_10705 <= sample_period_samples_7_sample_V_q0;
                sample_period_samples_7_sample_V_load_5_reg_10825 <= sample_period_samples_7_sample_V_q1;
                sample_period_samples_7_timestamp_V_load_4_reg_10765 <= sample_period_samples_7_timestamp_V_q0;
                sample_period_samples_7_timestamp_V_load_5_reg_10885 <= sample_period_samples_7_timestamp_V_q1;
                sample_period_samples_8_sample_V_load_4_reg_10710 <= sample_period_samples_8_sample_V_q0;
                sample_period_samples_8_sample_V_load_5_reg_10830 <= sample_period_samples_8_sample_V_q1;
                sample_period_samples_8_timestamp_V_load_4_reg_10770 <= sample_period_samples_8_timestamp_V_q0;
                sample_period_samples_8_timestamp_V_load_5_reg_10890 <= sample_period_samples_8_timestamp_V_q1;
                sample_period_samples_9_sample_V_load_4_reg_10715 <= sample_period_samples_9_sample_V_q0;
                sample_period_samples_9_sample_V_load_5_reg_10835 <= sample_period_samples_9_sample_V_q1;
                sample_period_samples_9_timestamp_V_load_4_reg_10775 <= sample_period_samples_9_timestamp_V_q0;
                sample_period_samples_9_timestamp_V_load_5_reg_10895 <= sample_period_samples_9_timestamp_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                    sub_ln54_1_reg_11591(9 downto 5) <= sub_ln54_1_fu_8084_p2(9 downto 5);
                    tmp_reg_11580(7 downto 3) <= tmp_fu_8031_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                    sub_ln54_2_reg_11605(9 downto 5) <= sub_ln54_2_fu_8266_p2(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                    sub_ln54_3_reg_11619(9 downto 5) <= sub_ln54_3_fu_8433_p2(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                    sub_ln54_4_reg_11633(9 downto 5) <= sub_ln54_4_fu_8520_p2(9 downto 5);
                    sub_ln54_5_reg_11649(9 downto 5) <= sub_ln54_5_fu_8571_p2(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                    sub_ln54_6_reg_11665(9 downto 5) <= sub_ln54_6_fu_8642_p2(9 downto 5);
                    sub_ln54_7_reg_11681(9 downto 5) <= sub_ln54_7_fu_8693_p2(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln52_fu_6468_p2 = ap_const_lv1_1))) then
                    sub_ln54_reg_11407(9 downto 5) <= sub_ln54_fu_6514_p2(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    sub_ln75_1_reg_11468(9 downto 5) <= sub_ln75_1_fu_6704_p2(9 downto 5);
                    sub_ln75_reg_11454(9 downto 5) <= sub_ln75_fu_6634_p2(9 downto 5);
                    tmp_10_reg_11444(6 downto 3) <= tmp_10_fu_6587_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                    sub_ln75_2_reg_11484(9 downto 5) <= sub_ln75_2_fu_6782_p2(9 downto 5);
                    sub_ln75_3_reg_11500(9 downto 5) <= sub_ln75_3_fu_6835_p2(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                    sub_ln75_4_reg_11516(9 downto 5) <= sub_ln75_4_fu_6908_p2(9 downto 5);
                    sub_ln75_5_reg_11532(9 downto 5) <= sub_ln75_5_fu_6961_p2(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    sub_ln75_6_reg_11548(9 downto 5) <= sub_ln75_6_fu_7034_p2(9 downto 5);
                    sub_ln75_7_reg_11564(9 downto 5) <= sub_ln75_7_fu_7087_p2(9 downto 5);
            end if;
        end if;
    end process;
    zext_ln19_reg_9295(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    sub_ln54_reg_11407(4 downto 0) <= "00000";
    tmp_10_reg_11444(2 downto 0) <= "000";
    sub_ln75_reg_11454(4 downto 0) <= "00000";
    sub_ln75_1_reg_11468(4 downto 0) <= "01100";
    sub_ln75_2_reg_11484(4 downto 0) <= "11000";
    sub_ln75_3_reg_11500(4 downto 0) <= "00100";
    sub_ln75_4_reg_11516(4 downto 0) <= "10000";
    sub_ln75_5_reg_11532(4 downto 0) <= "11100";
    sub_ln75_6_reg_11548(4 downto 0) <= "01000";
    sub_ln75_7_reg_11564(4 downto 0) <= "10100";
    tmp_reg_11580(2 downto 0) <= "000";
    sub_ln54_1_reg_11591(4 downto 0) <= "01100";
    sub_ln54_2_reg_11605(4 downto 0) <= "11000";
    sub_ln54_3_reg_11619(4 downto 0) <= "00100";
    sub_ln54_4_reg_11633(4 downto 0) <= "10000";
    sub_ln54_5_reg_11649(4 downto 0) <= "11100";
    sub_ln54_6_reg_11665(4 downto 0) <= "01000";
    sub_ln54_7_reg_11681(4 downto 0) <= "10100";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln92_fu_6178_p2, ap_CS_fsm_state5, icmp_ln19_fu_6458_p2, ap_CS_fsm_state10, icmp_ln52_fu_6468_p2, ap_CS_fsm_state19, icmp_ln63_fu_6544_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln92_fu_6178_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln92_fu_6178_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln19_fu_6458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln52_fu_6468_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln63_fu_6544_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_fu_6424_p2 <= std_logic_vector(unsigned(i_4_reg_6161) + unsigned(ap_const_lv4_1));
    add_ln54_10_fu_8368_p2 <= std_logic_vector(unsigned(sub_ln54_2_reg_11605) + unsigned(ap_const_lv10_A));
    add_ln54_11_fu_8378_p2 <= std_logic_vector(unsigned(sub_ln54_2_reg_11605) + unsigned(ap_const_lv10_B));
    add_ln54_12_fu_8577_p2 <= std_logic_vector(unsigned(sub_ln54_3_reg_11619) + unsigned(ap_const_lv10_4));
    add_ln54_13_fu_8587_p2 <= std_logic_vector(unsigned(sub_ln54_3_reg_11619) + unsigned(ap_const_lv10_5));
    add_ln54_14_fu_8699_p2 <= std_logic_vector(unsigned(sub_ln54_3_reg_11619) + unsigned(ap_const_lv10_6));
    add_ln54_15_fu_8709_p2 <= std_logic_vector(unsigned(sub_ln54_3_reg_11619) + unsigned(ap_const_lv10_7));
    add_ln54_16_fu_8719_p2 <= std_logic_vector(unsigned(sub_ln54_3_reg_11619) + unsigned(ap_const_lv10_8));
    add_ln54_17_fu_8729_p2 <= std_logic_vector(unsigned(sub_ln54_3_reg_11619) + unsigned(ap_const_lv10_9));
    add_ln54_18_fu_8739_p2 <= std_logic_vector(unsigned(sub_ln54_3_reg_11619) + unsigned(ap_const_lv10_A));
    add_ln54_19_fu_8749_p2 <= std_logic_vector(unsigned(sub_ln54_3_reg_11619) + unsigned(ap_const_lv10_B));
    add_ln54_1_fu_8136_p2 <= std_logic_vector(unsigned(sub_ln54_1_reg_11591) + unsigned(ap_const_lv10_5));
    add_ln54_20_fu_8907_p2 <= std_logic_vector(unsigned(sub_ln54_5_reg_11649) + unsigned(ap_const_lv10_4));
    add_ln54_21_fu_8917_p2 <= std_logic_vector(unsigned(sub_ln54_5_reg_11649) + unsigned(ap_const_lv10_5));
    add_ln54_22_fu_8927_p2 <= std_logic_vector(unsigned(sub_ln54_5_reg_11649) + unsigned(ap_const_lv10_6));
    add_ln54_23_fu_8937_p2 <= std_logic_vector(unsigned(sub_ln54_5_reg_11649) + unsigned(ap_const_lv10_7));
    add_ln54_24_fu_8947_p2 <= std_logic_vector(unsigned(sub_ln54_5_reg_11649) + unsigned(ap_const_lv10_8));
    add_ln54_25_fu_8957_p2 <= std_logic_vector(unsigned(sub_ln54_5_reg_11649) + unsigned(ap_const_lv10_9));
    add_ln54_26_fu_8967_p2 <= std_logic_vector(unsigned(sub_ln54_5_reg_11649) + unsigned(ap_const_lv10_A));
    add_ln54_27_fu_8977_p2 <= std_logic_vector(unsigned(sub_ln54_5_reg_11649) + unsigned(ap_const_lv10_B));
    add_ln54_28_fu_9061_p2 <= std_logic_vector(unsigned(sub_ln54_6_reg_11665) + unsigned(ap_const_lv10_8));
    add_ln54_29_fu_9071_p2 <= std_logic_vector(unsigned(sub_ln54_6_reg_11665) + unsigned(ap_const_lv10_9));
    add_ln54_2_fu_8146_p2 <= std_logic_vector(unsigned(sub_ln54_1_reg_11591) + unsigned(ap_const_lv10_6));
    add_ln54_30_fu_9081_p2 <= std_logic_vector(unsigned(sub_ln54_6_reg_11665) + unsigned(ap_const_lv10_A));
    add_ln54_31_fu_9091_p2 <= std_logic_vector(unsigned(sub_ln54_6_reg_11665) + unsigned(ap_const_lv10_B));
    add_ln54_32_fu_9135_p2 <= std_logic_vector(unsigned(sub_ln54_7_reg_11681) + unsigned(ap_const_lv10_4));
    add_ln54_33_fu_9145_p2 <= std_logic_vector(unsigned(sub_ln54_7_reg_11681) + unsigned(ap_const_lv10_5));
    add_ln54_34_fu_9155_p2 <= std_logic_vector(unsigned(sub_ln54_7_reg_11681) + unsigned(ap_const_lv10_6));
    add_ln54_35_fu_9165_p2 <= std_logic_vector(unsigned(sub_ln54_7_reg_11681) + unsigned(ap_const_lv10_7));
    add_ln54_36_fu_9175_p2 <= std_logic_vector(unsigned(sub_ln54_7_reg_11681) + unsigned(ap_const_lv10_8));
    add_ln54_37_fu_9185_p2 <= std_logic_vector(unsigned(sub_ln54_7_reg_11681) + unsigned(ap_const_lv10_9));
    add_ln54_38_fu_9195_p2 <= std_logic_vector(unsigned(sub_ln54_7_reg_11681) + unsigned(ap_const_lv10_A));
    add_ln54_39_fu_9205_p2 <= std_logic_vector(unsigned(sub_ln54_7_reg_11681) + unsigned(ap_const_lv10_B));
    add_ln54_3_fu_8156_p2 <= std_logic_vector(unsigned(sub_ln54_1_reg_11591) + unsigned(ap_const_lv10_7));
    add_ln54_4_fu_8166_p2 <= std_logic_vector(unsigned(sub_ln54_1_reg_11591) + unsigned(ap_const_lv10_8));
    add_ln54_5_fu_8176_p2 <= std_logic_vector(unsigned(sub_ln54_1_reg_11591) + unsigned(ap_const_lv10_9));
    add_ln54_6_fu_8201_p2 <= std_logic_vector(unsigned(sub_ln54_1_reg_11591) + unsigned(ap_const_lv10_A));
    add_ln54_7_fu_8211_p2 <= std_logic_vector(unsigned(sub_ln54_1_reg_11591) + unsigned(ap_const_lv10_B));
    add_ln54_8_fu_8348_p2 <= std_logic_vector(unsigned(sub_ln54_2_reg_11605) + unsigned(ap_const_lv10_8));
    add_ln54_9_fu_8358_p2 <= std_logic_vector(unsigned(sub_ln54_2_reg_11605) + unsigned(ap_const_lv10_9));
    add_ln54_fu_8126_p2 <= std_logic_vector(unsigned(sub_ln54_1_reg_11591) + unsigned(ap_const_lv10_4));
    add_ln71_fu_6573_p2 <= std_logic_vector(unsigned(sliding_window_size_s) + unsigned(ap_const_lv32_1));
    add_ln75_10_fu_7341_p2 <= std_logic_vector(unsigned(sub_ln75_2_reg_11484) + unsigned(ap_const_lv10_A));
    add_ln75_11_fu_7351_p2 <= std_logic_vector(unsigned(sub_ln75_2_reg_11484) + unsigned(ap_const_lv10_B));
    add_ln75_12_fu_7395_p2 <= std_logic_vector(unsigned(sub_ln75_3_reg_11500) + unsigned(ap_const_lv10_4));
    add_ln75_13_fu_7405_p2 <= std_logic_vector(unsigned(sub_ln75_3_reg_11500) + unsigned(ap_const_lv10_5));
    add_ln75_14_fu_7415_p2 <= std_logic_vector(unsigned(sub_ln75_3_reg_11500) + unsigned(ap_const_lv10_6));
    add_ln75_15_fu_7425_p2 <= std_logic_vector(unsigned(sub_ln75_3_reg_11500) + unsigned(ap_const_lv10_7));
    add_ln75_16_fu_7435_p2 <= std_logic_vector(unsigned(sub_ln75_3_reg_11500) + unsigned(ap_const_lv10_8));
    add_ln75_17_fu_7445_p2 <= std_logic_vector(unsigned(sub_ln75_3_reg_11500) + unsigned(ap_const_lv10_9));
    add_ln75_18_fu_7455_p2 <= std_logic_vector(unsigned(sub_ln75_3_reg_11500) + unsigned(ap_const_lv10_A));
    add_ln75_19_fu_7465_p2 <= std_logic_vector(unsigned(sub_ln75_3_reg_11500) + unsigned(ap_const_lv10_B));
    add_ln75_1_fu_7177_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_11468) + unsigned(ap_const_lv10_5));
    add_ln75_20_fu_7623_p2 <= std_logic_vector(unsigned(sub_ln75_5_reg_11532) + unsigned(ap_const_lv10_4));
    add_ln75_21_fu_7633_p2 <= std_logic_vector(unsigned(sub_ln75_5_reg_11532) + unsigned(ap_const_lv10_5));
    add_ln75_22_fu_7643_p2 <= std_logic_vector(unsigned(sub_ln75_5_reg_11532) + unsigned(ap_const_lv10_6));
    add_ln75_23_fu_7653_p2 <= std_logic_vector(unsigned(sub_ln75_5_reg_11532) + unsigned(ap_const_lv10_7));
    add_ln75_24_fu_7663_p2 <= std_logic_vector(unsigned(sub_ln75_5_reg_11532) + unsigned(ap_const_lv10_8));
    add_ln75_25_fu_7673_p2 <= std_logic_vector(unsigned(sub_ln75_5_reg_11532) + unsigned(ap_const_lv10_9));
    add_ln75_26_fu_7683_p2 <= std_logic_vector(unsigned(sub_ln75_5_reg_11532) + unsigned(ap_const_lv10_A));
    add_ln75_27_fu_7693_p2 <= std_logic_vector(unsigned(sub_ln75_5_reg_11532) + unsigned(ap_const_lv10_B));
    add_ln75_28_fu_7777_p2 <= std_logic_vector(unsigned(sub_ln75_6_reg_11548) + unsigned(ap_const_lv10_8));
    add_ln75_29_fu_7787_p2 <= std_logic_vector(unsigned(sub_ln75_6_reg_11548) + unsigned(ap_const_lv10_9));
    add_ln75_2_fu_7187_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_11468) + unsigned(ap_const_lv10_6));
    add_ln75_30_fu_7797_p2 <= std_logic_vector(unsigned(sub_ln75_6_reg_11548) + unsigned(ap_const_lv10_A));
    add_ln75_31_fu_7807_p2 <= std_logic_vector(unsigned(sub_ln75_6_reg_11548) + unsigned(ap_const_lv10_B));
    add_ln75_32_fu_7851_p2 <= std_logic_vector(unsigned(sub_ln75_7_reg_11564) + unsigned(ap_const_lv10_4));
    add_ln75_33_fu_7861_p2 <= std_logic_vector(unsigned(sub_ln75_7_reg_11564) + unsigned(ap_const_lv10_5));
    add_ln75_34_fu_7871_p2 <= std_logic_vector(unsigned(sub_ln75_7_reg_11564) + unsigned(ap_const_lv10_6));
    add_ln75_35_fu_7881_p2 <= std_logic_vector(unsigned(sub_ln75_7_reg_11564) + unsigned(ap_const_lv10_7));
    add_ln75_36_fu_7891_p2 <= std_logic_vector(unsigned(sub_ln75_7_reg_11564) + unsigned(ap_const_lv10_8));
    add_ln75_37_fu_7901_p2 <= std_logic_vector(unsigned(sub_ln75_7_reg_11564) + unsigned(ap_const_lv10_9));
    add_ln75_38_fu_7911_p2 <= std_logic_vector(unsigned(sub_ln75_7_reg_11564) + unsigned(ap_const_lv10_A));
    add_ln75_39_fu_7921_p2 <= std_logic_vector(unsigned(sub_ln75_7_reg_11564) + unsigned(ap_const_lv10_B));
    add_ln75_3_fu_7197_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_11468) + unsigned(ap_const_lv10_7));
    add_ln75_4_fu_7207_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_11468) + unsigned(ap_const_lv10_8));
    add_ln75_5_fu_7217_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_11468) + unsigned(ap_const_lv10_9));
    add_ln75_6_fu_7227_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_11468) + unsigned(ap_const_lv10_A));
    add_ln75_7_fu_7237_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_11468) + unsigned(ap_const_lv10_B));
    add_ln75_8_fu_7321_p2 <= std_logic_vector(unsigned(sub_ln75_2_reg_11484) + unsigned(ap_const_lv10_8));
    add_ln75_9_fu_7331_p2 <= std_logic_vector(unsigned(sub_ln75_2_reg_11484) + unsigned(ap_const_lv10_9));
    add_ln75_fu_7167_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_11468) + unsigned(ap_const_lv10_4));
    add_ln92_fu_6172_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_6153_p4) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state100 <= ap_CS_fsm(98);
    ap_CS_fsm_state101 <= ap_CS_fsm(99);
    ap_CS_fsm_state102 <= ap_CS_fsm(100);
    ap_CS_fsm_state103 <= ap_CS_fsm(101);
    ap_CS_fsm_state104 <= ap_CS_fsm(102);
    ap_CS_fsm_state105 <= ap_CS_fsm(103);
    ap_CS_fsm_state106 <= ap_CS_fsm(104);
    ap_CS_fsm_state107 <= ap_CS_fsm(105);
    ap_CS_fsm_state108 <= ap_CS_fsm(106);
    ap_CS_fsm_state109 <= ap_CS_fsm(107);
    ap_CS_fsm_state110 <= ap_CS_fsm(108);
    ap_CS_fsm_state111 <= ap_CS_fsm(109);
    ap_CS_fsm_state112 <= ap_CS_fsm(110);
    ap_CS_fsm_state113 <= ap_CS_fsm(111);
    ap_CS_fsm_state114 <= ap_CS_fsm(112);
    ap_CS_fsm_state115 <= ap_CS_fsm(113);
    ap_CS_fsm_state116 <= ap_CS_fsm(114);
    ap_CS_fsm_state117 <= ap_CS_fsm(115);
    ap_CS_fsm_state118 <= ap_CS_fsm(116);
    ap_CS_fsm_state119 <= ap_CS_fsm(117);
    ap_CS_fsm_state120 <= ap_CS_fsm(118);
    ap_CS_fsm_state121 <= ap_CS_fsm(119);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state30 <= ap_CS_fsm(28);
    ap_CS_fsm_state31 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(32);
    ap_CS_fsm_state35 <= ap_CS_fsm(33);
    ap_CS_fsm_state36 <= ap_CS_fsm(34);
    ap_CS_fsm_state37 <= ap_CS_fsm(35);
    ap_CS_fsm_state38 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state40 <= ap_CS_fsm(38);
    ap_CS_fsm_state41 <= ap_CS_fsm(39);
    ap_CS_fsm_state42 <= ap_CS_fsm(40);
    ap_CS_fsm_state43 <= ap_CS_fsm(41);
    ap_CS_fsm_state44 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(43);
    ap_CS_fsm_state46 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(45);
    ap_CS_fsm_state48 <= ap_CS_fsm(46);
    ap_CS_fsm_state49 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state50 <= ap_CS_fsm(48);
    ap_CS_fsm_state51 <= ap_CS_fsm(49);
    ap_CS_fsm_state52 <= ap_CS_fsm(50);
    ap_CS_fsm_state53 <= ap_CS_fsm(51);
    ap_CS_fsm_state54 <= ap_CS_fsm(52);
    ap_CS_fsm_state55 <= ap_CS_fsm(53);
    ap_CS_fsm_state56 <= ap_CS_fsm(54);
    ap_CS_fsm_state57 <= ap_CS_fsm(55);
    ap_CS_fsm_state58 <= ap_CS_fsm(56);
    ap_CS_fsm_state59 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state60 <= ap_CS_fsm(58);
    ap_CS_fsm_state61 <= ap_CS_fsm(59);
    ap_CS_fsm_state62 <= ap_CS_fsm(60);
    ap_CS_fsm_state63 <= ap_CS_fsm(61);
    ap_CS_fsm_state64 <= ap_CS_fsm(62);
    ap_CS_fsm_state65 <= ap_CS_fsm(63);
    ap_CS_fsm_state66 <= ap_CS_fsm(64);
    ap_CS_fsm_state67 <= ap_CS_fsm(65);
    ap_CS_fsm_state68 <= ap_CS_fsm(66);
    ap_CS_fsm_state69 <= ap_CS_fsm(67);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state70 <= ap_CS_fsm(68);
    ap_CS_fsm_state71 <= ap_CS_fsm(69);
    ap_CS_fsm_state72 <= ap_CS_fsm(70);
    ap_CS_fsm_state73 <= ap_CS_fsm(71);
    ap_CS_fsm_state74 <= ap_CS_fsm(72);
    ap_CS_fsm_state75 <= ap_CS_fsm(73);
    ap_CS_fsm_state76 <= ap_CS_fsm(74);
    ap_CS_fsm_state77 <= ap_CS_fsm(75);
    ap_CS_fsm_state78 <= ap_CS_fsm(76);
    ap_CS_fsm_state79 <= ap_CS_fsm(77);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state80 <= ap_CS_fsm(78);
    ap_CS_fsm_state81 <= ap_CS_fsm(79);
    ap_CS_fsm_state82 <= ap_CS_fsm(80);
    ap_CS_fsm_state83 <= ap_CS_fsm(81);
    ap_CS_fsm_state84 <= ap_CS_fsm(82);
    ap_CS_fsm_state85 <= ap_CS_fsm(83);
    ap_CS_fsm_state86 <= ap_CS_fsm(84);
    ap_CS_fsm_state87 <= ap_CS_fsm(85);
    ap_CS_fsm_state88 <= ap_CS_fsm(86);
    ap_CS_fsm_state89 <= ap_CS_fsm(87);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
    ap_CS_fsm_state90 <= ap_CS_fsm(88);
    ap_CS_fsm_state91 <= ap_CS_fsm(89);
    ap_CS_fsm_state92 <= ap_CS_fsm(90);
    ap_CS_fsm_state93 <= ap_CS_fsm(91);
    ap_CS_fsm_state94 <= ap_CS_fsm(92);
    ap_CS_fsm_state95 <= ap_CS_fsm(93);
    ap_CS_fsm_state96 <= ap_CS_fsm(94);
    ap_CS_fsm_state97 <= ap_CS_fsm(95);
    ap_CS_fsm_state98 <= ap_CS_fsm(96);
    ap_CS_fsm_state99 <= ap_CS_fsm(97);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln92_fu_6178_p2)
    begin
        if ((icmp_ln92_fu_6178_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_6153_p4_assign_proc : process(i_reg_6149, add_ln92_reg_9221, ap_CS_fsm_pp0_stage0, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_6153_p4 <= add_ln92_reg_9221;
        else 
            ap_phi_mux_i_phi_fu_6153_p4 <= i_reg_6149;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_0_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_0_ce0 <= ap_const_logic_1;
        else 
            buffer_in_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_10_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_10_ce0 <= ap_const_logic_1;
        else 
            buffer_in_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_11_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_11_ce0 <= ap_const_logic_1;
        else 
            buffer_in_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_1_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_1_ce0 <= ap_const_logic_1;
        else 
            buffer_in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_2_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_2_ce0 <= ap_const_logic_1;
        else 
            buffer_in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_3_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_3_ce0 <= ap_const_logic_1;
        else 
            buffer_in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_4_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_4_ce0 <= ap_const_logic_1;
        else 
            buffer_in_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_5_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_5_ce0 <= ap_const_logic_1;
        else 
            buffer_in_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_6_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_6_ce0 <= ap_const_logic_1;
        else 
            buffer_in_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_7_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_7_ce0 <= ap_const_logic_1;
        else 
            buffer_in_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_8_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_8_ce0 <= ap_const_logic_1;
        else 
            buffer_in_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_9_address0 <= zext_ln95_fu_6188_p1(3 - 1 downto 0);

    buffer_in_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_in_9_ce0 <= ap_const_logic_1;
        else 
            buffer_in_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_6488_ap_start_assign_proc : process(ap_CS_fsm_state10, icmp_ln52_fu_6468_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln52_fu_6468_p2 = ap_const_lv1_0))) then 
            grp_fu_6488_ap_start <= ap_const_logic_1;
        else 
            grp_fu_6488_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_6488_p0 <= std_logic_vector(signed(sext_ln52_fu_6478_p1) + signed(ap_const_lv6_1));
    grp_fu_6488_p1 <= ap_const_lv6_A(5 - 1 downto 0);

    grp_fu_6556_ap_start_assign_proc : process(ap_CS_fsm_state19, icmp_ln63_fu_6544_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln63_fu_6544_p2 = ap_const_lv1_1))) then 
            grp_fu_6556_ap_start <= ap_const_logic_1;
        else 
            grp_fu_6556_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_6556_p0 <= std_logic_vector(unsigned(trunc_ln61_fu_6536_p1) + unsigned(ap_const_lv5_1));
    i_cast_fu_6204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_6149),64));
    icmp_ln19_fu_6458_p2 <= "1" when (i_4_reg_6161 = ap_const_lv4_8) else "0";
    icmp_ln52_fu_6468_p2 <= "1" when (sliding_window_size_s = ap_const_lv32_0) else "0";
    icmp_ln63_fu_6544_p2 <= "1" when (trunc_ln61_fu_6536_p1 = sliding_window_back_ptr_s_i) else "0";
    icmp_ln69_fu_6568_p2 <= "1" when (signed(sliding_window_size_s) < signed(ap_const_lv32_A)) else "0";
    icmp_ln92_fu_6178_p2 <= "1" when (ap_phi_mux_i_phi_fu_6153_p4 = ap_const_lv4_8) else "0";
    or_ln54_10_fu_8021_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_B);
    or_ln54_11_fu_8038_p2 <= (tmp_fu_8031_p3 or ap_const_lv8_1);
    or_ln54_12_fu_8095_p2 <= (sub_ln54_1_fu_8084_p2 or ap_const_lv10_1);
    or_ln54_13_fu_8106_p2 <= (sub_ln54_1_reg_11591 or ap_const_lv10_2);
    or_ln54_14_fu_8116_p2 <= (sub_ln54_1_reg_11591 or ap_const_lv10_3);
    or_ln54_15_fu_8221_p2 <= (tmp_reg_11580 or ap_const_lv8_2);
    or_ln54_16_fu_8277_p2 <= (sub_ln54_2_fu_8266_p2 or ap_const_lv10_1);
    or_ln54_17_fu_8288_p2 <= (sub_ln54_2_reg_11605 or ap_const_lv10_2);
    or_ln54_18_fu_8298_p2 <= (sub_ln54_2_reg_11605 or ap_const_lv10_3);
    or_ln54_19_fu_8308_p2 <= (sub_ln54_2_reg_11605 or ap_const_lv10_4);
    or_ln54_1_fu_7931_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_2);
    or_ln54_20_fu_8318_p2 <= (sub_ln54_2_reg_11605 or ap_const_lv10_5);
    or_ln54_21_fu_8328_p2 <= (sub_ln54_2_reg_11605 or ap_const_lv10_6);
    or_ln54_22_fu_8338_p2 <= (sub_ln54_2_reg_11605 or ap_const_lv10_7);
    or_ln54_23_fu_8388_p2 <= (tmp_reg_11580 or ap_const_lv8_3);
    or_ln54_24_fu_8444_p2 <= (sub_ln54_3_fu_8433_p2 or ap_const_lv10_1);
    or_ln54_25_fu_8455_p2 <= (sub_ln54_3_reg_11619 or ap_const_lv10_2);
    or_ln54_26_fu_8465_p2 <= (sub_ln54_3_reg_11619 or ap_const_lv10_3);
    or_ln54_27_fu_8475_p2 <= (tmp_reg_11580 or ap_const_lv8_4);
    or_ln54_28_fu_8763_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_1);
    or_ln54_29_fu_8773_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_2);
    or_ln54_2_fu_7941_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_3);
    or_ln54_30_fu_8783_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_3);
    or_ln54_31_fu_8793_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_4);
    or_ln54_32_fu_8803_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_5);
    or_ln54_33_fu_8813_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_6);
    or_ln54_34_fu_8823_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_7);
    or_ln54_35_fu_8833_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_8);
    or_ln54_36_fu_8843_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_9);
    or_ln54_37_fu_8853_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_A);
    or_ln54_38_fu_8863_p2 <= (sub_ln54_4_reg_11633 or ap_const_lv10_B);
    or_ln54_39_fu_8526_p2 <= (tmp_reg_11580 or ap_const_lv8_5);
    or_ln54_3_fu_7951_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_4);
    or_ln54_40_fu_8877_p2 <= (sub_ln54_5_reg_11649 or ap_const_lv10_1);
    or_ln54_41_fu_8887_p2 <= (sub_ln54_5_reg_11649 or ap_const_lv10_2);
    or_ln54_42_fu_8897_p2 <= (sub_ln54_5_reg_11649 or ap_const_lv10_3);
    or_ln54_43_fu_8597_p2 <= (tmp_reg_11580 or ap_const_lv8_6);
    or_ln54_44_fu_8991_p2 <= (sub_ln54_6_reg_11665 or ap_const_lv10_1);
    or_ln54_45_fu_9001_p2 <= (sub_ln54_6_reg_11665 or ap_const_lv10_2);
    or_ln54_46_fu_9011_p2 <= (sub_ln54_6_reg_11665 or ap_const_lv10_3);
    or_ln54_47_fu_9021_p2 <= (sub_ln54_6_reg_11665 or ap_const_lv10_4);
    or_ln54_48_fu_9031_p2 <= (sub_ln54_6_reg_11665 or ap_const_lv10_5);
    or_ln54_49_fu_9041_p2 <= (sub_ln54_6_reg_11665 or ap_const_lv10_6);
    or_ln54_4_fu_7961_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_5);
    or_ln54_50_fu_9051_p2 <= (sub_ln54_6_reg_11665 or ap_const_lv10_7);
    or_ln54_51_fu_8648_p2 <= (tmp_reg_11580 or ap_const_lv8_7);
    or_ln54_52_fu_9105_p2 <= (sub_ln54_7_reg_11681 or ap_const_lv10_1);
    or_ln54_53_fu_9115_p2 <= (sub_ln54_7_reg_11681 or ap_const_lv10_2);
    or_ln54_54_fu_9125_p2 <= (sub_ln54_7_reg_11681 or ap_const_lv10_3);
    or_ln54_5_fu_7971_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_6);
    or_ln54_6_fu_7981_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_7);
    or_ln54_7_fu_7991_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_8);
    or_ln54_8_fu_8001_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_9);
    or_ln54_9_fu_8011_p2 <= (sub_ln54_reg_11407 or ap_const_lv10_A);
    or_ln54_fu_6525_p2 <= (sub_ln54_fu_6514_p2 or ap_const_lv10_1);
    or_ln75_10_fu_7123_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_B);
    or_ln75_11_fu_6656_p2 <= (tmp_10_fu_6587_p3 or ap_const_lv7_1);
    or_ln75_12_fu_7137_p2 <= (sub_ln75_1_reg_11468 or ap_const_lv10_1);
    or_ln75_13_fu_7147_p2 <= (sub_ln75_1_reg_11468 or ap_const_lv10_2);
    or_ln75_14_fu_7157_p2 <= (sub_ln75_1_reg_11468 or ap_const_lv10_3);
    or_ln75_15_fu_6735_p2 <= (tmp_10_reg_11444 or ap_const_lv7_2);
    or_ln75_16_fu_7251_p2 <= (sub_ln75_2_reg_11484 or ap_const_lv10_1);
    or_ln75_17_fu_7261_p2 <= (sub_ln75_2_reg_11484 or ap_const_lv10_2);
    or_ln75_18_fu_7271_p2 <= (sub_ln75_2_reg_11484 or ap_const_lv10_3);
    or_ln75_19_fu_7281_p2 <= (sub_ln75_2_reg_11484 or ap_const_lv10_4);
    or_ln75_1_fu_6715_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_2);
    or_ln75_20_fu_7291_p2 <= (sub_ln75_2_reg_11484 or ap_const_lv10_5);
    or_ln75_21_fu_7301_p2 <= (sub_ln75_2_reg_11484 or ap_const_lv10_6);
    or_ln75_22_fu_7311_p2 <= (sub_ln75_2_reg_11484 or ap_const_lv10_7);
    or_ln75_23_fu_6788_p2 <= (tmp_10_reg_11444 or ap_const_lv7_3);
    or_ln75_24_fu_7365_p2 <= (sub_ln75_3_reg_11500 or ap_const_lv10_1);
    or_ln75_25_fu_7375_p2 <= (sub_ln75_3_reg_11500 or ap_const_lv10_2);
    or_ln75_26_fu_7385_p2 <= (sub_ln75_3_reg_11500 or ap_const_lv10_3);
    or_ln75_27_fu_6861_p2 <= (tmp_10_reg_11444 or ap_const_lv7_4);
    or_ln75_28_fu_7479_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_1);
    or_ln75_29_fu_7489_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_2);
    or_ln75_2_fu_6725_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_3);
    or_ln75_30_fu_7499_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_3);
    or_ln75_31_fu_7509_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_4);
    or_ln75_32_fu_7519_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_5);
    or_ln75_33_fu_7529_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_6);
    or_ln75_34_fu_7539_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_7);
    or_ln75_35_fu_7549_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_8);
    or_ln75_36_fu_7559_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_9);
    or_ln75_37_fu_7569_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_A);
    or_ln75_38_fu_7579_p2 <= (sub_ln75_4_reg_11516 or ap_const_lv10_B);
    or_ln75_39_fu_6914_p2 <= (tmp_10_reg_11444 or ap_const_lv7_5);
    or_ln75_3_fu_6841_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_4);
    or_ln75_40_fu_7593_p2 <= (sub_ln75_5_reg_11532 or ap_const_lv10_1);
    or_ln75_41_fu_7603_p2 <= (sub_ln75_5_reg_11532 or ap_const_lv10_2);
    or_ln75_42_fu_7613_p2 <= (sub_ln75_5_reg_11532 or ap_const_lv10_3);
    or_ln75_43_fu_6987_p2 <= (tmp_10_reg_11444 or ap_const_lv7_6);
    or_ln75_44_fu_7707_p2 <= (sub_ln75_6_reg_11548 or ap_const_lv10_1);
    or_ln75_45_fu_7717_p2 <= (sub_ln75_6_reg_11548 or ap_const_lv10_2);
    or_ln75_46_fu_7727_p2 <= (sub_ln75_6_reg_11548 or ap_const_lv10_3);
    or_ln75_47_fu_7737_p2 <= (sub_ln75_6_reg_11548 or ap_const_lv10_4);
    or_ln75_48_fu_7747_p2 <= (sub_ln75_6_reg_11548 or ap_const_lv10_5);
    or_ln75_49_fu_7757_p2 <= (sub_ln75_6_reg_11548 or ap_const_lv10_6);
    or_ln75_4_fu_6851_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_5);
    or_ln75_50_fu_7767_p2 <= (sub_ln75_6_reg_11548 or ap_const_lv10_7);
    or_ln75_51_fu_7040_p2 <= (tmp_10_reg_11444 or ap_const_lv7_7);
    or_ln75_52_fu_7821_p2 <= (sub_ln75_7_reg_11564 or ap_const_lv10_1);
    or_ln75_53_fu_7831_p2 <= (sub_ln75_7_reg_11564 or ap_const_lv10_2);
    or_ln75_54_fu_7841_p2 <= (sub_ln75_7_reg_11564 or ap_const_lv10_3);
    or_ln75_5_fu_6967_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_6);
    or_ln75_6_fu_6977_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_7);
    or_ln75_7_fu_7093_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_8);
    or_ln75_8_fu_7103_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_9);
    or_ln75_9_fu_7113_p2 <= (sub_ln75_reg_11454 or ap_const_lv10_A);
    or_ln75_fu_6645_p2 <= (sub_ln75_fu_6634_p2 or ap_const_lv10_1);
    p_shl10_cast_fu_8250_p3 <= (trunc_ln54_2_fu_8246_p1 & ap_const_lv4_0);
    p_shl11_cast_fu_8258_p3 <= (or_ln54_15_fu_8221_p2 & ap_const_lv2_0);
    p_shl12_cast_fu_8068_p3 <= (trunc_ln54_1_fu_8064_p1 & ap_const_lv4_0);
    p_shl13_cast_fu_8076_p3 <= (or_ln54_11_fu_8038_p2 & ap_const_lv2_0);
    p_shl14_cast_fu_6686_p3 <= (trunc_ln75_2_fu_6682_p1 & ap_const_lv4_0);
    p_shl15_cast_fu_6694_p4 <= ((ap_const_lv1_0 & or_ln75_11_fu_6656_p2) & ap_const_lv2_0);
    p_shl16_cast_fu_7069_p3 <= (trunc_ln75_8_fu_7065_p1 & ap_const_lv4_0);
    p_shl17_cast_fu_7077_p4 <= ((ap_const_lv1_0 & or_ln75_51_fu_7040_p2) & ap_const_lv2_0);
    p_shl18_cast_fu_7016_p3 <= (trunc_ln75_7_fu_7012_p1 & ap_const_lv4_0);
    p_shl19_cast_fu_7024_p4 <= ((ap_const_lv1_0 & or_ln75_43_fu_6987_p2) & ap_const_lv2_0);
    p_shl1_cast_fu_8685_p3 <= (or_ln54_51_fu_8648_p2 & ap_const_lv2_0);
    p_shl20_cast_fu_6943_p3 <= (trunc_ln75_6_fu_6939_p1 & ap_const_lv4_0);
    p_shl21_cast_fu_6951_p4 <= ((ap_const_lv1_0 & or_ln75_39_fu_6914_p2) & ap_const_lv2_0);
    p_shl22_cast_fu_6890_p3 <= (trunc_ln75_5_fu_6886_p1 & ap_const_lv4_0);
    p_shl23_cast_fu_6898_p4 <= ((ap_const_lv1_0 & or_ln75_27_fu_6861_p2) & ap_const_lv2_0);
    p_shl24_cast_fu_6817_p3 <= (trunc_ln75_4_fu_6813_p1 & ap_const_lv4_0);
    p_shl25_cast_fu_6825_p4 <= ((ap_const_lv1_0 & or_ln75_23_fu_6788_p2) & ap_const_lv2_0);
    p_shl26_cast_fu_6764_p3 <= (trunc_ln75_3_fu_6760_p1 & ap_const_lv4_0);
    p_shl27_cast_fu_6772_p4 <= ((ap_const_lv1_0 & or_ln75_15_fu_6735_p2) & ap_const_lv2_0);
    p_shl2_cast_fu_8626_p3 <= (trunc_ln54_6_fu_8622_p1 & ap_const_lv4_0);
    p_shl3_cast_fu_8634_p3 <= (or_ln54_43_fu_8597_p2 & ap_const_lv2_0);
    p_shl4_cast_fu_8555_p3 <= (trunc_ln54_5_fu_8551_p1 & ap_const_lv4_0);
    p_shl5_cast_fu_8563_p3 <= (or_ln54_39_fu_8526_p2 & ap_const_lv2_0);
    p_shl6_cast_fu_8504_p3 <= (trunc_ln54_4_fu_8500_p1 & ap_const_lv4_0);
    p_shl7_cast_fu_8512_p3 <= (or_ln54_27_fu_8475_p2 & ap_const_lv2_0);
    p_shl8_cast_fu_8417_p3 <= (trunc_ln54_3_fu_8413_p1 & ap_const_lv4_0);
    p_shl9_cast_fu_8425_p3 <= (or_ln54_23_fu_8388_p2 & ap_const_lv2_0);
    p_shl_cast_fu_8677_p3 <= (trunc_ln54_7_fu_8673_p1 & ap_const_lv4_0);

    sample_period_samples_0_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_0_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_0_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_0_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_0_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_10_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_10_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_10_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_10_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_11_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_11_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_11_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_11_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_1_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_1_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_1_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_1_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_2_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_2_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_2_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_2_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_3_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_3_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_3_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_3_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_4_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_4_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_4_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_4_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_5_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_5_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_5_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_5_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_6_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_6_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_6_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_6_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_7_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_7_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_7_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_7_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_8_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_8_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_8_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_8_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln19_reg_9295, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_address0 <= zext_ln19_reg_9295(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_9_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_9_timestamp_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sample_period_samples_9_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_9_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_0_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_0_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_0_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_0_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_0_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_0_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_0_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_0_sample_V_d0 <= buffer_in_0_q0(12 - 1 downto 0);

    samples_0_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_0_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_0_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_0_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_0_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_0_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_0_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_0_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_0_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_0_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_0_timestamp_V_d0 <= buffer_in_0_q0(31 downto 12);

    samples_0_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_0_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_0_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_10_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_10_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_10_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_10_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_10_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_10_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_10_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_10_sample_V_d0 <= buffer_in_10_q0(12 - 1 downto 0);

    samples_10_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_10_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_10_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_10_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_10_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_10_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_10_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_10_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_10_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_10_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_10_timestamp_V_d0 <= buffer_in_10_q0(31 downto 12);

    samples_10_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_10_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_10_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_11_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_11_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_11_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_11_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_11_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_11_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_11_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_11_sample_V_d0 <= buffer_in_11_q0(12 - 1 downto 0);

    samples_11_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_11_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_11_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_11_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_11_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_11_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_11_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_11_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_11_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_11_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_11_timestamp_V_d0 <= buffer_in_11_q0(31 downto 12);

    samples_11_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_11_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_11_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_1_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_1_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_1_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_1_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_1_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_1_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_1_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_1_sample_V_d0 <= buffer_in_1_q0(12 - 1 downto 0);

    samples_1_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_1_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_1_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_1_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_1_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_1_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_1_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_1_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_1_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_1_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_1_timestamp_V_d0 <= buffer_in_1_q0(31 downto 12);

    samples_1_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_1_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_1_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_2_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_2_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_2_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_2_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_2_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_2_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_2_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_2_sample_V_d0 <= buffer_in_2_q0(12 - 1 downto 0);

    samples_2_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_2_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_2_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_2_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_2_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_2_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_2_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_2_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_2_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_2_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_2_timestamp_V_d0 <= buffer_in_2_q0(31 downto 12);

    samples_2_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_2_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_2_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_3_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_3_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_3_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_3_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_3_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_3_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_3_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_3_sample_V_d0 <= buffer_in_3_q0(12 - 1 downto 0);

    samples_3_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_3_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_3_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_3_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_3_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_3_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_3_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_3_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_3_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_3_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_3_timestamp_V_d0 <= buffer_in_3_q0(31 downto 12);

    samples_3_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_3_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_3_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_4_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_4_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_4_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_4_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_4_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_4_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_4_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_4_sample_V_d0 <= buffer_in_4_q0(12 - 1 downto 0);

    samples_4_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_4_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_4_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_4_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_4_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_4_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_4_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_4_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_4_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_4_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_4_timestamp_V_d0 <= buffer_in_4_q0(31 downto 12);

    samples_4_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_4_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_4_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_5_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_5_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_5_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_5_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_5_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_5_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_5_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_5_sample_V_d0 <= buffer_in_5_q0(12 - 1 downto 0);

    samples_5_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_5_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_5_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_5_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_5_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_5_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_5_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_5_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_5_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_5_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_5_timestamp_V_d0 <= buffer_in_5_q0(31 downto 12);

    samples_5_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_5_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_5_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_6_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_6_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_6_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_6_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_6_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_6_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_6_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_6_sample_V_d0 <= buffer_in_6_q0(12 - 1 downto 0);

    samples_6_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_6_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_6_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_6_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_6_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_6_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_6_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_6_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_6_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_6_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_6_timestamp_V_d0 <= buffer_in_6_q0(31 downto 12);

    samples_6_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_6_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_6_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_7_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_7_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_7_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_7_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_7_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_7_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_7_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_7_sample_V_d0 <= buffer_in_7_q0(12 - 1 downto 0);

    samples_7_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_7_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_7_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_7_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_7_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_7_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_7_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_7_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_7_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_7_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_7_timestamp_V_d0 <= buffer_in_7_q0(31 downto 12);

    samples_7_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_7_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_7_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_8_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_8_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_8_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_8_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_8_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_8_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_8_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_8_sample_V_d0 <= buffer_in_8_q0(12 - 1 downto 0);

    samples_8_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_8_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_8_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_8_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_8_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_8_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_8_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_8_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_8_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_8_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_8_timestamp_V_d0 <= buffer_in_8_q0(31 downto 12);

    samples_8_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_8_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_8_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_9_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_9_sample_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_9_sample_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_9_sample_V_address0 <= "XXX";
        end if; 
    end process;


    samples_9_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_9_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_9_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_9_sample_V_d0 <= buffer_in_9_q0(12 - 1 downto 0);

    samples_9_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_9_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_9_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_9_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, zext_ln19_fu_6430_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_cast_fu_6204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            samples_9_timestamp_V_address0 <= zext_ln19_fu_6430_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_9_timestamp_V_address0 <= i_cast_fu_6204_p1(3 - 1 downto 0);
        else 
            samples_9_timestamp_V_address0 <= "XXX";
        end if; 
    end process;


    samples_9_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            samples_9_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_9_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_9_timestamp_V_d0 <= buffer_in_9_q0(31 downto 12);

    samples_9_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln92_reg_9226, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln92_reg_9226 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            samples_9_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_9_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln52_fu_6478_p0 <= sliding_window_front_ptr_s_i;
        sext_ln52_fu_6478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln52_fu_6478_p0),6));


    sliding_window_back_ptr_s_o_assign_proc : process(sliding_window_back_ptr_s_i, icmp_ln63_reg_11432, ap_CS_fsm_state27, grp_fu_6556_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln63_reg_11432 = ap_const_lv1_1))) then 
            sliding_window_back_ptr_s_o <= grp_fu_6556_p2;
        else 
            sliding_window_back_ptr_s_o <= sliding_window_back_ptr_s_i;
        end if; 
    end process;


    sliding_window_back_ptr_s_o_ap_vld_assign_proc : process(icmp_ln63_reg_11432, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln63_reg_11432 = ap_const_lv1_1))) then 
            sliding_window_back_ptr_s_o_ap_vld <= ap_const_logic_1;
        else 
            sliding_window_back_ptr_s_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln54_2_fu_6531_p1, zext_ln75_3_fu_6651_p1, zext_ln75_5_fu_6730_p1, zext_ln75_7_fu_6856_p1, zext_ln75_9_fu_6982_p1, ap_CS_fsm_state31, zext_ln75_11_fu_7108_p1, ap_CS_fsm_state32, zext_ln75_13_fu_7128_p1, ap_CS_fsm_state33, zext_ln75_15_fu_7142_p1, ap_CS_fsm_state34, zext_ln75_17_fu_7162_p1, ap_CS_fsm_state35, zext_ln75_19_fu_7182_p1, ap_CS_fsm_state36, zext_ln75_21_fu_7202_p1, ap_CS_fsm_state37, zext_ln75_23_fu_7222_p1, ap_CS_fsm_state38, zext_ln75_25_fu_7242_p1, ap_CS_fsm_state39, zext_ln75_27_fu_7256_p1, ap_CS_fsm_state40, zext_ln75_29_fu_7276_p1, ap_CS_fsm_state41, zext_ln75_31_fu_7296_p1, ap_CS_fsm_state42, zext_ln75_33_fu_7316_p1, ap_CS_fsm_state43, zext_ln75_35_fu_7336_p1, ap_CS_fsm_state44, zext_ln75_37_fu_7356_p1, ap_CS_fsm_state45, zext_ln75_39_fu_7370_p1, ap_CS_fsm_state46, zext_ln75_41_fu_7390_p1, ap_CS_fsm_state47, zext_ln75_43_fu_7410_p1, ap_CS_fsm_state48, zext_ln75_45_fu_7430_p1, ap_CS_fsm_state49, zext_ln75_47_fu_7450_p1, ap_CS_fsm_state50, zext_ln75_49_fu_7470_p1, ap_CS_fsm_state51, zext_ln75_51_fu_7484_p1, ap_CS_fsm_state52, zext_ln75_53_fu_7504_p1, ap_CS_fsm_state53, zext_ln75_55_fu_7524_p1, ap_CS_fsm_state54, zext_ln75_57_fu_7544_p1, ap_CS_fsm_state55, zext_ln75_59_fu_7564_p1, ap_CS_fsm_state56, zext_ln75_61_fu_7584_p1, ap_CS_fsm_state57, zext_ln75_63_fu_7598_p1, ap_CS_fsm_state58, zext_ln75_65_fu_7618_p1, ap_CS_fsm_state59, zext_ln75_67_fu_7638_p1, ap_CS_fsm_state60, zext_ln75_69_fu_7658_p1, ap_CS_fsm_state61, zext_ln75_71_fu_7678_p1, ap_CS_fsm_state62, zext_ln75_73_fu_7698_p1, ap_CS_fsm_state63, zext_ln75_75_fu_7712_p1, ap_CS_fsm_state64, zext_ln75_77_fu_7732_p1, ap_CS_fsm_state65, zext_ln75_79_fu_7752_p1, ap_CS_fsm_state66, zext_ln75_81_fu_7772_p1, ap_CS_fsm_state67, zext_ln75_83_fu_7792_p1, ap_CS_fsm_state68, zext_ln75_85_fu_7812_p1, ap_CS_fsm_state69, zext_ln75_87_fu_7826_p1, ap_CS_fsm_state70, zext_ln75_89_fu_7846_p1, ap_CS_fsm_state71, zext_ln75_91_fu_7866_p1, ap_CS_fsm_state72, zext_ln75_93_fu_7886_p1, ap_CS_fsm_state73, zext_ln75_95_fu_7906_p1, ap_CS_fsm_state74, zext_ln75_97_fu_7926_p1, ap_CS_fsm_state75, zext_ln54_4_fu_7946_p1, ap_CS_fsm_state76, zext_ln54_6_fu_7966_p1, ap_CS_fsm_state77, zext_ln54_8_fu_7986_p1, ap_CS_fsm_state78, zext_ln54_10_fu_8006_p1, ap_CS_fsm_state79, zext_ln54_12_fu_8026_p1, zext_ln54_14_fu_8101_p1, ap_CS_fsm_state81, zext_ln54_16_fu_8121_p1, ap_CS_fsm_state82, zext_ln54_18_fu_8141_p1, ap_CS_fsm_state83, zext_ln54_20_fu_8161_p1, ap_CS_fsm_state84, zext_ln54_22_fu_8181_p1, ap_CS_fsm_state85, zext_ln54_24_fu_8216_p1, zext_ln54_26_fu_8283_p1, ap_CS_fsm_state87, zext_ln54_28_fu_8303_p1, ap_CS_fsm_state88, zext_ln54_30_fu_8323_p1, ap_CS_fsm_state89, zext_ln54_32_fu_8343_p1, ap_CS_fsm_state90, zext_ln54_34_fu_8363_p1, ap_CS_fsm_state91, zext_ln54_36_fu_8383_p1, zext_ln54_38_fu_8450_p1, zext_ln54_40_fu_8470_p1, zext_ln54_42_fu_8592_p1, ap_CS_fsm_state95, zext_ln54_44_fu_8714_p1, ap_CS_fsm_state96, zext_ln54_46_fu_8734_p1, ap_CS_fsm_state97, zext_ln54_48_fu_8754_p1, ap_CS_fsm_state98, zext_ln54_50_fu_8768_p1, ap_CS_fsm_state99, zext_ln54_52_fu_8788_p1, ap_CS_fsm_state100, zext_ln54_54_fu_8808_p1, ap_CS_fsm_state101, zext_ln54_56_fu_8828_p1, ap_CS_fsm_state102, zext_ln54_58_fu_8848_p1, ap_CS_fsm_state103, zext_ln54_60_fu_8868_p1, ap_CS_fsm_state104, zext_ln54_62_fu_8882_p1, ap_CS_fsm_state105, zext_ln54_64_fu_8902_p1, ap_CS_fsm_state106, zext_ln54_66_fu_8922_p1, ap_CS_fsm_state107, zext_ln54_68_fu_8942_p1, ap_CS_fsm_state108, zext_ln54_70_fu_8962_p1, ap_CS_fsm_state109, zext_ln54_72_fu_8982_p1, ap_CS_fsm_state110, zext_ln54_74_fu_8996_p1, ap_CS_fsm_state111, zext_ln54_76_fu_9016_p1, ap_CS_fsm_state112, zext_ln54_78_fu_9036_p1, ap_CS_fsm_state113, zext_ln54_80_fu_9056_p1, ap_CS_fsm_state114, zext_ln54_82_fu_9076_p1, ap_CS_fsm_state115, zext_ln54_84_fu_9096_p1, ap_CS_fsm_state116, zext_ln54_86_fu_9110_p1, ap_CS_fsm_state117, zext_ln54_88_fu_9130_p1, ap_CS_fsm_state118, zext_ln54_90_fu_9150_p1, ap_CS_fsm_state119, zext_ln54_92_fu_9170_p1, ap_CS_fsm_state120, zext_ln54_94_fu_9190_p1, ap_CS_fsm_state121, zext_ln54_96_fu_9210_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_96_fu_9210_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_94_fu_9190_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_92_fu_9170_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_90_fu_9150_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_88_fu_9130_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_86_fu_9110_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_84_fu_9096_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_82_fu_9076_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_80_fu_9056_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_78_fu_9036_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_76_fu_9016_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_74_fu_8996_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_72_fu_8982_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_70_fu_8962_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_68_fu_8942_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_66_fu_8922_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_64_fu_8902_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_62_fu_8882_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_60_fu_8868_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_58_fu_8848_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_56_fu_8828_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_54_fu_8808_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_52_fu_8788_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_50_fu_8768_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_48_fu_8754_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_46_fu_8734_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_44_fu_8714_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_42_fu_8592_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_40_fu_8470_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_38_fu_8450_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_36_fu_8383_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_34_fu_8363_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_32_fu_8343_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_30_fu_8323_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_28_fu_8303_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_26_fu_8283_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_24_fu_8216_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_22_fu_8181_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_20_fu_8161_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_18_fu_8141_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_16_fu_8121_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_14_fu_8101_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_12_fu_8026_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_10_fu_8006_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_8_fu_7986_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_6_fu_7966_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_4_fu_7946_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_97_fu_7926_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_95_fu_7906_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_93_fu_7886_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_91_fu_7866_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_89_fu_7846_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_87_fu_7826_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_85_fu_7812_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_83_fu_7792_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_81_fu_7772_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_79_fu_7752_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_77_fu_7732_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_75_fu_7712_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_73_fu_7698_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_71_fu_7678_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_69_fu_7658_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_67_fu_7638_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_65_fu_7618_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_63_fu_7598_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_61_fu_7584_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_59_fu_7564_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_57_fu_7544_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_55_fu_7524_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_53_fu_7504_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_51_fu_7484_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_49_fu_7470_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_47_fu_7450_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_45_fu_7430_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_43_fu_7410_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_41_fu_7390_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_39_fu_7370_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_37_fu_7356_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_35_fu_7336_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_33_fu_7316_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_31_fu_7296_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_29_fu_7276_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_27_fu_7256_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_25_fu_7242_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_23_fu_7222_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_21_fu_7202_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_19_fu_7182_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_17_fu_7162_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_15_fu_7142_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_13_fu_7128_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_11_fu_7108_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_9_fu_6982_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_7_fu_6856_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_5_fu_6730_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln75_3_fu_6651_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln54_2_fu_6531_p1(10 - 1 downto 0);
        else 
            sliding_window_buffer_samples_sample_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln54_1_fu_6520_p1, zext_ln75_2_fu_6640_p1, zext_ln75_4_fu_6720_p1, zext_ln75_6_fu_6846_p1, zext_ln75_8_fu_6972_p1, zext_ln75_10_fu_7098_p1, ap_CS_fsm_state31, zext_ln75_12_fu_7118_p1, ap_CS_fsm_state32, zext_ln75_14_fu_7133_p1, ap_CS_fsm_state33, zext_ln75_16_fu_7152_p1, ap_CS_fsm_state34, zext_ln75_18_fu_7172_p1, ap_CS_fsm_state35, zext_ln75_20_fu_7192_p1, ap_CS_fsm_state36, zext_ln75_22_fu_7212_p1, ap_CS_fsm_state37, zext_ln75_24_fu_7232_p1, ap_CS_fsm_state38, zext_ln75_26_fu_7247_p1, ap_CS_fsm_state39, zext_ln75_28_fu_7266_p1, ap_CS_fsm_state40, zext_ln75_30_fu_7286_p1, ap_CS_fsm_state41, zext_ln75_32_fu_7306_p1, ap_CS_fsm_state42, zext_ln75_34_fu_7326_p1, ap_CS_fsm_state43, zext_ln75_36_fu_7346_p1, ap_CS_fsm_state44, zext_ln75_38_fu_7361_p1, ap_CS_fsm_state45, zext_ln75_40_fu_7380_p1, ap_CS_fsm_state46, zext_ln75_42_fu_7400_p1, ap_CS_fsm_state47, zext_ln75_44_fu_7420_p1, ap_CS_fsm_state48, zext_ln75_46_fu_7440_p1, ap_CS_fsm_state49, zext_ln75_48_fu_7460_p1, ap_CS_fsm_state50, zext_ln75_50_fu_7475_p1, ap_CS_fsm_state51, zext_ln75_52_fu_7494_p1, ap_CS_fsm_state52, zext_ln75_54_fu_7514_p1, ap_CS_fsm_state53, zext_ln75_56_fu_7534_p1, ap_CS_fsm_state54, zext_ln75_58_fu_7554_p1, ap_CS_fsm_state55, zext_ln75_60_fu_7574_p1, ap_CS_fsm_state56, zext_ln75_62_fu_7589_p1, ap_CS_fsm_state57, zext_ln75_64_fu_7608_p1, ap_CS_fsm_state58, zext_ln75_66_fu_7628_p1, ap_CS_fsm_state59, zext_ln75_68_fu_7648_p1, ap_CS_fsm_state60, zext_ln75_70_fu_7668_p1, ap_CS_fsm_state61, zext_ln75_72_fu_7688_p1, ap_CS_fsm_state62, zext_ln75_74_fu_7703_p1, ap_CS_fsm_state63, zext_ln75_76_fu_7722_p1, ap_CS_fsm_state64, zext_ln75_78_fu_7742_p1, ap_CS_fsm_state65, zext_ln75_80_fu_7762_p1, ap_CS_fsm_state66, zext_ln75_82_fu_7782_p1, ap_CS_fsm_state67, zext_ln75_84_fu_7802_p1, ap_CS_fsm_state68, zext_ln75_86_fu_7817_p1, ap_CS_fsm_state69, zext_ln75_88_fu_7836_p1, ap_CS_fsm_state70, zext_ln75_90_fu_7856_p1, ap_CS_fsm_state71, zext_ln75_92_fu_7876_p1, ap_CS_fsm_state72, zext_ln75_94_fu_7896_p1, ap_CS_fsm_state73, zext_ln75_96_fu_7916_p1, ap_CS_fsm_state74, zext_ln54_3_fu_7936_p1, ap_CS_fsm_state75, zext_ln54_5_fu_7956_p1, ap_CS_fsm_state76, zext_ln54_7_fu_7976_p1, ap_CS_fsm_state77, zext_ln54_9_fu_7996_p1, ap_CS_fsm_state78, zext_ln54_11_fu_8016_p1, ap_CS_fsm_state79, zext_ln54_13_fu_8090_p1, zext_ln54_15_fu_8111_p1, ap_CS_fsm_state81, zext_ln54_17_fu_8131_p1, ap_CS_fsm_state82, zext_ln54_19_fu_8151_p1, ap_CS_fsm_state83, zext_ln54_21_fu_8171_p1, ap_CS_fsm_state84, zext_ln54_23_fu_8206_p1, ap_CS_fsm_state85, zext_ln54_25_fu_8272_p1, zext_ln54_27_fu_8293_p1, ap_CS_fsm_state87, zext_ln54_29_fu_8313_p1, ap_CS_fsm_state88, zext_ln54_31_fu_8333_p1, ap_CS_fsm_state89, zext_ln54_33_fu_8353_p1, ap_CS_fsm_state90, zext_ln54_35_fu_8373_p1, ap_CS_fsm_state91, zext_ln54_37_fu_8439_p1, zext_ln54_39_fu_8460_p1, zext_ln54_41_fu_8582_p1, zext_ln54_43_fu_8704_p1, ap_CS_fsm_state95, zext_ln54_45_fu_8724_p1, ap_CS_fsm_state96, zext_ln54_47_fu_8744_p1, ap_CS_fsm_state97, zext_ln54_49_fu_8759_p1, ap_CS_fsm_state98, zext_ln54_51_fu_8778_p1, ap_CS_fsm_state99, zext_ln54_53_fu_8798_p1, ap_CS_fsm_state100, zext_ln54_55_fu_8818_p1, ap_CS_fsm_state101, zext_ln54_57_fu_8838_p1, ap_CS_fsm_state102, zext_ln54_59_fu_8858_p1, ap_CS_fsm_state103, zext_ln54_61_fu_8873_p1, ap_CS_fsm_state104, zext_ln54_63_fu_8892_p1, ap_CS_fsm_state105, zext_ln54_65_fu_8912_p1, ap_CS_fsm_state106, zext_ln54_67_fu_8932_p1, ap_CS_fsm_state107, zext_ln54_69_fu_8952_p1, ap_CS_fsm_state108, zext_ln54_71_fu_8972_p1, ap_CS_fsm_state109, zext_ln54_73_fu_8987_p1, ap_CS_fsm_state110, zext_ln54_75_fu_9006_p1, ap_CS_fsm_state111, zext_ln54_77_fu_9026_p1, ap_CS_fsm_state112, zext_ln54_79_fu_9046_p1, ap_CS_fsm_state113, zext_ln54_81_fu_9066_p1, ap_CS_fsm_state114, zext_ln54_83_fu_9086_p1, ap_CS_fsm_state115, zext_ln54_85_fu_9101_p1, ap_CS_fsm_state116, zext_ln54_87_fu_9120_p1, ap_CS_fsm_state117, zext_ln54_89_fu_9140_p1, ap_CS_fsm_state118, zext_ln54_91_fu_9160_p1, ap_CS_fsm_state119, zext_ln54_93_fu_9180_p1, ap_CS_fsm_state120, zext_ln54_95_fu_9200_p1, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_95_fu_9200_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_93_fu_9180_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_91_fu_9160_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_89_fu_9140_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_87_fu_9120_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_85_fu_9101_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_83_fu_9086_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_81_fu_9066_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_79_fu_9046_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_77_fu_9026_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_75_fu_9006_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_73_fu_8987_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_71_fu_8972_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_69_fu_8952_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_67_fu_8932_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_65_fu_8912_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_63_fu_8892_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_61_fu_8873_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_59_fu_8858_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_57_fu_8838_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_55_fu_8818_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_53_fu_8798_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_51_fu_8778_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_49_fu_8759_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_47_fu_8744_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_45_fu_8724_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_43_fu_8704_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_41_fu_8582_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_39_fu_8460_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_37_fu_8439_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_35_fu_8373_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_33_fu_8353_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_31_fu_8333_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_29_fu_8313_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_27_fu_8293_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_25_fu_8272_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_23_fu_8206_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_21_fu_8171_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_19_fu_8151_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_17_fu_8131_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_15_fu_8111_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_13_fu_8090_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_11_fu_8016_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_9_fu_7996_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_7_fu_7976_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_5_fu_7956_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_3_fu_7936_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_96_fu_7916_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_94_fu_7896_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_92_fu_7876_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_90_fu_7856_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_88_fu_7836_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_86_fu_7817_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_84_fu_7802_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_82_fu_7782_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_80_fu_7762_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_78_fu_7742_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_76_fu_7722_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_74_fu_7703_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_72_fu_7688_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_70_fu_7668_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_68_fu_7648_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_66_fu_7628_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_64_fu_7608_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_62_fu_7589_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_60_fu_7574_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_58_fu_7554_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_56_fu_7534_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_54_fu_7514_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_52_fu_7494_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_50_fu_7475_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_48_fu_7460_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_46_fu_7440_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_44_fu_7420_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_42_fu_7400_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_40_fu_7380_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_38_fu_7361_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_36_fu_7346_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_34_fu_7326_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_32_fu_7306_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_30_fu_7286_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_28_fu_7266_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_26_fu_7247_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_24_fu_7232_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_22_fu_7212_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_20_fu_7192_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_18_fu_7172_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_16_fu_7152_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_14_fu_7133_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_12_fu_7118_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_10_fu_7098_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_8_fu_6972_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_6_fu_6846_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_4_fu_6720_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln75_2_fu_6640_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln54_1_fu_6520_p1(10 - 1 downto 0);
        else 
            sliding_window_buffer_samples_sample_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sliding_window_buffer_samples_sample_V_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sliding_window_buffer_samples_sample_V_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_d0_assign_proc : process(sample_period_samples_1_sample_V_load_reg_9691, sample_period_samples_3_sample_V_load_reg_9701, sample_period_samples_5_sample_V_load_reg_9711, sample_period_samples_7_sample_V_load_reg_9721, sample_period_samples_9_sample_V_load_reg_9731, sample_period_samples_11_sample_V_load_reg_9741, sample_period_samples_1_sample_V_load_1_reg_9811, sample_period_samples_3_sample_V_load_1_reg_9821, sample_period_samples_5_sample_V_load_1_reg_9831, sample_period_samples_7_sample_V_load_1_reg_9841, sample_period_samples_9_sample_V_load_1_reg_9851, sample_period_samples_11_sample_V_load_1_reg_9861, sample_period_samples_1_sample_V_load_2_reg_10171, sample_period_samples_3_sample_V_load_2_reg_10181, sample_period_samples_5_sample_V_load_2_reg_10191, sample_period_samples_7_sample_V_load_2_reg_10201, sample_period_samples_9_sample_V_load_2_reg_10211, sample_period_samples_11_sample_V_load_2_reg_10221, sample_period_samples_1_sample_V_load_3_reg_10303, sample_period_samples_3_sample_V_load_3_reg_10313, sample_period_samples_5_sample_V_load_3_reg_10323, sample_period_samples_7_sample_V_load_3_reg_10333, sample_period_samples_9_sample_V_load_3_reg_10343, sample_period_samples_11_sample_V_load_3_reg_10353, sample_period_samples_1_sample_V_load_4_reg_10675, sample_period_samples_3_sample_V_load_4_reg_10685, sample_period_samples_5_sample_V_load_4_reg_10695, sample_period_samples_7_sample_V_load_4_reg_10705, sample_period_samples_9_sample_V_load_4_reg_10715, sample_period_samples_11_sample_V_load_4_reg_10725, sample_period_samples_1_sample_V_load_5_reg_10795, sample_period_samples_3_sample_V_load_5_reg_10805, sample_period_samples_5_sample_V_load_5_reg_10815, sample_period_samples_7_sample_V_load_5_reg_10825, sample_period_samples_9_sample_V_load_5_reg_10835, sample_period_samples_11_sample_V_load_5_reg_10845, ap_CS_fsm_state10, sample_period_samples_1_sample_V_load_6_reg_11155, sample_period_samples_3_sample_V_load_6_reg_11165, sample_period_samples_5_sample_V_load_6_reg_11175, sample_period_samples_7_sample_V_load_6_reg_11185, sample_period_samples_9_sample_V_load_6_reg_11195, sample_period_samples_11_sample_V_load_6_reg_11205, sample_period_samples_1_sample_V_load_7_reg_11275, sample_period_samples_3_sample_V_load_7_reg_11285, sample_period_samples_5_sample_V_load_7_reg_11295, sample_period_samples_7_sample_V_load_7_reg_11305, sample_period_samples_9_sample_V_load_7_reg_11315, sample_period_samples_11_sample_V_load_7_reg_11325, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_11_sample_V_load_7_reg_11325;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_9_sample_V_load_7_reg_11315;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_7_sample_V_load_7_reg_11305;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_5_sample_V_load_7_reg_11295;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_3_sample_V_load_7_reg_11285;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_1_sample_V_load_7_reg_11275;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_11_sample_V_load_6_reg_11205;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_9_sample_V_load_6_reg_11195;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_7_sample_V_load_6_reg_11185;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_5_sample_V_load_6_reg_11175;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_3_sample_V_load_6_reg_11165;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_1_sample_V_load_6_reg_11155;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_11_sample_V_load_5_reg_10845;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_9_sample_V_load_5_reg_10835;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_7_sample_V_load_5_reg_10825;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_5_sample_V_load_5_reg_10815;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_3_sample_V_load_5_reg_10805;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_1_sample_V_load_5_reg_10795;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_11_sample_V_load_4_reg_10725;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_9_sample_V_load_4_reg_10715;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_7_sample_V_load_4_reg_10705;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_5_sample_V_load_4_reg_10695;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_3_sample_V_load_4_reg_10685;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_1_sample_V_load_4_reg_10675;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_11_sample_V_load_3_reg_10353;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_9_sample_V_load_3_reg_10343;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_7_sample_V_load_3_reg_10333;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_5_sample_V_load_3_reg_10323;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_3_sample_V_load_3_reg_10313;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_1_sample_V_load_3_reg_10303;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_11_sample_V_load_2_reg_10221;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_9_sample_V_load_2_reg_10211;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_7_sample_V_load_2_reg_10201;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_5_sample_V_load_2_reg_10191;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_3_sample_V_load_2_reg_10181;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_1_sample_V_load_2_reg_10171;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_11_sample_V_load_1_reg_9861;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_9_sample_V_load_1_reg_9851;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_7_sample_V_load_1_reg_9841;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_5_sample_V_load_1_reg_9831;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_3_sample_V_load_1_reg_9821;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_1_sample_V_load_1_reg_9811;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_11_sample_V_load_reg_9741;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_9_sample_V_load_reg_9731;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_7_sample_V_load_reg_9721;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_5_sample_V_load_reg_9711;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_3_sample_V_load_reg_9701;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sliding_window_buffer_samples_sample_V_d0 <= sample_period_samples_1_sample_V_load_reg_9691;
        else 
            sliding_window_buffer_samples_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_d1_assign_proc : process(sample_period_samples_0_sample_V_load_reg_9686, sample_period_samples_2_sample_V_load_reg_9696, sample_period_samples_4_sample_V_load_reg_9706, sample_period_samples_6_sample_V_load_reg_9716, sample_period_samples_8_sample_V_load_reg_9726, sample_period_samples_10_sample_V_load_reg_9736, sample_period_samples_0_sample_V_load_1_reg_9806, sample_period_samples_2_sample_V_load_1_reg_9816, sample_period_samples_4_sample_V_load_1_reg_9826, sample_period_samples_6_sample_V_load_1_reg_9836, sample_period_samples_8_sample_V_load_1_reg_9846, sample_period_samples_10_sample_V_load_1_reg_9856, sample_period_samples_0_sample_V_load_2_reg_10166, sample_period_samples_2_sample_V_load_2_reg_10176, sample_period_samples_4_sample_V_load_2_reg_10186, sample_period_samples_6_sample_V_load_2_reg_10196, sample_period_samples_8_sample_V_load_2_reg_10206, sample_period_samples_10_sample_V_load_2_reg_10216, sample_period_samples_0_sample_V_load_3_reg_10298, sample_period_samples_2_sample_V_load_3_reg_10308, sample_period_samples_4_sample_V_load_3_reg_10318, sample_period_samples_6_sample_V_load_3_reg_10328, sample_period_samples_8_sample_V_load_3_reg_10338, sample_period_samples_10_sample_V_load_3_reg_10348, sample_period_samples_0_sample_V_load_4_reg_10670, sample_period_samples_2_sample_V_load_4_reg_10680, sample_period_samples_4_sample_V_load_4_reg_10690, sample_period_samples_6_sample_V_load_4_reg_10700, sample_period_samples_8_sample_V_load_4_reg_10710, sample_period_samples_10_sample_V_load_4_reg_10720, sample_period_samples_0_sample_V_load_5_reg_10790, sample_period_samples_2_sample_V_load_5_reg_10800, sample_period_samples_4_sample_V_load_5_reg_10810, sample_period_samples_6_sample_V_load_5_reg_10820, sample_period_samples_8_sample_V_load_5_reg_10830, sample_period_samples_10_sample_V_load_5_reg_10840, sample_period_samples_0_sample_V_load_6_reg_11150, ap_CS_fsm_state10, sample_period_samples_2_sample_V_load_6_reg_11160, sample_period_samples_4_sample_V_load_6_reg_11170, sample_period_samples_6_sample_V_load_6_reg_11180, sample_period_samples_8_sample_V_load_6_reg_11190, sample_period_samples_10_sample_V_load_6_reg_11200, sample_period_samples_0_sample_V_load_7_reg_11270, sample_period_samples_2_sample_V_load_7_reg_11280, sample_period_samples_4_sample_V_load_7_reg_11290, sample_period_samples_6_sample_V_load_7_reg_11300, sample_period_samples_8_sample_V_load_7_reg_11310, sample_period_samples_10_sample_V_load_7_reg_11320, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_10_sample_V_load_7_reg_11320;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_8_sample_V_load_7_reg_11310;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_6_sample_V_load_7_reg_11300;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_4_sample_V_load_7_reg_11290;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_2_sample_V_load_7_reg_11280;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_0_sample_V_load_7_reg_11270;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_10_sample_V_load_6_reg_11200;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_8_sample_V_load_6_reg_11190;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_6_sample_V_load_6_reg_11180;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_4_sample_V_load_6_reg_11170;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_2_sample_V_load_6_reg_11160;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_0_sample_V_load_6_reg_11150;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_10_sample_V_load_5_reg_10840;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_8_sample_V_load_5_reg_10830;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_6_sample_V_load_5_reg_10820;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_4_sample_V_load_5_reg_10810;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_2_sample_V_load_5_reg_10800;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_0_sample_V_load_5_reg_10790;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_10_sample_V_load_4_reg_10720;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_8_sample_V_load_4_reg_10710;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_6_sample_V_load_4_reg_10700;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_4_sample_V_load_4_reg_10690;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_2_sample_V_load_4_reg_10680;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_0_sample_V_load_4_reg_10670;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_10_sample_V_load_3_reg_10348;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_8_sample_V_load_3_reg_10338;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_6_sample_V_load_3_reg_10328;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_4_sample_V_load_3_reg_10318;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_2_sample_V_load_3_reg_10308;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_0_sample_V_load_3_reg_10298;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_10_sample_V_load_2_reg_10216;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_8_sample_V_load_2_reg_10206;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_6_sample_V_load_2_reg_10196;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_4_sample_V_load_2_reg_10186;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_2_sample_V_load_2_reg_10176;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_0_sample_V_load_2_reg_10166;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_10_sample_V_load_1_reg_9856;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_8_sample_V_load_1_reg_9846;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_6_sample_V_load_1_reg_9836;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_4_sample_V_load_1_reg_9826;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_2_sample_V_load_1_reg_9816;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_0_sample_V_load_1_reg_9806;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_10_sample_V_load_reg_9736;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_8_sample_V_load_reg_9726;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_6_sample_V_load_reg_9716;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_4_sample_V_load_reg_9706;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_2_sample_V_load_reg_9696;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sliding_window_buffer_samples_sample_V_d1 <= sample_period_samples_0_sample_V_load_reg_9686;
        else 
            sliding_window_buffer_samples_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln52_fu_6468_p2, icmp_ln52_reg_11393, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (icmp_ln52_reg_11393 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln52_fu_6468_p2 = ap_const_lv1_1)))) then 
            sliding_window_buffer_samples_sample_V_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_we1_assign_proc : process(ap_CS_fsm_state10, icmp_ln52_fu_6468_p2, icmp_ln52_reg_11393, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (icmp_ln52_reg_11393 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln52_fu_6468_p2 = ap_const_lv1_1)))) then 
            sliding_window_buffer_samples_sample_V_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_0_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_0_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_0_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_0_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_0_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_0_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_0_d0_assign_proc : process(sample_period_samples_0_timestamp_V_load_1_reg_9866, sample_period_samples_0_timestamp_V_load_2_reg_10226, sample_period_samples_0_timestamp_V_load_3_reg_10358, sample_period_samples_0_timestamp_V_load_5_reg_10850, sample_period_samples_0_timestamp_V_load_7_reg_11330, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_0_d0 <= sample_period_samples_0_timestamp_V_load_2_reg_10226;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_0_d0 <= sample_period_samples_0_timestamp_V_load_7_reg_11330;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_0_d0 <= sample_period_samples_0_timestamp_V_load_5_reg_10850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_0_d0 <= sample_period_samples_0_timestamp_V_load_3_reg_10358;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_0_d0 <= sample_period_samples_0_timestamp_V_load_1_reg_9866;
        else 
            sliding_window_buffer_samples_timestamp_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_0_d1_assign_proc : process(sample_period_samples_0_timestamp_V_load_reg_9746, sample_period_samples_0_timestamp_V_load_2_reg_10226, sample_period_samples_0_timestamp_V_load_3_reg_10358, sample_period_samples_0_timestamp_V_load_4_reg_10730, sample_period_samples_0_timestamp_V_load_6_reg_11210, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_0_d1 <= sample_period_samples_0_timestamp_V_load_3_reg_10358;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_0_d1 <= sample_period_samples_0_timestamp_V_load_6_reg_11210;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_0_d1 <= sample_period_samples_0_timestamp_V_load_4_reg_10730;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_0_d1 <= sample_period_samples_0_timestamp_V_load_2_reg_10226;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_0_d1 <= sample_period_samples_0_timestamp_V_load_reg_9746;
        else 
            sliding_window_buffer_samples_timestamp_V_0_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_0_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_0_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_0_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_0_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_10_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_10_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_10_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_10_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_10_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_10_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_10_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_10_d0_assign_proc : process(sample_period_samples_10_timestamp_V_load_1_reg_9916, sample_period_samples_10_timestamp_V_load_2_reg_10286, sample_period_samples_10_timestamp_V_load_3_reg_10418, sample_period_samples_10_timestamp_V_load_5_reg_10900, sample_period_samples_10_timestamp_V_load_7_reg_11380, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_10_d0 <= sample_period_samples_10_timestamp_V_load_2_reg_10286;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_10_d0 <= sample_period_samples_10_timestamp_V_load_7_reg_11380;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_10_d0 <= sample_period_samples_10_timestamp_V_load_5_reg_10900;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_10_d0 <= sample_period_samples_10_timestamp_V_load_3_reg_10418;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_10_d0 <= sample_period_samples_10_timestamp_V_load_1_reg_9916;
        else 
            sliding_window_buffer_samples_timestamp_V_10_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_10_d1_assign_proc : process(sample_period_samples_10_timestamp_V_load_reg_9796, sample_period_samples_10_timestamp_V_load_2_reg_10286, sample_period_samples_10_timestamp_V_load_3_reg_10418, sample_period_samples_10_timestamp_V_load_4_reg_10780, sample_period_samples_10_timestamp_V_load_6_reg_11260, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_10_d1 <= sample_period_samples_10_timestamp_V_load_3_reg_10418;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_10_d1 <= sample_period_samples_10_timestamp_V_load_6_reg_11260;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_10_d1 <= sample_period_samples_10_timestamp_V_load_4_reg_10780;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_10_d1 <= sample_period_samples_10_timestamp_V_load_2_reg_10286;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_10_d1 <= sample_period_samples_10_timestamp_V_load_reg_9796;
        else 
            sliding_window_buffer_samples_timestamp_V_10_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_10_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_10_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_10_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_10_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_10_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_11_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_11_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_11_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_11_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_11_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_11_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_11_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_11_d0_assign_proc : process(sample_period_samples_11_timestamp_V_load_1_reg_9921, sample_period_samples_11_timestamp_V_load_2_reg_10292, sample_period_samples_11_timestamp_V_load_3_reg_10424, sample_period_samples_11_timestamp_V_load_5_reg_10905, sample_period_samples_11_timestamp_V_load_7_reg_11385, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_11_d0 <= sample_period_samples_11_timestamp_V_load_2_reg_10292;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_11_d0 <= sample_period_samples_11_timestamp_V_load_7_reg_11385;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_11_d0 <= sample_period_samples_11_timestamp_V_load_5_reg_10905;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_11_d0 <= sample_period_samples_11_timestamp_V_load_3_reg_10424;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_11_d0 <= sample_period_samples_11_timestamp_V_load_1_reg_9921;
        else 
            sliding_window_buffer_samples_timestamp_V_11_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_11_d1_assign_proc : process(sample_period_samples_11_timestamp_V_load_reg_9801, sample_period_samples_11_timestamp_V_load_2_reg_10292, sample_period_samples_11_timestamp_V_load_3_reg_10424, sample_period_samples_11_timestamp_V_load_4_reg_10785, sample_period_samples_11_timestamp_V_load_6_reg_11265, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_11_d1 <= sample_period_samples_11_timestamp_V_load_3_reg_10424;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_11_d1 <= sample_period_samples_11_timestamp_V_load_6_reg_11265;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_11_d1 <= sample_period_samples_11_timestamp_V_load_4_reg_10785;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_11_d1 <= sample_period_samples_11_timestamp_V_load_2_reg_10292;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_11_d1 <= sample_period_samples_11_timestamp_V_load_reg_9801;
        else 
            sliding_window_buffer_samples_timestamp_V_11_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_11_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_11_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_11_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_11_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_11_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_1_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_1_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_1_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_1_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_1_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_1_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_1_d0_assign_proc : process(sample_period_samples_1_timestamp_V_load_1_reg_9871, sample_period_samples_1_timestamp_V_load_2_reg_10232, sample_period_samples_1_timestamp_V_load_3_reg_10364, sample_period_samples_1_timestamp_V_load_5_reg_10855, sample_period_samples_1_timestamp_V_load_7_reg_11335, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_1_d0 <= sample_period_samples_1_timestamp_V_load_2_reg_10232;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_1_d0 <= sample_period_samples_1_timestamp_V_load_7_reg_11335;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_1_d0 <= sample_period_samples_1_timestamp_V_load_5_reg_10855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_1_d0 <= sample_period_samples_1_timestamp_V_load_3_reg_10364;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_1_d0 <= sample_period_samples_1_timestamp_V_load_1_reg_9871;
        else 
            sliding_window_buffer_samples_timestamp_V_1_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_1_d1_assign_proc : process(sample_period_samples_1_timestamp_V_load_reg_9751, sample_period_samples_1_timestamp_V_load_2_reg_10232, sample_period_samples_1_timestamp_V_load_3_reg_10364, sample_period_samples_1_timestamp_V_load_4_reg_10735, sample_period_samples_1_timestamp_V_load_6_reg_11215, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_1_d1 <= sample_period_samples_1_timestamp_V_load_3_reg_10364;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_1_d1 <= sample_period_samples_1_timestamp_V_load_6_reg_11215;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_1_d1 <= sample_period_samples_1_timestamp_V_load_4_reg_10735;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_1_d1 <= sample_period_samples_1_timestamp_V_load_2_reg_10232;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_1_d1 <= sample_period_samples_1_timestamp_V_load_reg_9751;
        else 
            sliding_window_buffer_samples_timestamp_V_1_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_1_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_1_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_1_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_1_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_2_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_2_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_2_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_2_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_2_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_2_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_2_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_2_d0_assign_proc : process(sample_period_samples_2_timestamp_V_load_1_reg_9876, sample_period_samples_2_timestamp_V_load_2_reg_10238, sample_period_samples_2_timestamp_V_load_3_reg_10370, sample_period_samples_2_timestamp_V_load_5_reg_10860, sample_period_samples_2_timestamp_V_load_7_reg_11340, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_2_d0 <= sample_period_samples_2_timestamp_V_load_2_reg_10238;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_2_d0 <= sample_period_samples_2_timestamp_V_load_7_reg_11340;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_2_d0 <= sample_period_samples_2_timestamp_V_load_5_reg_10860;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_2_d0 <= sample_period_samples_2_timestamp_V_load_3_reg_10370;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_2_d0 <= sample_period_samples_2_timestamp_V_load_1_reg_9876;
        else 
            sliding_window_buffer_samples_timestamp_V_2_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_2_d1_assign_proc : process(sample_period_samples_2_timestamp_V_load_reg_9756, sample_period_samples_2_timestamp_V_load_2_reg_10238, sample_period_samples_2_timestamp_V_load_3_reg_10370, sample_period_samples_2_timestamp_V_load_4_reg_10740, sample_period_samples_2_timestamp_V_load_6_reg_11220, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_2_d1 <= sample_period_samples_2_timestamp_V_load_3_reg_10370;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_2_d1 <= sample_period_samples_2_timestamp_V_load_6_reg_11220;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_2_d1 <= sample_period_samples_2_timestamp_V_load_4_reg_10740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_2_d1 <= sample_period_samples_2_timestamp_V_load_2_reg_10238;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_2_d1 <= sample_period_samples_2_timestamp_V_load_reg_9756;
        else 
            sliding_window_buffer_samples_timestamp_V_2_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_2_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_2_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_2_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_2_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_3_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_3_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_3_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_3_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_3_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_3_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_3_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_3_d0_assign_proc : process(sample_period_samples_3_timestamp_V_load_1_reg_9881, sample_period_samples_3_timestamp_V_load_2_reg_10244, sample_period_samples_3_timestamp_V_load_3_reg_10376, sample_period_samples_3_timestamp_V_load_5_reg_10865, sample_period_samples_3_timestamp_V_load_7_reg_11345, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_3_d0 <= sample_period_samples_3_timestamp_V_load_2_reg_10244;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_3_d0 <= sample_period_samples_3_timestamp_V_load_7_reg_11345;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_3_d0 <= sample_period_samples_3_timestamp_V_load_5_reg_10865;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_3_d0 <= sample_period_samples_3_timestamp_V_load_3_reg_10376;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_3_d0 <= sample_period_samples_3_timestamp_V_load_1_reg_9881;
        else 
            sliding_window_buffer_samples_timestamp_V_3_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_3_d1_assign_proc : process(sample_period_samples_3_timestamp_V_load_reg_9761, sample_period_samples_3_timestamp_V_load_2_reg_10244, sample_period_samples_3_timestamp_V_load_3_reg_10376, sample_period_samples_3_timestamp_V_load_4_reg_10745, sample_period_samples_3_timestamp_V_load_6_reg_11225, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_3_d1 <= sample_period_samples_3_timestamp_V_load_3_reg_10376;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_3_d1 <= sample_period_samples_3_timestamp_V_load_6_reg_11225;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_3_d1 <= sample_period_samples_3_timestamp_V_load_4_reg_10745;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_3_d1 <= sample_period_samples_3_timestamp_V_load_2_reg_10244;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_3_d1 <= sample_period_samples_3_timestamp_V_load_reg_9761;
        else 
            sliding_window_buffer_samples_timestamp_V_3_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_3_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_3_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_3_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_3_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_4_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_4_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_4_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_4_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_4_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_4_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_4_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_4_d0_assign_proc : process(sample_period_samples_4_timestamp_V_load_1_reg_9886, sample_period_samples_4_timestamp_V_load_2_reg_10250, sample_period_samples_4_timestamp_V_load_3_reg_10382, sample_period_samples_4_timestamp_V_load_5_reg_10870, sample_period_samples_4_timestamp_V_load_7_reg_11350, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_4_d0 <= sample_period_samples_4_timestamp_V_load_2_reg_10250;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_4_d0 <= sample_period_samples_4_timestamp_V_load_7_reg_11350;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_4_d0 <= sample_period_samples_4_timestamp_V_load_5_reg_10870;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_4_d0 <= sample_period_samples_4_timestamp_V_load_3_reg_10382;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_4_d0 <= sample_period_samples_4_timestamp_V_load_1_reg_9886;
        else 
            sliding_window_buffer_samples_timestamp_V_4_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_4_d1_assign_proc : process(sample_period_samples_4_timestamp_V_load_reg_9766, sample_period_samples_4_timestamp_V_load_2_reg_10250, sample_period_samples_4_timestamp_V_load_3_reg_10382, sample_period_samples_4_timestamp_V_load_4_reg_10750, sample_period_samples_4_timestamp_V_load_6_reg_11230, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_4_d1 <= sample_period_samples_4_timestamp_V_load_3_reg_10382;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_4_d1 <= sample_period_samples_4_timestamp_V_load_6_reg_11230;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_4_d1 <= sample_period_samples_4_timestamp_V_load_4_reg_10750;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_4_d1 <= sample_period_samples_4_timestamp_V_load_2_reg_10250;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_4_d1 <= sample_period_samples_4_timestamp_V_load_reg_9766;
        else 
            sliding_window_buffer_samples_timestamp_V_4_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_4_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_4_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_4_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_4_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_5_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_5_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_5_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_5_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_5_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_5_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_5_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_5_d0_assign_proc : process(sample_period_samples_5_timestamp_V_load_1_reg_9891, sample_period_samples_5_timestamp_V_load_2_reg_10256, sample_period_samples_5_timestamp_V_load_3_reg_10388, sample_period_samples_5_timestamp_V_load_5_reg_10875, sample_period_samples_5_timestamp_V_load_7_reg_11355, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_5_d0 <= sample_period_samples_5_timestamp_V_load_2_reg_10256;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_5_d0 <= sample_period_samples_5_timestamp_V_load_7_reg_11355;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_5_d0 <= sample_period_samples_5_timestamp_V_load_5_reg_10875;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_5_d0 <= sample_period_samples_5_timestamp_V_load_3_reg_10388;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_5_d0 <= sample_period_samples_5_timestamp_V_load_1_reg_9891;
        else 
            sliding_window_buffer_samples_timestamp_V_5_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_5_d1_assign_proc : process(sample_period_samples_5_timestamp_V_load_reg_9771, sample_period_samples_5_timestamp_V_load_2_reg_10256, sample_period_samples_5_timestamp_V_load_3_reg_10388, sample_period_samples_5_timestamp_V_load_4_reg_10755, sample_period_samples_5_timestamp_V_load_6_reg_11235, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_5_d1 <= sample_period_samples_5_timestamp_V_load_3_reg_10388;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_5_d1 <= sample_period_samples_5_timestamp_V_load_6_reg_11235;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_5_d1 <= sample_period_samples_5_timestamp_V_load_4_reg_10755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_5_d1 <= sample_period_samples_5_timestamp_V_load_2_reg_10256;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_5_d1 <= sample_period_samples_5_timestamp_V_load_reg_9771;
        else 
            sliding_window_buffer_samples_timestamp_V_5_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_5_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_5_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_5_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_5_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_6_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_6_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_6_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_6_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_6_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_6_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_6_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_6_d0_assign_proc : process(sample_period_samples_6_timestamp_V_load_1_reg_9896, sample_period_samples_6_timestamp_V_load_2_reg_10262, sample_period_samples_6_timestamp_V_load_3_reg_10394, sample_period_samples_6_timestamp_V_load_5_reg_10880, sample_period_samples_6_timestamp_V_load_7_reg_11360, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_6_d0 <= sample_period_samples_6_timestamp_V_load_2_reg_10262;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_6_d0 <= sample_period_samples_6_timestamp_V_load_7_reg_11360;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_6_d0 <= sample_period_samples_6_timestamp_V_load_5_reg_10880;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_6_d0 <= sample_period_samples_6_timestamp_V_load_3_reg_10394;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_6_d0 <= sample_period_samples_6_timestamp_V_load_1_reg_9896;
        else 
            sliding_window_buffer_samples_timestamp_V_6_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_6_d1_assign_proc : process(sample_period_samples_6_timestamp_V_load_reg_9776, sample_period_samples_6_timestamp_V_load_2_reg_10262, sample_period_samples_6_timestamp_V_load_3_reg_10394, sample_period_samples_6_timestamp_V_load_4_reg_10760, sample_period_samples_6_timestamp_V_load_6_reg_11240, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_6_d1 <= sample_period_samples_6_timestamp_V_load_3_reg_10394;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_6_d1 <= sample_period_samples_6_timestamp_V_load_6_reg_11240;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_6_d1 <= sample_period_samples_6_timestamp_V_load_4_reg_10760;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_6_d1 <= sample_period_samples_6_timestamp_V_load_2_reg_10262;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_6_d1 <= sample_period_samples_6_timestamp_V_load_reg_9776;
        else 
            sliding_window_buffer_samples_timestamp_V_6_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_6_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_6_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_6_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_6_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_7_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_7_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_7_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_7_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_7_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_7_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_7_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_7_d0_assign_proc : process(sample_period_samples_7_timestamp_V_load_1_reg_9901, sample_period_samples_7_timestamp_V_load_2_reg_10268, sample_period_samples_7_timestamp_V_load_3_reg_10400, sample_period_samples_7_timestamp_V_load_5_reg_10885, sample_period_samples_7_timestamp_V_load_7_reg_11365, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_7_d0 <= sample_period_samples_7_timestamp_V_load_2_reg_10268;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_7_d0 <= sample_period_samples_7_timestamp_V_load_7_reg_11365;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_7_d0 <= sample_period_samples_7_timestamp_V_load_5_reg_10885;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_7_d0 <= sample_period_samples_7_timestamp_V_load_3_reg_10400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_7_d0 <= sample_period_samples_7_timestamp_V_load_1_reg_9901;
        else 
            sliding_window_buffer_samples_timestamp_V_7_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_7_d1_assign_proc : process(sample_period_samples_7_timestamp_V_load_reg_9781, sample_period_samples_7_timestamp_V_load_2_reg_10268, sample_period_samples_7_timestamp_V_load_3_reg_10400, sample_period_samples_7_timestamp_V_load_4_reg_10765, sample_period_samples_7_timestamp_V_load_6_reg_11245, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_7_d1 <= sample_period_samples_7_timestamp_V_load_3_reg_10400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_7_d1 <= sample_period_samples_7_timestamp_V_load_6_reg_11245;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_7_d1 <= sample_period_samples_7_timestamp_V_load_4_reg_10765;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_7_d1 <= sample_period_samples_7_timestamp_V_load_2_reg_10268;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_7_d1 <= sample_period_samples_7_timestamp_V_load_reg_9781;
        else 
            sliding_window_buffer_samples_timestamp_V_7_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_7_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_7_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_7_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_7_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_8_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_8_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_8_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_8_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_8_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_8_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_8_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_8_d0_assign_proc : process(sample_period_samples_8_timestamp_V_load_1_reg_9906, sample_period_samples_8_timestamp_V_load_2_reg_10274, sample_period_samples_8_timestamp_V_load_3_reg_10406, sample_period_samples_8_timestamp_V_load_5_reg_10890, sample_period_samples_8_timestamp_V_load_7_reg_11370, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_8_d0 <= sample_period_samples_8_timestamp_V_load_2_reg_10274;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_8_d0 <= sample_period_samples_8_timestamp_V_load_7_reg_11370;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_8_d0 <= sample_period_samples_8_timestamp_V_load_5_reg_10890;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_8_d0 <= sample_period_samples_8_timestamp_V_load_3_reg_10406;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_8_d0 <= sample_period_samples_8_timestamp_V_load_1_reg_9906;
        else 
            sliding_window_buffer_samples_timestamp_V_8_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_8_d1_assign_proc : process(sample_period_samples_8_timestamp_V_load_reg_9786, sample_period_samples_8_timestamp_V_load_2_reg_10274, sample_period_samples_8_timestamp_V_load_3_reg_10406, sample_period_samples_8_timestamp_V_load_4_reg_10770, sample_period_samples_8_timestamp_V_load_6_reg_11250, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_8_d1 <= sample_period_samples_8_timestamp_V_load_3_reg_10406;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_8_d1 <= sample_period_samples_8_timestamp_V_load_6_reg_11250;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_8_d1 <= sample_period_samples_8_timestamp_V_load_4_reg_10770;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_8_d1 <= sample_period_samples_8_timestamp_V_load_2_reg_10274;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_8_d1 <= sample_period_samples_8_timestamp_V_load_reg_9786;
        else 
            sliding_window_buffer_samples_timestamp_V_8_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_8_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_8_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_8_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_8_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_9_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, tmp_12_fu_6662_p3, tmp_14_fu_6793_p3, tmp_16_fu_6919_p3, tmp_18_fu_7045_p3, tmp_3_fu_8044_p3, tmp_4_fu_8226_p3, tmp_7_fu_8531_p3, tmp_9_fu_8653_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= tmp_9_fu_8653_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= tmp_7_fu_8531_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= tmp_4_fu_8226_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= tmp_3_fu_8044_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= tmp_18_fu_7045_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= tmp_16_fu_6919_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= tmp_14_fu_6793_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= tmp_12_fu_6662_p3(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_9_address0 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_9_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, zext_ln75_fu_6595_p1, tmp_13_fu_6740_p3, tmp_15_fu_6866_p3, tmp_17_fu_6992_p3, ap_CS_fsm_state85, zext_ln54_fu_8186_p1, tmp_5_fu_8393_p3, tmp_6_fu_8480_p3, tmp_8_fu_8602_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= tmp_8_fu_8602_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= tmp_6_fu_8480_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= tmp_5_fu_8393_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= zext_ln54_fu_8186_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= tmp_17_fu_6992_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= tmp_15_fu_6866_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= tmp_13_fu_6740_p3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= zext_ln75_fu_6595_p1(7 - 1 downto 0);
        else 
            sliding_window_buffer_samples_timestamp_V_9_address1 <= "XXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_9_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_9_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_9_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_9_d0_assign_proc : process(sample_period_samples_9_timestamp_V_load_1_reg_9911, sample_period_samples_9_timestamp_V_load_2_reg_10280, sample_period_samples_9_timestamp_V_load_3_reg_10412, sample_period_samples_9_timestamp_V_load_5_reg_10895, sample_period_samples_9_timestamp_V_load_7_reg_11375, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            sliding_window_buffer_samples_timestamp_V_9_d0 <= sample_period_samples_9_timestamp_V_load_2_reg_10280;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_9_d0 <= sample_period_samples_9_timestamp_V_load_7_reg_11375;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_9_d0 <= sample_period_samples_9_timestamp_V_load_5_reg_10895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_9_d0 <= sample_period_samples_9_timestamp_V_load_3_reg_10412;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_9_d0 <= sample_period_samples_9_timestamp_V_load_1_reg_9911;
        else 
            sliding_window_buffer_samples_timestamp_V_9_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_9_d1_assign_proc : process(sample_period_samples_9_timestamp_V_load_reg_9791, sample_period_samples_9_timestamp_V_load_2_reg_10280, sample_period_samples_9_timestamp_V_load_3_reg_10412, sample_period_samples_9_timestamp_V_load_4_reg_10775, sample_period_samples_9_timestamp_V_load_6_reg_11255, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            sliding_window_buffer_samples_timestamp_V_9_d1 <= sample_period_samples_9_timestamp_V_load_3_reg_10412;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            sliding_window_buffer_samples_timestamp_V_9_d1 <= sample_period_samples_9_timestamp_V_load_6_reg_11255;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            sliding_window_buffer_samples_timestamp_V_9_d1 <= sample_period_samples_9_timestamp_V_load_4_reg_10775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sliding_window_buffer_samples_timestamp_V_9_d1 <= sample_period_samples_9_timestamp_V_load_2_reg_10280;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_9_d1 <= sample_period_samples_9_timestamp_V_load_reg_9791;
        else 
            sliding_window_buffer_samples_timestamp_V_9_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_9_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state80, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_9_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_timestamp_V_9_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sliding_window_buffer_samples_timestamp_V_9_we1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_front_ptr_s_o_assign_proc : process(sliding_window_front_ptr_s_i, trunc_ln61_reg_11427, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_front_ptr_s_o <= trunc_ln61_reg_11427;
        else 
            sliding_window_front_ptr_s_o <= sliding_window_front_ptr_s_i;
        end if; 
    end process;


    sliding_window_front_ptr_s_o_ap_vld_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_front_ptr_s_o_ap_vld <= ap_const_logic_1;
        else 
            sliding_window_front_ptr_s_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln54_1_fu_8084_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_8068_p3) - unsigned(p_shl13_cast_fu_8076_p3));
    sub_ln54_2_fu_8266_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_8250_p3) - unsigned(p_shl11_cast_fu_8258_p3));
    sub_ln54_3_fu_8433_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_8417_p3) - unsigned(p_shl9_cast_fu_8425_p3));
    sub_ln54_4_fu_8520_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_8504_p3) - unsigned(p_shl7_cast_fu_8512_p3));
    sub_ln54_5_fu_8571_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_8555_p3) - unsigned(p_shl5_cast_fu_8563_p3));
    sub_ln54_6_fu_8642_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_8626_p3) - unsigned(p_shl3_cast_fu_8634_p3));
    sub_ln54_7_fu_8693_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_8677_p3) - unsigned(p_shl1_cast_fu_8685_p3));
    sub_ln54_fu_6514_p2 <= std_logic_vector(unsigned(tmp_19_cast_fu_6498_p3) - unsigned(tmp_s_fu_6506_p3));
    sub_ln75_1_fu_6704_p2 <= std_logic_vector(unsigned(p_shl14_cast_fu_6686_p3) - unsigned(p_shl15_cast_fu_6694_p4));
    sub_ln75_2_fu_6782_p2 <= std_logic_vector(unsigned(p_shl26_cast_fu_6764_p3) - unsigned(p_shl27_cast_fu_6772_p4));
    sub_ln75_3_fu_6835_p2 <= std_logic_vector(unsigned(p_shl24_cast_fu_6817_p3) - unsigned(p_shl25_cast_fu_6825_p4));
    sub_ln75_4_fu_6908_p2 <= std_logic_vector(unsigned(p_shl22_cast_fu_6890_p3) - unsigned(p_shl23_cast_fu_6898_p4));
    sub_ln75_5_fu_6961_p2 <= std_logic_vector(unsigned(p_shl20_cast_fu_6943_p3) - unsigned(p_shl21_cast_fu_6951_p4));
    sub_ln75_6_fu_7034_p2 <= std_logic_vector(unsigned(p_shl18_cast_fu_7016_p3) - unsigned(p_shl19_cast_fu_7024_p4));
    sub_ln75_7_fu_7087_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_7069_p3) - unsigned(p_shl17_cast_fu_7077_p4));
    sub_ln75_fu_6634_p2 <= std_logic_vector(unsigned(tmp_31_cast_fu_6614_p3) - unsigned(zext_ln75_1_fu_6630_p1));
    tmp_10_fu_6587_p3 <= (trunc_ln75_fu_6584_p1 & ap_const_lv3_0);
    tmp_11_fu_6622_p3 <= (trunc_ln75_fu_6584_p1 & ap_const_lv5_0);
    tmp_12_fu_6662_p3 <= (ap_const_lv57_0 & or_ln75_11_fu_6656_p2);
    tmp_13_fu_6740_p3 <= (ap_const_lv57_0 & or_ln75_15_fu_6735_p2);
    tmp_14_fu_6793_p3 <= (ap_const_lv57_0 & or_ln75_23_fu_6788_p2);
    tmp_15_fu_6866_p3 <= (ap_const_lv57_0 & or_ln75_27_fu_6861_p2);
    tmp_16_fu_6919_p3 <= (ap_const_lv57_0 & or_ln75_39_fu_6914_p2);
    tmp_17_fu_6992_p3 <= (ap_const_lv57_0 & or_ln75_43_fu_6987_p2);
    tmp_18_fu_7045_p3 <= (ap_const_lv57_0 & or_ln75_51_fu_7040_p2);
    tmp_19_cast_fu_6498_p3 <= (trunc_ln54_fu_6494_p1 & ap_const_lv7_0);
    tmp_31_cast_fu_6614_p3 <= (trunc_ln75_1_fu_6611_p1 & ap_const_lv7_0);
    tmp_3_fu_8044_p3 <= (ap_const_lv56_0 & or_ln54_11_fu_8038_p2);
    tmp_4_fu_8226_p3 <= (ap_const_lv56_0 & or_ln54_15_fu_8221_p2);
    tmp_5_fu_8393_p3 <= (ap_const_lv56_0 & or_ln54_23_fu_8388_p2);
    tmp_6_fu_8480_p3 <= (ap_const_lv56_0 & or_ln54_27_fu_8475_p2);
    tmp_7_fu_8531_p3 <= (ap_const_lv56_0 & or_ln54_39_fu_8526_p2);
    tmp_8_fu_8602_p3 <= (ap_const_lv56_0 & or_ln54_43_fu_8597_p2);
    tmp_9_fu_8653_p3 <= (ap_const_lv56_0 & or_ln54_51_fu_8648_p2);
    tmp_fu_8031_p3 <= (sliding_window_front_ptr_load_reg_11397 & ap_const_lv3_0);
    tmp_s_fu_6506_p1 <= sliding_window_front_ptr_s_i;
    tmp_s_fu_6506_p3 <= (tmp_s_fu_6506_p1 & ap_const_lv5_0);
    trunc_ln54_1_fu_8064_p1 <= or_ln54_11_fu_8038_p2(6 - 1 downto 0);
    trunc_ln54_2_fu_8246_p1 <= or_ln54_15_fu_8221_p2(6 - 1 downto 0);
    trunc_ln54_3_fu_8413_p1 <= or_ln54_23_fu_8388_p2(6 - 1 downto 0);
    trunc_ln54_4_fu_8500_p1 <= or_ln54_27_fu_8475_p2(6 - 1 downto 0);
    trunc_ln54_5_fu_8551_p1 <= or_ln54_39_fu_8526_p2(6 - 1 downto 0);
    trunc_ln54_6_fu_8622_p1 <= or_ln54_43_fu_8597_p2(6 - 1 downto 0);
    trunc_ln54_7_fu_8673_p1 <= or_ln54_51_fu_8648_p2(6 - 1 downto 0);
    trunc_ln54_fu_6494_p0 <= sliding_window_front_ptr_s_i;
    trunc_ln54_fu_6494_p1 <= trunc_ln54_fu_6494_p0(3 - 1 downto 0);
    trunc_ln61_fu_6536_p1 <= grp_fu_6488_p2(5 - 1 downto 0);
    trunc_ln75_1_fu_6611_p1 <= new_front_ptr_reg_11421(3 - 1 downto 0);
    trunc_ln75_2_fu_6682_p1 <= or_ln75_11_fu_6656_p2(6 - 1 downto 0);
    trunc_ln75_3_fu_6760_p1 <= or_ln75_15_fu_6735_p2(6 - 1 downto 0);
    trunc_ln75_4_fu_6813_p1 <= or_ln75_23_fu_6788_p2(6 - 1 downto 0);
    trunc_ln75_5_fu_6886_p1 <= or_ln75_27_fu_6861_p2(6 - 1 downto 0);
    trunc_ln75_6_fu_6939_p1 <= or_ln75_39_fu_6914_p2(6 - 1 downto 0);
    trunc_ln75_7_fu_7012_p1 <= or_ln75_43_fu_6987_p2(6 - 1 downto 0);
    trunc_ln75_8_fu_7065_p1 <= or_ln75_51_fu_7040_p2(6 - 1 downto 0);
    trunc_ln75_fu_6584_p1 <= new_front_ptr_reg_11421(4 - 1 downto 0);
    trunc_ln95_fu_6184_p1 <= ap_phi_mux_i_phi_fu_6153_p4(3 - 1 downto 0);
    zext_ln19_fu_6430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_6161),64));
    zext_ln54_10_fu_8006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_8_fu_8001_p2),64));
    zext_ln54_11_fu_8016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_9_fu_8011_p2),64));
    zext_ln54_12_fu_8026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_10_fu_8021_p2),64));
    zext_ln54_13_fu_8090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln54_1_fu_8084_p2),64));
    zext_ln54_14_fu_8101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_12_fu_8095_p2),64));
    zext_ln54_15_fu_8111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_13_fu_8106_p2),64));
    zext_ln54_16_fu_8121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_14_fu_8116_p2),64));
    zext_ln54_17_fu_8131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_fu_8126_p2),64));
    zext_ln54_18_fu_8141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_fu_8136_p2),64));
    zext_ln54_19_fu_8151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_2_fu_8146_p2),64));
    zext_ln54_1_fu_6520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln54_fu_6514_p2),64));
    zext_ln54_20_fu_8161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_3_fu_8156_p2),64));
    zext_ln54_21_fu_8171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_4_fu_8166_p2),64));
    zext_ln54_22_fu_8181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_5_fu_8176_p2),64));
    zext_ln54_23_fu_8206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_6_fu_8201_p2),64));
    zext_ln54_24_fu_8216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_7_fu_8211_p2),64));
    zext_ln54_25_fu_8272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln54_2_fu_8266_p2),64));
    zext_ln54_26_fu_8283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_16_fu_8277_p2),64));
    zext_ln54_27_fu_8293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_17_fu_8288_p2),64));
    zext_ln54_28_fu_8303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_18_fu_8298_p2),64));
    zext_ln54_29_fu_8313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_19_fu_8308_p2),64));
    zext_ln54_2_fu_6531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_fu_6525_p2),64));
    zext_ln54_30_fu_8323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_20_fu_8318_p2),64));
    zext_ln54_31_fu_8333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_21_fu_8328_p2),64));
    zext_ln54_32_fu_8343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_22_fu_8338_p2),64));
    zext_ln54_33_fu_8353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_8_fu_8348_p2),64));
    zext_ln54_34_fu_8363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_9_fu_8358_p2),64));
    zext_ln54_35_fu_8373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_10_fu_8368_p2),64));
    zext_ln54_36_fu_8383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_11_fu_8378_p2),64));
    zext_ln54_37_fu_8439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln54_3_fu_8433_p2),64));
    zext_ln54_38_fu_8450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_24_fu_8444_p2),64));
    zext_ln54_39_fu_8460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_25_fu_8455_p2),64));
    zext_ln54_3_fu_7936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_1_fu_7931_p2),64));
    zext_ln54_40_fu_8470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_26_fu_8465_p2),64));
    zext_ln54_41_fu_8582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_12_fu_8577_p2),64));
    zext_ln54_42_fu_8592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_13_fu_8587_p2),64));
    zext_ln54_43_fu_8704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_14_fu_8699_p2),64));
    zext_ln54_44_fu_8714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_15_fu_8709_p2),64));
    zext_ln54_45_fu_8724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_16_fu_8719_p2),64));
    zext_ln54_46_fu_8734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_17_fu_8729_p2),64));
    zext_ln54_47_fu_8744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_18_fu_8739_p2),64));
    zext_ln54_48_fu_8754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_19_fu_8749_p2),64));
    zext_ln54_49_fu_8759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln54_4_reg_11633),64));
    zext_ln54_4_fu_7946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_2_fu_7941_p2),64));
    zext_ln54_50_fu_8768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_28_fu_8763_p2),64));
    zext_ln54_51_fu_8778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_29_fu_8773_p2),64));
    zext_ln54_52_fu_8788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_30_fu_8783_p2),64));
    zext_ln54_53_fu_8798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_31_fu_8793_p2),64));
    zext_ln54_54_fu_8808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_32_fu_8803_p2),64));
    zext_ln54_55_fu_8818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_33_fu_8813_p2),64));
    zext_ln54_56_fu_8828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_34_fu_8823_p2),64));
    zext_ln54_57_fu_8838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_35_fu_8833_p2),64));
    zext_ln54_58_fu_8848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_36_fu_8843_p2),64));
    zext_ln54_59_fu_8858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_37_fu_8853_p2),64));
    zext_ln54_5_fu_7956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_3_fu_7951_p2),64));
    zext_ln54_60_fu_8868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_38_fu_8863_p2),64));
    zext_ln54_61_fu_8873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln54_5_reg_11649),64));
    zext_ln54_62_fu_8882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_40_fu_8877_p2),64));
    zext_ln54_63_fu_8892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_41_fu_8887_p2),64));
    zext_ln54_64_fu_8902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_42_fu_8897_p2),64));
    zext_ln54_65_fu_8912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_20_fu_8907_p2),64));
    zext_ln54_66_fu_8922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_21_fu_8917_p2),64));
    zext_ln54_67_fu_8932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_22_fu_8927_p2),64));
    zext_ln54_68_fu_8942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_23_fu_8937_p2),64));
    zext_ln54_69_fu_8952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_24_fu_8947_p2),64));
    zext_ln54_6_fu_7966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_4_fu_7961_p2),64));
    zext_ln54_70_fu_8962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_25_fu_8957_p2),64));
    zext_ln54_71_fu_8972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_26_fu_8967_p2),64));
    zext_ln54_72_fu_8982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_27_fu_8977_p2),64));
    zext_ln54_73_fu_8987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln54_6_reg_11665),64));
    zext_ln54_74_fu_8996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_44_fu_8991_p2),64));
    zext_ln54_75_fu_9006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_45_fu_9001_p2),64));
    zext_ln54_76_fu_9016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_46_fu_9011_p2),64));
    zext_ln54_77_fu_9026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_47_fu_9021_p2),64));
    zext_ln54_78_fu_9036_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_48_fu_9031_p2),64));
    zext_ln54_79_fu_9046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_49_fu_9041_p2),64));
    zext_ln54_7_fu_7976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_5_fu_7971_p2),64));
    zext_ln54_80_fu_9056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_50_fu_9051_p2),64));
    zext_ln54_81_fu_9066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_28_fu_9061_p2),64));
    zext_ln54_82_fu_9076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_29_fu_9071_p2),64));
    zext_ln54_83_fu_9086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_30_fu_9081_p2),64));
    zext_ln54_84_fu_9096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_31_fu_9091_p2),64));
    zext_ln54_85_fu_9101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln54_7_reg_11681),64));
    zext_ln54_86_fu_9110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_52_fu_9105_p2),64));
    zext_ln54_87_fu_9120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_53_fu_9115_p2),64));
    zext_ln54_88_fu_9130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_54_fu_9125_p2),64));
    zext_ln54_89_fu_9140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_32_fu_9135_p2),64));
    zext_ln54_8_fu_7986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_6_fu_7981_p2),64));
    zext_ln54_90_fu_9150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_33_fu_9145_p2),64));
    zext_ln54_91_fu_9160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_34_fu_9155_p2),64));
    zext_ln54_92_fu_9170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_35_fu_9165_p2),64));
    zext_ln54_93_fu_9180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_36_fu_9175_p2),64));
    zext_ln54_94_fu_9190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_37_fu_9185_p2),64));
    zext_ln54_95_fu_9200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_38_fu_9195_p2),64));
    zext_ln54_96_fu_9210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_39_fu_9205_p2),64));
    zext_ln54_9_fu_7996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_7_fu_7991_p2),64));
    zext_ln54_fu_8186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_11580),64));
    zext_ln75_10_fu_7098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_7_fu_7093_p2),64));
    zext_ln75_11_fu_7108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_8_fu_7103_p2),64));
    zext_ln75_12_fu_7118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_9_fu_7113_p2),64));
    zext_ln75_13_fu_7128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_10_fu_7123_p2),64));
    zext_ln75_14_fu_7133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln75_1_reg_11468),64));
    zext_ln75_15_fu_7142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_12_fu_7137_p2),64));
    zext_ln75_16_fu_7152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_13_fu_7147_p2),64));
    zext_ln75_17_fu_7162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_14_fu_7157_p2),64));
    zext_ln75_18_fu_7172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_7167_p2),64));
    zext_ln75_19_fu_7182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_fu_7177_p2),64));
    zext_ln75_1_fu_6630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_6622_p3),10));
    zext_ln75_20_fu_7192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_2_fu_7187_p2),64));
    zext_ln75_21_fu_7202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_3_fu_7197_p2),64));
    zext_ln75_22_fu_7212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_4_fu_7207_p2),64));
    zext_ln75_23_fu_7222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_5_fu_7217_p2),64));
    zext_ln75_24_fu_7232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_6_fu_7227_p2),64));
    zext_ln75_25_fu_7242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_7_fu_7237_p2),64));
    zext_ln75_26_fu_7247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln75_2_reg_11484),64));
    zext_ln75_27_fu_7256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_16_fu_7251_p2),64));
    zext_ln75_28_fu_7266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_17_fu_7261_p2),64));
    zext_ln75_29_fu_7276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_18_fu_7271_p2),64));
    zext_ln75_2_fu_6640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln75_fu_6634_p2),64));
    zext_ln75_30_fu_7286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_19_fu_7281_p2),64));
    zext_ln75_31_fu_7296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_20_fu_7291_p2),64));
    zext_ln75_32_fu_7306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_21_fu_7301_p2),64));
    zext_ln75_33_fu_7316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_22_fu_7311_p2),64));
    zext_ln75_34_fu_7326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_8_fu_7321_p2),64));
    zext_ln75_35_fu_7336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_9_fu_7331_p2),64));
    zext_ln75_36_fu_7346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_10_fu_7341_p2),64));
    zext_ln75_37_fu_7356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_11_fu_7351_p2),64));
    zext_ln75_38_fu_7361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln75_3_reg_11500),64));
    zext_ln75_39_fu_7370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_24_fu_7365_p2),64));
    zext_ln75_3_fu_6651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_fu_6645_p2),64));
    zext_ln75_40_fu_7380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_25_fu_7375_p2),64));
    zext_ln75_41_fu_7390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_26_fu_7385_p2),64));
    zext_ln75_42_fu_7400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_12_fu_7395_p2),64));
    zext_ln75_43_fu_7410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_13_fu_7405_p2),64));
    zext_ln75_44_fu_7420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_14_fu_7415_p2),64));
    zext_ln75_45_fu_7430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_15_fu_7425_p2),64));
    zext_ln75_46_fu_7440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_16_fu_7435_p2),64));
    zext_ln75_47_fu_7450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_17_fu_7445_p2),64));
    zext_ln75_48_fu_7460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_18_fu_7455_p2),64));
    zext_ln75_49_fu_7470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_19_fu_7465_p2),64));
    zext_ln75_4_fu_6720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_1_fu_6715_p2),64));
    zext_ln75_50_fu_7475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln75_4_reg_11516),64));
    zext_ln75_51_fu_7484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_28_fu_7479_p2),64));
    zext_ln75_52_fu_7494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_29_fu_7489_p2),64));
    zext_ln75_53_fu_7504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_30_fu_7499_p2),64));
    zext_ln75_54_fu_7514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_31_fu_7509_p2),64));
    zext_ln75_55_fu_7524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_32_fu_7519_p2),64));
    zext_ln75_56_fu_7534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_33_fu_7529_p2),64));
    zext_ln75_57_fu_7544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_34_fu_7539_p2),64));
    zext_ln75_58_fu_7554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_35_fu_7549_p2),64));
    zext_ln75_59_fu_7564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_36_fu_7559_p2),64));
    zext_ln75_5_fu_6730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_2_fu_6725_p2),64));
    zext_ln75_60_fu_7574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_37_fu_7569_p2),64));
    zext_ln75_61_fu_7584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_38_fu_7579_p2),64));
    zext_ln75_62_fu_7589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln75_5_reg_11532),64));
    zext_ln75_63_fu_7598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_40_fu_7593_p2),64));
    zext_ln75_64_fu_7608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_41_fu_7603_p2),64));
    zext_ln75_65_fu_7618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_42_fu_7613_p2),64));
    zext_ln75_66_fu_7628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_20_fu_7623_p2),64));
    zext_ln75_67_fu_7638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_21_fu_7633_p2),64));
    zext_ln75_68_fu_7648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_22_fu_7643_p2),64));
    zext_ln75_69_fu_7658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_23_fu_7653_p2),64));
    zext_ln75_6_fu_6846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_3_fu_6841_p2),64));
    zext_ln75_70_fu_7668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_24_fu_7663_p2),64));
    zext_ln75_71_fu_7678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_25_fu_7673_p2),64));
    zext_ln75_72_fu_7688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_26_fu_7683_p2),64));
    zext_ln75_73_fu_7698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_27_fu_7693_p2),64));
    zext_ln75_74_fu_7703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln75_6_reg_11548),64));
    zext_ln75_75_fu_7712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_44_fu_7707_p2),64));
    zext_ln75_76_fu_7722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_45_fu_7717_p2),64));
    zext_ln75_77_fu_7732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_46_fu_7727_p2),64));
    zext_ln75_78_fu_7742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_47_fu_7737_p2),64));
    zext_ln75_79_fu_7752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_48_fu_7747_p2),64));
    zext_ln75_7_fu_6856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_4_fu_6851_p2),64));
    zext_ln75_80_fu_7762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_49_fu_7757_p2),64));
    zext_ln75_81_fu_7772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_50_fu_7767_p2),64));
    zext_ln75_82_fu_7782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_28_fu_7777_p2),64));
    zext_ln75_83_fu_7792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_29_fu_7787_p2),64));
    zext_ln75_84_fu_7802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_30_fu_7797_p2),64));
    zext_ln75_85_fu_7812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_31_fu_7807_p2),64));
    zext_ln75_86_fu_7817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln75_7_reg_11564),64));
    zext_ln75_87_fu_7826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_52_fu_7821_p2),64));
    zext_ln75_88_fu_7836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_53_fu_7831_p2),64));
    zext_ln75_89_fu_7846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_54_fu_7841_p2),64));
    zext_ln75_8_fu_6972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_5_fu_6967_p2),64));
    zext_ln75_90_fu_7856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_32_fu_7851_p2),64));
    zext_ln75_91_fu_7866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_33_fu_7861_p2),64));
    zext_ln75_92_fu_7876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_34_fu_7871_p2),64));
    zext_ln75_93_fu_7886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_35_fu_7881_p2),64));
    zext_ln75_94_fu_7896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_36_fu_7891_p2),64));
    zext_ln75_95_fu_7906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_37_fu_7901_p2),64));
    zext_ln75_96_fu_7916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_38_fu_7911_p2),64));
    zext_ln75_97_fu_7926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_39_fu_7921_p2),64));
    zext_ln75_9_fu_6982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_6_fu_6977_p2),64));
    zext_ln75_fu_6595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_6587_p3),64));
    zext_ln95_fu_6188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln95_fu_6184_p1),64));
end behav;
