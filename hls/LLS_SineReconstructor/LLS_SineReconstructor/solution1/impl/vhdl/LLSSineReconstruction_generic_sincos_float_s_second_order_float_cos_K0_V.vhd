-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K0_V_rom is 
    generic(
             DWIDTH     : integer := 28; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K0_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000000000000", 1 => "0000000000000010011101111010", 
    2 => "0000000000001001110111101001", 3 => "0000000000010110001101001100", 
    4 => "0000000000100111011110011111", 5 => "0000000000111101101011100010", 
    6 => "0000000001011000110100010000", 7 => "0000000001111000111000100101", 
    8 => "0000000010011101111000011100", 9 => "0000000011000111110011110000", 
    10 => "0000000011110110101010011010", 11 => "0000000100101010011100010011", 
    12 => "0000000101100011001001010011", 13 => "0000000110100000110001010001", 
    14 => "0000000111100011010100000011", 15 => "0000001000101010110001100000", 
    16 => "0000001001110111001001011100", 17 => "0000001011001000011011101100", 
    18 => "0000001100011110101000000010", 19 => "0000001101111001101110010011", 
    20 => "0000001111011001101110001111", 21 => "0000010000111110100111101000", 
    22 => "0000010010101000011010001110", 23 => "0000010100010111000101110010", 
    24 => "0000010110001010101010000001", 25 => "0000011000000011000110101010", 
    26 => "0000011010000000011011011011", 27 => "0000011100000010101000000000", 
    28 => "0000011110001001101100000101", 29 => "0000100000010101100111010110", 
    30 => "0000100010100110011001011100", 31 => "0000100100111100000010000010", 
    32 => "0000100111010110100000110000", 33 => "0000101001110101110101001110", 
    34 => "0000101100011001111111000101", 35 => "0000101111000010111101111010", 
    36 => "0000110001110000110001010011", 37 => "0000110100100011011000110111", 
    38 => "0000110111011010110100001000", 39 => "0000111010010111000010101100", 
    40 => "0000111101011000000100000100", 41 => "0001000000011101110111110100", 
    42 => "0001000011101000011101011100", 43 => "0001000110110111110100011101", 
    44 => "0001001010001011111100011000", 45 => "0001001101100100110100101100", 
    46 => "0001010001000010011100110111", 47 => "0001010100100100110100010111", 
    48 => "0001011000001011111010101001", 49 => "0001011011110111101111001010", 
    50 => "0001011111101000010001010101", 51 => "0001100011011101100000100100", 
    52 => "0001100111010111011100010100", 53 => "0001101011010110000011111011", 
    54 => "0001101111011001010110110101", 55 => "0001110011100001010100010111", 
    56 => "0001110111101101111011111011", 57 => "0001111011111111001100110110", 
    58 => "0010000000010101000110011110", 59 => "0010000100101111101000001000", 
    60 => "0010001001001110110001001001", 61 => "0010001101110010100000110101", 
    62 => "0010010010011010110110011110", 63 => "0010010111000111110001010110", 
    64 => "0010011011111001010000110001", 65 => "0010100000101111010011111101", 
    66 => "0010100101101001111010001100", 67 => "0010101010101001000010101101", 
    68 => "0010101111101100101100101110", 69 => "0010110100110100110111011111", 
    70 => "0010111010000001100010001011", 71 => "0010111111010010101100000001", 
    72 => "0011000100101000010100001011", 73 => "0011001010000010011001110110", 
    74 => "0011001111100000111100001100", 75 => "0011010101000011111010010110", 
    76 => "0011011010101011010011011111", 77 => "0011100000010111000110101110", 
    78 => "0011100110000111010011001011", 79 => "0011101011111011110111111111", 
    80 => "0011110001110100110100001110", 81 => "0011110111110010000111000000", 
    82 => "0011111101110011101111011001", 83 => "0100000011111001101100011110", 
    84 => "0100001010000011111101010011", 85 => "0100010000010010100000111011", 
    86 => "0100010110100101010110011000", 87 => "0100011100111100011100101101", 
    88 => "0100100011010111110010111011", 89 => "0100101001110111011000000001", 
    90 => "0100110000011011001011000001", 91 => "0100110111000011001010111001", 
    92 => "0100111101101111010110101000", 93 => "0101000100011111101101001011", 
    94 => "0101001011010100001101100010", 95 => "0101010010001100110110100111", 
    96 => "0101011001001001100111010111", 97 => "0101100000001010011110101101", 
    98 => "0101100111001111011011100101", 99 => "0101101110011000011100111000", 
    100 => "0101110101100101100001011111", 101 => "0101111100110110101000010101", 
    102 => "0110000100001011110000010000", 103 => "0110001011100100111000001010", 
    104 => "0110010011000001111110111000", 105 => "0110011010100011000011010001", 
    106 => "0110100010001000000100001011", 107 => "0110101001110001000000011011", 
    108 => "0110110001011101110110110110", 109 => "0110111001001110100110010000", 
    110 => "0111000001000011001101011100", 111 => "0111001000111011101011001101", 
    112 => "0111010000110111111110010101", 113 => "0111011000111000000101100101", 
    114 => "0111100000111011111111110000", 115 => "0111101001000011101011100101", 
    116 => "0111110001001111000111110100", 117 => "0111111001011110010011001100", 
    118 => "1000000001110001001100011100", 119 => "1000001010000111110010010011", 
    120 => "1000010010100010000011011101", 121 => "1000011010111111111110101000", 
    122 => "1000100011100001100010100001", 123 => "1000101100000110101101110010", 
    124 => "1000110100101111011111001000", 125 => "1000111101011011110101001100", 
    126 => "1001000110001011101110101011", 127 => "1001001110111111001010001100" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K0_V is
    generic (
        DataWidth : INTEGER := 28;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K0_V is
    component LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K0_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K0_V_rom_U :  component LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K0_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


