-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_update_AV is
port (
    matA_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_0_ce0 : OUT STD_LOGIC;
    matA_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    matA_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    matA_0_we0 : OUT STD_LOGIC;
    matA_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_0_ce1 : OUT STD_LOGIC;
    matA_0_d1 : OUT STD_LOGIC_VECTOR (59 downto 0);
    matA_0_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    matA_0_we1 : OUT STD_LOGIC;
    matV_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    matV_0_ce0 : OUT STD_LOGIC;
    matV_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    matV_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    matV_0_we0 : OUT STD_LOGIC;
    matV_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    matV_0_ce1 : OUT STD_LOGIC;
    matV_0_d1 : OUT STD_LOGIC_VECTOR (59 downto 0);
    matV_0_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    matV_0_we1 : OUT STD_LOGIC;
    A_i_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_0_ce0 : OUT STD_LOGIC;
    A_i_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    A_i_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    A_i_0_we0 : OUT STD_LOGIC;
    A_i_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_0_ce1 : OUT STD_LOGIC;
    A_i_0_d1 : OUT STD_LOGIC_VECTOR (59 downto 0);
    A_i_0_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    A_i_0_we1 : OUT STD_LOGIC;
    A_j_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_0_ce0 : OUT STD_LOGIC;
    A_j_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    A_j_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    A_j_0_we0 : OUT STD_LOGIC;
    A_j_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_0_ce1 : OUT STD_LOGIC;
    A_j_0_d1 : OUT STD_LOGIC_VECTOR (59 downto 0);
    A_j_0_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    A_j_0_we1 : OUT STD_LOGIC;
    V_i_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    V_i_0_ce0 : OUT STD_LOGIC;
    V_i_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    V_i_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    V_i_0_we0 : OUT STD_LOGIC;
    V_i_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    V_i_0_ce1 : OUT STD_LOGIC;
    V_i_0_d1 : OUT STD_LOGIC_VECTOR (59 downto 0);
    V_i_0_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    V_i_0_we1 : OUT STD_LOGIC;
    V_j_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    V_j_0_ce0 : OUT STD_LOGIC;
    V_j_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    V_j_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    V_j_0_we0 : OUT STD_LOGIC;
    V_j_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    V_j_0_ce1 : OUT STD_LOGIC;
    V_j_0_d1 : OUT STD_LOGIC_VECTOR (59 downto 0);
    V_j_0_q1 : IN STD_LOGIC_VECTOR (59 downto 0);
    V_j_0_we1 : OUT STD_LOGIC;
    col_i : IN STD_LOGIC_VECTOR (1 downto 0);
    col_j : IN STD_LOGIC_VECTOR (1 downto 0);
    s : IN STD_LOGIC_VECTOR (59 downto 0);
    c : IN STD_LOGIC_VECTOR (59 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    col_i_ap_vld : IN STD_LOGIC;
    col_j_ap_vld : IN STD_LOGIC;
    s_ap_vld : IN STD_LOGIC;
    c_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of LLSSineReconstruction_update_AV is 
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal update_AV_entry516_U0_ap_start : STD_LOGIC;
    signal update_AV_entry516_U0_ap_done : STD_LOGIC;
    signal update_AV_entry516_U0_ap_continue : STD_LOGIC;
    signal update_AV_entry516_U0_ap_idle : STD_LOGIC;
    signal update_AV_entry516_U0_ap_ready : STD_LOGIC;
    signal update_AV_entry516_U0_col_i_out_din : STD_LOGIC_VECTOR (1 downto 0);
    signal update_AV_entry516_U0_col_i_out_write : STD_LOGIC;
    signal update_AV_entry516_U0_col_i_out1_din : STD_LOGIC_VECTOR (1 downto 0);
    signal update_AV_entry516_U0_col_i_out1_write : STD_LOGIC;
    signal update_AV_entry516_U0_col_j_out_din : STD_LOGIC_VECTOR (1 downto 0);
    signal update_AV_entry516_U0_col_j_out_write : STD_LOGIC;
    signal update_AV_entry516_U0_col_j_out2_din : STD_LOGIC_VECTOR (1 downto 0);
    signal update_AV_entry516_U0_col_j_out2_write : STD_LOGIC;
    signal update_AV_entry516_U0_s_out_din : STD_LOGIC_VECTOR (59 downto 0);
    signal update_AV_entry516_U0_s_out_write : STD_LOGIC;
    signal update_AV_entry516_U0_s_out3_din : STD_LOGIC_VECTOR (59 downto 0);
    signal update_AV_entry516_U0_s_out3_write : STD_LOGIC;
    signal update_AV_entry516_U0_c_out_din : STD_LOGIC_VECTOR (59 downto 0);
    signal update_AV_entry516_U0_c_out_write : STD_LOGIC;
    signal update_AV_entry516_U0_c_out4_din : STD_LOGIC_VECTOR (59 downto 0);
    signal update_AV_entry516_U0_c_out4_write : STD_LOGIC;
    signal update_A_U0_ap_start : STD_LOGIC;
    signal update_A_U0_ap_done : STD_LOGIC;
    signal update_A_U0_ap_continue : STD_LOGIC;
    signal update_A_U0_ap_idle : STD_LOGIC;
    signal update_A_U0_ap_ready : STD_LOGIC;
    signal update_A_U0_matA_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal update_A_U0_matA_0_ce0 : STD_LOGIC;
    signal update_A_U0_matA_0_we0 : STD_LOGIC;
    signal update_A_U0_matA_0_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal update_A_U0_A_i_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal update_A_U0_A_i_0_ce0 : STD_LOGIC;
    signal update_A_U0_A_j_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal update_A_U0_A_j_0_ce0 : STD_LOGIC;
    signal update_A_U0_col_i_read : STD_LOGIC;
    signal update_A_U0_col_j_read : STD_LOGIC;
    signal update_A_U0_s_read : STD_LOGIC;
    signal update_A_U0_c_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal update_V_U0_ap_start : STD_LOGIC;
    signal update_V_U0_ap_done : STD_LOGIC;
    signal update_V_U0_ap_continue : STD_LOGIC;
    signal update_V_U0_ap_idle : STD_LOGIC;
    signal update_V_U0_ap_ready : STD_LOGIC;
    signal update_V_U0_matV_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal update_V_U0_matV_0_ce0 : STD_LOGIC;
    signal update_V_U0_matV_0_we0 : STD_LOGIC;
    signal update_V_U0_matV_0_d0 : STD_LOGIC_VECTOR (59 downto 0);
    signal update_V_U0_V_i_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal update_V_U0_V_i_0_ce0 : STD_LOGIC;
    signal update_V_U0_V_j_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal update_V_U0_V_j_0_ce0 : STD_LOGIC;
    signal update_V_U0_col_i_read : STD_LOGIC;
    signal update_V_U0_col_j_read : STD_LOGIC;
    signal update_V_U0_s_read : STD_LOGIC;
    signal update_V_U0_c_read : STD_LOGIC;
    signal col_i_c_full_n : STD_LOGIC;
    signal col_i_c_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i_c_empty_n : STD_LOGIC;
    signal col_i_c9_full_n : STD_LOGIC;
    signal col_i_c9_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i_c9_empty_n : STD_LOGIC;
    signal col_j_c_full_n : STD_LOGIC;
    signal col_j_c_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal col_j_c_empty_n : STD_LOGIC;
    signal col_j_c10_full_n : STD_LOGIC;
    signal col_j_c10_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal col_j_c10_empty_n : STD_LOGIC;
    signal s_c_full_n : STD_LOGIC;
    signal s_c_dout : STD_LOGIC_VECTOR (59 downto 0);
    signal s_c_empty_n : STD_LOGIC;
    signal s_c11_full_n : STD_LOGIC;
    signal s_c11_dout : STD_LOGIC_VECTOR (59 downto 0);
    signal s_c11_empty_n : STD_LOGIC;
    signal c_c_full_n : STD_LOGIC;
    signal c_c_dout : STD_LOGIC_VECTOR (59 downto 0);
    signal c_c_empty_n : STD_LOGIC;
    signal c_c12_full_n : STD_LOGIC;
    signal c_c12_dout : STD_LOGIC_VECTOR (59 downto 0);
    signal c_c12_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_update_AV_entry516_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_update_AV_entry516_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_update_A_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_update_A_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_update_V_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_update_V_U0_ap_ready : STD_LOGIC;
    signal update_AV_entry516_U0_start_full_n : STD_LOGIC;
    signal update_AV_entry516_U0_start_write : STD_LOGIC;
    signal update_A_U0_start_full_n : STD_LOGIC;
    signal update_A_U0_start_write : STD_LOGIC;
    signal update_V_U0_start_full_n : STD_LOGIC;
    signal update_V_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_update_AV_entry516 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        col_i : IN STD_LOGIC_VECTOR (1 downto 0);
        col_j : IN STD_LOGIC_VECTOR (1 downto 0);
        s : IN STD_LOGIC_VECTOR (59 downto 0);
        c : IN STD_LOGIC_VECTOR (59 downto 0);
        col_i_out_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        col_i_out_full_n : IN STD_LOGIC;
        col_i_out_write : OUT STD_LOGIC;
        col_i_out1_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        col_i_out1_full_n : IN STD_LOGIC;
        col_i_out1_write : OUT STD_LOGIC;
        col_j_out_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        col_j_out_full_n : IN STD_LOGIC;
        col_j_out_write : OUT STD_LOGIC;
        col_j_out2_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        col_j_out2_full_n : IN STD_LOGIC;
        col_j_out2_write : OUT STD_LOGIC;
        s_out_din : OUT STD_LOGIC_VECTOR (59 downto 0);
        s_out_full_n : IN STD_LOGIC;
        s_out_write : OUT STD_LOGIC;
        s_out3_din : OUT STD_LOGIC_VECTOR (59 downto 0);
        s_out3_full_n : IN STD_LOGIC;
        s_out3_write : OUT STD_LOGIC;
        c_out_din : OUT STD_LOGIC_VECTOR (59 downto 0);
        c_out_full_n : IN STD_LOGIC;
        c_out_write : OUT STD_LOGIC;
        c_out4_din : OUT STD_LOGIC_VECTOR (59 downto 0);
        c_out4_full_n : IN STD_LOGIC;
        c_out4_write : OUT STD_LOGIC );
    end component;


    component LLSSineReconstruction_update_A IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        matA_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_0_ce0 : OUT STD_LOGIC;
        matA_0_we0 : OUT STD_LOGIC;
        matA_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
        A_i_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_0_ce0 : OUT STD_LOGIC;
        A_i_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
        A_j_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_0_ce0 : OUT STD_LOGIC;
        A_j_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
        col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        col_i_empty_n : IN STD_LOGIC;
        col_i_read : OUT STD_LOGIC;
        col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        col_j_empty_n : IN STD_LOGIC;
        col_j_read : OUT STD_LOGIC;
        s_dout : IN STD_LOGIC_VECTOR (59 downto 0);
        s_empty_n : IN STD_LOGIC;
        s_read : OUT STD_LOGIC;
        c_dout : IN STD_LOGIC_VECTOR (59 downto 0);
        c_empty_n : IN STD_LOGIC;
        c_read : OUT STD_LOGIC );
    end component;


    component LLSSineReconstruction_update_V IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        matV_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        matV_0_ce0 : OUT STD_LOGIC;
        matV_0_we0 : OUT STD_LOGIC;
        matV_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
        V_i_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        V_i_0_ce0 : OUT STD_LOGIC;
        V_i_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
        V_j_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        V_j_0_ce0 : OUT STD_LOGIC;
        V_j_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
        col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        col_i_empty_n : IN STD_LOGIC;
        col_i_read : OUT STD_LOGIC;
        col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        col_j_empty_n : IN STD_LOGIC;
        col_j_read : OUT STD_LOGIC;
        s_dout : IN STD_LOGIC_VECTOR (59 downto 0);
        s_empty_n : IN STD_LOGIC;
        s_read : OUT STD_LOGIC;
        c_dout : IN STD_LOGIC_VECTOR (59 downto 0);
        c_empty_n : IN STD_LOGIC;
        c_read : OUT STD_LOGIC );
    end component;


    component LLSSineReconstruction_fifo_w2_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LLSSineReconstruction_fifo_w60_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (59 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (59 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    update_AV_entry516_U0 : component LLSSineReconstruction_update_AV_entry516
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => update_AV_entry516_U0_ap_start,
        ap_done => update_AV_entry516_U0_ap_done,
        ap_continue => update_AV_entry516_U0_ap_continue,
        ap_idle => update_AV_entry516_U0_ap_idle,
        ap_ready => update_AV_entry516_U0_ap_ready,
        col_i => col_i,
        col_j => col_j,
        s => s,
        c => c,
        col_i_out_din => update_AV_entry516_U0_col_i_out_din,
        col_i_out_full_n => col_i_c_full_n,
        col_i_out_write => update_AV_entry516_U0_col_i_out_write,
        col_i_out1_din => update_AV_entry516_U0_col_i_out1_din,
        col_i_out1_full_n => col_i_c9_full_n,
        col_i_out1_write => update_AV_entry516_U0_col_i_out1_write,
        col_j_out_din => update_AV_entry516_U0_col_j_out_din,
        col_j_out_full_n => col_j_c_full_n,
        col_j_out_write => update_AV_entry516_U0_col_j_out_write,
        col_j_out2_din => update_AV_entry516_U0_col_j_out2_din,
        col_j_out2_full_n => col_j_c10_full_n,
        col_j_out2_write => update_AV_entry516_U0_col_j_out2_write,
        s_out_din => update_AV_entry516_U0_s_out_din,
        s_out_full_n => s_c_full_n,
        s_out_write => update_AV_entry516_U0_s_out_write,
        s_out3_din => update_AV_entry516_U0_s_out3_din,
        s_out3_full_n => s_c11_full_n,
        s_out3_write => update_AV_entry516_U0_s_out3_write,
        c_out_din => update_AV_entry516_U0_c_out_din,
        c_out_full_n => c_c_full_n,
        c_out_write => update_AV_entry516_U0_c_out_write,
        c_out4_din => update_AV_entry516_U0_c_out4_din,
        c_out4_full_n => c_c12_full_n,
        c_out4_write => update_AV_entry516_U0_c_out4_write);

    update_A_U0 : component LLSSineReconstruction_update_A
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => update_A_U0_ap_start,
        ap_done => update_A_U0_ap_done,
        ap_continue => update_A_U0_ap_continue,
        ap_idle => update_A_U0_ap_idle,
        ap_ready => update_A_U0_ap_ready,
        matA_0_address0 => update_A_U0_matA_0_address0,
        matA_0_ce0 => update_A_U0_matA_0_ce0,
        matA_0_we0 => update_A_U0_matA_0_we0,
        matA_0_d0 => update_A_U0_matA_0_d0,
        A_i_0_address0 => update_A_U0_A_i_0_address0,
        A_i_0_ce0 => update_A_U0_A_i_0_ce0,
        A_i_0_q0 => A_i_0_q0,
        A_j_0_address0 => update_A_U0_A_j_0_address0,
        A_j_0_ce0 => update_A_U0_A_j_0_ce0,
        A_j_0_q0 => A_j_0_q0,
        col_i_dout => col_i_c_dout,
        col_i_empty_n => col_i_c_empty_n,
        col_i_read => update_A_U0_col_i_read,
        col_j_dout => col_j_c_dout,
        col_j_empty_n => col_j_c_empty_n,
        col_j_read => update_A_U0_col_j_read,
        s_dout => s_c_dout,
        s_empty_n => s_c_empty_n,
        s_read => update_A_U0_s_read,
        c_dout => c_c_dout,
        c_empty_n => c_c_empty_n,
        c_read => update_A_U0_c_read);

    update_V_U0 : component LLSSineReconstruction_update_V
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => update_V_U0_ap_start,
        ap_done => update_V_U0_ap_done,
        ap_continue => update_V_U0_ap_continue,
        ap_idle => update_V_U0_ap_idle,
        ap_ready => update_V_U0_ap_ready,
        matV_0_address0 => update_V_U0_matV_0_address0,
        matV_0_ce0 => update_V_U0_matV_0_ce0,
        matV_0_we0 => update_V_U0_matV_0_we0,
        matV_0_d0 => update_V_U0_matV_0_d0,
        V_i_0_address0 => update_V_U0_V_i_0_address0,
        V_i_0_ce0 => update_V_U0_V_i_0_ce0,
        V_i_0_q0 => V_i_0_q0,
        V_j_0_address0 => update_V_U0_V_j_0_address0,
        V_j_0_ce0 => update_V_U0_V_j_0_ce0,
        V_j_0_q0 => V_j_0_q0,
        col_i_dout => col_i_c9_dout,
        col_i_empty_n => col_i_c9_empty_n,
        col_i_read => update_V_U0_col_i_read,
        col_j_dout => col_j_c10_dout,
        col_j_empty_n => col_j_c10_empty_n,
        col_j_read => update_V_U0_col_j_read,
        s_dout => s_c11_dout,
        s_empty_n => s_c11_empty_n,
        s_read => update_V_U0_s_read,
        c_dout => c_c12_dout,
        c_empty_n => c_c12_empty_n,
        c_read => update_V_U0_c_read);

    col_i_c_U : component LLSSineReconstruction_fifo_w2_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => update_AV_entry516_U0_col_i_out_din,
        if_full_n => col_i_c_full_n,
        if_write => update_AV_entry516_U0_col_i_out_write,
        if_dout => col_i_c_dout,
        if_empty_n => col_i_c_empty_n,
        if_read => update_A_U0_col_i_read);

    col_i_c9_U : component LLSSineReconstruction_fifo_w2_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => update_AV_entry516_U0_col_i_out1_din,
        if_full_n => col_i_c9_full_n,
        if_write => update_AV_entry516_U0_col_i_out1_write,
        if_dout => col_i_c9_dout,
        if_empty_n => col_i_c9_empty_n,
        if_read => update_V_U0_col_i_read);

    col_j_c_U : component LLSSineReconstruction_fifo_w2_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => update_AV_entry516_U0_col_j_out_din,
        if_full_n => col_j_c_full_n,
        if_write => update_AV_entry516_U0_col_j_out_write,
        if_dout => col_j_c_dout,
        if_empty_n => col_j_c_empty_n,
        if_read => update_A_U0_col_j_read);

    col_j_c10_U : component LLSSineReconstruction_fifo_w2_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => update_AV_entry516_U0_col_j_out2_din,
        if_full_n => col_j_c10_full_n,
        if_write => update_AV_entry516_U0_col_j_out2_write,
        if_dout => col_j_c10_dout,
        if_empty_n => col_j_c10_empty_n,
        if_read => update_V_U0_col_j_read);

    s_c_U : component LLSSineReconstruction_fifo_w60_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => update_AV_entry516_U0_s_out_din,
        if_full_n => s_c_full_n,
        if_write => update_AV_entry516_U0_s_out_write,
        if_dout => s_c_dout,
        if_empty_n => s_c_empty_n,
        if_read => update_A_U0_s_read);

    s_c11_U : component LLSSineReconstruction_fifo_w60_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => update_AV_entry516_U0_s_out3_din,
        if_full_n => s_c11_full_n,
        if_write => update_AV_entry516_U0_s_out3_write,
        if_dout => s_c11_dout,
        if_empty_n => s_c11_empty_n,
        if_read => update_V_U0_s_read);

    c_c_U : component LLSSineReconstruction_fifo_w60_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => update_AV_entry516_U0_c_out_din,
        if_full_n => c_c_full_n,
        if_write => update_AV_entry516_U0_c_out_write,
        if_dout => c_c_dout,
        if_empty_n => c_c_empty_n,
        if_read => update_A_U0_c_read);

    c_c12_U : component LLSSineReconstruction_fifo_w60_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => update_AV_entry516_U0_c_out4_din,
        if_full_n => c_c12_full_n,
        if_write => update_AV_entry516_U0_c_out4_write,
        if_dout => c_c12_dout,
        if_empty_n => c_c12_empty_n,
        if_read => update_V_U0_c_read);





    ap_sync_reg_update_AV_entry516_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_update_AV_entry516_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_update_AV_entry516_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_update_AV_entry516_U0_ap_ready <= ap_sync_update_AV_entry516_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_update_A_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_update_A_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_update_A_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_update_A_U0_ap_ready <= ap_sync_update_A_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_update_V_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_update_V_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_update_V_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_update_V_U0_ap_ready <= ap_sync_update_V_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    A_i_0_address0 <= update_A_U0_A_i_0_address0;
    A_i_0_address1 <= ap_const_lv7_0;
    A_i_0_ce0 <= update_A_U0_A_i_0_ce0;
    A_i_0_ce1 <= ap_const_logic_0;
    A_i_0_d0 <= ap_const_lv60_0;
    A_i_0_d1 <= ap_const_lv60_0;
    A_i_0_we0 <= ap_const_logic_0;
    A_i_0_we1 <= ap_const_logic_0;
    A_j_0_address0 <= update_A_U0_A_j_0_address0;
    A_j_0_address1 <= ap_const_lv7_0;
    A_j_0_ce0 <= update_A_U0_A_j_0_ce0;
    A_j_0_ce1 <= ap_const_logic_0;
    A_j_0_d0 <= ap_const_lv60_0;
    A_j_0_d1 <= ap_const_lv60_0;
    A_j_0_we0 <= ap_const_logic_0;
    A_j_0_we1 <= ap_const_logic_0;
    V_i_0_address0 <= update_V_U0_V_i_0_address0;
    V_i_0_address1 <= ap_const_lv2_0;
    V_i_0_ce0 <= update_V_U0_V_i_0_ce0;
    V_i_0_ce1 <= ap_const_logic_0;
    V_i_0_d0 <= ap_const_lv60_0;
    V_i_0_d1 <= ap_const_lv60_0;
    V_i_0_we0 <= ap_const_logic_0;
    V_i_0_we1 <= ap_const_logic_0;
    V_j_0_address0 <= update_V_U0_V_j_0_address0;
    V_j_0_address1 <= ap_const_lv2_0;
    V_j_0_ce0 <= update_V_U0_V_j_0_ce0;
    V_j_0_ce1 <= ap_const_logic_0;
    V_j_0_d0 <= ap_const_lv60_0;
    V_j_0_d1 <= ap_const_lv60_0;
    V_j_0_we0 <= ap_const_logic_0;
    V_j_0_we1 <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (update_V_U0_ap_idle and update_A_U0_ap_idle and update_AV_entry516_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (update_V_U0_ap_done and update_A_U0_ap_done);
    ap_sync_ready <= (ap_sync_update_V_U0_ap_ready and ap_sync_update_A_U0_ap_ready and ap_sync_update_AV_entry516_U0_ap_ready);
    ap_sync_update_AV_entry516_U0_ap_ready <= (update_AV_entry516_U0_ap_ready or ap_sync_reg_update_AV_entry516_U0_ap_ready);
    ap_sync_update_A_U0_ap_ready <= (update_A_U0_ap_ready or ap_sync_reg_update_A_U0_ap_ready);
    ap_sync_update_V_U0_ap_ready <= (update_V_U0_ap_ready or ap_sync_reg_update_V_U0_ap_ready);
    matA_0_address0 <= update_A_U0_matA_0_address0;
    matA_0_address1 <= ap_const_lv8_0;
    matA_0_ce0 <= update_A_U0_matA_0_ce0;
    matA_0_ce1 <= ap_const_logic_0;
    matA_0_d0 <= update_A_U0_matA_0_d0;
    matA_0_d1 <= ap_const_lv60_0;
    matA_0_we0 <= update_A_U0_matA_0_we0;
    matA_0_we1 <= ap_const_logic_0;
    matV_0_address0 <= update_V_U0_matV_0_address0;
    matV_0_address1 <= ap_const_lv4_0;
    matV_0_ce0 <= update_V_U0_matV_0_ce0;
    matV_0_ce1 <= ap_const_logic_0;
    matV_0_d0 <= update_V_U0_matV_0_d0;
    matV_0_d1 <= ap_const_lv60_0;
    matV_0_we0 <= update_V_U0_matV_0_we0;
    matV_0_we1 <= ap_const_logic_0;
    update_AV_entry516_U0_ap_continue <= ap_const_logic_1;
    update_AV_entry516_U0_ap_start <= ((ap_sync_reg_update_AV_entry516_U0_ap_ready xor ap_const_logic_1) and ap_start);
    update_AV_entry516_U0_start_full_n <= ap_const_logic_1;
    update_AV_entry516_U0_start_write <= ap_const_logic_0;
    update_A_U0_ap_continue <= ap_sync_continue;
    update_A_U0_ap_start <= ((ap_sync_reg_update_A_U0_ap_ready xor ap_const_logic_1) and ap_start);
    update_A_U0_start_full_n <= ap_const_logic_1;
    update_A_U0_start_write <= ap_const_logic_0;
    update_V_U0_ap_continue <= ap_sync_continue;
    update_V_U0_ap_start <= ((ap_sync_reg_update_V_U0_ap_ready xor ap_const_logic_1) and ap_start);
    update_V_U0_start_full_n <= ap_const_logic_1;
    update_V_U0_start_write <= ap_const_logic_0;
end behav;
