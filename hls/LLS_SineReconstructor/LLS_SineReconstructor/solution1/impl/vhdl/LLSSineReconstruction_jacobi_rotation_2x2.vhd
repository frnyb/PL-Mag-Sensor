-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_jacobi_rotation_2x2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sine_reconstructor_16_1176_din : OUT STD_LOGIC_VECTOR (59 downto 0);
    sine_reconstructor_16_1176_full_n : IN STD_LOGIC;
    sine_reconstructor_16_1176_write : OUT STD_LOGIC;
    sine_reconstructor_16_1277_din : OUT STD_LOGIC_VECTOR (59 downto 0);
    sine_reconstructor_16_1277_full_n : IN STD_LOGIC;
    sine_reconstructor_16_1277_write : OUT STD_LOGIC;
    alpha_dout : IN STD_LOGIC_VECTOR (59 downto 0);
    alpha_empty_n : IN STD_LOGIC;
    alpha_read : OUT STD_LOGIC;
    beta_dout : IN STD_LOGIC_VECTOR (59 downto 0);
    beta_empty_n : IN STD_LOGIC;
    beta_read : OUT STD_LOGIC;
    gamma_dout : IN STD_LOGIC_VECTOR (59 downto 0);
    gamma_empty_n : IN STD_LOGIC;
    gamma_read : OUT STD_LOGIC );
end;


architecture behav of LLSSineReconstruction_jacobi_rotation_2x2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (117 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (117 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (117 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (117 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (117 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (117 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (117 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (117 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (117 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (117 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (117 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv60_FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (59 downto 0) := "111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_15 : STD_LOGIC_VECTOR (10 downto 0) := "00000010101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_27 : STD_LOGIC_VECTOR (11 downto 0) := "000000100111";
    constant ap_const_lv12_FD9 : STD_LOGIC_VECTOR (11 downto 0) := "111111011001";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_3C : STD_LOGIC_VECTOR (11 downto 0) := "000000111100";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv11_7D8 : STD_LOGIC_VECTOR (10 downto 0) := "11111011000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (117 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sine_reconstructor_16_1176_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal sine_reconstructor_16_1277_blk_n : STD_LOGIC;
    signal alpha_blk_n : STD_LOGIC;
    signal beta_blk_n : STD_LOGIC;
    signal gamma_blk_n : STD_LOGIC;
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_256 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal p_Val2_27_reg_1982 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Val2_s_reg_1988 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Val2_24_reg_1994 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_77_reg_2001 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_269_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_V_reg_2007 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_80_reg_2012 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_83_reg_2018 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_291_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_V_4_reg_2024 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln885_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_2029 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal m_19_reg_2034 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln893_fu_515_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln893_reg_2039 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_2044 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln885_2_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_2_reg_2049 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_23_reg_2054 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln893_2_fu_745_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln893_2_reg_2059 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_2_fu_753_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_2_reg_2064 : STD_LOGIC_VECTOR (10 downto 0);
    signal m00_fu_793_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal m11_fu_837_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln885_1_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_1_reg_2079 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal m_20_fu_855_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal m_20_reg_2084 : STD_LOGIC_VECTOR (59 downto 0);
    signal sub_ln894_1_fu_891_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_1_reg_2089 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_1_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_1_reg_2095 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool31_i_i4927_i_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool31_i_i4927_i_reg_2100 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_1_fu_997_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_1_reg_2105 : STD_LOGIC_VECTOR (10 downto 0);
    signal deno_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal deno_reg_2110 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln466_2_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln466_2_reg_2118 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_87_fu_1199_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_87_reg_2124 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln466_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln466_reg_2129 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal deno2_reg_2134 : STD_LOGIC_VECTOR (63 downto 0);
    signal KK_fu_1273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal M2_fu_1309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpDivider_reg_2150 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal LD_4_fu_1328_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_4_reg_2156 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal select_ln571_7_fu_1650_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal select_ln571_7_reg_2161 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal select_ln571_3_fu_1974_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal select_ln571_3_reg_2166 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state118 : BOOLEAN;
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_fu_203_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal m_18_fu_302_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_s_fu_307_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_78_fu_317_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_325_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_349_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_365_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_fu_369_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_fu_375_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal lshr_ln897_fu_379_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_42_fu_385_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_31_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln896_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln909_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln907_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln909_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln908_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln908_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln908_fu_467_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln909_fu_451_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tobool31_i_i13_i_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_479_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_6_fu_491_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_43_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_22_fu_532_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_54_fu_537_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_84_fu_547_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_147_fu_555_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_2_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_2_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_2_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_579_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_2_fu_595_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_2_fu_599_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_2_fu_605_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal lshr_ln897_2_fu_609_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_56_fu_615_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_39_fu_627_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_2_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_2_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_57_fu_647_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln896_2_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln909_2_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln907_2_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln909_2_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln908_2_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln908_2_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_2_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_2_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_2_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln908_2_fu_697_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln909_2_fu_681_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tobool31_i_i11941_i_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_10_fu_709_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_2_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_15_fu_721_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_58_fu_737_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_760_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_765_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln912_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_fu_770_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_79_fu_777_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln734_fu_789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln915_2_fu_804_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_2_fu_809_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln912_2_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i_fu_814_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_85_fu_821_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln734_1_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_2_fu_850_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_7_fu_861_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_81_fu_871_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_i_fu_879_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_1_fu_887_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_903_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_1_fu_919_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_1_fu_923_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_1_fu_929_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal lshr_ln897_1_fu_933_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_Result_49_fu_939_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_35_fu_951_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_1_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_50_fu_971_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln896_1_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_1_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln909_1_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln907_1_fu_1001_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln909_1_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln908_1_fu_1019_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln908_1_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln908_1_fu_1028_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln909_1_fu_1013_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_1034_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_1_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_12_fu_1044_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_21_fu_1050_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_51_fu_1064_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_1_fu_1080_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln893_1_fu_1072_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_1_fu_1085_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln912_1_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_1091_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_82_fu_1098_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_1110_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_1117_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp1_V_fu_1127_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_86_fu_1133_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln466_1_fu_1149_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln466_3_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln466_2_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_1_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_1175_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp1_V_6_fu_1185_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_i_fu_1191_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln466_fu_1211_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln466_1_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln466_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln466_1_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln466_2_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln466_3_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln466_4_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln466_5_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln466_fu_1244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln466_1_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_2_fu_1277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_1281_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp1_V_7_fu_1291_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_88_fu_1297_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln466_fu_1314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln466_fu_1318_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln466_1_fu_1324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_1_fu_1335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_1_fu_1350_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_1_fu_1364_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_92_fu_1368_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_1_fu_1376_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_91_fu_1342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_3_fu_1380_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln555_1_fu_1338_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_1_fu_1360_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_1_fu_1400_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_1_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_1_fu_1416_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_1422_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_fu_1386_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_1_fu_1428_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln586_1_fu_1462_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_1_fu_1466_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_47_fu_1476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln583_1_fu_1442_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln604_1_fu_1492_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln585_1_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ashr_ln586_1_fu_1470_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln588_1_cast_i_fu_1484_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal s_right_V_3_fu_1502_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln575_1_fu_1406_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln591_1_fu_1520_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln591_1_fu_1526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln591_1_fu_1514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_76_fu_1530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_1_fu_1538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln586_1_fu_1510_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln415_5_fu_1546_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal icmp_ln571_1_fu_1394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_fu_1436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_1_fu_1556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_1_fu_1568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_1_fu_1574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_1_fu_1586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_1456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_1_fu_1592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_right_V_2_fu_1496_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal and_ln603_1_fu_1598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_1_fu_1580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_right_V_fu_1550_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln583_3_fu_1446_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal select_ln571_5_fu_1618_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal and_ln582_1_fu_1562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_3_fu_1612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_4_fu_1604_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal sext_ln571_1_fu_1626_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal or_ln571_4_fu_1630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_5_fu_1644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_6_fu_1636_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal ireg_fu_1658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_fu_1674_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_1688_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_90_fu_1692_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_1700_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_89_fu_1666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_1704_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln555_fu_1662_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_fu_1684_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_1724_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_1734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_1740_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_1746_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_5_fu_1710_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_1752_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln586_fu_1786_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_fu_1790_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_45_fu_1800_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln583_fu_1766_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln604_fu_1816_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln585_fu_1774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ashr_ln586_fu_1794_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln588_cast_i_fu_1808_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal c_right_V_3_fu_1826_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln575_fu_1730_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln591_fu_1844_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln591_fu_1850_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln591_fu_1838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_73_fu_1854_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_fu_1862_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln586_fu_1834_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln415_fu_1870_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal icmp_ln571_fu_1718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_1780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_right_V_2_fu_1820_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal and_ln603_fu_1922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_right_V_fu_1874_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln583_2_fu_1770_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal select_ln571_1_fu_1942_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal and_ln582_fu_1886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_1936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_1928_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal sext_ln571_fu_1950_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal or_ln571_1_fu_1954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_2_fu_1968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_2_fu_1960_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_198_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (117 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_dadddsub_64ns_64ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_ddiv_64ns_64ns_64_22_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component LLSSineReconstruction_dsqrt_64ns_64ns_64_30_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dadddsub_64ns_64ns_64_5_no_dsp_1_U192 : component LLSSineReconstruction_dadddsub_64ns_64ns_64_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        opcode => grp_fu_198_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U193 : component LLSSineReconstruction_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_203_p0,
        din1 => grp_fu_203_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_203_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U194 : component LLSSineReconstruction_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => deno_reg_2110,
        din1 => deno_reg_2110,
        ce => ap_const_logic_1,
        dout => grp_fu_207_p2);

    ddiv_64ns_64ns_64_22_no_dsp_1_U195 : component LLSSineReconstruction_ddiv_64ns_64ns_64_22_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => deno2_reg_2134,
        din1 => reg_240,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U196 : component LLSSineReconstruction_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_240,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_215_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U197 : component LLSSineReconstruction_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => deno_reg_2110,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_220_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U198 : component LLSSineReconstruction_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_240,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_225_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U199 : component LLSSineReconstruction_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => deno_reg_2110,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_230_p2);

    dsqrt_64ns_64ns_64_30_no_dsp_1_U200 : component LLSSineReconstruction_dsqrt_64ns_64ns_64_30_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => grp_fu_235_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((sine_reconstructor_16_1277_full_n = ap_const_logic_0) or (sine_reconstructor_16_1176_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                LD_4_reg_2156 <= LD_4_fu_1328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                deno2_reg_2134 <= grp_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                deno_reg_2110 <= deno_fu_1145_p1;
                or_ln466_2_reg_2118 <= or_ln466_2_fu_1165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln885_1_reg_2079 <= icmp_ln885_1_fu_845_p2;
                icmp_ln908_1_reg_2095 <= icmp_ln908_1_fu_985_p2;
                m_20_reg_2084 <= m_20_fu_855_p3;
                sub_ln894_1_reg_2089 <= sub_ln894_1_fu_891_p2;
                tobool31_i_i4927_i_reg_2100 <= tobool31_i_i4927_i_fu_991_p2;
                trunc_ln893_1_reg_2105 <= trunc_ln893_1_fu_997_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln885_2_reg_2049 <= icmp_ln885_2_fu_527_p2;
                icmp_ln885_reg_2029 <= icmp_ln885_fu_297_p2;
                m_19_reg_2034 <= m_6_fu_491_p2(63 downto 1);
                m_23_reg_2054 <= m_15_fu_721_p2(63 downto 1);
                    select_ln893_2_reg_2059(0) <= select_ln893_2_fu_745_p3(0);
                    select_ln893_reg_2039(0) <= select_ln893_fu_515_p3(0);
                trunc_ln893_2_reg_2064 <= trunc_ln893_2_fu_753_p1;
                trunc_ln893_reg_2044 <= trunc_ln893_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                or_ln466_reg_2129 <= or_ln466_fu_1267_p2;
                p_Result_87_reg_2124 <= p_Result_87_fu_1199_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_Result_77_reg_2001 <= beta_dout(59 downto 59);
                p_Result_80_reg_2012 <= gamma_dout(59 downto 59);
                p_Result_83_reg_2018 <= alpha_dout(59 downto 59);
                p_Val2_24_reg_1994 <= gamma_dout;
                p_Val2_27_reg_1982 <= alpha_dout;
                p_Val2_s_reg_1988 <= beta_dout;
                tmp_V_4_reg_2024 <= tmp_V_4_fu_291_p2;
                tmp_V_reg_2007 <= tmp_V_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_240 <= grp_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_250 <= grp_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state48))) then
                reg_256 <= grp_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                select_ln571_3_reg_2166 <= select_ln571_3_fu_1974_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                select_ln571_7_reg_2161 <= select_ln571_7_fu_1650_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                tmpDivider_reg_2150 <= grp_fu_211_p2;
            end if;
        end if;
    end process;
    select_ln893_reg_2039(10 downto 1) <= "0111111111";
    select_ln893_2_reg_2059(10 downto 1) <= "0111111111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, sine_reconstructor_16_1176_full_n, sine_reconstructor_16_1277_full_n, alpha_empty_n, beta_empty_n, gamma_empty_n, ap_CS_fsm_state118)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = alpha_empty_n) or (gamma_empty_n = ap_const_logic_0) or (beta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                if ((not(((sine_reconstructor_16_1277_full_n = ap_const_logic_0) or (sine_reconstructor_16_1176_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_1_fu_1400_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_1_fu_1360_p1));
    F2_fu_1724_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_1684_p1));
    KK_fu_1273_p1 <= p_Result_87_reg_2124;
    LD_4_fu_1328_p3 <= 
        grp_fu_235_p2 when (or_ln466_reg_2129(0) = '1') else 
        bitcast_ln466_1_fu_1324_p1;
    M2_fu_1309_p1 <= p_Result_88_fu_1297_p5;
    a_1_fu_979_p2 <= (p_Result_50_fu_971_p3 or and_ln896_1_fu_965_p2);
    a_2_fu_655_p2 <= (p_Result_57_fu_647_p3 or and_ln896_2_fu_641_p2);
    a_fu_425_p2 <= (p_Result_3_fu_417_p3 or and_ln896_fu_411_p2);
    add_ln581_1_fu_1416_p2 <= std_logic_vector(unsigned(F2_1_fu_1400_p2) + unsigned(ap_const_lv12_FD9));
    add_ln581_fu_1740_p2 <= std_logic_vector(unsigned(F2_fu_1724_p2) + unsigned(ap_const_lv12_FD9));
    add_ln591_1_fu_1520_p2 <= std_logic_vector(unsigned(trunc_ln575_1_fu_1406_p1) + unsigned(ap_const_lv11_7D8));
    add_ln591_fu_1844_p2 <= std_logic_vector(unsigned(trunc_ln575_fu_1730_p1) + unsigned(ap_const_lv11_7D8));
    add_ln908_1_fu_1019_p2 <= std_logic_vector(unsigned(sub_ln894_1_reg_2089) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln908_2_fu_687_p2 <= std_logic_vector(unsigned(sub_ln894_2_fu_567_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln908_fu_457_p2 <= std_logic_vector(unsigned(sub_ln894_fu_337_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln915_1_fu_1085_p2 <= std_logic_vector(unsigned(sub_ln915_1_fu_1080_p2) + unsigned(select_ln893_1_fu_1072_p3));
    add_ln915_2_fu_809_p2 <= std_logic_vector(unsigned(sub_ln915_2_fu_804_p2) + unsigned(select_ln893_2_reg_2059));
    add_ln915_fu_765_p2 <= std_logic_vector(unsigned(sub_ln915_fu_760_p2) + unsigned(select_ln893_reg_2039));

    alpha_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, alpha_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alpha_blk_n <= alpha_empty_n;
        else 
            alpha_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    alpha_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, alpha_empty_n, beta_empty_n, gamma_empty_n)
    begin
        if ((not(((ap_const_logic_0 = alpha_empty_n) or (gamma_empty_n = ap_const_logic_0) or (beta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            alpha_read <= ap_const_logic_1;
        else 
            alpha_read <= ap_const_logic_0;
        end if; 
    end process;

    and_ln466_1_fu_1261_p2 <= (and_ln466_5_fu_1256_p2 and and_ln466_4_fu_1250_p2);
    and_ln466_2_fu_1233_p2 <= (or_ln466_1_fu_1227_p2 and grp_fu_215_p2);
    and_ln466_3_fu_1239_p2 <= (or_ln466_2_reg_2118 and grp_fu_220_p2);
    and_ln466_4_fu_1250_p2 <= (or_ln466_1_fu_1227_p2 and grp_fu_225_p2);
    and_ln466_5_fu_1256_p2 <= (or_ln466_2_reg_2118 and grp_fu_230_p2);
    and_ln466_fu_1244_p2 <= (and_ln466_3_fu_1239_p2 and and_ln466_2_fu_1233_p2);
    and_ln581_1_fu_1580_p2 <= (xor_ln582_1_fu_1574_p2 and icmp_ln581_1_fu_1410_p2);
    and_ln581_fu_1904_p2 <= (xor_ln582_fu_1898_p2 and icmp_ln581_fu_1734_p2);
    and_ln582_1_fu_1562_p2 <= (xor_ln571_1_fu_1556_p2 and icmp_ln582_1_fu_1436_p2);
    and_ln582_fu_1886_p2 <= (xor_ln571_fu_1880_p2 and icmp_ln582_fu_1760_p2);
    and_ln603_1_fu_1598_p2 <= (xor_ln581_1_fu_1592_p2 and icmp_ln603_1_fu_1456_p2);
    and_ln603_fu_1922_p2 <= (xor_ln581_fu_1916_p2 and icmp_ln603_fu_1780_p2);
    and_ln896_1_fu_965_p2 <= (icmp_ln897_1_fu_945_p2 and icmp_ln896_1_fu_913_p2);
    and_ln896_2_fu_641_p2 <= (icmp_ln897_2_fu_621_p2 and icmp_ln896_2_fu_589_p2);
    and_ln896_fu_411_p2 <= (icmp_ln897_fu_391_p2 and icmp_ln896_fu_359_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, alpha_empty_n, beta_empty_n, gamma_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = alpha_empty_n) or (gamma_empty_n = ap_const_logic_0) or (beta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state118_assign_proc : process(sine_reconstructor_16_1176_full_n, sine_reconstructor_16_1277_full_n)
    begin
                ap_block_state118 <= ((sine_reconstructor_16_1277_full_n = ap_const_logic_0) or (sine_reconstructor_16_1176_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, sine_reconstructor_16_1176_full_n, sine_reconstructor_16_1277_full_n, ap_CS_fsm_state118)
    begin
        if ((not(((sine_reconstructor_16_1277_full_n = ap_const_logic_0) or (sine_reconstructor_16_1176_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(sine_reconstructor_16_1176_full_n, sine_reconstructor_16_1277_full_n, ap_CS_fsm_state118)
    begin
        if ((not(((sine_reconstructor_16_1277_full_n = ap_const_logic_0) or (sine_reconstructor_16_1176_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_1_fu_1470_p2 <= std_logic_vector(shift_right(signed(man_V_fu_1386_p3),to_integer(unsigned('0' & zext_ln586_1_fu_1466_p1(31-1 downto 0)))));
    ashr_ln586_fu_1794_p2 <= std_logic_vector(shift_right(signed(man_V_5_fu_1710_p3),to_integer(unsigned('0' & zext_ln586_fu_1790_p1(31-1 downto 0)))));

    beta_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, beta_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            beta_blk_n <= beta_empty_n;
        else 
            beta_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    beta_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, alpha_empty_n, beta_empty_n, gamma_empty_n)
    begin
        if ((not(((ap_const_logic_0 = alpha_empty_n) or (gamma_empty_n = ap_const_logic_0) or (beta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            beta_read <= ap_const_logic_1;
        else 
            beta_read <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln466_1_fu_1324_p1 <= xor_ln466_fu_1318_p2;
    bitcast_ln466_fu_1314_p1 <= grp_fu_235_p2;
    bitcast_ln734_1_fu_833_p1 <= p_Result_85_fu_821_p5;
    bitcast_ln734_fu_789_p1 <= p_Result_79_fu_777_p5;
    c_right_V_2_fu_1820_p2 <= std_logic_vector(shift_left(unsigned(sext_ln583_fu_1766_p1),to_integer(unsigned('0' & zext_ln604_fu_1816_p1(31-1 downto 0)))));
    c_right_V_3_fu_1826_p3 <= 
        ashr_ln586_fu_1794_p2 when (icmp_ln585_fu_1774_p2(0) = '1') else 
        trunc_ln588_cast_i_fu_1808_p3;
    c_right_V_fu_1874_p2 <= std_logic_vector(signed(sext_ln586_fu_1834_p1) + signed(zext_ln415_fu_1870_p1));
    data_V_1_fu_1171_p1 <= reg_240;
    data_V_2_fu_1277_p1 <= reg_240;
    data_V_fu_1110_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_1_reg_2079(0) = '1') else 
        p_Result_82_fu_1098_p5;
    deno_fu_1145_p1 <= p_Result_86_fu_1133_p5;
    exp1_V_6_fu_1185_p2 <= std_logic_vector(unsigned(tmp_49_fu_1175_p4) + unsigned(ap_const_lv11_1));
    exp1_V_7_fu_1291_p2 <= std_logic_vector(unsigned(tmp_50_fu_1281_p4) + unsigned(ap_const_lv11_1));
    exp1_V_fu_1127_p2 <= std_logic_vector(unsigned(tmp_48_fu_1117_p4) + unsigned(ap_const_lv11_1));
    exp_tmp_1_fu_1350_p4 <= ireg_1_fu_1335_p1(62 downto 52);
    exp_tmp_fu_1674_p4 <= ireg_fu_1658_p1(62 downto 52);

    gamma_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, gamma_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gamma_blk_n <= gamma_empty_n;
        else 
            gamma_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gamma_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, alpha_empty_n, beta_empty_n, gamma_empty_n)
    begin
        if ((not(((ap_const_logic_0 = alpha_empty_n) or (gamma_empty_n = ap_const_logic_0) or (beta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gamma_read <= ap_const_logic_1;
        else 
            gamma_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_198_opcode_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state55, ap_CS_fsm_state14, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_198_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_fu_198_opcode <= ap_const_lv2_0;
        else 
            grp_fu_198_opcode <= "XX";
        end if; 
    end process;


    grp_fu_198_p0_assign_proc : process(reg_250, m00_fu_793_p3, ap_CS_fsm_state3, deno2_reg_2134, ap_CS_fsm_state55, ap_CS_fsm_state14, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_198_p0 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_198_p0 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_198_p0 <= deno2_reg_2134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_198_p0 <= m00_fu_793_p3;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_198_p1_assign_proc : process(reg_250, ap_CS_fsm_state3, m11_fu_837_p3, M2_fu_1309_p1, ap_CS_fsm_state55, tmpDivider_reg_2150, ap_CS_fsm_state14, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_198_p1 <= tmpDivider_reg_2150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_198_p1 <= M2_fu_1309_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_198_p1 <= reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_198_p1 <= m11_fu_837_p3;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_p0_assign_proc : process(reg_240, KK_fu_1273_p1, ap_CS_fsm_state49, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_203_p0 <= KK_fu_1273_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_203_p0 <= reg_240;
        else 
            grp_fu_203_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_p1_assign_proc : process(reg_240, reg_256, ap_CS_fsm_state49, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_203_p1 <= reg_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_203_p1 <= reg_240;
        else 
            grp_fu_203_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_235_p1_assign_proc : process(reg_240, tmpDivider_reg_2150, ap_CS_fsm_state82, ap_CS_fsm_state19, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_235_p1 <= tmpDivider_reg_2150;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_235_p1 <= reg_240;
        else 
            grp_fu_235_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln466_1_fu_1221_p2 <= "1" when (trunc_ln466_fu_1211_p1 = ap_const_lv52_0) else "0";
    icmp_ln466_2_fu_1153_p2 <= "0" when (exp1_V_fu_1127_p2 = ap_const_lv11_7FF) else "1";
    icmp_ln466_3_fu_1159_p2 <= "1" when (trunc_ln466_1_fu_1149_p1 = ap_const_lv52_0) else "0";
    icmp_ln466_fu_1215_p2 <= "0" when (tmp_49_fu_1175_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln571_1_fu_1394_p2 <= "1" when (trunc_ln555_1_fu_1338_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_1718_p2 <= "1" when (trunc_ln555_fu_1662_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_1_fu_1410_p2 <= "1" when (signed(F2_1_fu_1400_p2) > signed(ap_const_lv12_27)) else "0";
    icmp_ln581_fu_1734_p2 <= "1" when (signed(F2_fu_1724_p2) > signed(ap_const_lv12_27)) else "0";
    icmp_ln582_1_fu_1436_p2 <= "1" when (F2_1_fu_1400_p2 = ap_const_lv12_27) else "0";
    icmp_ln582_fu_1760_p2 <= "1" when (F2_fu_1724_p2 = ap_const_lv12_27) else "0";
    icmp_ln585_1_fu_1450_p2 <= "1" when (unsigned(sh_amt_1_fu_1428_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_1774_p2 <= "1" when (unsigned(sh_amt_fu_1752_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln591_1_fu_1514_p2 <= "1" when (signed(add_ln581_1_fu_1416_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln591_fu_1838_p2 <= "1" when (signed(add_ln581_fu_1740_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_1456_p2 <= "1" when (unsigned(sh_amt_1_fu_1428_p3) < unsigned(ap_const_lv12_3C)) else "0";
    icmp_ln603_fu_1780_p2 <= "1" when (unsigned(sh_amt_fu_1752_p3) < unsigned(ap_const_lv12_3C)) else "0";
    icmp_ln885_1_fu_845_p2 <= "1" when (p_Val2_24_reg_1994 = ap_const_lv60_0) else "0";
    icmp_ln885_2_fu_527_p2 <= "1" when (p_Val2_27_reg_1982 = ap_const_lv60_0) else "0";
    icmp_ln885_fu_297_p2 <= "1" when (p_Val2_s_reg_1988 = ap_const_lv60_0) else "0";
    icmp_ln896_1_fu_913_p2 <= "1" when (signed(tmp_34_fu_903_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln896_2_fu_589_p2 <= "1" when (signed(tmp_38_fu_579_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln896_fu_359_p2 <= "1" when (signed(tmp_30_fu_349_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln897_1_fu_945_p2 <= "0" when (p_Result_49_fu_939_p2 = ap_const_lv60_0) else "1";
    icmp_ln897_2_fu_621_p2 <= "0" when (p_Result_56_fu_615_p2 = ap_const_lv60_0) else "1";
    icmp_ln897_fu_391_p2 <= "0" when (p_Result_42_fu_385_p2 = ap_const_lv60_0) else "1";
    icmp_ln908_1_fu_985_p2 <= "1" when (signed(lsb_index_1_fu_897_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln908_2_fu_665_p2 <= "1" when (signed(lsb_index_2_fu_573_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln908_fu_435_p2 <= "1" when (signed(lsb_index_fu_343_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_1_fu_1335_p1 <= LD_4_reg_2156;
    ireg_fu_1658_p1 <= reg_256;
    l_1_fu_887_p1 <= tmp_6_i_fu_879_p3(32 - 1 downto 0);
    l_2_fu_563_p1 <= tmp_i_147_fu_555_p3(32 - 1 downto 0);
    l_fu_333_p1 <= tmp_i_fu_325_p3(32 - 1 downto 0);
    lsb_index_1_fu_897_p2 <= std_logic_vector(unsigned(sub_ln894_1_fu_891_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lsb_index_2_fu_573_p2 <= std_logic_vector(unsigned(sub_ln894_2_fu_567_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lsb_index_fu_343_p2 <= std_logic_vector(unsigned(sub_ln894_fu_337_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln897_1_fu_933_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv60_FFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln897_1_fu_929_p1(31-1 downto 0)))));
    lshr_ln897_2_fu_609_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv60_FFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln897_2_fu_605_p1(31-1 downto 0)))));
    lshr_ln897_fu_379_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv60_FFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln897_fu_375_p1(31-1 downto 0)))));
    lshr_ln908_1_fu_1028_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_1001_p1),to_integer(unsigned('0' & zext_ln908_1_fu_1024_p1(31-1 downto 0)))));
    lshr_ln908_2_fu_697_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_2_fu_661_p1),to_integer(unsigned('0' & zext_ln908_2_fu_693_p1(31-1 downto 0)))));
    lshr_ln908_fu_467_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_fu_431_p1),to_integer(unsigned('0' & zext_ln908_fu_463_p1(31-1 downto 0)))));
    m00_fu_793_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_reg_2029(0) = '1') else 
        bitcast_ln734_fu_789_p1;
    m11_fu_837_p3 <= 
        ap_const_lv64_0 when (icmp_ln885_2_reg_2049(0) = '1') else 
        bitcast_ln734_1_fu_833_p1;
    m_10_fu_709_p3 <= 
        lshr_ln908_2_fu_697_p2 when (icmp_ln908_2_fu_665_p2(0) = '1') else 
        shl_ln909_2_fu_681_p2;
    m_12_fu_1044_p2 <= std_logic_vector(unsigned(m_5_fu_1034_p3) + unsigned(zext_ln911_1_fu_1041_p1));
    m_15_fu_721_p2 <= std_logic_vector(unsigned(m_10_fu_709_p3) + unsigned(zext_ln911_2_fu_717_p1));
    m_18_fu_302_p3 <= 
        tmp_V_reg_2007 when (p_Result_77_reg_2001(0) = '1') else 
        p_Val2_s_reg_1988;
    m_20_fu_855_p3 <= 
        tmp_V_2_fu_850_p2 when (p_Result_80_reg_2012(0) = '1') else 
        p_Val2_24_reg_1994;
    m_21_fu_1050_p4 <= m_12_fu_1044_p2(63 downto 1);
    m_22_fu_532_p3 <= 
        tmp_V_4_reg_2024 when (p_Result_83_reg_2018(0) = '1') else 
        p_Val2_27_reg_1982;
    m_5_fu_1034_p3 <= 
        lshr_ln908_1_fu_1028_p2 when (icmp_ln908_1_reg_2095(0) = '1') else 
        shl_ln909_1_fu_1013_p2;
    m_6_fu_491_p2 <= std_logic_vector(unsigned(m_fu_479_p3) + unsigned(zext_ln911_fu_487_p1));
    m_fu_479_p3 <= 
        lshr_ln908_fu_467_p2 when (icmp_ln908_fu_435_p2(0) = '1') else 
        shl_ln909_fu_451_p2;
    man_V_2_fu_1704_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_1700_p1));
    man_V_3_fu_1380_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_1_fu_1376_p1));
    man_V_5_fu_1710_p3 <= 
        man_V_2_fu_1704_p2 when (p_Result_89_fu_1666_p3(0) = '1') else 
        zext_ln569_fu_1700_p1;
    man_V_fu_1386_p3 <= 
        man_V_3_fu_1380_p2 when (p_Result_91_fu_1342_p3(0) = '1') else 
        zext_ln569_1_fu_1376_p1;
    or_ln466_1_fu_1227_p2 <= (icmp_ln466_fu_1215_p2 or icmp_ln466_1_fu_1221_p2);
    or_ln466_2_fu_1165_p2 <= (icmp_ln466_3_fu_1159_p2 or icmp_ln466_2_fu_1153_p2);
    or_ln466_fu_1267_p2 <= (and_ln466_fu_1244_p2 or and_ln466_1_fu_1261_p2);
    or_ln571_1_fu_1954_p2 <= (and_ln582_fu_1886_p2 or and_ln581_fu_1904_p2);
    or_ln571_2_fu_1968_p2 <= (or_ln571_fu_1936_p2 or or_ln571_1_fu_1954_p2);
    or_ln571_3_fu_1612_p2 <= (icmp_ln571_1_fu_1394_p2 or and_ln603_1_fu_1598_p2);
    or_ln571_4_fu_1630_p2 <= (and_ln582_1_fu_1562_p2 or and_ln581_1_fu_1580_p2);
    or_ln571_5_fu_1644_p2 <= (or_ln571_4_fu_1630_p2 or or_ln571_3_fu_1612_p2);
    or_ln571_fu_1936_p2 <= (icmp_ln571_fu_1718_p2 or and_ln603_fu_1922_p2);
    or_ln581_1_fu_1586_p2 <= (or_ln582_1_fu_1568_p2 or icmp_ln581_1_fu_1410_p2);
    or_ln581_fu_1910_p2 <= (or_ln582_fu_1892_p2 or icmp_ln581_fu_1734_p2);
    or_ln582_1_fu_1568_p2 <= (icmp_ln582_1_fu_1436_p2 or icmp_ln571_1_fu_1394_p2);
    or_ln582_fu_1892_p2 <= (icmp_ln582_fu_1760_p2 or icmp_ln571_fu_1718_p2);
    p_Result_3_fu_417_p3 <= m_18_fu_302_p3(to_integer(unsigned(lsb_index_fu_343_p2)) downto to_integer(unsigned(lsb_index_fu_343_p2))) when (to_integer(unsigned(lsb_index_fu_343_p2))>= 0 and to_integer(unsigned(lsb_index_fu_343_p2))<=59) else "-";
    p_Result_42_fu_385_p2 <= (m_18_fu_302_p3 and lshr_ln897_fu_379_p2);
    p_Result_43_fu_507_p3 <= m_6_fu_491_p2(54 downto 54);
    p_Result_49_fu_939_p2 <= (m_20_fu_855_p3 and lshr_ln897_1_fu_933_p2);
    p_Result_50_fu_971_p3 <= m_20_fu_855_p3(to_integer(unsigned(lsb_index_1_fu_897_p2)) downto to_integer(unsigned(lsb_index_1_fu_897_p2))) when (to_integer(unsigned(lsb_index_1_fu_897_p2))>= 0 and to_integer(unsigned(lsb_index_1_fu_897_p2))<=59) else "-";
    p_Result_51_fu_1064_p3 <= m_12_fu_1044_p2(54 downto 54);
    
    p_Result_54_fu_537_p4_proc : process(m_22_fu_532_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(60+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(60+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable p_Result_54_fu_537_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(60 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3B(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := m_22_fu_532_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(60-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(60-1-unsigned(ap_const_lv32_3B(6-1 downto 0)));
            for p_Result_54_fu_537_p4_i in 0 to 60-1 loop
                v0_cpy(p_Result_54_fu_537_p4_i) := m_22_fu_532_p3(60-1-p_Result_54_fu_537_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(60-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_54_fu_537_p4 <= resvalue(60-1 downto 0);
    end process;

    p_Result_56_fu_615_p2 <= (m_22_fu_532_p3 and lshr_ln897_2_fu_609_p2);
    p_Result_57_fu_647_p3 <= m_22_fu_532_p3(to_integer(unsigned(lsb_index_2_fu_573_p2)) downto to_integer(unsigned(lsb_index_2_fu_573_p2))) when (to_integer(unsigned(lsb_index_2_fu_573_p2))>= 0 and to_integer(unsigned(lsb_index_2_fu_573_p2))<=59) else "-";
    p_Result_58_fu_737_p3 <= m_15_fu_721_p2(54 downto 54);
    p_Result_73_fu_1854_p3 <= man_V_5_fu_1710_p3(to_integer(unsigned(zext_ln591_fu_1850_p1)) downto to_integer(unsigned(zext_ln591_fu_1850_p1))) when (to_integer(unsigned(zext_ln591_fu_1850_p1))>= 0 and to_integer(unsigned(zext_ln591_fu_1850_p1))<=53) else "-";
    p_Result_76_fu_1530_p3 <= man_V_fu_1386_p3(to_integer(unsigned(zext_ln591_1_fu_1526_p1)) downto to_integer(unsigned(zext_ln591_1_fu_1526_p1))) when (to_integer(unsigned(zext_ln591_1_fu_1526_p1))>= 0 and to_integer(unsigned(zext_ln591_1_fu_1526_p1))<=53) else "-";
    p_Result_78_fu_317_p3 <= (ap_const_lv4_F & p_Result_s_fu_307_p4);
    p_Result_79_fu_777_p5 <= (tmp_2_i_fu_770_p3 & zext_ln912_fu_757_p1(51 downto 0));
    
    p_Result_7_fu_861_p4_proc : process(m_20_fu_855_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(60+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(60+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable p_Result_7_fu_861_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(60 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3B(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := m_20_fu_855_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(60-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(60-1-unsigned(ap_const_lv32_3B(6-1 downto 0)));
            for p_Result_7_fu_861_p4_i in 0 to 60-1 loop
                v0_cpy(p_Result_7_fu_861_p4_i) := m_20_fu_855_p3(60-1-p_Result_7_fu_861_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(60-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_7_fu_861_p4 <= resvalue(60-1 downto 0);
    end process;

    p_Result_81_fu_871_p3 <= (ap_const_lv4_F & p_Result_7_fu_861_p4);
    p_Result_82_fu_1098_p5 <= (tmp_3_i_fu_1091_p3 & zext_ln912_1_fu_1060_p1(51 downto 0));
    p_Result_84_fu_547_p3 <= (ap_const_lv4_F & p_Result_54_fu_537_p4);
    p_Result_85_fu_821_p5 <= (tmp_4_i_fu_814_p3 & zext_ln912_2_fu_801_p1(51 downto 0));
    p_Result_86_fu_1133_p5 <= (data_V_fu_1110_p3(63 downto 63) & exp1_V_fu_1127_p2 & data_V_fu_1110_p3(51 downto 0));
    p_Result_87_fu_1199_p5 <= (tmp_8_i_fu_1191_p3 & data_V_1_fu_1171_p1(51 downto 0));
    p_Result_88_fu_1297_p5 <= (data_V_2_fu_1277_p1(63 downto 63) & exp1_V_7_fu_1291_p2 & data_V_2_fu_1277_p1(51 downto 0));
    p_Result_89_fu_1666_p3 <= ireg_fu_1658_p1(63 downto 63);
    p_Result_90_fu_1692_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_1688_p1);
    p_Result_91_fu_1342_p3 <= ireg_1_fu_1335_p1(63 downto 63);
    p_Result_92_fu_1368_p3 <= (ap_const_lv1_1 & trunc_ln565_1_fu_1364_p1);
    
    p_Result_s_fu_307_p4_proc : process(m_18_fu_302_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(60+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(60+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable p_Result_s_fu_307_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(60 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(60 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3B(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := m_18_fu_302_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(60-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(60-1-unsigned(ap_const_lv32_3B(6-1 downto 0)));
            for p_Result_s_fu_307_p4_i in 0 to 60-1 loop
                v0_cpy(p_Result_s_fu_307_p4_i) := m_18_fu_302_p3(60-1-p_Result_s_fu_307_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(60-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_307_p4 <= resvalue(60-1 downto 0);
    end process;

    qb_1_fu_1538_p3 <= 
        p_Result_91_fu_1342_p3 when (icmp_ln591_1_fu_1514_p2(0) = '1') else 
        p_Result_76_fu_1530_p3;
    qb_fu_1862_p3 <= 
        p_Result_89_fu_1666_p3 when (icmp_ln591_fu_1838_p2(0) = '1') else 
        p_Result_73_fu_1854_p3;
    s_right_V_2_fu_1496_p2 <= std_logic_vector(shift_left(unsigned(sext_ln583_1_fu_1442_p1),to_integer(unsigned('0' & zext_ln604_1_fu_1492_p1(31-1 downto 0)))));
    s_right_V_3_fu_1502_p3 <= 
        ashr_ln586_1_fu_1470_p2 when (icmp_ln585_1_fu_1450_p2(0) = '1') else 
        trunc_ln588_1_cast_i_fu_1484_p3;
    s_right_V_fu_1550_p2 <= std_logic_vector(signed(sext_ln586_1_fu_1510_p1) + signed(zext_ln415_5_fu_1546_p1));
    select_ln571_1_fu_1942_p3 <= 
        c_right_V_fu_1874_p2 when (and_ln581_fu_1904_p2(0) = '1') else 
        sext_ln583_2_fu_1770_p1;
    select_ln571_2_fu_1960_p3 <= 
        select_ln571_fu_1928_p3 when (or_ln571_fu_1936_p2(0) = '1') else 
        sext_ln571_fu_1950_p1;
    select_ln571_3_fu_1974_p3 <= 
        select_ln571_2_fu_1960_p3 when (or_ln571_2_fu_1968_p2(0) = '1') else 
        ap_const_lv60_0;
    select_ln571_4_fu_1604_p3 <= 
        ap_const_lv60_0 when (icmp_ln571_1_fu_1394_p2(0) = '1') else 
        s_right_V_2_fu_1496_p2;
    select_ln571_5_fu_1618_p3 <= 
        s_right_V_fu_1550_p2 when (and_ln581_1_fu_1580_p2(0) = '1') else 
        sext_ln583_3_fu_1446_p1;
    select_ln571_6_fu_1636_p3 <= 
        select_ln571_4_fu_1604_p3 when (or_ln571_3_fu_1612_p2(0) = '1') else 
        sext_ln571_1_fu_1626_p1;
    select_ln571_7_fu_1650_p3 <= 
        select_ln571_6_fu_1636_p3 when (or_ln571_5_fu_1644_p2(0) = '1') else 
        ap_const_lv60_0;
    select_ln571_fu_1928_p3 <= 
        ap_const_lv60_0 when (icmp_ln571_fu_1718_p2(0) = '1') else 
        c_right_V_2_fu_1820_p2;
    select_ln893_1_fu_1072_p3 <= 
        ap_const_lv11_3FF when (p_Result_51_fu_1064_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln893_2_fu_745_p3 <= 
        ap_const_lv11_3FF when (p_Result_58_fu_737_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln893_fu_515_p3 <= 
        ap_const_lv11_3FF when (p_Result_43_fu_507_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln571_1_fu_1626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln571_5_fu_1618_p3),60));

        sext_ln571_fu_1950_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln571_1_fu_1942_p3),60));

        sext_ln583_1_fu_1442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_fu_1386_p3),60));

        sext_ln583_2_fu_1770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_5_fu_1710_p3),55));

        sext_ln583_3_fu_1446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_fu_1386_p3),55));

        sext_ln583_fu_1766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_5_fu_1710_p3),60));

        sext_ln586_1_fu_1510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_right_V_3_fu_1502_p3),55));

        sext_ln586_fu_1834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_right_V_3_fu_1826_p3),55));

    sh_amt_1_fu_1428_p3 <= 
        add_ln581_1_fu_1416_p2 when (icmp_ln581_1_fu_1410_p2(0) = '1') else 
        sub_ln581_1_fu_1422_p2;
    sh_amt_fu_1752_p3 <= 
        add_ln581_fu_1740_p2 when (icmp_ln581_fu_1734_p2(0) = '1') else 
        sub_ln581_fu_1746_p2;
    shl_ln909_1_fu_1013_p2 <= std_logic_vector(shift_left(unsigned(zext_ln907_1_fu_1001_p1),to_integer(unsigned('0' & zext_ln909_1_fu_1009_p1(31-1 downto 0)))));
    shl_ln909_2_fu_681_p2 <= std_logic_vector(shift_left(unsigned(zext_ln907_2_fu_661_p1),to_integer(unsigned('0' & zext_ln909_2_fu_677_p1(31-1 downto 0)))));
    shl_ln909_fu_451_p2 <= std_logic_vector(shift_left(unsigned(zext_ln907_fu_431_p1),to_integer(unsigned('0' & zext_ln909_fu_447_p1(31-1 downto 0)))));

    sine_reconstructor_16_1176_blk_n_assign_proc : process(sine_reconstructor_16_1176_full_n, ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sine_reconstructor_16_1176_blk_n <= sine_reconstructor_16_1176_full_n;
        else 
            sine_reconstructor_16_1176_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sine_reconstructor_16_1176_din <= select_ln571_7_reg_2161;

    sine_reconstructor_16_1176_write_assign_proc : process(sine_reconstructor_16_1176_full_n, sine_reconstructor_16_1277_full_n, ap_CS_fsm_state118)
    begin
        if ((not(((sine_reconstructor_16_1277_full_n = ap_const_logic_0) or (sine_reconstructor_16_1176_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            sine_reconstructor_16_1176_write <= ap_const_logic_1;
        else 
            sine_reconstructor_16_1176_write <= ap_const_logic_0;
        end if; 
    end process;


    sine_reconstructor_16_1277_blk_n_assign_proc : process(sine_reconstructor_16_1277_full_n, ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            sine_reconstructor_16_1277_blk_n <= sine_reconstructor_16_1277_full_n;
        else 
            sine_reconstructor_16_1277_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sine_reconstructor_16_1277_din <= select_ln571_3_reg_2166;

    sine_reconstructor_16_1277_write_assign_proc : process(sine_reconstructor_16_1176_full_n, sine_reconstructor_16_1277_full_n, ap_CS_fsm_state118)
    begin
        if ((not(((sine_reconstructor_16_1277_full_n = ap_const_logic_0) or (sine_reconstructor_16_1176_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            sine_reconstructor_16_1277_write <= ap_const_logic_1;
        else 
            sine_reconstructor_16_1277_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln581_1_fu_1422_p2 <= std_logic_vector(unsigned(ap_const_lv12_27) - unsigned(F2_1_fu_1400_p2));
    sub_ln581_fu_1746_p2 <= std_logic_vector(unsigned(ap_const_lv12_27) - unsigned(F2_fu_1724_p2));
    sub_ln894_1_fu_891_p2 <= std_logic_vector(unsigned(ap_const_lv32_3C) - unsigned(l_1_fu_887_p1));
    sub_ln894_2_fu_567_p2 <= std_logic_vector(unsigned(ap_const_lv32_3C) - unsigned(l_2_fu_563_p1));
    sub_ln894_fu_337_p2 <= std_logic_vector(unsigned(ap_const_lv32_3C) - unsigned(l_fu_333_p1));
    sub_ln897_1_fu_923_p2 <= std_logic_vector(signed(ap_const_lv6_32) - signed(trunc_ln897_1_fu_919_p1));
    sub_ln897_2_fu_599_p2 <= std_logic_vector(signed(ap_const_lv6_32) - signed(trunc_ln897_2_fu_595_p1));
    sub_ln897_fu_369_p2 <= std_logic_vector(signed(ap_const_lv6_32) - signed(trunc_ln897_fu_365_p1));
    sub_ln909_1_fu_1004_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_1_reg_2089));
    sub_ln909_2_fu_671_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_2_fu_567_p2));
    sub_ln909_fu_441_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_fu_337_p2));
    sub_ln915_1_fu_1080_p2 <= std_logic_vector(unsigned(ap_const_lv11_15) - unsigned(trunc_ln893_1_reg_2105));
    sub_ln915_2_fu_804_p2 <= std_logic_vector(unsigned(ap_const_lv11_15) - unsigned(trunc_ln893_2_reg_2064));
    sub_ln915_fu_760_p2 <= std_logic_vector(unsigned(ap_const_lv11_15) - unsigned(trunc_ln893_reg_2044));
    tmp_2_i_fu_770_p3 <= (p_Result_77_reg_2001 & add_ln915_fu_765_p2);
    tmp_30_fu_349_p4 <= lsb_index_fu_343_p2(31 downto 1);
    tmp_31_fu_397_p3 <= lsb_index_fu_343_p2(31 downto 31);
    tmp_34_fu_903_p4 <= lsb_index_1_fu_897_p2(31 downto 1);
    tmp_35_fu_951_p3 <= lsb_index_1_fu_897_p2(31 downto 31);
    tmp_38_fu_579_p4 <= lsb_index_2_fu_573_p2(31 downto 1);
    tmp_39_fu_627_p3 <= lsb_index_2_fu_573_p2(31 downto 31);
    tmp_3_i_fu_1091_p3 <= (p_Result_80_reg_2012 & add_ln915_1_fu_1085_p2);
    tmp_45_fu_1800_p3 <= ireg_fu_1658_p1(63 downto 63);
    tmp_47_fu_1476_p3 <= ireg_1_fu_1335_p1(63 downto 63);
    tmp_48_fu_1117_p4 <= data_V_fu_1110_p3(62 downto 52);
    tmp_49_fu_1175_p4 <= data_V_1_fu_1171_p1(62 downto 52);
    tmp_4_i_fu_814_p3 <= (p_Result_83_reg_2018 & add_ln915_2_fu_809_p2);
    tmp_50_fu_1281_p4 <= data_V_2_fu_1277_p1(62 downto 52);
    
    tmp_6_i_fu_879_p3_proc : process(p_Result_81_fu_871_p3)
    begin
        tmp_6_i_fu_879_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_81_fu_871_p3(i) = '1' then
                tmp_6_i_fu_879_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_8_i_fu_1191_p3 <= (ap_const_lv1_0 & exp1_V_6_fu_1185_p2);
    tmp_V_2_fu_850_p2 <= std_logic_vector(unsigned(ap_const_lv60_0) - unsigned(p_Val2_24_reg_1994));
    tmp_V_4_fu_291_p2 <= std_logic_vector(unsigned(ap_const_lv60_0) - unsigned(alpha_dout));
    tmp_V_fu_269_p2 <= std_logic_vector(unsigned(ap_const_lv60_0) - unsigned(beta_dout));
    
    tmp_i_147_fu_555_p3_proc : process(p_Result_84_fu_547_p3)
    begin
        tmp_i_147_fu_555_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_84_fu_547_p3(i) = '1' then
                tmp_i_147_fu_555_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i_fu_325_p3_proc : process(p_Result_78_fu_317_p3)
    begin
        tmp_i_fu_325_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_78_fu_317_p3(i) = '1' then
                tmp_i_fu_325_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tobool31_i_i11941_i_fu_703_p2 <= (xor_ln899_2_fu_635_p2 and a_2_fu_655_p2);
    tobool31_i_i13_i_fu_473_p2 <= (xor_ln899_fu_405_p2 and a_fu_425_p2);
    tobool31_i_i4927_i_fu_991_p2 <= (xor_ln899_1_fu_959_p2 and a_1_fu_979_p2);
    trunc_ln466_1_fu_1149_p1 <= data_V_fu_1110_p3(52 - 1 downto 0);
    trunc_ln466_fu_1211_p1 <= data_V_1_fu_1171_p1(52 - 1 downto 0);
    trunc_ln555_1_fu_1338_p1 <= ireg_1_fu_1335_p1(63 - 1 downto 0);
    trunc_ln555_fu_1662_p1 <= ireg_fu_1658_p1(63 - 1 downto 0);
    trunc_ln565_1_fu_1364_p1 <= ireg_1_fu_1335_p1(52 - 1 downto 0);
    trunc_ln565_fu_1688_p1 <= ireg_fu_1658_p1(52 - 1 downto 0);
    trunc_ln575_1_fu_1406_p1 <= F2_1_fu_1400_p2(11 - 1 downto 0);
    trunc_ln575_fu_1730_p1 <= F2_fu_1724_p2(11 - 1 downto 0);
    trunc_ln586_1_fu_1462_p1 <= sh_amt_1_fu_1428_p3(6 - 1 downto 0);
    trunc_ln586_fu_1786_p1 <= sh_amt_fu_1752_p3(6 - 1 downto 0);
    trunc_ln588_1_cast_i_fu_1484_p3 <= 
        ap_const_lv54_3FFFFFFFFFFFFF when (tmp_47_fu_1476_p3(0) = '1') else 
        ap_const_lv54_0;
    trunc_ln588_cast_i_fu_1808_p3 <= 
        ap_const_lv54_3FFFFFFFFFFFFF when (tmp_45_fu_1800_p3(0) = '1') else 
        ap_const_lv54_0;
    trunc_ln893_1_fu_997_p1 <= tmp_6_i_fu_879_p3(11 - 1 downto 0);
    trunc_ln893_2_fu_753_p1 <= tmp_i_147_fu_555_p3(11 - 1 downto 0);
    trunc_ln893_fu_523_p1 <= tmp_i_fu_325_p3(11 - 1 downto 0);
    trunc_ln897_1_fu_919_p1 <= sub_ln894_1_fu_891_p2(6 - 1 downto 0);
    trunc_ln897_2_fu_595_p1 <= sub_ln894_2_fu_567_p2(6 - 1 downto 0);
    trunc_ln897_fu_365_p1 <= sub_ln894_fu_337_p2(6 - 1 downto 0);
    xor_ln466_fu_1318_p2 <= (bitcast_ln466_fu_1314_p1 xor ap_const_lv64_8000000000000000);
    xor_ln571_1_fu_1556_p2 <= (icmp_ln571_1_fu_1394_p2 xor ap_const_lv1_1);
    xor_ln571_fu_1880_p2 <= (icmp_ln571_fu_1718_p2 xor ap_const_lv1_1);
    xor_ln581_1_fu_1592_p2 <= (or_ln581_1_fu_1586_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1916_p2 <= (or_ln581_fu_1910_p2 xor ap_const_lv1_1);
    xor_ln582_1_fu_1574_p2 <= (or_ln582_1_fu_1568_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1898_p2 <= (or_ln582_fu_1892_p2 xor ap_const_lv1_1);
    xor_ln899_1_fu_959_p2 <= (tmp_35_fu_951_p3 xor ap_const_lv1_1);
    xor_ln899_2_fu_635_p2 <= (tmp_39_fu_627_p3 xor ap_const_lv1_1);
    xor_ln899_fu_405_p2 <= (tmp_31_fu_397_p3 xor ap_const_lv1_1);
    zext_ln415_5_fu_1546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_1_fu_1538_p3),55));
    zext_ln415_fu_1870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_1862_p3),55));
    zext_ln455_1_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_1_fu_1350_p4),12));
    zext_ln455_fu_1684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_1674_p4),12));
    zext_ln569_1_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_92_fu_1368_p3),54));
    zext_ln569_fu_1700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_90_fu_1692_p3),54));
    zext_ln586_1_fu_1466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_1_fu_1462_p1),54));
    zext_ln586_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_1786_p1),54));
    zext_ln591_1_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_1_fu_1520_p2),32));
    zext_ln591_fu_1850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_fu_1844_p2),32));
    zext_ln604_1_fu_1492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_1_fu_1462_p1),60));
    zext_ln604_fu_1816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_1786_p1),60));
    zext_ln897_1_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_1_fu_923_p2),60));
    zext_ln897_2_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_2_fu_599_p2),60));
    zext_ln897_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_369_p2),60));
    zext_ln907_1_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_20_reg_2084),64));
    zext_ln907_2_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_22_fu_532_p3),64));
    zext_ln907_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_18_fu_302_p3),64));
    zext_ln908_1_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln908_1_fu_1019_p2),64));
    zext_ln908_2_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln908_2_fu_687_p2),64));
    zext_ln908_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln908_fu_457_p2),64));
    zext_ln909_1_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln909_1_fu_1004_p2),64));
    zext_ln909_2_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln909_2_fu_671_p2),64));
    zext_ln909_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln909_fu_441_p2),64));
    zext_ln911_1_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tobool31_i_i4927_i_reg_2100),64));
    zext_ln911_2_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tobool31_i_i11941_i_fu_703_p2),64));
    zext_ln911_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tobool31_i_i13_i_fu_473_p2),64));
    zext_ln912_1_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_21_fu_1050_p4),64));
    zext_ln912_2_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_23_reg_2054),64));
    zext_ln912_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_19_reg_2034),64));
end behav;
