-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K1_V_rom is 
    generic(
             DWIDTH     : integer := 22; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K1_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000001", 1 => "0000000100111011110111", 
    2 => "0000001001110111101010", 3 => "0000001110110011011011", 
    4 => "0000010011101111001110", 5 => "0000011000101010111001", 
    6 => "0000011101100110100011", 7 => "0000100010100010000111", 
    8 => "0000100111011101101010", 9 => "0000101100011001000011", 
    10 => "0000110001010100010101", 11 => "0000110110001111011111", 
    12 => "0000111011001010100001", 13 => "0001000000000101011010", 
    14 => "0001000101000000001011", 15 => "0001001001111010110000", 
    16 => "0001001110110101001001", 17 => "0001010011101111010101", 
    18 => "0001011000101001011001", 19 => "0001011101100011001010", 
    20 => "0001100010011100101111", 21 => "0001100111010110000101", 
    22 => "0001101100001111001010", 23 => "0001110001000111111101", 
    24 => "0001110110000000100001", 25 => "0001111010111000110011", 
    26 => "0001111111110000110001", 27 => "0010000100101000011011", 
    28 => "0010001001011111110010", 29 => "0010001110010110110010", 
    30 => "0010010011001101011101", 31 => "0010011000000011110000", 
    32 => "0010011100111001101100", 33 => "0010100001101111010011", 
    34 => "0010100110100100011100", 35 => "0010101011011001001101", 
    36 => "0010110000001101100111", 37 => "0010110101000001100001", 
    38 => "0010111001110101000100", 39 => "0010111110101000000100", 
    40 => "0011000011011010101101", 41 => "0011001000001100110100", 
    42 => "0011001100111110011101", 43 => "0011010001101111101000", 
    44 => "0011010110100000010010", 45 => "0011011011010000011001", 
    46 => "0011011111111111111111", 47 => "0011100100101111000011", 
    48 => "0011101001011101100011", 49 => "0011101110001011011110", 
    50 => "0011110010111000110101", 51 => "0011110111100101101011", 
    52 => "0011111100010001110011", 53 => "0100000000111101011100", 
    54 => "0100000101101000010111", 55 => "0100001010010010110000", 
    56 => "0100001110111100011001", 57 => "0100010011100101011011", 
    58 => "0100011000001101110100", 59 => "0100011100110101100010", 
    60 => "0100100001011100100010", 61 => "0100100110000010110100", 
    62 => "0100101010101000011011", 63 => "0100101111001101010111", 
    64 => "0100110011110001011101", 65 => "0100111000010100111011", 
    66 => "0100111100110111100101", 67 => "0101000001011001011101", 
    68 => "0101000101111010101000", 69 => "0101001010011010111011", 
    70 => "0101001110111010100001", 71 => "0101010011011001001110", 
    72 => "0101010111110111001010", 73 => "0101011100010100001111", 
    74 => "0101100000110000011101", 75 => "0101100101001011111000", 
    76 => "0101101001100110011001", 77 => "0101101110000000000011", 
    78 => "0101110010011000111000", 79 => "0101110110110000101111", 
    80 => "0101111011000111110000", 81 => "0101111111011101110101", 
    82 => "0110000011110011000000", 83 => "0110001000000111001110", 
    84 => "0110001100011010011111", 85 => "0110010000101100110011", 
    86 => "0110010100111110001011", 87 => "0110011001001110100011", 
    88 => "0110011101011101111001", 89 => "0110100001101100010101", 
    90 => "0110100101111001101100", 91 => "0110101010000110000100", 
    92 => "0110101110010001011001", 93 => "0110110010011011110000", 
    94 => "0110110110100100111110", 95 => "0110111010101101001011", 
    96 => "0110111110110100010011", 97 => "0111000010111010011010", 
    98 => "0111000110111111010111", 99 => "0111001011000011001110", 
    100 => "0111001111000110000010", 101 => "0111010011000111101011", 
    102 => "0111010111001000010000", 103 => "0111011011000111100110", 
    104 => "0111011111000101110101", 105 => "0111100011000010111011", 
    106 => "0111100110111110111000", 107 => "0111101010111001101001", 
    108 => "0111101110110011001110", 109 => "0111110010101011100101", 
    110 => "0111110110100010110010", 111 => "0111111010011000101111", 
    112 => "0111111110001101011111", 113 => "1000000010000001000011", 
    114 => "1000000101110011010011", 115 => "1000001001100100010110", 
    116 => "1000001101010100000111", 117 => "1000010001000010101001", 
    118 => "1000010100101111111001", 119 => "1000011000011011110101", 
    120 => "1000011100000110100001", 121 => "1000011111101111111001", 
    122 => "1000100011010111111001", 123 => "1000100110111110101000", 
    124 => "1000101010100100000011", 125 => "1000101110001000001011", 
    126 => "1000110001101010110100", 127 => "1000110101001100001101" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K1_V is
    generic (
        DataWidth : INTEGER := 22;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K1_V is
    component LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K1_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K1_V_rom_U :  component LLSSineReconstruction_generic_sincos_float_s_second_order_float_cos_K1_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


