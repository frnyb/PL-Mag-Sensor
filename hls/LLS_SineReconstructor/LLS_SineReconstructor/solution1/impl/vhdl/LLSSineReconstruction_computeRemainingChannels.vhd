-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_computeRemainingChannels is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_times_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_times_ce0 : OUT STD_LOGIC;
    this_times_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    this_offsets_s_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_offsets_s_ce0 : OUT STD_LOGIC;
    this_offsets_s_we0 : OUT STD_LOGIC;
    this_offsets_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_amplitudes_s_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    this_amplitudes_s_ce0 : OUT STD_LOGIC;
    this_amplitudes_s_we0 : OUT STD_LOGIC;
    this_amplitudes_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    this_A_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    this_A_ce0 : OUT STD_LOGIC;
    this_A_we0 : OUT STD_LOGIC;
    this_A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    this_A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    this_b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_b_ce0 : OUT STD_LOGIC;
    this_b_we0 : OUT STD_LOGIC;
    this_b_d0 : OUT STD_LOGIC_VECTOR (54 downto 0);
    this_b_q0 : IN STD_LOGIC_VECTOR (54 downto 0);
    sliding_window_front_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_back_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_buffer_samples_sample_V_7_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sigma_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sigma_V_ce0 : OUT STD_LOGIC;
    sigma_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sigma_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    sigma_V_ce1 : OUT STD_LOGIC;
    sigma_V_we1 : OUT STD_LOGIC;
    sigma_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matU_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    matU_V_ce0 : OUT STD_LOGIC;
    matU_V_we0 : OUT STD_LOGIC;
    matU_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matU_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_0_ce0 : OUT STD_LOGIC;
    A_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_0_ce1 : OUT STD_LOGIC;
    A_i_V_0_we1 : OUT STD_LOGIC;
    A_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_1_ce0 : OUT STD_LOGIC;
    A_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_1_ce1 : OUT STD_LOGIC;
    A_i_V_1_we1 : OUT STD_LOGIC;
    A_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_0_ce0 : OUT STD_LOGIC;
    A_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_0_ce1 : OUT STD_LOGIC;
    A_j_V_0_we1 : OUT STD_LOGIC;
    A_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_1_ce0 : OUT STD_LOGIC;
    A_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_1_ce1 : OUT STD_LOGIC;
    A_j_V_1_we1 : OUT STD_LOGIC;
    A_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_0_ce0 : OUT STD_LOGIC;
    matA_V_0_we0 : OUT STD_LOGIC;
    matA_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_0_ce1 : OUT STD_LOGIC;
    matA_V_0_we1 : OUT STD_LOGIC;
    matA_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_1_ce0 : OUT STD_LOGIC;
    matA_V_1_we0 : OUT STD_LOGIC;
    matA_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_1_ce1 : OUT STD_LOGIC;
    matA_V_1_we1 : OUT STD_LOGIC;
    matA_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_0_ce0 : OUT STD_LOGIC;
    V_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_0_ce1 : OUT STD_LOGIC;
    V_i_V_0_we1 : OUT STD_LOGIC;
    V_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_1_ce0 : OUT STD_LOGIC;
    V_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_i_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_i_V_1_ce1 : OUT STD_LOGIC;
    V_i_V_1_we1 : OUT STD_LOGIC;
    V_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_0_ce0 : OUT STD_LOGIC;
    V_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_0_ce1 : OUT STD_LOGIC;
    V_j_V_0_we1 : OUT STD_LOGIC;
    V_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_1_ce0 : OUT STD_LOGIC;
    V_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_j_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    V_j_V_1_ce1 : OUT STD_LOGIC;
    V_j_V_1_we1 : OUT STD_LOGIC;
    V_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_0_ce0 : OUT STD_LOGIC;
    matV_V_0_we0 : OUT STD_LOGIC;
    matV_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_0_ce1 : OUT STD_LOGIC;
    matV_V_0_we1 : OUT STD_LOGIC;
    matV_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_1_ce0 : OUT STD_LOGIC;
    matV_V_1_we0 : OUT STD_LOGIC;
    matV_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    matV_V_1_ce1 : OUT STD_LOGIC;
    matV_V_1_we1 : OUT STD_LOGIC;
    matV_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matV_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    U_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    U_V_ce0 : OUT STD_LOGIC;
    U_V_we0 : OUT STD_LOGIC;
    U_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    U_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    U_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    U_V_ce1 : OUT STD_LOGIC;
    U_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    S_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    S_V_ce0 : OUT STD_LOGIC;
    S_V_we0 : OUT STD_LOGIC;
    S_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    S_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    V_V_ce0 : OUT STD_LOGIC;
    V_V_we0 : OUT STD_LOGIC;
    V_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    V_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    V_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    V_V_ce1 : OUT STD_LOGIC;
    V_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    UT_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    UT_V_ce0 : OUT STD_LOGIC;
    UT_V_we0 : OUT STD_LOGIC;
    UT_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    UT_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_pinv_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    A_pinv_V_ce0 : OUT STD_LOGIC;
    A_pinv_V_we0 : OUT STD_LOGIC;
    A_pinv_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_pinv_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2133_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2133_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2133_p_ce : OUT STD_LOGIC );
end;


architecture behav of LLSSineReconstruction_computeRemainingChannels is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_80000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv7_6C : STD_LOGIC_VECTOR (6 downto 0) := "1101100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_2B : STD_LOGIC_VECTOR (11 downto 0) := "000000101011";
    constant ap_const_lv12_FD5 : STD_LOGIC_VECTOR (11 downto 0) := "111111010101";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_7D4 : STD_LOGIC_VECTOR (10 downto 0) := "11111010100";
    constant ap_const_lv43_0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000000";
    constant ap_const_lv107_9D1462CEAA19E : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000001001110100010100011000101100111010101010000110011110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_59 : STD_LOGIC_VECTOR (6 downto 0) := "1011001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_2931 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_89_reg_4828 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ireg_fu_3018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_reg_5383 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_139_reg_5389 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_3034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_5395 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln588_cast_fu_3040_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln588_cast_reg_5402 : STD_LOGIC_VECTOR (53 downto 0);
    signal xor_ln571_fu_3047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_reg_5407 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln298_fu_3053_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln298_reg_5412 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln298_fu_3059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln298_reg_5417 : STD_LOGIC_VECTOR (63 downto 0);
    signal mag_samples_sample_V_addr_24_reg_5426 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln298_fu_3064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln301_fu_3074_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln301_reg_5431 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln301_fu_3078_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln301_reg_5436 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln22_fu_3086_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln22_reg_5441 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_12_fu_3090_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_12_reg_5446 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln34_fu_3161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_5454 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln301_fu_3100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_18_fu_3189_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_6010 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln307_fu_3197_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln307_reg_6015 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln307_fu_3223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln307_reg_6020 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln307_reg_6020_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln307_reg_6020_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln312_fu_3234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln312_reg_6024 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln312_reg_6024_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_fu_3520_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal rhs_reg_6094 : STD_LOGIC_VECTOR (106 downto 0);
    signal shl_ln_fu_3528_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_6099 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_6099_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_6099_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal sample_period_samples_2_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_load_reg_6104 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state10_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sample_period_samples_3_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_load_reg_6109 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_load_reg_6114 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_load_reg_6119 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_load_reg_6124 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_load_reg_6129 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_load_reg_6134 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_load_reg_6139 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_load_reg_6144 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_load_reg_6149 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_3545_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_reg_6154 : STD_LOGIC_VECTOR (106 downto 0);
    signal tmp_101_reg_6159 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_2_fu_3576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal angle_2_reg_6164 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state11_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal p_Result_141_reg_6171 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_2_fu_3590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_2_reg_6177 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state12_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state26_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_V_23_fu_3600_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_23_reg_6182 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln944_2_fu_3628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_2_reg_6188 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln954_2_fu_3726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_2_reg_6194 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_5_fu_3746_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_5_reg_6199 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_2_fu_3754_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_2_reg_6204 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sin_or_cos_float_s_fu_2989_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_6209 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_145_fu_3895_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_145_reg_6215 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_13_fu_3939_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_13_reg_6220 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln575_2_fu_3959_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln575_2_reg_6227 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln585_2_fu_3999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_2_reg_6232 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_2_fu_4021_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln586_2_reg_6237 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln591_3_fu_4035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_3_reg_6242 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_2_fu_4065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_2_reg_6247 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_11_fu_4089_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_11_reg_6252 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln571_8_fu_4097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_8_reg_6257 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_10_fu_4109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_10_reg_6262 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_4223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_6267 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal p_Result_147_fu_4229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_147_reg_6272 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_24_fu_4243_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_24_reg_6277 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln944_fu_4273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_6283 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln954_fu_4371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_reg_6289 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_fu_4391_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_reg_6294 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_4399_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_6299 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln935_1_fu_4403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_reg_6304 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_151_fu_4409_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_151_reg_6309 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_25_fu_4423_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_25_reg_6314 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln944_1_fu_4453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_reg_6320 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln954_1_fu_4551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_1_reg_6326 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_3_fu_4571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln954_3_reg_6331 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_1_fu_4579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_1_reg_6336 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state15_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state14_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state28_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal sample_period_samples_0_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_0_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_1_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_2_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_3_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_4_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_5_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_6_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_7_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_8_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_9_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_10_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_period_samples_11_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_sample_V_ce0 : STD_LOGIC;
    signal mag_samples_sample_V_we0 : STD_LOGIC;
    signal mag_samples_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal mag_samples_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mag_samples_sample_V_ce1 : STD_LOGIC;
    signal mag_samples_sample_V_we1 : STD_LOGIC;
    signal mag_samples_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_ce0 : STD_LOGIC;
    signal x_V_we0 : STD_LOGIC;
    signal x_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_ce1 : STD_LOGIC;
    signal x_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_done : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_idle : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_ready : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce1 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_ce0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_we0 : STD_LOGIC;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_float_s_fu_2989_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_2989_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_2989_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_2989_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_2989_t_in : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_2908 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal i_reg_2919 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_phi_mux_j_phi_fu_2935_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_sin_or_cos_float_s_fu_2989_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal j_cast2_fu_3203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln319_fu_3536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln320_fu_4218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal select_ln571_14_fu_4205_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state13_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state27_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_3002_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln702_fu_3006_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_3002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln555_fu_3022_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln301_fu_3074_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln301_fu_3078_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln301_fu_3096_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln22_fu_3106_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln22_fu_3112_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_2_fu_3116_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_98_fu_3127_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_3135_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_fu_3143_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_3121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_idx_fu_3149_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_idx_4_fu_3154_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast_fu_3219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln310_fu_3229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_tmp_fu_3239_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_3252_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_140_fu_3255_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_3263_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_9_fu_3267_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln455_fu_3248_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_3280_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_3290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_3296_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_3302_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_fu_3273_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_3308_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_100_fu_3336_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln586_fu_3352_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_fu_3356_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln585_fu_3330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ashr_ln586_fu_3360_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln585_fu_3366_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln583_fu_3322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln604_fu_3383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln575_fu_3286_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln591_fu_3393_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln591_fu_3399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln591_fu_3377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_131_fu_3403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_fu_3411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln591_fu_3373_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln415_fu_3418_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal icmp_ln582_fu_3316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_3433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_3438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_3450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_3346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_3456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_3462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_3444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_fu_3422_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln585_fu_3326_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal select_ln571_fu_3473_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal and_ln582_fu_3428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_3468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_6_fu_3485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_3387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_8_fu_3497_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln571_fu_3481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln571_7_fu_3491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_9_fu_3504_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_10_fu_3512_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_3545_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal ret_V_fu_3559_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal angle_fu_3563_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_14_fu_3573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_21_fu_3595_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_142_fu_3606_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_3616_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_5_fu_3624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_5_fu_3634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_3640_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_2_fu_3656_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln947_2_fu_3660_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln947_2_fu_3666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln949_2_fu_3676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln947_2_fu_3670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln949_2_fu_3680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln949_4_fu_3686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln949_5_fu_3692_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_fu_3704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_143_fu_3718_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_2_fu_3712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_2_fu_3650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_2_fu_3698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_2_fu_3738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_6_fu_3732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_2_fu_3758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_2_fu_3763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln954_2_fu_3772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_2_fu_3777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln954_2_fu_3781_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln955_2_fu_3767_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_32_fu_3786_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_2_fu_3793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_33_fu_3796_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_35_fu_3802_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_134_fu_3816_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_2_fu_3832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_2_fu_3824_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_2_fu_3837_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_2_fu_3812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_3843_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_144_fu_3850_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_9_fu_3862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_2_fu_3866_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ireg_2_fu_3887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_2_fu_3903_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_2_fu_3917_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_146_fu_3921_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_2_fu_3929_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_12_fu_3933_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln555_2_fu_3891_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_2_fu_3913_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_2_fu_3953_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_3_fu_3963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_4_fu_3969_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_2_fu_3975_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_fu_3981_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_107_fu_4005_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln583_2_fu_3995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln604_2_fu_4025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln571_2_fu_3947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_2_fu_3989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_2_fu_4041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_2_fu_4053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_2_fu_4059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_2_fu_4071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_2_fu_4015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_2_fu_4077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_4029_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln603_2_fu_4083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_2_fu_4047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_9_fu_4103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln586_4_fu_4118_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln702_2_fu_4126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_4129_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ashr_ln586_2_fu_4121_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln588_2_cast_fu_4137_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln585_1_fu_4145_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal add_ln591_3_fu_4156_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln591_3_fu_4161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_138_fu_4165_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_2_fu_4172_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln591_1_fu_4152_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln415_15_fu_4178_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal add_ln415_15_fu_4182_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln585_1_fu_4115_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal select_ln571_12_fu_4188_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln571_2_fu_4195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_13_fu_4199_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln320_fu_4213_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_V_fu_4237_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_148_fu_4251_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_4261_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_4269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_4279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_4285_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_4301_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln947_fu_4305_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln947_fu_4311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln949_fu_4321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln947_fu_4315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln949_fu_4325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln949_3_fu_4331_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln949_fu_4337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_fu_4349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_149_fu_4363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_4357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_fu_4295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_4343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_fu_4383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_2_fu_4377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_18_fu_4417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_152_fu_4431_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_4441_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_4_fu_4449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_4_fu_4459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_fu_4465_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_1_fu_4481_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln947_1_fu_4485_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln947_1_fu_4491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln949_1_fu_4501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln947_1_fu_4495_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln949_1_fu_4505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln949_fu_4511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln949_3_fu_4517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_fu_4529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_153_fu_4543_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_1_fu_4537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_1_fu_4475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_1_fu_4523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_1_fu_4563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_4_fu_4557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_fu_4583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_fu_4588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln954_fu_4597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_fu_4602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln954_fu_4606_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln955_fu_4592_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_4611_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_4618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_26_fu_4621_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_36_fu_4627_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_4641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_4657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_fu_4649_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_4662_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_4637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_4668_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_150_fu_4675_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_4687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_fu_4691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln955_1_fu_4703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_1_fu_4708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln954_1_fu_4717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_1_fu_4722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln954_1_fu_4726_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln955_1_fu_4712_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_29_fu_4731_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_1_fu_4738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_30_fu_4741_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_37_fu_4747_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_123_fu_4761_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_1_fu_4777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_1_fu_4769_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_1_fu_4782_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_1_fu_4757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_4788_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_154_fu_4795_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_7_fu_4807_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_1_fu_4811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_3002_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_computeLeastSquaresSolution_160_3_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (54 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_we0 : OUT STD_LOGIC;
        x_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        sigma_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        sigma_V_ce0 : OUT STD_LOGIC;
        sigma_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sigma_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        sigma_V_ce1 : OUT STD_LOGIC;
        sigma_V_we1 : OUT STD_LOGIC;
        sigma_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matU_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        matU_V_ce0 : OUT STD_LOGIC;
        matU_V_we0 : OUT STD_LOGIC;
        matU_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matU_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_i_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_V_0_ce0 : OUT STD_LOGIC;
        A_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_i_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_V_0_ce1 : OUT STD_LOGIC;
        A_i_V_0_we1 : OUT STD_LOGIC;
        A_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_i_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_V_1_ce0 : OUT STD_LOGIC;
        A_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_i_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_i_V_1_ce1 : OUT STD_LOGIC;
        A_i_V_1_we1 : OUT STD_LOGIC;
        A_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_j_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_V_0_ce0 : OUT STD_LOGIC;
        A_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_j_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_V_0_ce1 : OUT STD_LOGIC;
        A_j_V_0_we1 : OUT STD_LOGIC;
        A_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_j_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_V_1_ce0 : OUT STD_LOGIC;
        A_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_j_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_j_V_1_ce1 : OUT STD_LOGIC;
        A_j_V_1_we1 : OUT STD_LOGIC;
        A_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_V_0_ce0 : OUT STD_LOGIC;
        matA_V_0_we0 : OUT STD_LOGIC;
        matA_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        matA_V_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_V_0_ce1 : OUT STD_LOGIC;
        matA_V_0_we1 : OUT STD_LOGIC;
        matA_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        matA_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_V_1_ce0 : OUT STD_LOGIC;
        matA_V_1_we0 : OUT STD_LOGIC;
        matA_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        matA_V_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matA_V_1_ce1 : OUT STD_LOGIC;
        matA_V_1_we1 : OUT STD_LOGIC;
        matA_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matA_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_i_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_i_V_0_ce0 : OUT STD_LOGIC;
        V_i_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_i_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_i_V_0_ce1 : OUT STD_LOGIC;
        V_i_V_0_we1 : OUT STD_LOGIC;
        V_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        V_i_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_i_V_1_ce0 : OUT STD_LOGIC;
        V_i_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_i_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_i_V_1_ce1 : OUT STD_LOGIC;
        V_i_V_1_we1 : OUT STD_LOGIC;
        V_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        V_j_V_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_j_V_0_ce0 : OUT STD_LOGIC;
        V_j_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_j_V_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_j_V_0_ce1 : OUT STD_LOGIC;
        V_j_V_0_we1 : OUT STD_LOGIC;
        V_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        V_j_V_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_j_V_1_ce0 : OUT STD_LOGIC;
        V_j_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_j_V_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        V_j_V_1_ce1 : OUT STD_LOGIC;
        V_j_V_1_we1 : OUT STD_LOGIC;
        V_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        matV_V_0_ce0 : OUT STD_LOGIC;
        matV_V_0_we0 : OUT STD_LOGIC;
        matV_V_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        matV_V_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        matV_V_0_ce1 : OUT STD_LOGIC;
        matV_V_0_we1 : OUT STD_LOGIC;
        matV_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        matV_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        matV_V_1_ce0 : OUT STD_LOGIC;
        matV_V_1_we0 : OUT STD_LOGIC;
        matV_V_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        matV_V_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        matV_V_1_ce1 : OUT STD_LOGIC;
        matV_V_1_we1 : OUT STD_LOGIC;
        matV_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matV_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        U_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        U_V_ce0 : OUT STD_LOGIC;
        U_V_we0 : OUT STD_LOGIC;
        U_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        U_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        U_V_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        U_V_ce1 : OUT STD_LOGIC;
        U_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        S_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        S_V_ce0 : OUT STD_LOGIC;
        S_V_we0 : OUT STD_LOGIC;
        S_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        S_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V_V_ce0 : OUT STD_LOGIC;
        V_V_we0 : OUT STD_LOGIC;
        V_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        V_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        V_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V_V_ce1 : OUT STD_LOGIC;
        V_V_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        UT_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        UT_V_ce0 : OUT STD_LOGIC;
        UT_V_we0 : OUT STD_LOGIC;
        UT_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        UT_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_pinv_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        A_pinv_V_ce0 : OUT STD_LOGIC;
        A_pinv_V_we0 : OUT STD_LOGIC;
        A_pinv_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_pinv_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_sin_or_cos_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LLSSineReconstruction_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_mul_64s_53ns_107_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        dout : OUT STD_LOGIC_VECTOR (106 downto 0) );
    end component;


    component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_loadData_mag_samples_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    sample_period_samples_0_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_0_sample_V_address0,
        ce0 => sample_period_samples_0_sample_V_ce0,
        we0 => sample_period_samples_0_sample_V_we0,
        d0 => sample_period_samples_0_sample_V_d0,
        q0 => sample_period_samples_0_sample_V_q0,
        address1 => sample_period_samples_0_sample_V_address1,
        ce1 => sample_period_samples_0_sample_V_ce1,
        we1 => sample_period_samples_0_sample_V_we1,
        d1 => sample_period_samples_0_sample_V_d1);

    sample_period_samples_1_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_1_sample_V_address0,
        ce0 => sample_period_samples_1_sample_V_ce0,
        we0 => sample_period_samples_1_sample_V_we0,
        d0 => sample_period_samples_1_sample_V_d0,
        q0 => sample_period_samples_1_sample_V_q0,
        address1 => sample_period_samples_1_sample_V_address1,
        ce1 => sample_period_samples_1_sample_V_ce1,
        we1 => sample_period_samples_1_sample_V_we1,
        d1 => sample_period_samples_1_sample_V_d1);

    sample_period_samples_2_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_2_sample_V_address0,
        ce0 => sample_period_samples_2_sample_V_ce0,
        we0 => sample_period_samples_2_sample_V_we0,
        d0 => sample_period_samples_2_sample_V_d0,
        q0 => sample_period_samples_2_sample_V_q0,
        address1 => sample_period_samples_2_sample_V_address1,
        ce1 => sample_period_samples_2_sample_V_ce1,
        we1 => sample_period_samples_2_sample_V_we1,
        d1 => sample_period_samples_2_sample_V_d1);

    sample_period_samples_3_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_3_sample_V_address0,
        ce0 => sample_period_samples_3_sample_V_ce0,
        we0 => sample_period_samples_3_sample_V_we0,
        d0 => sample_period_samples_3_sample_V_d0,
        q0 => sample_period_samples_3_sample_V_q0,
        address1 => sample_period_samples_3_sample_V_address1,
        ce1 => sample_period_samples_3_sample_V_ce1,
        we1 => sample_period_samples_3_sample_V_we1,
        d1 => sample_period_samples_3_sample_V_d1);

    sample_period_samples_4_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_4_sample_V_address0,
        ce0 => sample_period_samples_4_sample_V_ce0,
        we0 => sample_period_samples_4_sample_V_we0,
        d0 => sample_period_samples_4_sample_V_d0,
        q0 => sample_period_samples_4_sample_V_q0,
        address1 => sample_period_samples_4_sample_V_address1,
        ce1 => sample_period_samples_4_sample_V_ce1,
        we1 => sample_period_samples_4_sample_V_we1,
        d1 => sample_period_samples_4_sample_V_d1);

    sample_period_samples_5_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_5_sample_V_address0,
        ce0 => sample_period_samples_5_sample_V_ce0,
        we0 => sample_period_samples_5_sample_V_we0,
        d0 => sample_period_samples_5_sample_V_d0,
        q0 => sample_period_samples_5_sample_V_q0,
        address1 => sample_period_samples_5_sample_V_address1,
        ce1 => sample_period_samples_5_sample_V_ce1,
        we1 => sample_period_samples_5_sample_V_we1,
        d1 => sample_period_samples_5_sample_V_d1);

    sample_period_samples_6_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_6_sample_V_address0,
        ce0 => sample_period_samples_6_sample_V_ce0,
        we0 => sample_period_samples_6_sample_V_we0,
        d0 => sample_period_samples_6_sample_V_d0,
        q0 => sample_period_samples_6_sample_V_q0,
        address1 => sample_period_samples_6_sample_V_address1,
        ce1 => sample_period_samples_6_sample_V_ce1,
        we1 => sample_period_samples_6_sample_V_we1,
        d1 => sample_period_samples_6_sample_V_d1);

    sample_period_samples_7_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_7_sample_V_address0,
        ce0 => sample_period_samples_7_sample_V_ce0,
        we0 => sample_period_samples_7_sample_V_we0,
        d0 => sample_period_samples_7_sample_V_d0,
        q0 => sample_period_samples_7_sample_V_q0,
        address1 => sample_period_samples_7_sample_V_address1,
        ce1 => sample_period_samples_7_sample_V_ce1,
        we1 => sample_period_samples_7_sample_V_we1,
        d1 => sample_period_samples_7_sample_V_d1);

    sample_period_samples_8_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_8_sample_V_address0,
        ce0 => sample_period_samples_8_sample_V_ce0,
        we0 => sample_period_samples_8_sample_V_we0,
        d0 => sample_period_samples_8_sample_V_d0,
        q0 => sample_period_samples_8_sample_V_q0,
        address1 => sample_period_samples_8_sample_V_address1,
        ce1 => sample_period_samples_8_sample_V_ce1,
        we1 => sample_period_samples_8_sample_V_we1,
        d1 => sample_period_samples_8_sample_V_d1);

    sample_period_samples_9_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_9_sample_V_address0,
        ce0 => sample_period_samples_9_sample_V_ce0,
        we0 => sample_period_samples_9_sample_V_we0,
        d0 => sample_period_samples_9_sample_V_d0,
        q0 => sample_period_samples_9_sample_V_q0,
        address1 => sample_period_samples_9_sample_V_address1,
        ce1 => sample_period_samples_9_sample_V_ce1,
        we1 => sample_period_samples_9_sample_V_we1,
        d1 => sample_period_samples_9_sample_V_d1);

    sample_period_samples_10_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_10_sample_V_address0,
        ce0 => sample_period_samples_10_sample_V_ce0,
        we0 => sample_period_samples_10_sample_V_we0,
        d0 => sample_period_samples_10_sample_V_d0,
        q0 => sample_period_samples_10_sample_V_q0,
        address1 => sample_period_samples_10_sample_V_address1,
        ce1 => sample_period_samples_10_sample_V_ce1,
        we1 => sample_period_samples_10_sample_V_we1,
        d1 => sample_period_samples_10_sample_V_d1);

    sample_period_samples_11_sample_V_U : component LLSSineReconstruction_loadData_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_11_sample_V_address0,
        ce0 => sample_period_samples_11_sample_V_ce0,
        we0 => sample_period_samples_11_sample_V_we0,
        d0 => sample_period_samples_11_sample_V_d0,
        q0 => sample_period_samples_11_sample_V_q0,
        address1 => sample_period_samples_11_sample_V_address1,
        ce1 => sample_period_samples_11_sample_V_ce1,
        we1 => sample_period_samples_11_sample_V_we1,
        d1 => sample_period_samples_11_sample_V_d1);

    mag_samples_sample_V_U : component LLSSineReconstruction_loadData_mag_samples_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mag_samples_sample_V_address0,
        ce0 => mag_samples_sample_V_ce0,
        we0 => mag_samples_sample_V_we0,
        d0 => mag_samples_sample_V_d0,
        q0 => mag_samples_sample_V_q0,
        address1 => mag_samples_sample_V_address1,
        ce1 => mag_samples_sample_V_ce1,
        we1 => mag_samples_sample_V_we1,
        d1 => mag_samples_sample_V_d1);

    x_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp2_V
    generic map (
        DataWidth => 64,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_V_address0,
        ce0 => x_V_ce0,
        we0 => x_V_we0,
        d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_d0,
        q0 => x_V_q0,
        address1 => x_V_address1,
        ce1 => x_V_ce1,
        q1 => x_V_q1);

    grp_computeLeastSquaresSolution_160_3_1_fu_2942 : component LLSSineReconstruction_computeLeastSquaresSolution_160_3_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start,
        ap_done => grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_done,
        ap_idle => grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_idle,
        ap_ready => grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_ready,
        A_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_address0,
        A_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_ce0,
        A_q0 => this_A_q0,
        b_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_address0,
        b_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_ce0,
        b_q0 => this_b_q0,
        x_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_address0,
        x_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_ce0,
        x_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_we0,
        x_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_d0,
        sigma_V_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address0,
        sigma_V_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce0,
        sigma_V_q0 => sigma_V_q0,
        sigma_V_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address1,
        sigma_V_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce1,
        sigma_V_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_we1,
        sigma_V_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_d1,
        matU_V_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_address0,
        matU_V_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_ce0,
        matU_V_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_we0,
        matU_V_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_d0,
        matU_V_q0 => matU_V_q0,
        A_i_V_0_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address0,
        A_i_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce0,
        A_i_V_0_q0 => A_i_V_0_q0,
        A_i_V_0_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address1,
        A_i_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce1,
        A_i_V_0_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_we1,
        A_i_V_0_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_d1,
        A_i_V_1_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address0,
        A_i_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce0,
        A_i_V_1_q0 => A_i_V_1_q0,
        A_i_V_1_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address1,
        A_i_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce1,
        A_i_V_1_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_we1,
        A_i_V_1_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_d1,
        A_j_V_0_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address0,
        A_j_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce0,
        A_j_V_0_q0 => A_j_V_0_q0,
        A_j_V_0_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address1,
        A_j_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce1,
        A_j_V_0_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_we1,
        A_j_V_0_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_d1,
        A_j_V_1_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address0,
        A_j_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce0,
        A_j_V_1_q0 => A_j_V_1_q0,
        A_j_V_1_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address1,
        A_j_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce1,
        A_j_V_1_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_we1,
        A_j_V_1_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_d1,
        matA_V_0_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address0,
        matA_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce0,
        matA_V_0_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we0,
        matA_V_0_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d0,
        matA_V_0_q0 => matA_V_0_q0,
        matA_V_0_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address1,
        matA_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce1,
        matA_V_0_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we1,
        matA_V_0_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d1,
        matA_V_0_q1 => matA_V_0_q1,
        matA_V_1_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address0,
        matA_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce0,
        matA_V_1_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we0,
        matA_V_1_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d0,
        matA_V_1_q0 => matA_V_1_q0,
        matA_V_1_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address1,
        matA_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce1,
        matA_V_1_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we1,
        matA_V_1_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d1,
        matA_V_1_q1 => matA_V_1_q1,
        V_i_V_0_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address0,
        V_i_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce0,
        V_i_V_0_q0 => V_i_V_0_q0,
        V_i_V_0_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address1,
        V_i_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce1,
        V_i_V_0_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_we1,
        V_i_V_0_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_d1,
        V_i_V_1_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address0,
        V_i_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce0,
        V_i_V_1_q0 => V_i_V_1_q0,
        V_i_V_1_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address1,
        V_i_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce1,
        V_i_V_1_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_we1,
        V_i_V_1_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_d1,
        V_j_V_0_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address0,
        V_j_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce0,
        V_j_V_0_q0 => V_j_V_0_q0,
        V_j_V_0_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address1,
        V_j_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce1,
        V_j_V_0_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_we1,
        V_j_V_0_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_d1,
        V_j_V_1_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address0,
        V_j_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce0,
        V_j_V_1_q0 => V_j_V_1_q0,
        V_j_V_1_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address1,
        V_j_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce1,
        V_j_V_1_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_we1,
        V_j_V_1_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_d1,
        matV_V_0_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address0,
        matV_V_0_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce0,
        matV_V_0_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we0,
        matV_V_0_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d0,
        matV_V_0_q0 => matV_V_0_q0,
        matV_V_0_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address1,
        matV_V_0_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce1,
        matV_V_0_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we1,
        matV_V_0_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d1,
        matV_V_0_q1 => matV_V_0_q1,
        matV_V_1_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address0,
        matV_V_1_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce0,
        matV_V_1_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we0,
        matV_V_1_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d0,
        matV_V_1_q0 => matV_V_1_q0,
        matV_V_1_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address1,
        matV_V_1_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce1,
        matV_V_1_we1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we1,
        matV_V_1_d1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d1,
        matV_V_1_q1 => matV_V_1_q1,
        U_V_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address0,
        U_V_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce0,
        U_V_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_we0,
        U_V_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_d0,
        U_V_q0 => U_V_q0,
        U_V_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address1,
        U_V_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce1,
        U_V_q1 => U_V_q1,
        S_V_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_address0,
        S_V_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_ce0,
        S_V_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_we0,
        S_V_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_d0,
        S_V_q0 => S_V_q0,
        V_V_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address0,
        V_V_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce0,
        V_V_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_we0,
        V_V_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_d0,
        V_V_q0 => V_V_q0,
        V_V_address1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address1,
        V_V_ce1 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce1,
        V_V_q1 => V_V_q1,
        UT_V_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_address0,
        UT_V_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_ce0,
        UT_V_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_we0,
        UT_V_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_d0,
        UT_V_q0 => UT_V_q0,
        A_pinv_V_address0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_address0,
        A_pinv_V_ce0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_ce0,
        A_pinv_V_we0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_we0,
        A_pinv_V_d0 => grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_d0,
        A_pinv_V_q0 => A_pinv_V_q0);

    grp_sin_or_cos_float_s_fu_2989 : component LLSSineReconstruction_sin_or_cos_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_s_fu_2989_ap_start,
        ap_done => grp_sin_or_cos_float_s_fu_2989_ap_done,
        ap_idle => grp_sin_or_cos_float_s_fu_2989_ap_idle,
        ap_ready => grp_sin_or_cos_float_s_fu_2989_ap_ready,
        t_in => grp_sin_or_cos_float_s_fu_2989_t_in,
        ap_return => grp_sin_or_cos_float_s_fu_2989_ap_return);

    mul_64s_53ns_107_1_1_U886 : component LLSSineReconstruction_mul_64s_53ns_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 53,
        dout_WIDTH => 107)
    port map (
        din0 => this_times_q0,
        din1 => r_V_fu_3545_p1,
        dout => r_V_fu_3545_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln301_fu_3100_p2 = ap_const_lv1_1))) then 
                    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_ready = ap_const_logic_1)) then 
                    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_s_fu_2989_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_s_fu_2989_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    grp_sin_or_cos_float_s_fu_2989_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_s_fu_2989_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_s_fu_2989_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_2919_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln298_fu_3064_p2 = ap_const_lv1_0))) then 
                i_reg_2919 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_reg_2919 <= i_12_reg_5446;
            end if; 
        end if;
    end process;

    j_reg_2931_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_2931 <= add_ln307_reg_6015;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_2931 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_2908_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                k_reg_2908 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                k_reg_2908 <= add_ln298_reg_5412;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln298_reg_5412 <= add_ln298_fu_3053_p2;
                    zext_ln298_reg_5417(3 downto 0) <= zext_ln298_fu_3059_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln307_reg_6015 <= add_ln307_fu_3197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln307_reg_6020_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                and_ln581_2_reg_6247 <= and_ln581_2_fu_4065_p2;
                icmp_ln585_2_reg_6232 <= icmp_ln585_2_fu_3999_p2;
                icmp_ln591_3_reg_6242 <= icmp_ln591_3_fu_4035_p2;
                man_V_13_reg_6220 <= man_V_13_fu_3939_p3;
                or_ln571_10_reg_6262 <= or_ln571_10_fu_4109_p2;
                or_ln571_8_reg_6257 <= or_ln571_8_fu_4097_p2;
                p_Result_145_reg_6215 <= ireg_2_fu_3887_p1(63 downto 63);
                select_ln571_11_reg_6252 <= select_ln571_11_fu_4089_p3;
                trunc_ln575_2_reg_6227 <= trunc_ln575_2_fu_3959_p1;
                trunc_ln586_2_reg_6237 <= trunc_ln586_2_fu_4021_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                angle_2_reg_6164 <= angle_2_fu_3576_p2;
                p_Result_141_reg_6171 <= angle_2_fu_3576_p2(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_12_reg_5446 <= i_12_fu_3090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln307_reg_6020 <= icmp_ln307_fu_3223_p2;
                icmp_ln307_reg_6020_pp0_iter1_reg <= icmp_ln307_reg_6020;
                icmp_ln307_reg_6020_pp0_iter2_reg <= icmp_ln307_reg_6020_pp0_iter1_reg;
                    shl_ln_reg_6099_pp0_iter1_reg(8 downto 1) <= shl_ln_reg_6099(8 downto 1);
                    shl_ln_reg_6099_pp0_iter2_reg(8 downto 1) <= shl_ln_reg_6099_pp0_iter1_reg(8 downto 1);
                    zext_ln312_reg_6024_pp0_iter1_reg(7 downto 0) <= zext_ln312_reg_6024(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln571_reg_5395 <= icmp_ln571_fu_3034_p2;
                ireg_reg_5383 <= ireg_fu_3018_p1;
                p_Result_139_reg_5389 <= ireg_fu_3018_p1(63 downto 63);
                trunc_ln588_cast_reg_5402 <= trunc_ln588_cast_fu_3040_p3;
                xor_ln571_reg_5407 <= xor_ln571_fu_3047_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                icmp_ln935_1_reg_6304 <= icmp_ln935_1_fu_4403_p2;
                icmp_ln935_reg_6267 <= icmp_ln935_fu_4223_p2;
                icmp_ln954_1_reg_6326 <= icmp_ln954_1_fu_4551_p2;
                icmp_ln954_reg_6289 <= icmp_ln954_fu_4371_p2;
                p_Result_147_reg_6272 <= x_V_q1(63 downto 63);
                p_Result_151_reg_6309 <= x_V_q0(63 downto 63);
                select_ln954_3_reg_6331 <= select_ln954_3_fu_4571_p3;
                select_ln954_reg_6294 <= select_ln954_fu_4391_p3;
                sub_ln944_1_reg_6320 <= sub_ln944_1_fu_4453_p2;
                sub_ln944_reg_6283 <= sub_ln944_fu_4273_p2;
                tmp_V_24_reg_6277 <= tmp_V_24_fu_4243_p3;
                tmp_V_25_reg_6314 <= tmp_V_25_fu_4423_p3;
                trunc_ln943_1_reg_6336 <= trunc_ln943_1_fu_4579_p1;
                trunc_ln943_reg_6299 <= trunc_ln943_fu_4399_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                icmp_ln935_2_reg_6177 <= icmp_ln935_2_fu_3590_p2;
                icmp_ln954_2_reg_6194 <= icmp_ln954_2_fu_3726_p2;
                select_ln954_5_reg_6199 <= select_ln954_5_fu_3746_p3;
                sub_ln944_2_reg_6188 <= sub_ln944_2_fu_3628_p2;
                tmp_V_23_reg_6182 <= tmp_V_23_fu_3600_p3;
                trunc_ln943_2_reg_6204 <= trunc_ln943_2_fu_3754_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln298_fu_3064_p2 = ap_const_lv1_0))) then
                mag_samples_sample_V_addr_24_reg_5426 <= zext_ln298_fu_3059_p1(4 - 1 downto 0);
                sext_ln301_reg_5436 <= sext_ln301_fu_3078_p1;
                trunc_ln22_reg_5441 <= trunc_ln22_fu_3086_p1;
                trunc_ln301_reg_5431 <= trunc_ln301_fu_3074_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                r_V_reg_6154 <= r_V_fu_3545_p2;
                tmp_101_reg_6159 <= r_V_fu_3545_p2(42 downto 42);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln307_fu_3223_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    rhs_reg_6094(106 downto 43) <= rhs_fu_3520_p3(106 downto 43);
                    shl_ln_reg_6099(8 downto 1) <= shl_ln_fu_3528_p3(8 downto 1);
                    zext_ln312_reg_6024(7 downto 0) <= zext_ln312_fu_3234_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                sample_period_samples_10_sample_V_load_reg_6144 <= sample_period_samples_10_sample_V_q0;
                sample_period_samples_11_sample_V_load_reg_6149 <= sample_period_samples_11_sample_V_q0;
                sample_period_samples_2_sample_V_load_reg_6104 <= sample_period_samples_2_sample_V_q0;
                sample_period_samples_3_sample_V_load_reg_6109 <= sample_period_samples_3_sample_V_q0;
                sample_period_samples_4_sample_V_load_reg_6114 <= sample_period_samples_4_sample_V_q0;
                sample_period_samples_5_sample_V_load_reg_6119 <= sample_period_samples_5_sample_V_q0;
                sample_period_samples_6_sample_V_load_reg_6124 <= sample_period_samples_6_sample_V_q0;
                sample_period_samples_7_sample_V_load_reg_6129 <= sample_period_samples_7_sample_V_q0;
                sample_period_samples_8_sample_V_load_reg_6134 <= sample_period_samples_8_sample_V_q0;
                sample_period_samples_9_sample_V_load_reg_6139 <= sample_period_samples_9_sample_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    tmp_18_reg_6010(7 downto 3) <= tmp_18_fu_3189_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_89_reg_4828 <= bitcast_ln702_fu_3006_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln307_reg_6020_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                v_assign_reg_6209 <= grp_sin_or_cos_float_s_fu_2989_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln301_fu_3100_p2 = ap_const_lv1_0))) then
                    zext_ln34_reg_5454(4 downto 0) <= zext_ln34_fu_3161_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln298_reg_5417(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln34_reg_5454(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_18_reg_6010(2 downto 0) <= "000";
    zext_ln312_reg_6024(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln312_reg_6024_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    rhs_reg_6094(42 downto 0) <= "0000000000000000000000000000000000000000000";
    shl_ln_reg_6099(0) <= '0';
    shl_ln_reg_6099_pp0_iter1_reg(0) <= '0';
    shl_ln_reg_6099_pp0_iter2_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln298_fu_3064_p2, ap_CS_fsm_state4, icmp_ln301_fu_3100_p2, ap_enable_reg_pp0_iter0, icmp_ln307_fu_3223_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage6_subdone, ap_block_pp0_stage5_subdone, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter2, grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_done, ap_CS_fsm_state30, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln298_fu_3064_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln301_fu_3100_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln307_fu_3223_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln307_fu_3223_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_i_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address0;
    A_i_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address1;
    A_i_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce0;
    A_i_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce1;
    A_i_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_d1;
    A_i_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_we1;
    A_i_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address0;
    A_i_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address1;
    A_i_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce0;
    A_i_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce1;
    A_i_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_d1;
    A_i_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_we1;
    A_j_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address0;
    A_j_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address1;
    A_j_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce0;
    A_j_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce1;
    A_j_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_d1;
    A_j_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_we1;
    A_j_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address0;
    A_j_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address1;
    A_j_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce0;
    A_j_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce1;
    A_j_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_d1;
    A_j_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_we1;
    A_pinv_V_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_address0;
    A_pinv_V_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_ce0;
    A_pinv_V_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_d0;
    A_pinv_V_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_we0;
    F2_2_fu_3953_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_2_fu_3913_p1));
    F2_fu_3280_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_3248_p1));
    LD_7_fu_4807_p1 <= p_Result_154_fu_4795_p5(32 - 1 downto 0);
    LD_9_fu_3862_p1 <= p_Result_144_fu_3850_p5(32 - 1 downto 0);
    LD_fu_4687_p1 <= p_Result_150_fu_4675_p5(32 - 1 downto 0);
    S_V_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_address0;
    S_V_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_ce0;
    S_V_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_d0;
    S_V_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_we0;
    UT_V_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_address0;
    UT_V_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_ce0;
    UT_V_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_d0;
    UT_V_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_we0;
    U_V_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address0;
    U_V_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address1;
    U_V_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce0;
    U_V_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce1;
    U_V_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_d0;
    U_V_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_we0;
    V_V_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address0;
    V_V_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address1;
    V_V_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce0;
    V_V_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce1;
    V_V_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_d0;
    V_V_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_we0;
    V_i_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address0;
    V_i_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address1;
    V_i_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce0;
    V_i_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce1;
    V_i_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_d1;
    V_i_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_we1;
    V_i_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address0;
    V_i_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address1;
    V_i_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce0;
    V_i_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce1;
    V_i_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_d1;
    V_i_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_we1;
    V_j_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address0;
    V_j_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address1;
    V_j_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce0;
    V_j_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce1;
    V_j_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_d1;
    V_j_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_we1;
    V_j_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address0;
    V_j_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address1;
    V_j_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce0;
    V_j_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce1;
    V_j_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_d1;
    V_j_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_we1;
    add_ln22_2_fu_3116_p2 <= std_logic_vector(signed(sext_ln22_fu_3112_p1) + signed(sext_ln301_reg_5436));
    add_ln22_fu_3106_p2 <= std_logic_vector(unsigned(zext_ln301_fu_3096_p1) + unsigned(ap_const_lv6_2D));
    add_ln28_fu_3143_p2 <= std_logic_vector(unsigned(select_ln28_fu_3135_p3) + unsigned(i_reg_2919));
    add_ln298_fu_3053_p2 <= std_logic_vector(unsigned(k_reg_2908) + unsigned(ap_const_lv4_1));
    add_ln307_fu_3197_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_2935_p4) + unsigned(ap_const_lv4_1));
    add_ln310_fu_3229_p2 <= std_logic_vector(unsigned(tmp_18_reg_6010) + unsigned(j_cast_fu_3219_p1));
    add_ln415_15_fu_4182_p2 <= std_logic_vector(signed(sext_ln591_1_fu_4152_p1) + signed(zext_ln415_15_fu_4178_p1));
    add_ln415_fu_3422_p2 <= std_logic_vector(signed(sext_ln591_fu_3373_p1) + signed(zext_ln415_fu_3418_p1));
    add_ln581_4_fu_3969_p2 <= std_logic_vector(unsigned(F2_2_fu_3953_p2) + unsigned(ap_const_lv12_FD5));
    add_ln581_fu_3296_p2 <= std_logic_vector(unsigned(F2_fu_3280_p2) + unsigned(ap_const_lv12_FD5));
    add_ln591_3_fu_4156_p2 <= std_logic_vector(unsigned(trunc_ln575_2_reg_6227) + unsigned(ap_const_lv11_7D4));
    add_ln591_fu_3393_p2 <= std_logic_vector(unsigned(trunc_ln575_fu_3286_p1) + unsigned(ap_const_lv11_7D4));
    add_ln954_1_fu_4717_p2 <= std_logic_vector(unsigned(sub_ln944_1_reg_6320) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln954_2_fu_3772_p2 <= std_logic_vector(unsigned(sub_ln944_2_reg_6188) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln954_fu_4597_p2 <= std_logic_vector(unsigned(sub_ln944_reg_6283) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln964_1_fu_4782_p2 <= std_logic_vector(unsigned(sub_ln964_1_fu_4777_p2) + unsigned(select_ln943_1_fu_4769_p3));
    add_ln964_2_fu_3837_p2 <= std_logic_vector(unsigned(sub_ln964_2_fu_3832_p2) + unsigned(select_ln943_2_fu_3824_p3));
    add_ln964_fu_4662_p2 <= std_logic_vector(unsigned(sub_ln964_fu_4657_p2) + unsigned(select_ln943_fu_4649_p3));
    and_ln581_2_fu_4065_p2 <= (xor_ln582_2_fu_4059_p2 and icmp_ln581_3_fu_3963_p2);
    and_ln581_fu_3444_p2 <= (xor_ln582_fu_3438_p2 and icmp_ln581_fu_3290_p2);
    and_ln582_2_fu_4047_p2 <= (xor_ln571_2_fu_4041_p2 and icmp_ln582_2_fu_3989_p2);
    and_ln582_fu_3428_p2 <= (xor_ln571_reg_5407 and icmp_ln582_fu_3316_p2);
    and_ln603_2_fu_4083_p2 <= (xor_ln581_2_fu_4077_p2 and icmp_ln603_2_fu_4015_p2);
    and_ln603_fu_3462_p2 <= (xor_ln581_fu_3456_p2 and icmp_ln603_fu_3346_p2);
    and_ln949_2_fu_4377_p2 <= (xor_ln949_fu_4357_p2 and p_Result_149_fu_4363_p3);
    and_ln949_3_fu_4517_p2 <= (tmp_V_25_fu_4423_p3 and or_ln949_fu_4511_p2);
    and_ln949_4_fu_4557_p2 <= (xor_ln949_1_fu_4537_p2 and p_Result_153_fu_4543_p3);
    and_ln949_5_fu_3692_p2 <= (tmp_V_23_fu_3600_p3 and or_ln949_4_fu_3686_p2);
    and_ln949_6_fu_3732_p2 <= (xor_ln949_2_fu_3712_p2 and p_Result_143_fu_3718_p3);
    and_ln949_fu_4337_p2 <= (tmp_V_24_fu_4243_p3 and or_ln949_3_fu_4331_p2);
    angle_2_fu_3576_p2 <= std_logic_vector(unsigned(angle_fu_3563_p4) + unsigned(zext_ln415_14_fu_3573_p1));
    angle_fu_3563_p4 <= ret_V_fu_3559_p2(106 downto 43);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state29 <= ap_CS_fsm(15);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(16);
    ap_CS_fsm_state31 <= ap_CS_fsm(17);
    ap_CS_fsm_state32 <= ap_CS_fsm(18);
    ap_CS_fsm_state33 <= ap_CS_fsm(19);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln307_fu_3223_p2)
    begin
        if ((icmp_ln307_fu_3223_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln298_fu_3064_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln298_fu_3064_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_2935_p4_assign_proc : process(j_reg_2931, add_ln307_reg_6015, ap_CS_fsm_pp0_stage0, icmp_ln307_reg_6020, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_2935_p4 <= add_ln307_reg_6015;
        else 
            ap_phi_mux_j_phi_fu_2935_p4 <= j_reg_2931;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln298_fu_3064_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln298_fu_3064_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_2_fu_4121_p2 <= std_logic_vector(shift_right(signed(man_V_13_reg_6220),to_integer(unsigned('0' & zext_ln586_4_fu_4118_p1(31-1 downto 0)))));
    ashr_ln586_fu_3360_p2 <= std_logic_vector(shift_right(signed(man_V_fu_3273_p3),to_integer(unsigned('0' & zext_ln586_fu_3356_p1(31-1 downto 0)))));
    bitcast_ln702_2_fu_4126_p1 <= v_assign_reg_6209;
    bitcast_ln702_fu_3006_p1 <= p_read;
    bitcast_ln744_1_fu_4811_p1 <= LD_7_fu_4807_p1;
    bitcast_ln744_2_fu_3866_p1 <= LD_9_fu_3862_p1;
    bitcast_ln744_fu_4691_p1 <= LD_fu_4687_p1;
    buffer_idx_4_fu_3154_p3 <= 
        trunc_ln22_reg_5441 when (icmp_ln24_fu_3121_p2(0) = '1') else 
        buffer_idx_fu_3149_p2;
    buffer_idx_fu_3149_p2 <= std_logic_vector(unsigned(add_ln28_fu_3143_p2) + unsigned(trunc_ln301_reg_5431));
    exp_tmp_2_fu_3903_p4 <= ireg_2_fu_3887_p1(62 downto 52);
    exp_tmp_fu_3239_p4 <= ireg_reg_5383(62 downto 52);
    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg;
    grp_fu_2133_p_ce <= ap_const_logic_1;
    grp_fu_2133_p_din0 <= grp_fu_3002_p0;
    grp_fu_3002_ce <= ap_const_logic_1;

    grp_fu_3002_p0_assign_proc : process(ap_CS_fsm_state1, p_read, ap_CS_fsm_pp0_stage1, v_assign_reg_6209, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_3002_p0 <= v_assign_reg_6209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_3002_p0 <= p_read;
        else 
            grp_fu_3002_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_3002_p1 <= grp_fu_2133_p_dout0;
    grp_sin_or_cos_float_s_fu_2989_ap_start <= grp_sin_or_cos_float_s_fu_2989_ap_start_reg;
    grp_sin_or_cos_float_s_fu_2989_t_in <= 
        ap_const_lv32_0 when (icmp_ln935_2_reg_6177(0) = '1') else 
        bitcast_ln744_2_fu_3866_p1;
    i_12_fu_3090_p2 <= std_logic_vector(unsigned(i_reg_2919) + unsigned(ap_const_lv5_1));
    icmp_ln24_fu_3121_p2 <= "1" when (signed(add_ln22_2_fu_3116_p2) < signed(ap_const_lv7_6C)) else "0";
    icmp_ln298_fu_3064_p2 <= "1" when (k_reg_2908 = ap_const_lv4_C) else "0";
    icmp_ln301_fu_3100_p2 <= "1" when (i_reg_2919 = ap_const_lv5_14) else "0";
    icmp_ln307_fu_3223_p2 <= "1" when (ap_phi_mux_j_phi_fu_2935_p4 = ap_const_lv4_8) else "0";
    icmp_ln571_2_fu_3947_p2 <= "1" when (trunc_ln555_2_fu_3891_p1 = ap_const_lv63_0) else "0";
    icmp_ln571_fu_3034_p2 <= "1" when (trunc_ln555_fu_3022_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_3_fu_3963_p2 <= "1" when (signed(F2_2_fu_3953_p2) > signed(ap_const_lv12_2B)) else "0";
    icmp_ln581_fu_3290_p2 <= "1" when (signed(F2_fu_3280_p2) > signed(ap_const_lv12_2B)) else "0";
    icmp_ln582_2_fu_3989_p2 <= "1" when (F2_2_fu_3953_p2 = ap_const_lv12_2B) else "0";
    icmp_ln582_fu_3316_p2 <= "1" when (F2_fu_3280_p2 = ap_const_lv12_2B) else "0";
    icmp_ln585_2_fu_3999_p2 <= "1" when (unsigned(sh_amt_2_fu_3981_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_3330_p2 <= "1" when (unsigned(sh_amt_fu_3308_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln591_3_fu_4035_p2 <= "1" when (signed(add_ln581_4_fu_3969_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln591_fu_3377_p2 <= "1" when (signed(add_ln581_fu_3296_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln603_2_fu_4015_p2 <= "1" when (tmp_107_fu_4005_p4 = ap_const_lv6_0) else "0";
    icmp_ln603_fu_3346_p2 <= "1" when (tmp_100_fu_3336_p4 = ap_const_lv6_0) else "0";
    icmp_ln935_1_fu_4403_p2 <= "1" when (x_V_q0 = ap_const_lv64_0) else "0";
    icmp_ln935_2_fu_3590_p2 <= "1" when (angle_2_reg_6164 = ap_const_lv64_0) else "0";
    icmp_ln935_fu_4223_p2 <= "1" when (x_V_q1 = ap_const_lv64_0) else "0";
    icmp_ln946_1_fu_4475_p2 <= "1" when (signed(tmp_95_fu_4465_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_2_fu_3650_p2 <= "1" when (signed(tmp_103_fu_3640_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_fu_4295_p2 <= "1" when (signed(tmp_91_fu_4285_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_1_fu_4523_p2 <= "0" when (and_ln949_3_fu_4517_p2 = ap_const_lv64_0) else "1";
    icmp_ln949_2_fu_3698_p2 <= "0" when (and_ln949_5_fu_3692_p2 = ap_const_lv64_0) else "1";
    icmp_ln949_fu_4343_p2 <= "0" when (and_ln949_fu_4337_p2 = ap_const_lv64_0) else "1";
    icmp_ln954_1_fu_4551_p2 <= "1" when (signed(lsb_index_4_fu_4459_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln954_2_fu_3726_p2 <= "1" when (signed(lsb_index_5_fu_3634_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln954_fu_4371_p2 <= "1" when (signed(lsb_index_fu_4279_p2) > signed(ap_const_lv32_0)) else "0";
    ireg_2_fu_3887_p1 <= grp_fu_2133_p_dout0;
    ireg_fu_3018_p1 <= grp_fu_2133_p_dout0;
    j_cast2_fu_3203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_2935_p4),64));
    j_cast_fu_3219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_2935_p4),8));
    l_4_fu_4449_p1 <= tmp_s_fu_4441_p3(32 - 1 downto 0);
    l_5_fu_3624_p1 <= tmp_6_fu_3616_p3(32 - 1 downto 0);
    l_fu_4269_p1 <= tmp_fu_4261_p3(32 - 1 downto 0);
    lsb_index_4_fu_4459_p2 <= std_logic_vector(unsigned(sub_ln944_1_fu_4453_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_5_fu_3634_p2 <= std_logic_vector(unsigned(sub_ln944_2_fu_3628_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_4279_p2 <= std_logic_vector(unsigned(sub_ln944_fu_4273_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln947_1_fu_4495_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_1_fu_4491_p1(31-1 downto 0)))));
    lshr_ln947_2_fu_3670_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_2_fu_3666_p1(31-1 downto 0)))));
    lshr_ln947_fu_4315_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_4311_p1(31-1 downto 0)))));
    lshr_ln954_1_fu_4726_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_25_reg_6314),to_integer(unsigned('0' & zext_ln954_1_fu_4722_p1(31-1 downto 0)))));
    lshr_ln954_2_fu_3781_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_23_reg_6182),to_integer(unsigned('0' & zext_ln954_2_fu_3777_p1(31-1 downto 0)))));
    lshr_ln954_fu_4606_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_24_reg_6277),to_integer(unsigned('0' & zext_ln954_fu_4602_p1(31-1 downto 0)))));
    m_26_fu_4621_p2 <= std_logic_vector(unsigned(m_fu_4611_p3) + unsigned(zext_ln961_fu_4618_p1));
    m_29_fu_4731_p3 <= 
        lshr_ln954_1_fu_4726_p2 when (icmp_ln954_1_reg_6326(0) = '1') else 
        shl_ln955_1_fu_4712_p2;
    m_30_fu_4741_p2 <= std_logic_vector(unsigned(m_29_fu_4731_p3) + unsigned(zext_ln961_1_fu_4738_p1));
    m_32_fu_3786_p3 <= 
        lshr_ln954_2_fu_3781_p2 when (icmp_ln954_2_reg_6194(0) = '1') else 
        shl_ln955_2_fu_3767_p2;
    m_33_fu_3796_p2 <= std_logic_vector(unsigned(m_32_fu_3786_p3) + unsigned(zext_ln961_2_fu_3793_p1));
    m_35_fu_3802_p4 <= m_33_fu_3796_p2(63 downto 1);
    m_36_fu_4627_p4 <= m_26_fu_4621_p2(63 downto 1);
    m_37_fu_4747_p4 <= m_30_fu_4741_p2(63 downto 1);
    m_fu_4611_p3 <= 
        lshr_ln954_fu_4606_p2 when (icmp_ln954_reg_6289(0) = '1') else 
        shl_ln955_fu_4592_p2;

    mag_samples_sample_V_address0_assign_proc : process(mag_samples_sample_V_addr_24_reg_5426, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mag_samples_sample_V_address0 <= mag_samples_sample_V_addr_24_reg_5426;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            mag_samples_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            mag_samples_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    mag_samples_sample_V_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                mag_samples_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                mag_samples_sample_V_address1 <= "XXXX";
            end if;
        else 
            mag_samples_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    mag_samples_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            mag_samples_sample_V_ce0 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            mag_samples_sample_V_ce1 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_d0_assign_proc : process(ap_enable_reg_pp0_iter0, sample_period_samples_2_sample_V_load_reg_6104, ap_CS_fsm_pp0_stage1, sample_period_samples_4_sample_V_load_reg_6114, sample_period_samples_6_sample_V_load_reg_6124, sample_period_samples_8_sample_V_load_reg_6134, sample_period_samples_10_sample_V_load_reg_6144, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, sample_period_samples_1_sample_V_q0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_10_sample_V_load_reg_6144;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_8_sample_V_load_reg_6134;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_6_sample_V_load_reg_6124;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_4_sample_V_load_reg_6114;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_2_sample_V_load_reg_6104;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                mag_samples_sample_V_d0 <= sample_period_samples_1_sample_V_q0;
            else 
                mag_samples_sample_V_d0 <= "XXXXXXXXXXXX";
            end if;
        else 
            mag_samples_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    mag_samples_sample_V_d1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, sample_period_samples_3_sample_V_load_reg_6109, sample_period_samples_5_sample_V_load_reg_6119, sample_period_samples_7_sample_V_load_reg_6129, sample_period_samples_9_sample_V_load_reg_6139, sample_period_samples_11_sample_V_load_reg_6149, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, sample_period_samples_0_sample_V_q0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_11_sample_V_load_reg_6149;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_9_sample_V_load_reg_6139;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_7_sample_V_load_reg_6129;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_5_sample_V_load_reg_6119;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_3_sample_V_load_reg_6109;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                mag_samples_sample_V_d1 <= sample_period_samples_0_sample_V_q0;
            else 
                mag_samples_sample_V_d1 <= "XXXXXXXXXXXX";
            end if;
        else 
            mag_samples_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    mag_samples_sample_V_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln307_reg_6020, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            mag_samples_sample_V_we0 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mag_samples_sample_V_we1_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln307_reg_6020, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln307_reg_6020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            mag_samples_sample_V_we1 <= ap_const_logic_1;
        else 
            mag_samples_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    man_V_12_fu_3933_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_2_fu_3929_p1));
    man_V_13_fu_3939_p3 <= 
        man_V_12_fu_3933_p2 when (p_Result_145_fu_3895_p3(0) = '1') else 
        zext_ln569_2_fu_3929_p1;
    man_V_9_fu_3267_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_3263_p1));
    man_V_fu_3273_p3 <= 
        man_V_9_fu_3267_p2 when (p_Result_139_reg_5389(0) = '1') else 
        zext_ln569_fu_3263_p1;
    matA_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address0;
    matA_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address1;
    matA_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce0;
    matA_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce1;
    matA_V_0_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d0;
    matA_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d1;
    matA_V_0_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we0;
    matA_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we1;
    matA_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address0;
    matA_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address1;
    matA_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce0;
    matA_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce1;
    matA_V_1_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d0;
    matA_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d1;
    matA_V_1_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we0;
    matA_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we1;
    matU_V_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_address0;
    matU_V_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_ce0;
    matU_V_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_d0;
    matU_V_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_we0;
    matV_V_0_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address0;
    matV_V_0_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address1;
    matV_V_0_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce0;
    matV_V_0_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce1;
    matV_V_0_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d0;
    matV_V_0_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d1;
    matV_V_0_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we0;
    matV_V_0_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we1;
    matV_V_1_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address0;
    matV_V_1_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address1;
    matV_V_1_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce0;
    matV_V_1_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce1;
    matV_V_1_d0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d0;
    matV_V_1_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d1;
    matV_V_1_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we0;
    matV_V_1_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we1;
    or_ln320_fu_4213_p2 <= (shl_ln_reg_6099_pp0_iter2_reg or ap_const_lv9_1);
    or_ln571_10_fu_4109_p2 <= (or_ln571_9_fu_4103_p2 or or_ln571_8_fu_4097_p2);
    or_ln571_6_fu_3485_p2 <= (and_ln582_fu_3428_p2 or and_ln581_fu_3444_p2);
    or_ln571_7_fu_3491_p2 <= (or_ln571_fu_3468_p2 or or_ln571_6_fu_3485_p2);
    or_ln571_8_fu_4097_p2 <= (icmp_ln571_2_fu_3947_p2 or and_ln603_2_fu_4083_p2);
    or_ln571_9_fu_4103_p2 <= (and_ln582_2_fu_4047_p2 or and_ln581_2_fu_4065_p2);
    or_ln571_fu_3468_p2 <= (icmp_ln571_reg_5395 or and_ln603_fu_3462_p2);
    or_ln581_2_fu_4071_p2 <= (or_ln582_2_fu_4053_p2 or icmp_ln581_3_fu_3963_p2);
    or_ln581_fu_3450_p2 <= (or_ln582_fu_3433_p2 or icmp_ln581_fu_3290_p2);
    or_ln582_2_fu_4053_p2 <= (icmp_ln582_2_fu_3989_p2 or icmp_ln571_2_fu_3947_p2);
    or_ln582_fu_3433_p2 <= (icmp_ln582_fu_3316_p2 or icmp_ln571_reg_5395);
    or_ln949_3_fu_4331_p2 <= (shl_ln949_fu_4325_p2 or lshr_ln947_fu_4315_p2);
    or_ln949_4_fu_3686_p2 <= (shl_ln949_2_fu_3680_p2 or lshr_ln947_2_fu_3670_p2);
    or_ln949_fu_4511_p2 <= (shl_ln949_1_fu_4505_p2 or lshr_ln947_1_fu_4495_p2);
    p_Result_123_fu_4761_p3 <= m_30_fu_4741_p2(25 downto 25);
    p_Result_131_fu_3403_p3 <= man_V_fu_3273_p3(to_integer(unsigned(zext_ln591_fu_3399_p1)) downto to_integer(unsigned(zext_ln591_fu_3399_p1))) when (to_integer(unsigned(zext_ln591_fu_3399_p1))>= 0 and to_integer(unsigned(zext_ln591_fu_3399_p1))<=53) else "-";
    p_Result_134_fu_3816_p3 <= m_33_fu_3796_p2(25 downto 25);
    p_Result_138_fu_4165_p3 <= man_V_13_reg_6220(to_integer(unsigned(zext_ln591_3_fu_4161_p1)) downto to_integer(unsigned(zext_ln591_3_fu_4161_p1))) when (to_integer(unsigned(zext_ln591_3_fu_4161_p1))>= 0 and to_integer(unsigned(zext_ln591_3_fu_4161_p1))<=53) else "-";
    p_Result_140_fu_3255_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_3252_p1);
    
    p_Result_142_fu_3606_p4_proc : process(tmp_V_23_fu_3600_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable p_Result_142_fu_3606_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_23_fu_3600_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for p_Result_142_fu_3606_p4_i in 0 to 64-1 loop
                v0_cpy(p_Result_142_fu_3606_p4_i) := tmp_V_23_fu_3600_p3(64-1-p_Result_142_fu_3606_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_142_fu_3606_p4 <= resvalue(64-1 downto 0);
    end process;

    p_Result_143_fu_3718_p3 <= tmp_V_23_fu_3600_p3(to_integer(unsigned(lsb_index_5_fu_3634_p2)) downto to_integer(unsigned(lsb_index_5_fu_3634_p2))) when (to_integer(unsigned(lsb_index_5_fu_3634_p2))>= 0 and to_integer(unsigned(lsb_index_5_fu_3634_p2))<=63) else "-";
    p_Result_144_fu_3850_p5 <= (zext_ln962_2_fu_3812_p1(63 downto 32) & tmp_7_fu_3843_p3 & zext_ln962_2_fu_3812_p1(22 downto 0));
    p_Result_145_fu_3895_p3 <= ireg_2_fu_3887_p1(63 downto 63);
    p_Result_146_fu_3921_p3 <= (ap_const_lv1_1 & trunc_ln565_2_fu_3917_p1);
    p_Result_147_fu_4229_p3 <= x_V_q1(63 downto 63);
    
    p_Result_148_fu_4251_p4_proc : process(tmp_V_24_fu_4243_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable p_Result_148_fu_4251_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_24_fu_4243_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for p_Result_148_fu_4251_p4_i in 0 to 64-1 loop
                v0_cpy(p_Result_148_fu_4251_p4_i) := tmp_V_24_fu_4243_p3(64-1-p_Result_148_fu_4251_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_148_fu_4251_p4 <= resvalue(64-1 downto 0);
    end process;

    p_Result_149_fu_4363_p3 <= tmp_V_24_fu_4243_p3(to_integer(unsigned(lsb_index_fu_4279_p2)) downto to_integer(unsigned(lsb_index_fu_4279_p2))) when (to_integer(unsigned(lsb_index_fu_4279_p2))>= 0 and to_integer(unsigned(lsb_index_fu_4279_p2))<=63) else "-";
    p_Result_150_fu_4675_p5 <= (zext_ln962_fu_4637_p1(63 downto 32) & tmp_4_fu_4668_p3 & zext_ln962_fu_4637_p1(22 downto 0));
    p_Result_151_fu_4409_p3 <= x_V_q0(63 downto 63);
    
    p_Result_152_fu_4431_p4_proc : process(tmp_V_25_fu_4423_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable p_Result_152_fu_4431_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_25_fu_4423_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for p_Result_152_fu_4431_p4_i in 0 to 64-1 loop
                v0_cpy(p_Result_152_fu_4431_p4_i) := tmp_V_25_fu_4423_p3(64-1-p_Result_152_fu_4431_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_152_fu_4431_p4 <= resvalue(64-1 downto 0);
    end process;

    p_Result_153_fu_4543_p3 <= tmp_V_25_fu_4423_p3(to_integer(unsigned(lsb_index_4_fu_4459_p2)) downto to_integer(unsigned(lsb_index_4_fu_4459_p2))) when (to_integer(unsigned(lsb_index_4_fu_4459_p2))>= 0 and to_integer(unsigned(lsb_index_4_fu_4459_p2))<=63) else "-";
    p_Result_154_fu_4795_p5 <= (zext_ln962_1_fu_4757_p1(63 downto 32) & tmp_5_fu_4788_p3 & zext_ln962_1_fu_4757_p1(22 downto 0));
    p_Result_s_fu_4641_p3 <= m_26_fu_4621_p2(25 downto 25);
    qb_2_fu_4172_p3 <= 
        p_Result_145_reg_6215 when (icmp_ln591_3_reg_6242(0) = '1') else 
        p_Result_138_fu_4165_p3;
    qb_fu_3411_p3 <= 
        p_Result_139_reg_5389 when (icmp_ln591_fu_3377_p2(0) = '1') else 
        p_Result_131_fu_3403_p3;
    r_V_fu_3545_p1 <= ap_const_lv107_9D1462CEAA19E(53 - 1 downto 0);
    ret_V_fu_3559_p2 <= std_logic_vector(unsigned(rhs_reg_6094) + unsigned(r_V_reg_6154));
    rhs_fu_3520_p3 <= (select_ln571_10_fu_3512_p3 & ap_const_lv43_0);

    sample_period_samples_0_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_0_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_0_q0, sliding_window_buffer_samples_sample_V_5_0_q0, sliding_window_buffer_samples_sample_V_3_0_q0, sliding_window_buffer_samples_sample_V_1_0_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_0_q0;
        else 
            sample_period_samples_0_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_0_q0, sliding_window_buffer_samples_sample_V_4_0_q0, sliding_window_buffer_samples_sample_V_2_0_q0, sliding_window_buffer_samples_sample_V_0_0_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_0_q0;
        else 
            sample_period_samples_0_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_0_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_10_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_10_q0, sliding_window_buffer_samples_sample_V_5_10_q0, sliding_window_buffer_samples_sample_V_3_10_q0, sliding_window_buffer_samples_sample_V_1_10_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_10_q0;
        else 
            sample_period_samples_10_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_10_q0, sliding_window_buffer_samples_sample_V_4_10_q0, sliding_window_buffer_samples_sample_V_2_10_q0, sliding_window_buffer_samples_sample_V_0_10_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_10_q0;
        else 
            sample_period_samples_10_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_10_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_11_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_11_q0, sliding_window_buffer_samples_sample_V_5_11_q0, sliding_window_buffer_samples_sample_V_3_11_q0, sliding_window_buffer_samples_sample_V_1_11_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_11_q0;
        else 
            sample_period_samples_11_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_11_q0, sliding_window_buffer_samples_sample_V_4_11_q0, sliding_window_buffer_samples_sample_V_2_11_q0, sliding_window_buffer_samples_sample_V_0_11_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_11_q0;
        else 
            sample_period_samples_11_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_11_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_1_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_1_q0, sliding_window_buffer_samples_sample_V_5_1_q0, sliding_window_buffer_samples_sample_V_3_1_q0, sliding_window_buffer_samples_sample_V_1_1_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_1_q0;
        else 
            sample_period_samples_1_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_1_q0, sliding_window_buffer_samples_sample_V_4_1_q0, sliding_window_buffer_samples_sample_V_2_1_q0, sliding_window_buffer_samples_sample_V_0_1_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_1_q0;
        else 
            sample_period_samples_1_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_1_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_2_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_2_q0, sliding_window_buffer_samples_sample_V_5_2_q0, sliding_window_buffer_samples_sample_V_3_2_q0, sliding_window_buffer_samples_sample_V_1_2_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_2_q0;
        else 
            sample_period_samples_2_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_2_q0, sliding_window_buffer_samples_sample_V_4_2_q0, sliding_window_buffer_samples_sample_V_2_2_q0, sliding_window_buffer_samples_sample_V_0_2_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_2_q0;
        else 
            sample_period_samples_2_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_2_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_3_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_3_q0, sliding_window_buffer_samples_sample_V_5_3_q0, sliding_window_buffer_samples_sample_V_3_3_q0, sliding_window_buffer_samples_sample_V_1_3_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_3_q0;
        else 
            sample_period_samples_3_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_3_q0, sliding_window_buffer_samples_sample_V_4_3_q0, sliding_window_buffer_samples_sample_V_2_3_q0, sliding_window_buffer_samples_sample_V_0_3_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_3_q0;
        else 
            sample_period_samples_3_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_3_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_4_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_4_q0, sliding_window_buffer_samples_sample_V_5_4_q0, sliding_window_buffer_samples_sample_V_3_4_q0, sliding_window_buffer_samples_sample_V_1_4_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_4_q0;
        else 
            sample_period_samples_4_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_4_q0, sliding_window_buffer_samples_sample_V_4_4_q0, sliding_window_buffer_samples_sample_V_2_4_q0, sliding_window_buffer_samples_sample_V_0_4_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_4_q0;
        else 
            sample_period_samples_4_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_4_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_5_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_5_q0, sliding_window_buffer_samples_sample_V_5_5_q0, sliding_window_buffer_samples_sample_V_3_5_q0, sliding_window_buffer_samples_sample_V_1_5_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_5_q0;
        else 
            sample_period_samples_5_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_5_q0, sliding_window_buffer_samples_sample_V_4_5_q0, sliding_window_buffer_samples_sample_V_2_5_q0, sliding_window_buffer_samples_sample_V_0_5_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_5_q0;
        else 
            sample_period_samples_5_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_5_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_6_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_6_q0, sliding_window_buffer_samples_sample_V_5_6_q0, sliding_window_buffer_samples_sample_V_3_6_q0, sliding_window_buffer_samples_sample_V_1_6_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_6_q0;
        else 
            sample_period_samples_6_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_6_q0, sliding_window_buffer_samples_sample_V_4_6_q0, sliding_window_buffer_samples_sample_V_2_6_q0, sliding_window_buffer_samples_sample_V_0_6_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_6_q0;
        else 
            sample_period_samples_6_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_6_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_7_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_7_q0, sliding_window_buffer_samples_sample_V_5_7_q0, sliding_window_buffer_samples_sample_V_3_7_q0, sliding_window_buffer_samples_sample_V_1_7_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_7_q0;
        else 
            sample_period_samples_7_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_7_q0, sliding_window_buffer_samples_sample_V_4_7_q0, sliding_window_buffer_samples_sample_V_2_7_q0, sliding_window_buffer_samples_sample_V_0_7_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_7_q0;
        else 
            sample_period_samples_7_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_7_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_8_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_8_q0, sliding_window_buffer_samples_sample_V_5_8_q0, sliding_window_buffer_samples_sample_V_3_8_q0, sliding_window_buffer_samples_sample_V_1_8_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_8_q0;
        else 
            sample_period_samples_8_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_8_q0, sliding_window_buffer_samples_sample_V_4_8_q0, sliding_window_buffer_samples_sample_V_2_8_q0, sliding_window_buffer_samples_sample_V_0_8_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_8_q0;
        else 
            sample_period_samples_8_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_8_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_cast2_fu_3203_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sample_period_samples_9_sample_V_address0 <= j_cast2_fu_3203_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address0 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address1 <= "XXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_7_9_q0, sliding_window_buffer_samples_sample_V_5_9_q0, sliding_window_buffer_samples_sample_V_3_9_q0, sliding_window_buffer_samples_sample_V_1_9_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_9_q0;
        else 
            sample_period_samples_9_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_6_9_q0, sliding_window_buffer_samples_sample_V_4_9_q0, sliding_window_buffer_samples_sample_V_2_9_q0, sliding_window_buffer_samples_sample_V_0_9_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_9_q0;
        else 
            sample_period_samples_9_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sample_period_samples_9_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln28_fu_3135_p3 <= 
        ap_const_lv5_1 when (tmp_98_fu_3127_p3(0) = '1') else 
        ap_const_lv5_D;
    select_ln571_10_fu_3512_p3 <= 
        select_ln571_9_fu_3504_p3 when (or_ln571_7_fu_3491_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln571_11_fu_4089_p3 <= 
        ap_const_lv64_0 when (icmp_ln571_2_fu_3947_p2(0) = '1') else 
        shl_ln604_1_fu_4029_p2;
    select_ln571_12_fu_4188_p3 <= 
        add_ln415_15_fu_4182_p2 when (and_ln581_2_reg_6247(0) = '1') else 
        sext_ln585_1_fu_4115_p1;
    select_ln571_13_fu_4199_p3 <= 
        select_ln571_11_reg_6252 when (or_ln571_8_reg_6257(0) = '1') else 
        sext_ln571_2_fu_4195_p1;
    select_ln571_14_fu_4205_p3 <= 
        select_ln571_13_fu_4199_p3 when (or_ln571_10_reg_6262(0) = '1') else 
        ap_const_lv64_0;
    select_ln571_8_fu_3497_p3 <= 
        ap_const_lv64_0 when (icmp_ln571_reg_5395(0) = '1') else 
        shl_ln604_fu_3387_p2;
    select_ln571_9_fu_3504_p3 <= 
        select_ln571_8_fu_3497_p3 when (or_ln571_fu_3468_p2(0) = '1') else 
        sext_ln571_fu_3481_p1;
    select_ln571_fu_3473_p3 <= 
        add_ln415_fu_3422_p2 when (and_ln581_fu_3444_p2(0) = '1') else 
        sext_ln585_fu_3326_p1;
    select_ln585_1_fu_4145_p3 <= 
        ashr_ln586_2_fu_4121_p2 when (icmp_ln585_2_reg_6232(0) = '1') else 
        trunc_ln588_2_cast_fu_4137_p3;
    select_ln585_fu_3366_p3 <= 
        ashr_ln586_fu_3360_p2 when (icmp_ln585_fu_3330_p2(0) = '1') else 
        trunc_ln588_cast_reg_5402;
    select_ln943_1_fu_4769_p3 <= 
        ap_const_lv8_7F when (p_Result_123_fu_4761_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_2_fu_3824_p3 <= 
        ap_const_lv8_7F when (p_Result_134_fu_3816_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_fu_4649_p3 <= 
        ap_const_lv8_7F when (p_Result_s_fu_4641_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_1_fu_4563_p3 <= 
        icmp_ln949_1_fu_4523_p2 when (icmp_ln946_1_fu_4475_p2(0) = '1') else 
        p_Result_153_fu_4543_p3;
    select_ln946_2_fu_3738_p3 <= 
        icmp_ln949_2_fu_3698_p2 when (icmp_ln946_2_fu_3650_p2(0) = '1') else 
        p_Result_143_fu_3718_p3;
    select_ln946_fu_4383_p3 <= 
        icmp_ln949_fu_4343_p2 when (icmp_ln946_fu_4295_p2(0) = '1') else 
        p_Result_149_fu_4363_p3;
    select_ln954_3_fu_4571_p3 <= 
        select_ln946_1_fu_4563_p3 when (icmp_ln954_1_fu_4551_p2(0) = '1') else 
        and_ln949_4_fu_4557_p2;
    select_ln954_5_fu_3746_p3 <= 
        select_ln946_2_fu_3738_p3 when (icmp_ln954_2_fu_3726_p2(0) = '1') else 
        and_ln949_6_fu_3732_p2;
    select_ln954_fu_4391_p3 <= 
        select_ln946_fu_4383_p3 when (icmp_ln954_fu_4371_p2(0) = '1') else 
        and_ln949_2_fu_4377_p2;
        sext_ln22_fu_3112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln22_fu_3106_p2),7));

    sext_ln301_fu_3078_p0 <= sliding_window_front_ptr_s;
        sext_ln301_fu_3078_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln301_fu_3078_p0),7));

        sext_ln571_2_fu_4195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln571_12_fu_4188_p3),64));

        sext_ln571_fu_3481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln571_fu_3473_p3),64));

        sext_ln583_2_fu_3995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_13_fu_3939_p3),64));

        sext_ln583_fu_3322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_fu_3273_p3),64));

        sext_ln585_1_fu_4115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_13_reg_6220),55));

        sext_ln585_fu_3326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(man_V_fu_3273_p3),55));

        sext_ln591_1_fu_4152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln585_1_fu_4145_p3),55));

        sext_ln591_fu_3373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln585_fu_3366_p3),55));

    sh_amt_2_fu_3981_p3 <= 
        add_ln581_4_fu_3969_p2 when (icmp_ln581_3_fu_3963_p2(0) = '1') else 
        sub_ln581_2_fu_3975_p2;
    sh_amt_fu_3308_p3 <= 
        add_ln581_fu_3296_p2 when (icmp_ln581_fu_3290_p2(0) = '1') else 
        sub_ln581_fu_3302_p2;
    shl_ln604_1_fu_4029_p2 <= std_logic_vector(shift_left(unsigned(sext_ln583_2_fu_3995_p1),to_integer(unsigned('0' & zext_ln604_2_fu_4025_p1(31-1 downto 0)))));
    shl_ln604_fu_3387_p2 <= std_logic_vector(shift_left(unsigned(sext_ln583_fu_3322_p1),to_integer(unsigned('0' & zext_ln604_fu_3383_p1(31-1 downto 0)))));
    shl_ln949_1_fu_4505_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln949_1_fu_4501_p1(31-1 downto 0)))));
    shl_ln949_2_fu_3680_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln949_2_fu_3676_p1(31-1 downto 0)))));
    shl_ln949_fu_4325_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln949_fu_4321_p1(31-1 downto 0)))));
    shl_ln955_1_fu_4712_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_25_reg_6314),to_integer(unsigned('0' & zext_ln955_1_fu_4708_p1(31-1 downto 0)))));
    shl_ln955_2_fu_3767_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_23_reg_6182),to_integer(unsigned('0' & zext_ln955_2_fu_3763_p1(31-1 downto 0)))));
    shl_ln955_fu_4592_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_24_reg_6277),to_integer(unsigned('0' & zext_ln955_fu_4588_p1(31-1 downto 0)))));
    shl_ln_fu_3528_p3 <= (add_ln310_fu_3229_p2 & ap_const_lv1_0);
    sigma_V_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address0;
    sigma_V_address1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address1;
    sigma_V_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce0;
    sigma_V_ce1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce1;
    sigma_V_d1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_d1;
    sigma_V_we1 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_we1;
    sliding_window_buffer_samples_sample_V_0_0_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_10_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_11_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_1_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_2_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_3_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_4_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_5_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_6_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_7_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_8_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_9_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_0_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_10_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_11_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_1_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_2_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_3_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_4_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_5_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_6_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_7_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_8_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_9_address0 <= zext_ln34_fu_3161_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_0_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_10_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_11_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_1_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_2_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_3_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_4_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_5_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_6_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_7_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_8_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_9_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_0_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_10_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_11_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_1_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_2_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_3_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_4_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_5_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_6_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_7_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_8_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_9_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_0_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_10_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_11_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_1_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_2_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_3_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_4_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_5_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_6_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_7_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_8_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_9_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_0_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_10_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_11_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_1_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_2_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_3_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_4_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_5_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_6_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_7_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_8_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_9_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_0_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_10_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_11_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_1_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_2_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_3_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_4_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_5_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_6_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_7_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_8_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_9_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_0_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_10_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_11_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_1_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_2_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_3_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_4_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_5_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_6_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_7_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_8_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_9_address0 <= zext_ln34_reg_5454(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln581_2_fu_3975_p2 <= std_logic_vector(unsigned(ap_const_lv12_2B) - unsigned(F2_2_fu_3953_p2));
    sub_ln581_fu_3302_p2 <= std_logic_vector(unsigned(ap_const_lv12_2B) - unsigned(F2_fu_3280_p2));
    sub_ln944_1_fu_4453_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(l_4_fu_4449_p1));
    sub_ln944_2_fu_3628_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(l_5_fu_3624_p1));
    sub_ln944_fu_4273_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(l_fu_4269_p1));
    sub_ln947_1_fu_4485_p2 <= std_logic_vector(signed(ap_const_lv7_59) - signed(trunc_ln947_1_fu_4481_p1));
    sub_ln947_2_fu_3660_p2 <= std_logic_vector(signed(ap_const_lv7_59) - signed(trunc_ln947_2_fu_3656_p1));
    sub_ln947_fu_4305_p2 <= std_logic_vector(signed(ap_const_lv7_59) - signed(trunc_ln947_fu_4301_p1));
    sub_ln955_1_fu_4703_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_1_reg_6320));
    sub_ln955_2_fu_3758_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_2_reg_6188));
    sub_ln955_fu_4583_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_6283));
    sub_ln964_1_fu_4777_p2 <= std_logic_vector(unsigned(ap_const_lv8_15) - unsigned(trunc_ln943_1_reg_6336));
    sub_ln964_2_fu_3832_p2 <= std_logic_vector(unsigned(ap_const_lv8_15) - unsigned(trunc_ln943_2_reg_6204));
    sub_ln964_fu_4657_p2 <= std_logic_vector(unsigned(ap_const_lv8_15) - unsigned(trunc_ln943_reg_6299));

    this_A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter2, grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_address0, ap_block_pp0_stage0, ap_CS_fsm_state30, ap_block_pp0_stage5, zext_ln319_fu_3536_p1, zext_ln320_fu_4218_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            this_A_address0 <= zext_ln320_fu_4218_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            this_A_address0 <= zext_ln319_fu_3536_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            this_A_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_address0;
        else 
            this_A_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    this_A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter2, grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_ce0, ap_CS_fsm_state30, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            this_A_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            this_A_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_ce0;
        else 
            this_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_A_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage5, select_ln571_14_fu_4205_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            this_A_d0 <= select_ln571_14_fu_4205_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            this_A_d0 <= ap_const_lv64_80000000000;
        else 
            this_A_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    this_A_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, icmp_ln307_fu_3223_p2, icmp_ln307_reg_6020_pp0_iter2_reg, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter2, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln307_reg_6020_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln307_fu_3223_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            this_A_we0 <= ap_const_logic_1;
        else 
            this_A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    this_amplitudes_s_address0 <= zext_ln298_reg_5417(4 - 1 downto 0);

    this_amplitudes_s_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            this_amplitudes_s_ce0 <= ap_const_logic_1;
        else 
            this_amplitudes_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    this_amplitudes_s_d0 <= 
        ap_const_lv32_0 when (icmp_ln935_1_reg_6304(0) = '1') else 
        bitcast_ln744_1_fu_4811_p1;

    this_amplitudes_s_we0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            this_amplitudes_s_we0 <= ap_const_logic_1;
        else 
            this_amplitudes_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    this_b_address0_assign_proc : process(zext_ln312_reg_6024_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_address0, ap_CS_fsm_state30, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            this_b_address0 <= zext_ln312_reg_6024_pp0_iter1_reg(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            this_b_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_address0;
        else 
            this_b_address0 <= "XXXXXXXX";
        end if; 
    end process;


    this_b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_ce0, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            this_b_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            this_b_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_ce0;
        else 
            this_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    this_b_d0 <= (mag_samples_sample_V_q0 & ap_const_lv43_0);

    this_b_we0_assign_proc : process(icmp_ln307_reg_6020_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln307_reg_6020_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            this_b_we0 <= ap_const_logic_1;
        else 
            this_b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    this_offsets_s_address0 <= zext_ln298_reg_5417(4 - 1 downto 0);

    this_offsets_s_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            this_offsets_s_ce0 <= ap_const_logic_1;
        else 
            this_offsets_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    this_offsets_s_d0 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_6267(0) = '1') else 
        bitcast_ln744_fu_4691_p1;

    this_offsets_s_we0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            this_offsets_s_we0 <= ap_const_logic_1;
        else 
            this_offsets_s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    this_times_address0 <= zext_ln312_fu_3234_p1(8 - 1 downto 0);

    this_times_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            this_times_ce0 <= ap_const_logic_1;
        else 
            this_times_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_3336_p4 <= sh_amt_fu_3308_p3(11 downto 6);
    tmp_103_fu_3640_p4 <= lsb_index_5_fu_3634_p2(31 downto 1);
    tmp_104_fu_3704_p3 <= lsb_index_5_fu_3634_p2(31 downto 31);
    tmp_107_fu_4005_p4 <= sh_amt_2_fu_3981_p3(11 downto 6);
    tmp_108_fu_4129_p3 <= bitcast_ln702_2_fu_4126_p1(31 downto 31);
    tmp_18_fu_3189_p3 <= (i_reg_2919 & ap_const_lv3_0);
    tmp_4_fu_4668_p3 <= (p_Result_147_reg_6272 & add_ln964_fu_4662_p2);
    tmp_5_fu_4788_p3 <= (p_Result_151_reg_6309 & add_ln964_1_fu_4782_p2);
    
    tmp_6_fu_3616_p3_proc : process(p_Result_142_fu_3606_p4)
    begin
        tmp_6_fu_3616_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_142_fu_3606_p4(i) = '1' then
                tmp_6_fu_3616_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_7_fu_3843_p3 <= (p_Result_141_reg_6171 & add_ln964_2_fu_3837_p2);
    tmp_91_fu_4285_p4 <= lsb_index_fu_4279_p2(31 downto 1);
    tmp_92_fu_4349_p3 <= lsb_index_fu_4279_p2(31 downto 31);
    tmp_95_fu_4465_p4 <= lsb_index_4_fu_4459_p2(31 downto 1);
    tmp_96_fu_4529_p3 <= lsb_index_4_fu_4459_p2(31 downto 31);
    tmp_98_fu_3127_p3 <= add_ln22_2_fu_3116_p2(6 downto 6);
    tmp_V_18_fu_4417_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(x_V_q0));
    tmp_V_21_fu_3595_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(angle_2_reg_6164));
    tmp_V_23_fu_3600_p3 <= 
        tmp_V_21_fu_3595_p2 when (p_Result_141_reg_6171(0) = '1') else 
        angle_2_reg_6164;
    tmp_V_24_fu_4243_p3 <= 
        tmp_V_fu_4237_p2 when (p_Result_147_fu_4229_p3(0) = '1') else 
        x_V_q1;
    tmp_V_25_fu_4423_p3 <= 
        tmp_V_18_fu_4417_p2 when (p_Result_151_fu_4409_p3(0) = '1') else 
        x_V_q0;
    tmp_V_fu_4237_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(x_V_q1));
    
    tmp_fu_4261_p3_proc : process(p_Result_148_fu_4251_p4)
    begin
        tmp_fu_4261_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_148_fu_4251_p4(i) = '1' then
                tmp_fu_4261_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_s_fu_4441_p3_proc : process(p_Result_152_fu_4431_p4)
    begin
        tmp_s_fu_4441_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_152_fu_4431_p4(i) = '1' then
                tmp_s_fu_4441_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln22_fu_3086_p1 <= sliding_window_back_ptr_s(5 - 1 downto 0);
    trunc_ln301_fu_3074_p0 <= sliding_window_front_ptr_s;
    trunc_ln301_fu_3074_p1 <= trunc_ln301_fu_3074_p0(5 - 1 downto 0);
    trunc_ln555_2_fu_3891_p1 <= ireg_2_fu_3887_p1(63 - 1 downto 0);
    trunc_ln555_fu_3022_p1 <= ireg_fu_3018_p1(63 - 1 downto 0);
    trunc_ln565_2_fu_3917_p1 <= ireg_2_fu_3887_p1(52 - 1 downto 0);
    trunc_ln565_fu_3252_p1 <= ireg_reg_5383(52 - 1 downto 0);
    trunc_ln575_2_fu_3959_p1 <= F2_2_fu_3953_p2(11 - 1 downto 0);
    trunc_ln575_fu_3286_p1 <= F2_fu_3280_p2(11 - 1 downto 0);
    trunc_ln586_2_fu_4021_p1 <= sh_amt_2_fu_3981_p3(6 - 1 downto 0);
    trunc_ln586_fu_3352_p1 <= sh_amt_fu_3308_p3(6 - 1 downto 0);
    trunc_ln588_2_cast_fu_4137_p3 <= 
        ap_const_lv54_3FFFFFFFFFFFFF when (tmp_108_fu_4129_p3(0) = '1') else 
        ap_const_lv54_0;
    trunc_ln588_cast_fu_3040_p3 <= 
        ap_const_lv54_3FFFFFFFFFFFFF when (tmp_89_reg_4828(0) = '1') else 
        ap_const_lv54_0;
    trunc_ln943_1_fu_4579_p1 <= tmp_s_fu_4441_p3(8 - 1 downto 0);
    trunc_ln943_2_fu_3754_p1 <= tmp_6_fu_3616_p3(8 - 1 downto 0);
    trunc_ln943_fu_4399_p1 <= tmp_fu_4261_p3(8 - 1 downto 0);
    trunc_ln947_1_fu_4481_p1 <= sub_ln944_1_fu_4453_p2(7 - 1 downto 0);
    trunc_ln947_2_fu_3656_p1 <= sub_ln944_2_fu_3628_p2(7 - 1 downto 0);
    trunc_ln947_fu_4301_p1 <= sub_ln944_fu_4273_p2(7 - 1 downto 0);

    x_V_address0_assign_proc : process(grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_address0, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            x_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x_V_address0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_address0;
        else 
            x_V_address0 <= "X";
        end if; 
    end process;

    x_V_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    x_V_ce0_assign_proc : process(grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_ce0, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            x_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x_V_ce0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_ce0;
        else 
            x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_ce1_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            x_V_ce1 <= ap_const_logic_1;
        else 
            x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_we0_assign_proc : process(grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_we0, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x_V_we0 <= grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_we0;
        else 
            x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_2_fu_4041_p2 <= (icmp_ln571_2_fu_3947_p2 xor ap_const_lv1_1);
    xor_ln571_fu_3047_p2 <= (icmp_ln571_fu_3034_p2 xor ap_const_lv1_1);
    xor_ln581_2_fu_4077_p2 <= (or_ln581_2_fu_4071_p2 xor ap_const_lv1_1);
    xor_ln581_fu_3456_p2 <= (or_ln581_fu_3450_p2 xor ap_const_lv1_1);
    xor_ln582_2_fu_4059_p2 <= (or_ln582_2_fu_4053_p2 xor ap_const_lv1_1);
    xor_ln582_fu_3438_p2 <= (or_ln582_fu_3433_p2 xor ap_const_lv1_1);
    xor_ln949_1_fu_4537_p2 <= (tmp_96_fu_4529_p3 xor ap_const_lv1_1);
    xor_ln949_2_fu_3712_p2 <= (tmp_104_fu_3704_p3 xor ap_const_lv1_1);
    xor_ln949_fu_4357_p2 <= (tmp_92_fu_4349_p3 xor ap_const_lv1_1);
    zext_ln298_fu_3059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_2908),64));
    zext_ln301_fu_3096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_2919),6));
    zext_ln312_fu_3234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln310_fu_3229_p2),64));
    zext_ln319_fu_3536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_3528_p3),64));
    zext_ln320_fu_4218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln320_fu_4213_p2),64));
    zext_ln34_fu_3161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_idx_4_fu_3154_p3),64));
    zext_ln415_14_fu_3573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_reg_6159),64));
    zext_ln415_15_fu_4178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_2_fu_4172_p3),55));
    zext_ln415_fu_3418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_3411_p3),55));
    zext_ln455_2_fu_3913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_2_fu_3903_p4),12));
    zext_ln455_fu_3248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_3239_p4),12));
    zext_ln569_2_fu_3929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_146_fu_3921_p3),54));
    zext_ln569_fu_3263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_140_fu_3255_p3),54));
    zext_ln586_4_fu_4118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_2_reg_6237),54));
    zext_ln586_fu_3356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_3352_p1),54));
    zext_ln591_3_fu_4161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_3_fu_4156_p2),32));
    zext_ln591_fu_3399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_fu_3393_p2),32));
    zext_ln604_2_fu_4025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_2_fu_4021_p1),64));
    zext_ln604_fu_3383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_3352_p1),64));
    zext_ln947_1_fu_4491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_1_fu_4485_p2),64));
    zext_ln947_2_fu_3666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_2_fu_3660_p2),64));
    zext_ln947_fu_4311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_4305_p2),64));
    zext_ln949_1_fu_4501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_4_fu_4459_p2),64));
    zext_ln949_2_fu_3676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_5_fu_3634_p2),64));
    zext_ln949_fu_4321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_fu_4279_p2),64));
    zext_ln954_1_fu_4722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_1_fu_4717_p2),64));
    zext_ln954_2_fu_3777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_2_fu_3772_p2),64));
    zext_ln954_fu_4602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_fu_4597_p2),64));
    zext_ln955_1_fu_4708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_1_fu_4703_p2),64));
    zext_ln955_2_fu_3763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_2_fu_3758_p2),64));
    zext_ln955_fu_4588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_fu_4583_p2),64));
    zext_ln961_1_fu_4738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_3_reg_6331),64));
    zext_ln961_2_fu_3793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_5_reg_6199),64));
    zext_ln961_fu_4618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_reg_6294),64));
    zext_ln962_1_fu_4757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_37_fu_4747_p4),64));
    zext_ln962_2_fu_3812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_35_fu_3802_p4),64));
    zext_ln962_fu_4637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_36_fu_4627_p4),64));
end behav;
