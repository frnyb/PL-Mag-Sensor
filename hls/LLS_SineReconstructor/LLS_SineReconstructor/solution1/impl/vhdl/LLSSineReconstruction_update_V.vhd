-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_update_V is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matV_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    matV_0_ce0 : OUT STD_LOGIC;
    matV_0_we0 : OUT STD_LOGIC;
    matV_0_d0 : OUT STD_LOGIC_VECTOR (59 downto 0);
    V_i_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    V_i_0_ce0 : OUT STD_LOGIC;
    V_i_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    V_j_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    V_j_0_ce0 : OUT STD_LOGIC;
    V_j_0_q0 : IN STD_LOGIC_VECTOR (59 downto 0);
    col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_i_empty_n : IN STD_LOGIC;
    col_i_read : OUT STD_LOGIC;
    col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_j_empty_n : IN STD_LOGIC;
    col_j_read : OUT STD_LOGIC;
    s_dout : IN STD_LOGIC_VECTOR (59 downto 0);
    s_empty_n : IN STD_LOGIC;
    s_read : OUT STD_LOGIC;
    c_dout : IN STD_LOGIC_VECTOR (59 downto 0);
    c_empty_n : IN STD_LOGIC;
    c_read : OUT STD_LOGIC );
end;


architecture behav of LLSSineReconstruction_update_V is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal col_i_blk_n : STD_LOGIC;
    signal col_j_blk_n : STD_LOGIC;
    signal s_blk_n : STD_LOGIC;
    signal c_blk_n : STD_LOGIC;
    signal c_cast_i_i_fu_142_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal c_cast_i_i_reg_321 : STD_LOGIC_VECTOR (98 downto 0);
    signal s_cast_i_i_fu_146_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal s_cast_i_i_reg_327 : STD_LOGIC_VECTOR (98 downto 0);
    signal col_i_load_cast_fu_150_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_i_load_cast_reg_333 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln511_1_fu_154_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln511_1_reg_338 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln511_fu_158_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln511_reg_343 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal matV_0_addr_reg_348 : STD_LOGIC_VECTOR (3 downto 0);
    signal matV_0_addr_1_reg_353 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln511_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_371 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_1_reg_381 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_3_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_1_fu_316_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln415_1_reg_391 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_reg_131 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln520_1_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln521_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln511_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_fu_307_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_fu_174_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln520_fu_170_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln520_fu_182_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln520_fu_188_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln521_fu_198_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_6_fu_218_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal sext_ln1118_fu_214_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_6_fu_218_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_7_fu_227_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal sext_ln1118_1_fu_223_p1 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_7_fu_227_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_6_fu_218_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_7_fu_227_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal ret_V_fu_232_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_4_fu_256_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_4_fu_256_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_5_fu_261_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_5_fu_261_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_4_fu_256_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal r_V_5_fu_261_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal ret_V_1_fu_274_p2 : STD_LOGIC_VECTOR (98 downto 0);
    signal trunc_ln1192_1_fu_270_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal trunc_ln1192_fu_266_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln713_fu_290_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal zext_ln415_fu_304_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln415_1_fu_313_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_mul_60s_60s_99_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (59 downto 0);
        din1 : IN STD_LOGIC_VECTOR (59 downto 0);
        dout : OUT STD_LOGIC_VECTOR (98 downto 0) );
    end component;



begin
    mul_60s_60s_99_1_1_U261 : component LLSSineReconstruction_mul_60s_60s_99_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 60,
        din1_WIDTH => 60,
        dout_WIDTH => 99)
    port map (
        din0 => r_V_6_fu_218_p0,
        din1 => r_V_6_fu_218_p1,
        dout => r_V_6_fu_218_p2);

    mul_60s_60s_99_1_1_U262 : component LLSSineReconstruction_mul_60s_60s_99_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 60,
        din1_WIDTH => 60,
        dout_WIDTH => 99)
    port map (
        din0 => r_V_7_fu_227_p0,
        din1 => r_V_7_fu_227_p1,
        dout => r_V_7_fu_227_p2);

    mul_60s_60s_99_1_1_U263 : component LLSSineReconstruction_mul_60s_60s_99_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 60,
        din1_WIDTH => 60,
        dout_WIDTH => 99)
    port map (
        din0 => r_V_4_fu_256_p0,
        din1 => r_V_4_fu_256_p1,
        dout => r_V_4_fu_256_p2);

    mul_60s_60s_99_1_1_U264 : component LLSSineReconstruction_mul_60s_60s_99_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 60,
        din1_WIDTH => 60,
        dout_WIDTH => 99)
    port map (
        din0 => r_V_5_fu_261_p0,
        din1 => r_V_5_fu_261_p1,
        dout => r_V_5_fu_261_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln511_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    k_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_131 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_reg_131 <= add_ln511_reg_343;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln415_1_reg_391 <= add_ln415_1_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln511_reg_343 <= add_ln511_fu_158_p2;
                matV_0_addr_1_reg_353 <= zext_ln521_fu_203_p1(4 - 1 downto 0);
                matV_0_addr_reg_348 <= zext_ln520_1_fu_193_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                c_cast_i_i_reg_321 <= c_cast_i_i_fu_142_p1;
                    col_i_load_cast_reg_333(1 downto 0) <= col_i_load_cast_fu_150_p1(1 downto 0);
                s_cast_i_i_reg_327 <= s_cast_i_i_fu_146_p1;
                    zext_ln511_1_reg_338(1 downto 0) <= zext_ln511_1_fu_154_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_2_reg_376 <= ret_V_fu_232_p2(38 downto 38);
                tmp_3_reg_386 <= add_ln713_fu_290_p2(38 downto 38);
                trunc_ln708_1_reg_381 <= ret_V_1_fu_274_p2(98 downto 39);
                trunc_ln_reg_371 <= ret_V_fu_232_p2(98 downto 39);
            end if;
        end if;
    end process;
    col_i_load_cast_reg_333(3 downto 2) <= "00";
    zext_ln511_1_reg_338(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n, ap_CS_fsm_state2, icmp_ln511_fu_208_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln511_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    V_i_0_address0 <= zext_ln511_fu_164_p1(2 - 1 downto 0);

    V_i_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            V_i_0_ce0 <= ap_const_logic_1;
        else 
            V_i_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_j_0_address0 <= zext_ln511_fu_164_p1(2 - 1 downto 0);

    V_j_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            V_j_0_ce0 <= ap_const_logic_1;
        else 
            V_j_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln415_1_fu_316_p2 <= std_logic_vector(unsigned(trunc_ln708_1_reg_381) + unsigned(zext_ln415_1_fu_313_p1));
    add_ln415_fu_307_p2 <= std_logic_vector(unsigned(trunc_ln_reg_371) + unsigned(zext_ln415_fu_304_p1));
    add_ln511_fu_158_p2 <= std_logic_vector(unsigned(k_reg_131) + unsigned(ap_const_lv2_1));
    add_ln520_fu_188_p2 <= std_logic_vector(unsigned(sub_ln520_fu_182_p2) + unsigned(col_i_load_cast_reg_333));
    add_ln521_fu_198_p2 <= std_logic_vector(unsigned(sub_ln520_fu_182_p2) + unsigned(zext_ln511_1_reg_338));
    add_ln713_fu_290_p2 <= std_logic_vector(unsigned(trunc_ln1192_1_fu_270_p1) + unsigned(trunc_ln1192_fu_266_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
                ap_block_state1 <= ((c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln511_fu_208_p2)
    begin
        if (((icmp_ln511_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln511_fu_208_p2)
    begin
        if (((icmp_ln511_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, c_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_blk_n <= c_empty_n;
        else 
            c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        c_cast_i_i_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_dout),99));


    c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_read <= ap_const_logic_1;
        else 
            c_read <= ap_const_logic_0;
        end if; 
    end process;


    col_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_blk_n <= col_i_empty_n;
        else 
            col_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_i_load_cast_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_dout),4));

    col_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_read <= ap_const_logic_1;
        else 
            col_i_read <= ap_const_logic_0;
        end if; 
    end process;


    col_j_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_j_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_blk_n <= col_j_empty_n;
        else 
            col_j_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_j_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_read <= ap_const_logic_1;
        else 
            col_j_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln511_fu_208_p2 <= "1" when (k_reg_131 = ap_const_lv2_3) else "0";

    matV_0_address0_assign_proc : process(matV_0_addr_reg_348, matV_0_addr_1_reg_353, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            matV_0_address0 <= matV_0_addr_1_reg_353;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matV_0_address0 <= matV_0_addr_reg_348;
        else 
            matV_0_address0 <= "XXXX";
        end if; 
    end process;


    matV_0_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            matV_0_ce0 <= ap_const_logic_1;
        else 
            matV_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matV_0_d0_assign_proc : process(add_ln415_1_reg_391, ap_CS_fsm_state4, ap_CS_fsm_state5, add_ln415_fu_307_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            matV_0_d0 <= add_ln415_1_reg_391;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            matV_0_d0 <= add_ln415_fu_307_p2;
        else 
            matV_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    matV_0_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            matV_0_we0 <= ap_const_logic_1;
        else 
            matV_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_4_fu_256_p0 <= sext_ln1118_fu_214_p1(60 - 1 downto 0);
    r_V_4_fu_256_p1 <= s_cast_i_i_reg_327(60 - 1 downto 0);
    r_V_5_fu_261_p0 <= sext_ln1118_1_fu_223_p1(60 - 1 downto 0);
    r_V_5_fu_261_p1 <= c_cast_i_i_reg_321(60 - 1 downto 0);
    r_V_6_fu_218_p0 <= sext_ln1118_fu_214_p1(60 - 1 downto 0);
    r_V_6_fu_218_p1 <= c_cast_i_i_reg_321(60 - 1 downto 0);
    r_V_7_fu_227_p0 <= sext_ln1118_1_fu_223_p1(60 - 1 downto 0);
    r_V_7_fu_227_p1 <= s_cast_i_i_reg_327(60 - 1 downto 0);
    ret_V_1_fu_274_p2 <= std_logic_vector(unsigned(r_V_5_fu_261_p2) + unsigned(r_V_4_fu_256_p2));
    ret_V_fu_232_p2 <= std_logic_vector(unsigned(r_V_6_fu_218_p2) - unsigned(r_V_7_fu_227_p2));

    s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_blk_n <= s_empty_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        s_cast_i_i_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_dout),99));


    s_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n, s_empty_n, c_empty_n)
    begin
        if ((not(((c_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0) or (col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_read <= ap_const_logic_1;
        else 
            s_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1118_1_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(V_j_0_q0),99));

        sext_ln1118_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(V_i_0_q0),99));

    sub_ln520_fu_182_p2 <= std_logic_vector(unsigned(tmp_fu_174_p3) - unsigned(zext_ln520_fu_170_p1));
    tmp_fu_174_p3 <= (k_reg_131 & ap_const_lv2_0);
    trunc_ln1192_1_fu_270_p1 <= r_V_5_fu_261_p2(39 - 1 downto 0);
    trunc_ln1192_fu_266_p1 <= r_V_4_fu_256_p2(39 - 1 downto 0);
    zext_ln415_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_386),60));
    zext_ln415_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_376),60));
    zext_ln511_1_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_j_dout),4));
    zext_ln511_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_131),64));
    zext_ln520_1_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln520_fu_188_p2),64));
    zext_ln520_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_131),4));
    zext_ln521_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln521_fu_198_p2),64));
end behav;
