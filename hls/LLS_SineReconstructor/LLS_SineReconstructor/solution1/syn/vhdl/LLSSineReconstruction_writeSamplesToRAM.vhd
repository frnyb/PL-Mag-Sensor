-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_writeSamplesToRAM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    samples_buffer_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    samples_buffer_out_ce0 : OUT STD_LOGIC;
    samples_buffer_out_we0 : OUT STD_LOGIC;
    samples_buffer_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sliding_window_front_ptr_s : IN STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_back_ptr_s : IN STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sliding_window_buffer_samples_sample_V_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sliding_window_buffer_samples_sample_V_ce1 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_q1 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of LLSSineReconstruction_writeSamplesToRAM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv10_60 : STD_LOGIC_VECTOR (9 downto 0) := "0001100000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv10_C : STD_LOGIC_VECTOR (9 downto 0) := "0000001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal idx_2_reg_702 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_713 : STD_LOGIC_VECTOR (3 downto 0);
    signal sliding_window_front_ptr_load_cast_fu_728_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sliding_window_front_ptr_load_cast_reg_1173 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln158_fu_804_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln158_reg_1184 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_740_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln158_1_fu_808_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln158_1_reg_1189 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sliding_window_buffer_samples_sample_V_addr_2_reg_1204 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_3_reg_1209 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_4_reg_1214 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_5_reg_1219 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_6_reg_1224 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_7_reg_1229 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_8_reg_1234 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_9_reg_1239 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_10_reg_1244 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_sample_V_addr_11_reg_1249 : STD_LOGIC_VECTOR (9 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_10_addr_reg_1264 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_11_addr_reg_1269 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_2_addr_reg_1274 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_3_addr_reg_1279 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_4_addr_reg_1284 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_5_addr_reg_1289 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_6_addr_reg_1294 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_7_addr_reg_1299 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_8_addr_reg_1304 : STD_LOGIC_VECTOR (6 downto 0);
    signal sliding_window_buffer_samples_timestamp_V_9_addr_reg_1309 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln158_fu_997_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln158_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_1003_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln164_fu_1009_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln164_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_1332 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln172_fu_1036_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln158_2_fu_1047_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal sample_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_sample_V_ce0 : STD_LOGIC;
    signal sample_sample_V_we0 : STD_LOGIC;
    signal sample_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_sample_V_ce1 : STD_LOGIC;
    signal sample_sample_V_we1 : STD_LOGIC;
    signal sample_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_timestamp_V_ce0 : STD_LOGIC;
    signal sample_timestamp_V_we0 : STD_LOGIC;
    signal sample_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_timestamp_V_ce1 : STD_LOGIC;
    signal sample_timestamp_V_we1 : STD_LOGIC;
    signal sample_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal idx_reg_656 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_668 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_1_reg_680 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_691 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln161_3_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_4_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_5_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_6_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_7_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_8_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_9_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_10_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_11_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_12_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_13_fu_986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_2_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_1_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast_fu_1015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln172_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln154_fu_736_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_i_fu_748_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_753_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_763_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_i_fu_771_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmp_i_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln161_fu_777_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_127_fu_780_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_128_fu_788_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_796_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln161_fu_814_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln161_fu_818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln161_1_fu_839_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_843_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_851_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln161_fu_859_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln161_1_fu_870_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln161_2_fu_881_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln161_3_fu_892_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln161_4_fu_903_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln161_5_fu_914_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln161_6_fu_925_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln161_7_fu_936_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln161_8_fu_947_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln161_fu_958_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln161_1_fu_969_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln161_2_fu_980_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_writeSamplesToRAM_sample_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component LLSSineReconstruction_writeSamplesToRAM_sample_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    sample_sample_V_U : component LLSSineReconstruction_writeSamplesToRAM_sample_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_sample_V_address0,
        ce0 => sample_sample_V_ce0,
        we0 => sample_sample_V_we0,
        d0 => sliding_window_buffer_samples_sample_V_q1,
        q0 => sample_sample_V_q0,
        address1 => sample_sample_V_address1,
        ce1 => sample_sample_V_ce1,
        we1 => sample_sample_V_we1,
        d1 => sliding_window_buffer_samples_sample_V_q0);

    sample_timestamp_V_U : component LLSSineReconstruction_writeSamplesToRAM_sample_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_timestamp_V_address0,
        ce0 => sample_timestamp_V_ce0,
        we0 => sample_timestamp_V_we0,
        d0 => sample_timestamp_V_d0,
        q0 => sample_timestamp_V_q0,
        address1 => sample_timestamp_V_address1,
        ce1 => sample_timestamp_V_ce1,
        we1 => sample_timestamp_V_we1,
        d1 => sample_timestamp_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_668 <= ap_const_lv5_9;
            elsif (((icmp_ln158_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_668 <= i_1_fu_1003_p2;
            end if; 
        end if;
    end process;

    idx_1_reg_680_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_740_p3 = ap_const_lv1_0))) then 
                idx_1_reg_680 <= idx_reg_656;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                idx_1_reg_680 <= add_ln158_2_fu_1047_p2;
            end if; 
        end if;
    end process;

    idx_2_reg_702_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                idx_2_reg_702 <= idx_1_reg_680;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln164_reg_1332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                idx_2_reg_702 <= add_ln172_fu_1036_p2;
            end if; 
        end if;
    end process;

    idx_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_reg_656 <= ap_const_lv10_0;
            elsif (((icmp_ln158_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_reg_656 <= add_ln158_fu_997_p2;
            end if; 
        end if;
    end process;

    j_reg_691_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_740_p3 = ap_const_lv1_0))) then 
                j_reg_691 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_reg_691 <= add_ln158_1_reg_1189;
            end if; 
        end if;
    end process;

    k_reg_713_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_reg_713 <= ap_const_lv4_0;
            elsif (((icmp_ln164_fu_1021_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_713 <= add_ln164_fu_1009_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln158_1_reg_1189 <= add_ln158_1_fu_808_p2;
                    sliding_window_buffer_samples_sample_V_addr_10_reg_1244(9 downto 2) <= zext_ln161_13_fu_986_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_11_reg_1249(9 downto 2) <= zext_ln161_2_fu_865_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_2_reg_1204(9 downto 2) <= zext_ln161_5_fu_898_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_3_reg_1209(9 downto 2) <= zext_ln161_6_fu_909_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_4_reg_1214(9 downto 2) <= zext_ln161_7_fu_920_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_5_reg_1219(9 downto 2) <= zext_ln161_8_fu_931_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_6_reg_1224(9 downto 2) <= zext_ln161_9_fu_942_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_7_reg_1229(9 downto 2) <= zext_ln161_10_fu_953_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_8_reg_1234(9 downto 2) <= zext_ln161_11_fu_964_p1(10 - 1 downto 0)(9 downto 2);
                    sliding_window_buffer_samples_sample_V_addr_9_reg_1239(9 downto 2) <= zext_ln161_12_fu_975_p1(10 - 1 downto 0)(9 downto 2);
                sliding_window_buffer_samples_timestamp_V_10_addr_reg_1264 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_11_addr_reg_1269 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_2_addr_reg_1274 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_3_addr_reg_1279 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_4_addr_reg_1284 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_5_addr_reg_1289 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_6_addr_reg_1294 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_7_addr_reg_1299 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_8_addr_reg_1304 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
                sliding_window_buffer_samples_timestamp_V_9_addr_reg_1309 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln164_reg_1332 <= icmp_ln164_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sliding_window_front_ptr_load_cast_reg_1173 <= sliding_window_front_ptr_load_cast_fu_728_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_740_p3 = ap_const_lv1_0))) then
                    zext_ln158_reg_1184(6 downto 3) <= zext_ln158_fu_804_p1(6 downto 3);
            end if;
        end if;
    end process;
    zext_ln158_reg_1184(2 downto 0) <= "000";
    zext_ln158_reg_1184(7) <= '0';
    sliding_window_buffer_samples_sample_V_addr_2_reg_1204(1 downto 0) <= "01";
    sliding_window_buffer_samples_sample_V_addr_3_reg_1209(1 downto 0) <= "00";
    sliding_window_buffer_samples_sample_V_addr_4_reg_1214(1 downto 0) <= "11";
    sliding_window_buffer_samples_sample_V_addr_5_reg_1219(1 downto 0) <= "10";
    sliding_window_buffer_samples_sample_V_addr_6_reg_1224(1 downto 0) <= "01";
    sliding_window_buffer_samples_sample_V_addr_7_reg_1229(1 downto 0) <= "00";
    sliding_window_buffer_samples_sample_V_addr_8_reg_1234(1 downto 0) <= "11";
    sliding_window_buffer_samples_sample_V_addr_9_reg_1239(1 downto 0) <= "10";
    sliding_window_buffer_samples_sample_V_addr_10_reg_1244(1 downto 0) <= "01";
    sliding_window_buffer_samples_sample_V_addr_11_reg_1249(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_740_p3, ap_CS_fsm_state3, icmp_ln158_fu_991_p2, ap_enable_reg_pp0_iter0, icmp_ln164_fu_1021_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_740_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln158_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln164_fu_1021_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln164_fu_1021_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_i_fu_771_p2 <= std_logic_vector(unsigned(empty_fu_753_p1) + unsigned(ap_const_lv4_A));
    add_ln158_1_fu_808_p2 <= std_logic_vector(unsigned(j_reg_691) + unsigned(ap_const_lv4_1));
    add_ln158_2_fu_1047_p2 <= std_logic_vector(unsigned(idx_1_reg_680) + unsigned(ap_const_lv10_C));
    add_ln158_fu_997_p2 <= std_logic_vector(unsigned(idx_reg_656) + unsigned(ap_const_lv10_60));
    add_ln161_1_fu_870_p2 <= std_logic_vector(unsigned(sub_ln161_fu_859_p2) + unsigned(ap_const_lv10_B));
    add_ln161_2_fu_881_p2 <= std_logic_vector(unsigned(sub_ln161_fu_859_p2) + unsigned(ap_const_lv10_A));
    add_ln161_3_fu_892_p2 <= std_logic_vector(unsigned(sub_ln161_fu_859_p2) + unsigned(ap_const_lv10_9));
    add_ln161_4_fu_903_p2 <= std_logic_vector(unsigned(sub_ln161_fu_859_p2) + unsigned(ap_const_lv10_8));
    add_ln161_5_fu_914_p2 <= std_logic_vector(unsigned(sub_ln161_fu_859_p2) + unsigned(ap_const_lv10_7));
    add_ln161_6_fu_925_p2 <= std_logic_vector(unsigned(sub_ln161_fu_859_p2) + unsigned(ap_const_lv10_6));
    add_ln161_7_fu_936_p2 <= std_logic_vector(unsigned(sub_ln161_fu_859_p2) + unsigned(ap_const_lv10_5));
    add_ln161_8_fu_947_p2 <= std_logic_vector(unsigned(sub_ln161_fu_859_p2) + unsigned(ap_const_lv10_4));
    add_ln161_fu_818_p2 <= std_logic_vector(unsigned(zext_ln158_reg_1184) + unsigned(zext_ln161_fu_814_p1));
    add_ln164_fu_1009_p2 <= std_logic_vector(unsigned(k_reg_713) + unsigned(ap_const_lv4_1));
    add_ln172_fu_1036_p2 <= std_logic_vector(unsigned(idx_2_reg_702) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln164_fu_1021_p2)
    begin
        if ((icmp_ln164_fu_1021_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_740_p3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_740_p3 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_740_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_740_p3 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp_i_fu_757_p2 <= "1" when (signed(sub_i_fu_748_p2) < signed(ap_const_lv6_36)) else "0";
    empty_127_fu_780_p3 <= 
        add_i_fu_771_p2 when (tmp_1_fu_763_p3(0) = '1') else 
        empty_fu_753_p1;
    empty_128_fu_788_p3 <= 
        trunc_ln161_fu_777_p1 when (cmp_i_fu_757_p2(0) = '1') else 
        empty_127_fu_780_p3;
    empty_fu_753_p1 <= sub_i_fu_748_p2(4 - 1 downto 0);
    i_1_fu_1003_p2 <= std_logic_vector(signed(i_reg_668) + signed(ap_const_lv5_1F));
    icmp_ln158_fu_991_p2 <= "1" when (j_reg_691 = ap_const_lv4_8) else "0";
    icmp_ln164_fu_1021_p2 <= "1" when (k_reg_713 = ap_const_lv4_C) else "0";
    k_cast_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_713),64));
    or_ln161_1_fu_969_p2 <= (sub_ln161_fu_859_p2 or ap_const_lv10_2);
    or_ln161_2_fu_980_p2 <= (sub_ln161_fu_859_p2 or ap_const_lv10_1);
    or_ln161_fu_958_p2 <= (sub_ln161_fu_859_p2 or ap_const_lv10_3);
    p_shl1_cast_fu_851_p3 <= (add_ln161_fu_818_p2 & ap_const_lv2_0);
    p_shl_cast_fu_843_p3 <= (trunc_ln161_1_fu_839_p1 & ap_const_lv4_0);

    sample_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, k_cast_fu_1015_p1, ap_block_pp0_stage0, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_sample_V_address0 <= k_cast_fu_1015_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sample_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        else 
            sample_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_sample_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sample_V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        else 
            sample_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sample_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, k_cast_fu_1015_p1, ap_block_pp0_stage0, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_timestamp_V_address0 <= k_cast_fu_1015_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sample_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_11_q0, sliding_window_buffer_samples_timestamp_V_9_q0, sliding_window_buffer_samples_timestamp_V_7_q0, sliding_window_buffer_samples_timestamp_V_5_q0, sliding_window_buffer_samples_timestamp_V_3_q0, sliding_window_buffer_samples_timestamp_V_1_q0, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_q0;
        else 
            sample_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_10_q0, sliding_window_buffer_samples_timestamp_V_8_q0, sliding_window_buffer_samples_timestamp_V_6_q0, sliding_window_buffer_samples_timestamp_V_4_q0, sliding_window_buffer_samples_timestamp_V_2_q0, sliding_window_buffer_samples_timestamp_V_0_q0, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_q0;
        else 
            sample_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    samples_buffer_out_address0 <= zext_ln172_fu_1042_p1(10 - 1 downto 0);

    samples_buffer_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            samples_buffer_out_ce0 <= ap_const_logic_1;
        else 
            samples_buffer_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_buffer_out_d0 <= (sample_timestamp_V_q0 & sample_sample_V_q0);

    samples_buffer_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln164_reg_1332, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln164_reg_1332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            samples_buffer_out_we0 <= ap_const_logic_1;
        else 
            samples_buffer_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln154_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_668),6));


    sliding_window_buffer_samples_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, sliding_window_buffer_samples_sample_V_addr_3_reg_1209, sliding_window_buffer_samples_sample_V_addr_5_reg_1219, sliding_window_buffer_samples_sample_V_addr_7_reg_1229, sliding_window_buffer_samples_sample_V_addr_9_reg_1239, sliding_window_buffer_samples_sample_V_addr_11_reg_1249, zext_ln161_4_fu_887_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sliding_window_buffer_samples_sample_V_address0 <= sliding_window_buffer_samples_sample_V_addr_11_reg_1249;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_address0 <= sliding_window_buffer_samples_sample_V_addr_9_reg_1239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_address0 <= sliding_window_buffer_samples_sample_V_addr_7_reg_1229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_address0 <= sliding_window_buffer_samples_sample_V_addr_5_reg_1219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_address0 <= sliding_window_buffer_samples_sample_V_addr_3_reg_1209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_address0 <= zext_ln161_4_fu_887_p1(10 - 1 downto 0);
        else 
            sliding_window_buffer_samples_sample_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, sliding_window_buffer_samples_sample_V_addr_2_reg_1204, sliding_window_buffer_samples_sample_V_addr_4_reg_1214, sliding_window_buffer_samples_sample_V_addr_6_reg_1224, sliding_window_buffer_samples_sample_V_addr_8_reg_1234, sliding_window_buffer_samples_sample_V_addr_10_reg_1244, zext_ln161_3_fu_876_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sliding_window_buffer_samples_sample_V_address1 <= sliding_window_buffer_samples_sample_V_addr_10_reg_1244;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_sample_V_address1 <= sliding_window_buffer_samples_sample_V_addr_8_reg_1234;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_address1 <= sliding_window_buffer_samples_sample_V_addr_6_reg_1224;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_address1 <= sliding_window_buffer_samples_sample_V_addr_4_reg_1214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_address1 <= sliding_window_buffer_samples_sample_V_addr_2_reg_1204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_address1 <= zext_ln161_3_fu_876_p1(10 - 1 downto 0);
        else 
            sliding_window_buffer_samples_sample_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sliding_window_buffer_samples_sample_V_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_samples_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sliding_window_buffer_samples_sample_V_ce1 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_address0 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_10_address0 <= sliding_window_buffer_samples_timestamp_V_10_addr_reg_1264;

    sliding_window_buffer_samples_timestamp_V_10_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sliding_window_buffer_samples_timestamp_V_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_11_address0 <= sliding_window_buffer_samples_timestamp_V_11_addr_reg_1269;

    sliding_window_buffer_samples_timestamp_V_11_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sliding_window_buffer_samples_timestamp_V_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_address0 <= zext_ln161_1_fu_823_p1(7 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_address0 <= sliding_window_buffer_samples_timestamp_V_2_addr_reg_1274;

    sliding_window_buffer_samples_timestamp_V_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_address0 <= sliding_window_buffer_samples_timestamp_V_3_addr_reg_1279;

    sliding_window_buffer_samples_timestamp_V_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_address0 <= sliding_window_buffer_samples_timestamp_V_4_addr_reg_1284;

    sliding_window_buffer_samples_timestamp_V_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_address0 <= sliding_window_buffer_samples_timestamp_V_5_addr_reg_1289;

    sliding_window_buffer_samples_timestamp_V_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_address0 <= sliding_window_buffer_samples_timestamp_V_6_addr_reg_1294;

    sliding_window_buffer_samples_timestamp_V_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_address0 <= sliding_window_buffer_samples_timestamp_V_7_addr_reg_1299;

    sliding_window_buffer_samples_timestamp_V_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_address0 <= sliding_window_buffer_samples_timestamp_V_8_addr_reg_1304;

    sliding_window_buffer_samples_timestamp_V_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_timestamp_V_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_address0 <= sliding_window_buffer_samples_timestamp_V_9_addr_reg_1309;

    sliding_window_buffer_samples_timestamp_V_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sliding_window_buffer_samples_timestamp_V_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sliding_window_front_ptr_load_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sliding_window_front_ptr_s),6));

    sub_i_fu_748_p2 <= std_logic_vector(signed(sliding_window_front_ptr_load_cast_reg_1173) - signed(sext_ln154_fu_736_p1));
    sub_ln161_fu_859_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_843_p3) - unsigned(p_shl1_cast_fu_851_p3));
    tmp_1_fu_763_p3 <= sub_i_fu_748_p2(5 downto 5);
    tmp_2_fu_796_p3 <= (empty_128_fu_788_p3 & ap_const_lv3_0);
    tmp_fu_740_p3 <= i_reg_668(4 downto 4);
    trunc_ln161_1_fu_839_p1 <= add_ln161_fu_818_p2(6 - 1 downto 0);
    trunc_ln161_fu_777_p1 <= sliding_window_back_ptr_s(4 - 1 downto 0);
    zext_ln158_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_796_p3),8));
    zext_ln161_10_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_8_fu_947_p2),64));
    zext_ln161_11_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln161_fu_958_p2),64));
    zext_ln161_12_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln161_1_fu_969_p2),64));
    zext_ln161_13_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln161_2_fu_980_p2),64));
    zext_ln161_1_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_fu_818_p2),64));
    zext_ln161_2_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln161_fu_859_p2),64));
    zext_ln161_3_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_1_fu_870_p2),64));
    zext_ln161_4_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_2_fu_881_p2),64));
    zext_ln161_5_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_3_fu_892_p2),64));
    zext_ln161_6_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_4_fu_903_p2),64));
    zext_ln161_7_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_5_fu_914_p2),64));
    zext_ln161_8_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_6_fu_925_p2),64));
    zext_ln161_9_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_7_fu_936_p2),64));
    zext_ln161_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_691),8));
    zext_ln172_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln172_fu_1036_p2),64));
end behav;
