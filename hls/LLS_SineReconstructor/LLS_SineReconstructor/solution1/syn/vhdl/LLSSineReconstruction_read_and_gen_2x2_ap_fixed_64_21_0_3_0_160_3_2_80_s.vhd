-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    alpha_strm1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    alpha_strm1_full_n : IN STD_LOGIC;
    alpha_strm1_write : OUT STD_LOGIC;
    beta_strm2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    beta_strm2_full_n : IN STD_LOGIC;
    beta_strm2_write : OUT STD_LOGIC;
    gamma_strm3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    gamma_strm3_full_n : IN STD_LOGIC;
    gamma_strm3_write : OUT STD_LOGIC;
    col_i_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_i_empty_n : IN STD_LOGIC;
    col_i_read : OUT STD_LOGIC;
    col_j_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    col_j_empty_n : IN STD_LOGIC;
    col_j_read : OUT STD_LOGIC;
    A_i_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_0_ce1 : OUT STD_LOGIC;
    A_i_V_0_we1 : OUT STD_LOGIC;
    A_i_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_i_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_i_V_1_ce1 : OUT STD_LOGIC;
    A_i_V_1_we1 : OUT STD_LOGIC;
    A_i_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_0_ce1 : OUT STD_LOGIC;
    A_j_V_0_we1 : OUT STD_LOGIC;
    A_j_V_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_j_V_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_j_V_1_ce1 : OUT STD_LOGIC;
    A_j_V_1_we1 : OUT STD_LOGIC;
    A_j_V_1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_0_ce0 : OUT STD_LOGIC;
    matA_V_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_0_ce1 : OUT STD_LOGIC;
    matA_V_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_1_ce0 : OUT STD_LOGIC;
    matA_V_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    matA_V_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matA_V_1_ce1 : OUT STD_LOGIC;
    matA_V_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv43_0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal alpha_strm1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal beta_strm2_blk_n : STD_LOGIC;
    signal gamma_strm3_blk_n : STD_LOGIC;
    signal col_i_blk_n : STD_LOGIC;
    signal col_j_blk_n : STD_LOGIC;
    signal k_reg_987 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_2_reg_1022 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_3_reg_1034 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_4_reg_1046 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i_read_reg_1774 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_j_read_reg_1779 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln220_fu_1058_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal col_i_load_cast_fu_1083_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_i_load_cast_reg_1792 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln236_1_fu_1086_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln236_1_reg_1797 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln236_fu_1089_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln236_reg_1802 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln236_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_1807 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_1807_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_33_fu_1171_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_33_reg_1831 : STD_LOGIC_VECTOR (106 downto 0);
    signal alpha_acc_V_0_addr_1_reg_1836 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1842 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_35_fu_1189_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_35_reg_1847 : STD_LOGIC_VECTOR (106 downto 0);
    signal beta_acc_V_0_addr_1_reg_1852 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_reg_1858 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_36_fu_1203_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_36_reg_1863 : STD_LOGIC_VECTOR (106 downto 0);
    signal gamma_acc_V_0_addr_1_reg_1868 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_reg_1874 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_38_fu_1221_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_38_reg_1879 : STD_LOGIC_VECTOR (106 downto 0);
    signal alpha_acc_V_1_addr_1_reg_1884 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_reg_1890 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_40_fu_1239_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_40_reg_1895 : STD_LOGIC_VECTOR (106 downto 0);
    signal beta_acc_V_1_addr_1_reg_1900 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_reg_1906 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_41_fu_1253_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_41_reg_1911 : STD_LOGIC_VECTOR (106 downto 0);
    signal gamma_acc_V_1_addr_1_reg_1916 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_reg_1922 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln258_fu_1465_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln258_reg_1927 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal alpha_sum_V_addr_1_reg_1935 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln258_fu_1471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_sum_V_addr_1_reg_1946 : STD_LOGIC_VECTOR (3 downto 0);
    signal gamma_sum_V_addr_1_reg_1957 : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_sum_V_addr_2_reg_1968 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_sum_V_addr_2_reg_1979 : STD_LOGIC_VECTOR (3 downto 0);
    signal gamma_sum_V_addr_2_reg_1990 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln261_fu_1549_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln278_fu_1555_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln278_reg_2006 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state11_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln278_fu_1561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_2011 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln289_fu_1621_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln289_reg_2045 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state14_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln289_fu_1627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_reg_2050 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln299_fu_1687_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln299_reg_2084 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state17_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln299_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_reg_2089 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal alpha_acc_V_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_acc_V_0_ce0 : STD_LOGIC;
    signal alpha_acc_V_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_acc_V_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_acc_V_0_ce1 : STD_LOGIC;
    signal alpha_acc_V_0_we1 : STD_LOGIC;
    signal alpha_acc_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_acc_V_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_acc_V_1_ce0 : STD_LOGIC;
    signal alpha_acc_V_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_acc_V_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_acc_V_1_ce1 : STD_LOGIC;
    signal alpha_acc_V_1_we1 : STD_LOGIC;
    signal alpha_acc_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_acc_V_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_acc_V_0_ce0 : STD_LOGIC;
    signal beta_acc_V_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_acc_V_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_acc_V_0_ce1 : STD_LOGIC;
    signal beta_acc_V_0_we1 : STD_LOGIC;
    signal beta_acc_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_acc_V_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_acc_V_1_ce0 : STD_LOGIC;
    signal beta_acc_V_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_acc_V_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_acc_V_1_ce1 : STD_LOGIC;
    signal beta_acc_V_1_we1 : STD_LOGIC;
    signal beta_acc_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_acc_V_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal gamma_acc_V_0_ce0 : STD_LOGIC;
    signal gamma_acc_V_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_acc_V_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal gamma_acc_V_0_ce1 : STD_LOGIC;
    signal gamma_acc_V_0_we1 : STD_LOGIC;
    signal gamma_acc_V_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_acc_V_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal gamma_acc_V_1_ce0 : STD_LOGIC;
    signal gamma_acc_V_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_acc_V_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal gamma_acc_V_1_ce1 : STD_LOGIC;
    signal gamma_acc_V_1_we1 : STD_LOGIC;
    signal gamma_acc_V_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_sum_V_ce0 : STD_LOGIC;
    signal alpha_sum_V_we0 : STD_LOGIC;
    signal alpha_sum_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_sum_V_ce1 : STD_LOGIC;
    signal alpha_sum_V_we1 : STD_LOGIC;
    signal alpha_sum_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_sum_V_ce0 : STD_LOGIC;
    signal beta_sum_V_we0 : STD_LOGIC;
    signal beta_sum_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal beta_sum_V_ce1 : STD_LOGIC;
    signal beta_sum_V_we1 : STD_LOGIC;
    signal beta_sum_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal gamma_sum_V_ce0 : STD_LOGIC;
    signal gamma_sum_V_we0 : STD_LOGIC;
    signal gamma_sum_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal gamma_sum_V_ce1 : STD_LOGIC;
    signal gamma_sum_V_we1 : STD_LOGIC;
    signal gamma_sum_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal alpha_sum_tmp0_V_ce0 : STD_LOGIC;
    signal alpha_sum_tmp0_V_we0 : STD_LOGIC;
    signal alpha_sum_tmp0_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp0_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp0_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal alpha_sum_tmp0_V_ce1 : STD_LOGIC;
    signal alpha_sum_tmp0_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal beta_sum_tmp0_V_ce0 : STD_LOGIC;
    signal beta_sum_tmp0_V_we0 : STD_LOGIC;
    signal beta_sum_tmp0_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp0_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp0_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal beta_sum_tmp0_V_ce1 : STD_LOGIC;
    signal beta_sum_tmp0_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal gamma_sum_tmp0_V_ce0 : STD_LOGIC;
    signal gamma_sum_tmp0_V_we0 : STD_LOGIC;
    signal gamma_sum_tmp0_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp0_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp0_V_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal gamma_sum_tmp0_V_ce1 : STD_LOGIC;
    signal gamma_sum_tmp0_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp1_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal alpha_sum_tmp1_V_ce0 : STD_LOGIC;
    signal alpha_sum_tmp1_V_we0 : STD_LOGIC;
    signal alpha_sum_tmp1_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp1_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp1_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal alpha_sum_tmp1_V_ce1 : STD_LOGIC;
    signal alpha_sum_tmp1_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp1_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal beta_sum_tmp1_V_ce0 : STD_LOGIC;
    signal beta_sum_tmp1_V_we0 : STD_LOGIC;
    signal beta_sum_tmp1_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp1_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp1_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal beta_sum_tmp1_V_ce1 : STD_LOGIC;
    signal beta_sum_tmp1_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp1_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal gamma_sum_tmp1_V_ce0 : STD_LOGIC;
    signal gamma_sum_tmp1_V_we0 : STD_LOGIC;
    signal gamma_sum_tmp1_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp1_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp1_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal gamma_sum_tmp1_V_ce1 : STD_LOGIC;
    signal gamma_sum_tmp1_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp2_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_sum_tmp2_V_ce0 : STD_LOGIC;
    signal alpha_sum_tmp2_V_we0 : STD_LOGIC;
    signal alpha_sum_tmp2_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp2_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_sum_tmp2_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_sum_tmp2_V_ce1 : STD_LOGIC;
    signal alpha_sum_tmp2_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp2_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_sum_tmp2_V_ce0 : STD_LOGIC;
    signal beta_sum_tmp2_V_we0 : STD_LOGIC;
    signal beta_sum_tmp2_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp2_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_sum_tmp2_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_sum_tmp2_V_ce1 : STD_LOGIC;
    signal beta_sum_tmp2_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp2_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal gamma_sum_tmp2_V_ce0 : STD_LOGIC;
    signal gamma_sum_tmp2_V_we0 : STD_LOGIC;
    signal gamma_sum_tmp2_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp2_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_sum_tmp2_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal gamma_sum_tmp2_V_ce1 : STD_LOGIC;
    signal gamma_sum_tmp2_V_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_reg_976 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln220_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_k_phi_fu_991_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal k_1_reg_999 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal idx_V_reg_1010 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_k_2_phi_fu_1026_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_k_3_phi_fu_1038_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_k_4_phi_fu_1050_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal zext_ln220_fu_1070_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln245_1_fu_1128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_fu_1139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom9425_i_i_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_fu_1487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln258_fu_1477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_1_fu_1500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln280_fu_1573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_fu_1586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln278_fu_1593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln291_fu_1639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_1_fu_1652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln289_fu_1659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln301_fu_1705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_2_fu_1718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln299_fu_1725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state20 : BOOLEAN;
    signal add_ln415_fu_1293_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_7_fu_1326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_8_fu_1359_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_9_fu_1392_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_10_fu_1425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln415_11_fu_1458_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_1507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_1_fu_1514_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_2_fu_1521_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln245_fu_1105_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_1109_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln245_fu_1101_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln245_fu_1117_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln245_fu_1123_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln246_fu_1134_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_1153_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1115_fu_1167_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_33_fu_1171_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1115_fu_1167_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_33_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1115_1_fu_1185_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_35_fu_1189_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1115_1_fu_1185_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_35_fu_1189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_36_fu_1203_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_36_fu_1203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1115_2_fu_1217_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_38_fu_1221_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1115_2_fu_1217_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_38_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1115_3_fu_1235_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_40_fu_1239_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1115_3_fu_1235_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal r_V_40_fu_1239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_41_fu_1253_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_41_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_3_fu_1267_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_fu_1275_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln_fu_1280_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_fu_1290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_5_fu_1300_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_7_fu_1308_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln708_7_fu_1313_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_7_fu_1323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_7_fu_1333_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_8_fu_1341_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln708_8_fu_1346_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_8_fu_1356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_9_fu_1366_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_9_fu_1374_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln708_9_fu_1379_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_9_fu_1389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_11_fu_1399_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_10_fu_1407_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln708_s_fu_1412_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_10_fu_1422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_13_fu_1432_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal ret_V_11_fu_1440_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal trunc_ln708_1_fu_1445_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_11_fu_1455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln691_fu_1494_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln280_fu_1567_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln280_fu_1580_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln291_fu_1633_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln291_fu_1646_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln301_fu_1699_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln301_fu_1712_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp1 : BOOLEAN;
    signal ap_block_pp3 : BOOLEAN;
    signal ap_block_pp4 : BOOLEAN;
    signal ap_block_pp5 : BOOLEAN;
    signal ap_enable_operation_124 : BOOLEAN;
    signal ap_enable_state5_pp1_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_158 : BOOLEAN;
    signal ap_enable_state6_pp1_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_164 : BOOLEAN;
    signal ap_enable_operation_129 : BOOLEAN;
    signal ap_enable_operation_165 : BOOLEAN;
    signal ap_enable_operation_171 : BOOLEAN;
    signal ap_enable_operation_133 : BOOLEAN;
    signal ap_enable_operation_172 : BOOLEAN;
    signal ap_enable_operation_178 : BOOLEAN;
    signal ap_enable_operation_144 : BOOLEAN;
    signal ap_enable_operation_179 : BOOLEAN;
    signal ap_enable_operation_185 : BOOLEAN;
    signal ap_enable_operation_149 : BOOLEAN;
    signal ap_enable_operation_186 : BOOLEAN;
    signal ap_enable_operation_192 : BOOLEAN;
    signal ap_enable_operation_153 : BOOLEAN;
    signal ap_enable_operation_193 : BOOLEAN;
    signal ap_enable_operation_199 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LLSSineReconstruction_mul_64s_64s_107_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (106 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_acc_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    alpha_acc_V_0_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_acc_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_acc_V_0_address0,
        ce0 => alpha_acc_V_0_ce0,
        q0 => alpha_acc_V_0_q0,
        address1 => alpha_acc_V_0_address1,
        ce1 => alpha_acc_V_0_ce1,
        we1 => alpha_acc_V_0_we1,
        d1 => alpha_acc_V_0_d1);

    alpha_acc_V_1_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_acc_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_acc_V_1_address0,
        ce0 => alpha_acc_V_1_ce0,
        q0 => alpha_acc_V_1_q0,
        address1 => alpha_acc_V_1_address1,
        ce1 => alpha_acc_V_1_ce1,
        we1 => alpha_acc_V_1_we1,
        d1 => alpha_acc_V_1_d1);

    beta_acc_V_0_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_acc_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_acc_V_0_address0,
        ce0 => beta_acc_V_0_ce0,
        q0 => beta_acc_V_0_q0,
        address1 => beta_acc_V_0_address1,
        ce1 => beta_acc_V_0_ce1,
        we1 => beta_acc_V_0_we1,
        d1 => beta_acc_V_0_d1);

    beta_acc_V_1_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_acc_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_acc_V_1_address0,
        ce0 => beta_acc_V_1_ce0,
        q0 => beta_acc_V_1_q0,
        address1 => beta_acc_V_1_address1,
        ce1 => beta_acc_V_1_ce1,
        we1 => beta_acc_V_1_we1,
        d1 => beta_acc_V_1_d1);

    gamma_acc_V_0_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_acc_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_acc_V_0_address0,
        ce0 => gamma_acc_V_0_ce0,
        q0 => gamma_acc_V_0_q0,
        address1 => gamma_acc_V_0_address1,
        ce1 => gamma_acc_V_0_ce1,
        we1 => gamma_acc_V_0_we1,
        d1 => gamma_acc_V_0_d1);

    gamma_acc_V_1_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_acc_V_0
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_acc_V_1_address0,
        ce0 => gamma_acc_V_1_ce0,
        q0 => gamma_acc_V_1_q0,
        address1 => gamma_acc_V_1_address1,
        ce1 => gamma_acc_V_1_ce1,
        we1 => gamma_acc_V_1_we1,
        d1 => gamma_acc_V_1_d1);

    alpha_sum_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_V
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_sum_V_address0,
        ce0 => alpha_sum_V_ce0,
        we0 => alpha_sum_V_we0,
        d0 => alpha_sum_V_d0,
        q0 => alpha_sum_V_q0,
        address1 => alpha_sum_V_address1,
        ce1 => alpha_sum_V_ce1,
        we1 => alpha_sum_V_we1,
        d1 => alpha_sum_V_d1,
        q1 => alpha_sum_V_q1);

    beta_sum_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_V
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_sum_V_address0,
        ce0 => beta_sum_V_ce0,
        we0 => beta_sum_V_we0,
        d0 => beta_sum_V_d0,
        q0 => beta_sum_V_q0,
        address1 => beta_sum_V_address1,
        ce1 => beta_sum_V_ce1,
        we1 => beta_sum_V_we1,
        d1 => beta_sum_V_d1,
        q1 => beta_sum_V_q1);

    gamma_sum_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_V
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_sum_V_address0,
        ce0 => gamma_sum_V_ce0,
        we0 => gamma_sum_V_we0,
        d0 => gamma_sum_V_d0,
        q0 => gamma_sum_V_q0,
        address1 => gamma_sum_V_address1,
        ce1 => gamma_sum_V_ce1,
        we1 => gamma_sum_V_we1,
        d1 => gamma_sum_V_d1,
        q1 => gamma_sum_V_q1);

    alpha_sum_tmp0_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp0_V
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_sum_tmp0_V_address0,
        ce0 => alpha_sum_tmp0_V_ce0,
        we0 => alpha_sum_tmp0_V_we0,
        d0 => alpha_sum_tmp0_V_d0,
        q0 => alpha_sum_tmp0_V_q0,
        address1 => alpha_sum_tmp0_V_address1,
        ce1 => alpha_sum_tmp0_V_ce1,
        q1 => alpha_sum_tmp0_V_q1);

    beta_sum_tmp0_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp0_V
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_sum_tmp0_V_address0,
        ce0 => beta_sum_tmp0_V_ce0,
        we0 => beta_sum_tmp0_V_we0,
        d0 => beta_sum_tmp0_V_d0,
        q0 => beta_sum_tmp0_V_q0,
        address1 => beta_sum_tmp0_V_address1,
        ce1 => beta_sum_tmp0_V_ce1,
        q1 => beta_sum_tmp0_V_q1);

    gamma_sum_tmp0_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp0_V
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_sum_tmp0_V_address0,
        ce0 => gamma_sum_tmp0_V_ce0,
        we0 => gamma_sum_tmp0_V_we0,
        d0 => gamma_sum_tmp0_V_d0,
        q0 => gamma_sum_tmp0_V_q0,
        address1 => gamma_sum_tmp0_V_address1,
        ce1 => gamma_sum_tmp0_V_ce1,
        q1 => gamma_sum_tmp0_V_q1);

    alpha_sum_tmp1_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp1_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_sum_tmp1_V_address0,
        ce0 => alpha_sum_tmp1_V_ce0,
        we0 => alpha_sum_tmp1_V_we0,
        d0 => alpha_sum_tmp1_V_d0,
        q0 => alpha_sum_tmp1_V_q0,
        address1 => alpha_sum_tmp1_V_address1,
        ce1 => alpha_sum_tmp1_V_ce1,
        q1 => alpha_sum_tmp1_V_q1);

    beta_sum_tmp1_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp1_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_sum_tmp1_V_address0,
        ce0 => beta_sum_tmp1_V_ce0,
        we0 => beta_sum_tmp1_V_we0,
        d0 => beta_sum_tmp1_V_d0,
        q0 => beta_sum_tmp1_V_q0,
        address1 => beta_sum_tmp1_V_address1,
        ce1 => beta_sum_tmp1_V_ce1,
        q1 => beta_sum_tmp1_V_q1);

    gamma_sum_tmp1_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp1_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_sum_tmp1_V_address0,
        ce0 => gamma_sum_tmp1_V_ce0,
        we0 => gamma_sum_tmp1_V_we0,
        d0 => gamma_sum_tmp1_V_d0,
        q0 => gamma_sum_tmp1_V_q0,
        address1 => gamma_sum_tmp1_V_address1,
        ce1 => gamma_sum_tmp1_V_ce1,
        q1 => gamma_sum_tmp1_V_q1);

    alpha_sum_tmp2_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp2_V
    generic map (
        DataWidth => 64,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha_sum_tmp2_V_address0,
        ce0 => alpha_sum_tmp2_V_ce0,
        we0 => alpha_sum_tmp2_V_we0,
        d0 => alpha_sum_tmp2_V_d0,
        q0 => alpha_sum_tmp2_V_q0,
        address1 => alpha_sum_tmp2_V_address1,
        ce1 => alpha_sum_tmp2_V_ce1,
        q1 => alpha_sum_tmp2_V_q1);

    beta_sum_tmp2_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp2_V
    generic map (
        DataWidth => 64,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => beta_sum_tmp2_V_address0,
        ce0 => beta_sum_tmp2_V_ce0,
        we0 => beta_sum_tmp2_V_we0,
        d0 => beta_sum_tmp2_V_d0,
        q0 => beta_sum_tmp2_V_q0,
        address1 => beta_sum_tmp2_V_address1,
        ce1 => beta_sum_tmp2_V_ce1,
        q1 => beta_sum_tmp2_V_q1);

    gamma_sum_tmp2_V_U : component LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp2_V
    generic map (
        DataWidth => 64,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gamma_sum_tmp2_V_address0,
        ce0 => gamma_sum_tmp2_V_ce0,
        we0 => gamma_sum_tmp2_V_we0,
        d0 => gamma_sum_tmp2_V_d0,
        q0 => gamma_sum_tmp2_V_q0,
        address1 => gamma_sum_tmp2_V_address1,
        ce1 => gamma_sum_tmp2_V_ce1,
        q1 => gamma_sum_tmp2_V_q1);

    mul_64s_64s_107_1_1_U457 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_33_fu_1171_p0,
        din1 => r_V_33_fu_1171_p1,
        dout => r_V_33_fu_1171_p2);

    mul_64s_64s_107_1_1_U458 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_35_fu_1189_p0,
        din1 => r_V_35_fu_1189_p1,
        dout => r_V_35_fu_1189_p2);

    mul_64s_64s_107_1_1_U459 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_36_fu_1203_p0,
        din1 => r_V_36_fu_1203_p1,
        dout => r_V_36_fu_1203_p2);

    mul_64s_64s_107_1_1_U460 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_38_fu_1221_p0,
        din1 => r_V_38_fu_1221_p1,
        dout => r_V_38_fu_1221_p2);

    mul_64s_64s_107_1_1_U461 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_40_fu_1239_p0,
        din1 => r_V_40_fu_1239_p1,
        dout => r_V_40_fu_1239_p2);

    mul_64s_64s_107_1_1_U462 : component LLSSineReconstruction_mul_64s_64s_107_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 107)
    port map (
        din0 => r_V_41_fu_1253_p0,
        din1 => r_V_41_fu_1253_p1,
        dout => r_V_41_fu_1253_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((gamma_strm3_full_n = ap_const_logic_0) or (beta_strm2_full_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_strm1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state14) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state14);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state17) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state17);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    idx_V_reg_1010_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                idx_V_reg_1010 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                idx_V_reg_1010 <= add_ln261_fu_1549_p2;
            end if; 
        end if;
    end process;

    k_1_reg_999_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_1_reg_999 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_1_reg_999 <= add_ln258_reg_1927;
            end if; 
        end if;
    end process;

    k_2_reg_1022_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_2_reg_1022 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln278_reg_2011 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                k_2_reg_1022 <= add_ln278_reg_2006;
            end if; 
        end if;
    end process;

    k_3_reg_1034_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_3_reg_1034 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln289_reg_2050 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                k_3_reg_1034 <= add_ln289_reg_2045;
            end if; 
        end if;
    end process;

    k_4_reg_1046_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                k_4_reg_1046 <= ap_const_lv2_0;
            elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln299_reg_2089 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                k_4_reg_1046 <= add_ln299_reg_2084;
            end if; 
        end if;
    end process;

    k_reg_987_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln236_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                k_reg_987 <= add_ln236_reg_1802;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_reg_987 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    t_reg_976_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_reg_976 <= add_ln220_fu_1058_p2;
            elsif ((not(((col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_976 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                add_ln236_reg_1802 <= add_ln236_fu_1089_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln258_reg_1927 <= add_ln258_fu_1465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln278_reg_2006 <= add_ln278_fu_1555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln289_reg_2045 <= add_ln289_fu_1621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln299_reg_2084 <= add_ln299_fu_1687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln236_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                alpha_acc_V_0_addr_1_reg_1836 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
                alpha_acc_V_1_addr_1_reg_1884 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
                beta_acc_V_0_addr_1_reg_1852 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
                beta_acc_V_1_addr_1_reg_1900 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
                gamma_acc_V_0_addr_1_reg_1868 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
                gamma_acc_V_1_addr_1_reg_1916 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
                r_V_33_reg_1831 <= r_V_33_fu_1171_p2;
                r_V_35_reg_1847 <= r_V_35_fu_1189_p2;
                r_V_36_reg_1863 <= r_V_36_fu_1203_p2;
                r_V_38_reg_1879 <= r_V_38_fu_1221_p2;
                r_V_40_reg_1895 <= r_V_40_fu_1239_p2;
                r_V_41_reg_1911 <= r_V_41_fu_1253_p2;
                tmp_18_reg_1858 <= r_V_35_fu_1189_p2(42 downto 42);
                tmp_19_reg_1874 <= r_V_36_fu_1203_p2(42 downto 42);
                tmp_20_reg_1890 <= r_V_38_fu_1221_p2(42 downto 42);
                tmp_21_reg_1906 <= r_V_40_fu_1239_p2(42 downto 42);
                tmp_22_reg_1922 <= r_V_41_fu_1253_p2(42 downto 42);
                tmp_reg_1842 <= r_V_33_fu_1171_p2(42 downto 42);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln258_fu_1471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                alpha_sum_V_addr_1_reg_1935 <= zext_ln534_fu_1487_p1(4 - 1 downto 0);
                    alpha_sum_V_addr_2_reg_1968(3 downto 1) <= zext_ln534_1_fu_1500_p1(4 - 1 downto 0)(3 downto 1);
                beta_sum_V_addr_1_reg_1946 <= zext_ln534_fu_1487_p1(4 - 1 downto 0);
                    beta_sum_V_addr_2_reg_1979(3 downto 1) <= zext_ln534_1_fu_1500_p1(4 - 1 downto 0)(3 downto 1);
                gamma_sum_V_addr_1_reg_1957 <= zext_ln534_fu_1487_p1(4 - 1 downto 0);
                    gamma_sum_V_addr_2_reg_1990(3 downto 1) <= zext_ln534_1_fu_1500_p1(4 - 1 downto 0)(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    col_i_load_cast_reg_1792(1 downto 0) <= col_i_load_cast_fu_1083_p1(1 downto 0);
                    zext_ln236_1_reg_1797(1 downto 0) <= zext_ln236_1_fu_1086_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                col_i_read_reg_1774 <= col_i_dout;
                col_j_read_reg_1779 <= col_j_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln236_reg_1807 <= icmp_ln236_fu_1095_p2;
                icmp_ln236_reg_1807_pp1_iter1_reg <= icmp_ln236_reg_1807;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln278_reg_2011 <= icmp_ln278_fu_1561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln289_reg_2050 <= icmp_ln289_fu_1627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                icmp_ln299_reg_2089 <= icmp_ln299_fu_1693_p2;
            end if;
        end if;
    end process;
    col_i_load_cast_reg_1792(7 downto 2) <= "000000";
    zext_ln236_1_reg_1797(7 downto 2) <= "000000";
    alpha_sum_V_addr_2_reg_1968(0) <= '1';
    beta_sum_V_addr_2_reg_1979(0) <= '1';
    gamma_sum_V_addr_2_reg_1990(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, alpha_strm1_full_n, beta_strm2_full_n, gamma_strm3_full_n, col_i_empty_n, col_j_empty_n, ap_CS_fsm_state20, ap_CS_fsm_state2, ap_enable_reg_pp1_iter0, icmp_ln236_fu_1095_p2, ap_CS_fsm_state8, icmp_ln258_fu_1471_p2, ap_enable_reg_pp3_iter0, icmp_ln278_fu_1561_p2, ap_enable_reg_pp4_iter0, icmp_ln289_fu_1627_p2, ap_enable_reg_pp5_iter0, icmp_ln299_fu_1693_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, icmp_ln220_fu_1064_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln236_fu_1095_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln236_fu_1095_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln258_fu_1471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((icmp_ln278_fu_1561_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((icmp_ln278_fu_1561_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((icmp_ln289_fu_1627_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((icmp_ln289_fu_1627_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((icmp_ln299_fu_1693_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((icmp_ln299_fu_1693_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if ((not(((gamma_strm3_full_n = ap_const_logic_0) or (beta_strm2_full_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_strm1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    A_i_V_0_address1 <= zext_ln236_fu_1145_p1(7 - 1 downto 0);

    A_i_V_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_i_V_0_ce1 <= ap_const_logic_1;
        else 
            A_i_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_i_V_0_d1 <= matA_V_0_q1;

    A_i_V_0_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln236_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_i_V_0_we1 <= ap_const_logic_1;
        else 
            A_i_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_i_V_1_address1 <= zext_ln236_fu_1145_p1(7 - 1 downto 0);

    A_i_V_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_i_V_1_ce1 <= ap_const_logic_1;
        else 
            A_i_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_i_V_1_d1 <= matA_V_1_q1;

    A_i_V_1_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln236_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_i_V_1_we1 <= ap_const_logic_1;
        else 
            A_i_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_j_V_0_address1 <= zext_ln236_fu_1145_p1(7 - 1 downto 0);

    A_j_V_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_j_V_0_ce1 <= ap_const_logic_1;
        else 
            A_j_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_j_V_0_d1 <= matA_V_0_q0;

    A_j_V_0_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln236_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_j_V_0_we1 <= ap_const_logic_1;
        else 
            A_j_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_j_V_1_address1 <= zext_ln236_fu_1145_p1(7 - 1 downto 0);

    A_j_V_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_j_V_1_ce1 <= ap_const_logic_1;
        else 
            A_j_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_j_V_1_d1 <= matA_V_1_q0;

    A_j_V_1_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln236_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_j_V_1_we1 <= ap_const_logic_1;
        else 
            A_j_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln220_fu_1058_p2 <= std_logic_vector(unsigned(t_reg_976) + unsigned(ap_const_lv5_1));
    add_ln236_fu_1089_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_991_p4) + unsigned(ap_const_lv7_1));
    add_ln245_fu_1123_p2 <= std_logic_vector(unsigned(sub_ln245_fu_1117_p2) + unsigned(col_i_load_cast_reg_1792));
    add_ln246_fu_1134_p2 <= std_logic_vector(unsigned(sub_ln245_fu_1117_p2) + unsigned(zext_ln236_1_reg_1797));
    add_ln258_fu_1465_p2 <= std_logic_vector(unsigned(k_1_reg_999) + unsigned(ap_const_lv5_1));
    add_ln261_fu_1549_p2 <= std_logic_vector(unsigned(idx_V_reg_1010) + unsigned(ap_const_lv4_2));
    add_ln278_fu_1555_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_2_phi_fu_1026_p4) + unsigned(ap_const_lv4_1));
    add_ln289_fu_1621_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_3_phi_fu_1038_p4) + unsigned(ap_const_lv3_1));
    add_ln299_fu_1687_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_4_phi_fu_1050_p4) + unsigned(ap_const_lv2_1));
    add_ln415_10_fu_1425_p2 <= std_logic_vector(unsigned(trunc_ln708_s_fu_1412_p4) + unsigned(zext_ln415_10_fu_1422_p1));
    add_ln415_11_fu_1458_p2 <= std_logic_vector(unsigned(trunc_ln708_1_fu_1445_p4) + unsigned(zext_ln415_11_fu_1455_p1));
    add_ln415_7_fu_1326_p2 <= std_logic_vector(unsigned(trunc_ln708_7_fu_1313_p4) + unsigned(zext_ln415_7_fu_1323_p1));
    add_ln415_8_fu_1359_p2 <= std_logic_vector(unsigned(trunc_ln708_8_fu_1346_p4) + unsigned(zext_ln415_8_fu_1356_p1));
    add_ln415_9_fu_1392_p2 <= std_logic_vector(unsigned(trunc_ln708_9_fu_1379_p4) + unsigned(zext_ln415_9_fu_1389_p1));
    add_ln415_fu_1293_p2 <= std_logic_vector(unsigned(trunc_ln_fu_1280_p4) + unsigned(zext_ln415_fu_1290_p1));
    add_ln703_1_fu_1514_p2 <= std_logic_vector(unsigned(beta_acc_V_0_q0) + unsigned(beta_sum_V_q1));
    add_ln703_2_fu_1521_p2 <= std_logic_vector(unsigned(gamma_acc_V_0_q0) + unsigned(gamma_sum_V_q1));
    add_ln703_fu_1507_p2 <= std_logic_vector(unsigned(alpha_acc_V_0_q0) + unsigned(alpha_sum_V_q1));

    alpha_acc_V_0_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, idxprom9425_i_i_fu_1157_p1, zext_ln258_fu_1477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            alpha_acc_V_0_address0 <= zext_ln258_fu_1477_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            alpha_acc_V_0_address0 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
        else 
            alpha_acc_V_0_address0 <= "XXXX";
        end if; 
    end process;


    alpha_acc_V_0_address1_assign_proc : process(ap_CS_fsm_state2, alpha_acc_V_0_addr_1_reg_1836, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln220_fu_1070_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            alpha_acc_V_0_address1 <= alpha_acc_V_0_addr_1_reg_1836;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            alpha_acc_V_0_address1 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            alpha_acc_V_0_address1 <= "XXXX";
        end if; 
    end process;


    alpha_acc_V_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            alpha_acc_V_0_ce0 <= ap_const_logic_1;
        else 
            alpha_acc_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_acc_V_0_ce1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            alpha_acc_V_0_ce1 <= ap_const_logic_1;
        else 
            alpha_acc_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_acc_V_0_d1_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, add_ln415_fu_1293_p2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            alpha_acc_V_0_d1 <= add_ln415_fu_1293_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            alpha_acc_V_0_d1 <= ap_const_lv64_0;
        else 
            alpha_acc_V_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    alpha_acc_V_0_we1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807_pp1_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln220_fu_1064_p2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            alpha_acc_V_0_we1 <= ap_const_logic_1;
        else 
            alpha_acc_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_acc_V_1_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, idxprom9425_i_i_fu_1157_p1, zext_ln258_fu_1477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            alpha_acc_V_1_address0 <= zext_ln258_fu_1477_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            alpha_acc_V_1_address0 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
        else 
            alpha_acc_V_1_address0 <= "XXXX";
        end if; 
    end process;


    alpha_acc_V_1_address1_assign_proc : process(ap_CS_fsm_state2, alpha_acc_V_1_addr_1_reg_1884, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln220_fu_1070_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            alpha_acc_V_1_address1 <= alpha_acc_V_1_addr_1_reg_1884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            alpha_acc_V_1_address1 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            alpha_acc_V_1_address1 <= "XXXX";
        end if; 
    end process;


    alpha_acc_V_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            alpha_acc_V_1_ce0 <= ap_const_logic_1;
        else 
            alpha_acc_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_acc_V_1_ce1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            alpha_acc_V_1_ce1 <= ap_const_logic_1;
        else 
            alpha_acc_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_acc_V_1_d1_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, add_ln415_9_fu_1392_p2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            alpha_acc_V_1_d1 <= add_ln415_9_fu_1392_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            alpha_acc_V_1_d1 <= ap_const_lv64_0;
        else 
            alpha_acc_V_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    alpha_acc_V_1_we1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807_pp1_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln220_fu_1064_p2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            alpha_acc_V_1_we1 <= ap_const_logic_1;
        else 
            alpha_acc_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_strm1_blk_n_assign_proc : process(alpha_strm1_full_n, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            alpha_strm1_blk_n <= alpha_strm1_full_n;
        else 
            alpha_strm1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    alpha_strm1_din <= std_logic_vector(unsigned(alpha_sum_tmp2_V_q0) + unsigned(alpha_sum_tmp2_V_q1));

    alpha_strm1_write_assign_proc : process(alpha_strm1_full_n, beta_strm2_full_n, gamma_strm3_full_n, ap_CS_fsm_state20)
    begin
        if ((not(((gamma_strm3_full_n = ap_const_logic_0) or (beta_strm2_full_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_strm1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            alpha_strm1_write <= ap_const_logic_1;
        else 
            alpha_strm1_write <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, alpha_sum_V_addr_1_reg_1935, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln220_fu_1070_p1, zext_ln534_1_fu_1500_p1, zext_ln280_fu_1573_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            alpha_sum_V_address0 <= zext_ln280_fu_1573_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            alpha_sum_V_address0 <= alpha_sum_V_addr_1_reg_1935;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            alpha_sum_V_address0 <= zext_ln534_1_fu_1500_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            alpha_sum_V_address0 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            alpha_sum_V_address0 <= "XXXX";
        end if; 
    end process;


    alpha_sum_V_address1_assign_proc : process(ap_CS_fsm_state8, alpha_sum_V_addr_2_reg_1968, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln534_fu_1487_p1, zext_ln703_fu_1586_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            alpha_sum_V_address1 <= zext_ln703_fu_1586_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            alpha_sum_V_address1 <= alpha_sum_V_addr_2_reg_1968;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            alpha_sum_V_address1 <= zext_ln534_fu_1487_p1(4 - 1 downto 0);
        else 
            alpha_sum_V_address1 <= "XXXX";
        end if; 
    end process;


    alpha_sum_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            alpha_sum_V_ce0 <= ap_const_logic_1;
        else 
            alpha_sum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            alpha_sum_V_ce1 <= ap_const_logic_1;
        else 
            alpha_sum_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, add_ln703_fu_1507_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            alpha_sum_V_d0 <= add_ln703_fu_1507_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            alpha_sum_V_d0 <= ap_const_lv64_0;
        else 
            alpha_sum_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    alpha_sum_V_d1 <= std_logic_vector(unsigned(alpha_acc_V_1_q0) + unsigned(alpha_sum_V_q0));

    alpha_sum_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln220_fu_1064_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            alpha_sum_V_we0 <= ap_const_logic_1;
        else 
            alpha_sum_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_V_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            alpha_sum_V_we1 <= ap_const_logic_1;
        else 
            alpha_sum_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp0_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp4_stage0, zext_ln278_fu_1593_p1, zext_ln703_1_fu_1652_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            alpha_sum_tmp0_V_address0 <= zext_ln703_1_fu_1652_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            alpha_sum_tmp0_V_address0 <= zext_ln278_fu_1593_p1(3 - 1 downto 0);
        else 
            alpha_sum_tmp0_V_address0 <= "XXX";
        end if; 
    end process;

    alpha_sum_tmp0_V_address1 <= zext_ln291_fu_1639_p1(3 - 1 downto 0);

    alpha_sum_tmp0_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            alpha_sum_tmp0_V_ce0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp0_V_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            alpha_sum_tmp0_V_ce1 <= ap_const_logic_1;
        else 
            alpha_sum_tmp0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alpha_sum_tmp0_V_d0 <= std_logic_vector(unsigned(alpha_sum_V_q1) + unsigned(alpha_sum_V_q0));

    alpha_sum_tmp0_V_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln278_reg_2011, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln278_reg_2011 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            alpha_sum_tmp0_V_we0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp1_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, ap_block_pp5_stage0, zext_ln289_fu_1659_p1, zext_ln703_2_fu_1718_p1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            alpha_sum_tmp1_V_address0 <= zext_ln703_2_fu_1718_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            alpha_sum_tmp1_V_address0 <= zext_ln289_fu_1659_p1(2 - 1 downto 0);
        else 
            alpha_sum_tmp1_V_address0 <= "XX";
        end if; 
    end process;

    alpha_sum_tmp1_V_address1 <= zext_ln301_fu_1705_p1(2 - 1 downto 0);

    alpha_sum_tmp1_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            alpha_sum_tmp1_V_ce0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp1_V_ce1_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            alpha_sum_tmp1_V_ce1 <= ap_const_logic_1;
        else 
            alpha_sum_tmp1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alpha_sum_tmp1_V_d0 <= std_logic_vector(unsigned(alpha_sum_tmp0_V_q0) + unsigned(alpha_sum_tmp0_V_q1));

    alpha_sum_tmp1_V_we0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln289_reg_2050, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln289_reg_2050 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            alpha_sum_tmp1_V_we0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp2_V_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_CS_fsm_state19, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, zext_ln299_fu_1725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            alpha_sum_tmp2_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            alpha_sum_tmp2_V_address0 <= zext_ln299_fu_1725_p1(1 - 1 downto 0);
        else 
            alpha_sum_tmp2_V_address0 <= "X";
        end if; 
    end process;

    alpha_sum_tmp2_V_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    alpha_sum_tmp2_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state19, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            alpha_sum_tmp2_V_ce0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alpha_sum_tmp2_V_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            alpha_sum_tmp2_V_ce1 <= ap_const_logic_1;
        else 
            alpha_sum_tmp2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alpha_sum_tmp2_V_d0 <= std_logic_vector(unsigned(alpha_sum_tmp1_V_q0) + unsigned(alpha_sum_tmp1_V_q1));

    alpha_sum_tmp2_V_we0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln299_reg_2089, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln299_reg_2089 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            alpha_sum_tmp2_V_we0 <= ap_const_logic_1;
        else 
            alpha_sum_tmp2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);

    ap_block_pp1_assign_proc : process(ap_CS_fsm, ap_block_pp1_stage0_subdone)
    begin
                ap_block_pp1 <= ((ap_ST_fsm_pp1_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp1_stage0_subdone));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_assign_proc : process(ap_CS_fsm, ap_block_pp3_stage0_subdone)
    begin
                ap_block_pp3 <= ((ap_const_boolean_1 = ap_block_pp3_stage0_subdone) and (ap_ST_fsm_pp3_stage0 = ap_CS_fsm));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_assign_proc : process(ap_CS_fsm, ap_block_pp4_stage0_subdone)
    begin
                ap_block_pp4 <= ((ap_const_boolean_1 = ap_block_pp4_stage0_subdone) and (ap_ST_fsm_pp4_stage0 = ap_CS_fsm));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_assign_proc : process(ap_CS_fsm, ap_block_pp5_stage0_subdone)
    begin
                ap_block_pp5 <= ((ap_const_boolean_1 = ap_block_pp5_stage0_subdone) and (ap_ST_fsm_pp5_stage0 = ap_CS_fsm));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, col_i_empty_n, col_j_empty_n)
    begin
                ap_block_state1 <= ((col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state11_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_assign_proc : process(alpha_strm1_full_n, beta_strm2_full_n, gamma_strm3_full_n)
    begin
                ap_block_state20 <= ((gamma_strm3_full_n = ap_const_logic_0) or (beta_strm2_full_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_strm1_full_n));
    end process;

        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln236_fu_1095_p2)
    begin
        if ((icmp_ln236_fu_1095_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state11_assign_proc : process(icmp_ln278_fu_1561_p2)
    begin
        if ((icmp_ln278_fu_1561_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state14_assign_proc : process(icmp_ln289_fu_1627_p2)
    begin
        if ((icmp_ln289_fu_1627_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state17_assign_proc : process(icmp_ln299_fu_1693_p2)
    begin
        if ((icmp_ln299_fu_1693_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, alpha_strm1_full_n, beta_strm2_full_n, gamma_strm3_full_n, ap_CS_fsm_state20)
    begin
        if ((not(((gamma_strm3_full_n = ap_const_logic_0) or (beta_strm2_full_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_strm1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_124_assign_proc : process(icmp_ln236_reg_1807)
    begin
                ap_enable_operation_124 <= (icmp_ln236_reg_1807 = ap_const_lv1_0);
    end process;


    ap_enable_operation_129_assign_proc : process(icmp_ln236_reg_1807)
    begin
                ap_enable_operation_129 <= (icmp_ln236_reg_1807 = ap_const_lv1_0);
    end process;


    ap_enable_operation_133_assign_proc : process(icmp_ln236_reg_1807)
    begin
                ap_enable_operation_133 <= (icmp_ln236_reg_1807 = ap_const_lv1_0);
    end process;


    ap_enable_operation_144_assign_proc : process(icmp_ln236_reg_1807)
    begin
                ap_enable_operation_144 <= (icmp_ln236_reg_1807 = ap_const_lv1_0);
    end process;


    ap_enable_operation_149_assign_proc : process(icmp_ln236_reg_1807)
    begin
                ap_enable_operation_149 <= (icmp_ln236_reg_1807 = ap_const_lv1_0);
    end process;


    ap_enable_operation_153_assign_proc : process(icmp_ln236_reg_1807)
    begin
                ap_enable_operation_153 <= (icmp_ln236_reg_1807 = ap_const_lv1_0);
    end process;


    ap_enable_operation_158_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_158 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_164_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_164 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_165_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_165 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_171_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_171 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_172_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_172 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_178_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_178 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_179_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_179 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_185_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_185 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_186_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_186 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_192_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_192 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_193_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_193 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_199_assign_proc : process(icmp_ln236_reg_1807_pp1_iter1_reg)
    begin
                ap_enable_operation_199 <= (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0);
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_enable_state5_pp1_iter1_stage0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
                ap_enable_state5_pp1_iter1_stage0 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_enable_state6_pp1_iter2_stage0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter2)
    begin
                ap_enable_state6_pp1_iter2_stage0 <= ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_2_phi_fu_1026_p4_assign_proc : process(k_2_reg_1022, add_ln278_reg_2006, ap_CS_fsm_pp3_stage0, icmp_ln278_reg_2011, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln278_reg_2011 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_k_2_phi_fu_1026_p4 <= add_ln278_reg_2006;
        else 
            ap_phi_mux_k_2_phi_fu_1026_p4 <= k_2_reg_1022;
        end if; 
    end process;


    ap_phi_mux_k_3_phi_fu_1038_p4_assign_proc : process(k_3_reg_1034, add_ln289_reg_2045, ap_CS_fsm_pp4_stage0, icmp_ln289_reg_2050, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln289_reg_2050 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_k_3_phi_fu_1038_p4 <= add_ln289_reg_2045;
        else 
            ap_phi_mux_k_3_phi_fu_1038_p4 <= k_3_reg_1034;
        end if; 
    end process;


    ap_phi_mux_k_4_phi_fu_1050_p4_assign_proc : process(k_4_reg_1046, add_ln299_reg_2084, ap_CS_fsm_pp5_stage0, icmp_ln299_reg_2089, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln299_reg_2089 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            ap_phi_mux_k_4_phi_fu_1050_p4 <= add_ln299_reg_2084;
        else 
            ap_phi_mux_k_4_phi_fu_1050_p4 <= k_4_reg_1046;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_991_p4_assign_proc : process(k_reg_987, add_ln236_reg_1802, ap_CS_fsm_pp1_stage0, icmp_ln236_reg_1807, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln236_reg_1807 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_k_phi_fu_991_p4 <= add_ln236_reg_1802;
        else 
            ap_phi_mux_k_phi_fu_991_p4 <= k_reg_987;
        end if; 
    end process;


    ap_ready_assign_proc : process(alpha_strm1_full_n, beta_strm2_full_n, gamma_strm3_full_n, ap_CS_fsm_state20)
    begin
        if ((not(((gamma_strm3_full_n = ap_const_logic_0) or (beta_strm2_full_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_strm1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    beta_acc_V_0_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, idxprom9425_i_i_fu_1157_p1, zext_ln258_fu_1477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            beta_acc_V_0_address0 <= zext_ln258_fu_1477_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            beta_acc_V_0_address0 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
        else 
            beta_acc_V_0_address0 <= "XXXX";
        end if; 
    end process;


    beta_acc_V_0_address1_assign_proc : process(ap_CS_fsm_state2, beta_acc_V_0_addr_1_reg_1852, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln220_fu_1070_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            beta_acc_V_0_address1 <= beta_acc_V_0_addr_1_reg_1852;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            beta_acc_V_0_address1 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            beta_acc_V_0_address1 <= "XXXX";
        end if; 
    end process;


    beta_acc_V_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            beta_acc_V_0_ce0 <= ap_const_logic_1;
        else 
            beta_acc_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_acc_V_0_ce1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            beta_acc_V_0_ce1 <= ap_const_logic_1;
        else 
            beta_acc_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    beta_acc_V_0_d1_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, add_ln415_7_fu_1326_p2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            beta_acc_V_0_d1 <= add_ln415_7_fu_1326_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            beta_acc_V_0_d1 <= ap_const_lv64_0;
        else 
            beta_acc_V_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    beta_acc_V_0_we1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807_pp1_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln220_fu_1064_p2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            beta_acc_V_0_we1 <= ap_const_logic_1;
        else 
            beta_acc_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    beta_acc_V_1_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, idxprom9425_i_i_fu_1157_p1, zext_ln258_fu_1477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            beta_acc_V_1_address0 <= zext_ln258_fu_1477_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            beta_acc_V_1_address0 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
        else 
            beta_acc_V_1_address0 <= "XXXX";
        end if; 
    end process;


    beta_acc_V_1_address1_assign_proc : process(ap_CS_fsm_state2, beta_acc_V_1_addr_1_reg_1900, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln220_fu_1070_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            beta_acc_V_1_address1 <= beta_acc_V_1_addr_1_reg_1900;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            beta_acc_V_1_address1 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            beta_acc_V_1_address1 <= "XXXX";
        end if; 
    end process;


    beta_acc_V_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            beta_acc_V_1_ce0 <= ap_const_logic_1;
        else 
            beta_acc_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_acc_V_1_ce1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            beta_acc_V_1_ce1 <= ap_const_logic_1;
        else 
            beta_acc_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    beta_acc_V_1_d1_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, add_ln415_10_fu_1425_p2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            beta_acc_V_1_d1 <= add_ln415_10_fu_1425_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            beta_acc_V_1_d1 <= ap_const_lv64_0;
        else 
            beta_acc_V_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    beta_acc_V_1_we1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807_pp1_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln220_fu_1064_p2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            beta_acc_V_1_we1 <= ap_const_logic_1;
        else 
            beta_acc_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    beta_strm2_blk_n_assign_proc : process(beta_strm2_full_n, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            beta_strm2_blk_n <= beta_strm2_full_n;
        else 
            beta_strm2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    beta_strm2_din <= std_logic_vector(unsigned(beta_sum_tmp2_V_q0) + unsigned(beta_sum_tmp2_V_q1));

    beta_strm2_write_assign_proc : process(alpha_strm1_full_n, beta_strm2_full_n, gamma_strm3_full_n, ap_CS_fsm_state20)
    begin
        if ((not(((gamma_strm3_full_n = ap_const_logic_0) or (beta_strm2_full_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_strm1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            beta_strm2_write <= ap_const_logic_1;
        else 
            beta_strm2_write <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, beta_sum_V_addr_1_reg_1946, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln220_fu_1070_p1, zext_ln534_1_fu_1500_p1, zext_ln280_fu_1573_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            beta_sum_V_address0 <= zext_ln280_fu_1573_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            beta_sum_V_address0 <= beta_sum_V_addr_1_reg_1946;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            beta_sum_V_address0 <= zext_ln534_1_fu_1500_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            beta_sum_V_address0 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            beta_sum_V_address0 <= "XXXX";
        end if; 
    end process;


    beta_sum_V_address1_assign_proc : process(ap_CS_fsm_state8, beta_sum_V_addr_2_reg_1979, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln534_fu_1487_p1, zext_ln703_fu_1586_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            beta_sum_V_address1 <= zext_ln703_fu_1586_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            beta_sum_V_address1 <= beta_sum_V_addr_2_reg_1979;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            beta_sum_V_address1 <= zext_ln534_fu_1487_p1(4 - 1 downto 0);
        else 
            beta_sum_V_address1 <= "XXXX";
        end if; 
    end process;


    beta_sum_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            beta_sum_V_ce0 <= ap_const_logic_1;
        else 
            beta_sum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            beta_sum_V_ce1 <= ap_const_logic_1;
        else 
            beta_sum_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, add_ln703_1_fu_1514_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            beta_sum_V_d0 <= add_ln703_1_fu_1514_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            beta_sum_V_d0 <= ap_const_lv64_0;
        else 
            beta_sum_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    beta_sum_V_d1 <= std_logic_vector(unsigned(beta_acc_V_1_q0) + unsigned(beta_sum_V_q0));

    beta_sum_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln220_fu_1064_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            beta_sum_V_we0 <= ap_const_logic_1;
        else 
            beta_sum_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_V_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            beta_sum_V_we1 <= ap_const_logic_1;
        else 
            beta_sum_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp0_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp4_stage0, zext_ln278_fu_1593_p1, zext_ln703_1_fu_1652_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            beta_sum_tmp0_V_address0 <= zext_ln703_1_fu_1652_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            beta_sum_tmp0_V_address0 <= zext_ln278_fu_1593_p1(3 - 1 downto 0);
        else 
            beta_sum_tmp0_V_address0 <= "XXX";
        end if; 
    end process;

    beta_sum_tmp0_V_address1 <= zext_ln291_fu_1639_p1(3 - 1 downto 0);

    beta_sum_tmp0_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            beta_sum_tmp0_V_ce0 <= ap_const_logic_1;
        else 
            beta_sum_tmp0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp0_V_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            beta_sum_tmp0_V_ce1 <= ap_const_logic_1;
        else 
            beta_sum_tmp0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    beta_sum_tmp0_V_d0 <= std_logic_vector(unsigned(beta_sum_V_q1) + unsigned(beta_sum_V_q0));

    beta_sum_tmp0_V_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln278_reg_2011, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln278_reg_2011 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            beta_sum_tmp0_V_we0 <= ap_const_logic_1;
        else 
            beta_sum_tmp0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp1_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, ap_block_pp5_stage0, zext_ln289_fu_1659_p1, zext_ln703_2_fu_1718_p1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            beta_sum_tmp1_V_address0 <= zext_ln703_2_fu_1718_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            beta_sum_tmp1_V_address0 <= zext_ln289_fu_1659_p1(2 - 1 downto 0);
        else 
            beta_sum_tmp1_V_address0 <= "XX";
        end if; 
    end process;

    beta_sum_tmp1_V_address1 <= zext_ln301_fu_1705_p1(2 - 1 downto 0);

    beta_sum_tmp1_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            beta_sum_tmp1_V_ce0 <= ap_const_logic_1;
        else 
            beta_sum_tmp1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp1_V_ce1_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            beta_sum_tmp1_V_ce1 <= ap_const_logic_1;
        else 
            beta_sum_tmp1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    beta_sum_tmp1_V_d0 <= std_logic_vector(unsigned(beta_sum_tmp0_V_q0) + unsigned(beta_sum_tmp0_V_q1));

    beta_sum_tmp1_V_we0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln289_reg_2050, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln289_reg_2050 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            beta_sum_tmp1_V_we0 <= ap_const_logic_1;
        else 
            beta_sum_tmp1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp2_V_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_CS_fsm_state19, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, zext_ln299_fu_1725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            beta_sum_tmp2_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            beta_sum_tmp2_V_address0 <= zext_ln299_fu_1725_p1(1 - 1 downto 0);
        else 
            beta_sum_tmp2_V_address0 <= "X";
        end if; 
    end process;

    beta_sum_tmp2_V_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    beta_sum_tmp2_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state19, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            beta_sum_tmp2_V_ce0 <= ap_const_logic_1;
        else 
            beta_sum_tmp2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    beta_sum_tmp2_V_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            beta_sum_tmp2_V_ce1 <= ap_const_logic_1;
        else 
            beta_sum_tmp2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    beta_sum_tmp2_V_d0 <= std_logic_vector(unsigned(beta_sum_tmp1_V_q0) + unsigned(beta_sum_tmp1_V_q1));

    beta_sum_tmp2_V_we0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln299_reg_2089, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln299_reg_2089 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            beta_sum_tmp2_V_we0 <= ap_const_logic_1;
        else 
            beta_sum_tmp2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    col_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_blk_n <= col_i_empty_n;
        else 
            col_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    col_i_load_cast_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_read_reg_1774),8));

    col_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_i_read <= ap_const_logic_1;
        else 
            col_i_read <= ap_const_logic_0;
        end if; 
    end process;


    col_j_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_j_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_blk_n <= col_j_empty_n;
        else 
            col_j_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_j_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_i_empty_n, col_j_empty_n)
    begin
        if ((not(((col_j_empty_n = ap_const_logic_0) or (col_i_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_j_read <= ap_const_logic_1;
        else 
            col_j_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_1153_p1 <= k_reg_987(4 - 1 downto 0);

    gamma_acc_V_0_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, idxprom9425_i_i_fu_1157_p1, zext_ln258_fu_1477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            gamma_acc_V_0_address0 <= zext_ln258_fu_1477_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gamma_acc_V_0_address0 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
        else 
            gamma_acc_V_0_address0 <= "XXXX";
        end if; 
    end process;


    gamma_acc_V_0_address1_assign_proc : process(ap_CS_fsm_state2, gamma_acc_V_0_addr_1_reg_1868, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln220_fu_1070_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gamma_acc_V_0_address1 <= gamma_acc_V_0_addr_1_reg_1868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gamma_acc_V_0_address1 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            gamma_acc_V_0_address1 <= "XXXX";
        end if; 
    end process;


    gamma_acc_V_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            gamma_acc_V_0_ce0 <= ap_const_logic_1;
        else 
            gamma_acc_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_acc_V_0_ce1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            gamma_acc_V_0_ce1 <= ap_const_logic_1;
        else 
            gamma_acc_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_acc_V_0_d1_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, add_ln415_8_fu_1359_p2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gamma_acc_V_0_d1 <= add_ln415_8_fu_1359_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gamma_acc_V_0_d1 <= ap_const_lv64_0;
        else 
            gamma_acc_V_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gamma_acc_V_0_we1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807_pp1_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln220_fu_1064_p2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gamma_acc_V_0_we1 <= ap_const_logic_1;
        else 
            gamma_acc_V_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_acc_V_1_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, idxprom9425_i_i_fu_1157_p1, zext_ln258_fu_1477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            gamma_acc_V_1_address0 <= zext_ln258_fu_1477_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gamma_acc_V_1_address0 <= idxprom9425_i_i_fu_1157_p1(4 - 1 downto 0);
        else 
            gamma_acc_V_1_address0 <= "XXXX";
        end if; 
    end process;


    gamma_acc_V_1_address1_assign_proc : process(ap_CS_fsm_state2, gamma_acc_V_1_addr_1_reg_1916, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln220_fu_1070_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gamma_acc_V_1_address1 <= gamma_acc_V_1_addr_1_reg_1916;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gamma_acc_V_1_address1 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            gamma_acc_V_1_address1 <= "XXXX";
        end if; 
    end process;


    gamma_acc_V_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            gamma_acc_V_1_ce0 <= ap_const_logic_1;
        else 
            gamma_acc_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_acc_V_1_ce1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            gamma_acc_V_1_ce1 <= ap_const_logic_1;
        else 
            gamma_acc_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_acc_V_1_d1_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, add_ln415_11_fu_1458_p2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gamma_acc_V_1_d1 <= add_ln415_11_fu_1458_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gamma_acc_V_1_d1 <= ap_const_lv64_0;
        else 
            gamma_acc_V_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gamma_acc_V_1_we1_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln236_reg_1807_pp1_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln220_fu_1064_p2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln236_reg_1807_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gamma_acc_V_1_we1 <= ap_const_logic_1;
        else 
            gamma_acc_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_strm3_blk_n_assign_proc : process(gamma_strm3_full_n, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            gamma_strm3_blk_n <= gamma_strm3_full_n;
        else 
            gamma_strm3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gamma_strm3_din <= std_logic_vector(unsigned(gamma_sum_tmp2_V_q0) + unsigned(gamma_sum_tmp2_V_q1));

    gamma_strm3_write_assign_proc : process(alpha_strm1_full_n, beta_strm2_full_n, gamma_strm3_full_n, ap_CS_fsm_state20)
    begin
        if ((not(((gamma_strm3_full_n = ap_const_logic_0) or (beta_strm2_full_n = ap_const_logic_0) or (ap_const_logic_0 = alpha_strm1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            gamma_strm3_write <= ap_const_logic_1;
        else 
            gamma_strm3_write <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, gamma_sum_V_addr_1_reg_1957, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln220_fu_1070_p1, zext_ln534_1_fu_1500_p1, zext_ln280_fu_1573_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            gamma_sum_V_address0 <= zext_ln280_fu_1573_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gamma_sum_V_address0 <= gamma_sum_V_addr_1_reg_1957;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            gamma_sum_V_address0 <= zext_ln534_1_fu_1500_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gamma_sum_V_address0 <= zext_ln220_fu_1070_p1(4 - 1 downto 0);
        else 
            gamma_sum_V_address0 <= "XXXX";
        end if; 
    end process;


    gamma_sum_V_address1_assign_proc : process(ap_CS_fsm_state8, gamma_sum_V_addr_2_reg_1990, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln534_fu_1487_p1, zext_ln703_fu_1586_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            gamma_sum_V_address1 <= zext_ln703_fu_1586_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gamma_sum_V_address1 <= gamma_sum_V_addr_2_reg_1990;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            gamma_sum_V_address1 <= zext_ln534_fu_1487_p1(4 - 1 downto 0);
        else 
            gamma_sum_V_address1 <= "XXXX";
        end if; 
    end process;


    gamma_sum_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            gamma_sum_V_ce0 <= ap_const_logic_1;
        else 
            gamma_sum_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            gamma_sum_V_ce1 <= ap_const_logic_1;
        else 
            gamma_sum_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, add_ln703_2_fu_1521_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gamma_sum_V_d0 <= add_ln703_2_fu_1521_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gamma_sum_V_d0 <= ap_const_lv64_0;
        else 
            gamma_sum_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gamma_sum_V_d1 <= std_logic_vector(unsigned(gamma_acc_V_1_q0) + unsigned(gamma_sum_V_q0));

    gamma_sum_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln220_fu_1064_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln220_fu_1064_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gamma_sum_V_we0 <= ap_const_logic_1;
        else 
            gamma_sum_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_V_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gamma_sum_V_we1 <= ap_const_logic_1;
        else 
            gamma_sum_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp0_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp4_stage0, zext_ln278_fu_1593_p1, zext_ln703_1_fu_1652_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            gamma_sum_tmp0_V_address0 <= zext_ln703_1_fu_1652_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            gamma_sum_tmp0_V_address0 <= zext_ln278_fu_1593_p1(3 - 1 downto 0);
        else 
            gamma_sum_tmp0_V_address0 <= "XXX";
        end if; 
    end process;

    gamma_sum_tmp0_V_address1 <= zext_ln291_fu_1639_p1(3 - 1 downto 0);

    gamma_sum_tmp0_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            gamma_sum_tmp0_V_ce0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp0_V_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            gamma_sum_tmp0_V_ce1 <= ap_const_logic_1;
        else 
            gamma_sum_tmp0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    gamma_sum_tmp0_V_d0 <= std_logic_vector(unsigned(gamma_sum_V_q1) + unsigned(gamma_sum_V_q0));

    gamma_sum_tmp0_V_we0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln278_reg_2011, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln278_reg_2011 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            gamma_sum_tmp0_V_we0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp1_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, ap_block_pp5_stage0, zext_ln289_fu_1659_p1, zext_ln703_2_fu_1718_p1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            gamma_sum_tmp1_V_address0 <= zext_ln703_2_fu_1718_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            gamma_sum_tmp1_V_address0 <= zext_ln289_fu_1659_p1(2 - 1 downto 0);
        else 
            gamma_sum_tmp1_V_address0 <= "XX";
        end if; 
    end process;

    gamma_sum_tmp1_V_address1 <= zext_ln301_fu_1705_p1(2 - 1 downto 0);

    gamma_sum_tmp1_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            gamma_sum_tmp1_V_ce0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp1_V_ce1_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            gamma_sum_tmp1_V_ce1 <= ap_const_logic_1;
        else 
            gamma_sum_tmp1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    gamma_sum_tmp1_V_d0 <= std_logic_vector(unsigned(gamma_sum_tmp0_V_q0) + unsigned(gamma_sum_tmp0_V_q1));

    gamma_sum_tmp1_V_we0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln289_reg_2050, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln289_reg_2050 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            gamma_sum_tmp1_V_we0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp2_V_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_CS_fsm_state19, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, zext_ln299_fu_1725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            gamma_sum_tmp2_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            gamma_sum_tmp2_V_address0 <= zext_ln299_fu_1725_p1(1 - 1 downto 0);
        else 
            gamma_sum_tmp2_V_address0 <= "X";
        end if; 
    end process;

    gamma_sum_tmp2_V_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    gamma_sum_tmp2_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state19, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            gamma_sum_tmp2_V_ce0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gamma_sum_tmp2_V_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            gamma_sum_tmp2_V_ce1 <= ap_const_logic_1;
        else 
            gamma_sum_tmp2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    gamma_sum_tmp2_V_d0 <= std_logic_vector(unsigned(gamma_sum_tmp1_V_q0) + unsigned(gamma_sum_tmp1_V_q1));

    gamma_sum_tmp2_V_we0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln299_reg_2089, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln299_reg_2089 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            gamma_sum_tmp2_V_we0 <= ap_const_logic_1;
        else 
            gamma_sum_tmp2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln220_fu_1064_p2 <= "1" when (t_reg_976 = ap_const_lv5_10) else "0";
    icmp_ln236_fu_1095_p2 <= "1" when (ap_phi_mux_k_phi_fu_991_p4 = ap_const_lv7_50) else "0";
    icmp_ln258_fu_1471_p2 <= "1" when (k_1_reg_999 = ap_const_lv5_10) else "0";
    icmp_ln278_fu_1561_p2 <= "1" when (ap_phi_mux_k_2_phi_fu_1026_p4 = ap_const_lv4_8) else "0";
    icmp_ln289_fu_1627_p2 <= "1" when (ap_phi_mux_k_3_phi_fu_1038_p4 = ap_const_lv3_4) else "0";
    icmp_ln299_fu_1693_p2 <= "1" when (ap_phi_mux_k_4_phi_fu_1050_p4 = ap_const_lv2_2) else "0";
    idxprom9425_i_i_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_1153_p1),64));
    lhs_11_fu_1399_p3 <= (beta_acc_V_1_q0 & ap_const_lv43_0);
    lhs_13_fu_1432_p3 <= (gamma_acc_V_1_q0 & ap_const_lv43_0);
    lhs_3_fu_1267_p3 <= (alpha_acc_V_0_q0 & ap_const_lv43_0);
    lhs_5_fu_1300_p3 <= (beta_acc_V_0_q0 & ap_const_lv43_0);
    lhs_7_fu_1333_p3 <= (gamma_acc_V_0_q0 & ap_const_lv43_0);
    lhs_9_fu_1366_p3 <= (alpha_acc_V_1_q0 & ap_const_lv43_0);
    matA_V_0_address0 <= zext_ln246_fu_1139_p1(8 - 1 downto 0);
    matA_V_0_address1 <= zext_ln245_1_fu_1128_p1(8 - 1 downto 0);

    matA_V_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            matA_V_0_ce0 <= ap_const_logic_1;
        else 
            matA_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_V_0_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            matA_V_0_ce1 <= ap_const_logic_1;
        else 
            matA_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    matA_V_1_address0 <= zext_ln246_fu_1139_p1(8 - 1 downto 0);
    matA_V_1_address1 <= zext_ln245_1_fu_1128_p1(8 - 1 downto 0);

    matA_V_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            matA_V_1_ce0 <= ap_const_logic_1;
        else 
            matA_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matA_V_1_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            matA_V_1_ce1 <= ap_const_logic_1;
        else 
            matA_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln280_fu_1580_p2 <= (shl_ln280_fu_1567_p2 or ap_const_lv4_1);
    or_ln291_fu_1646_p2 <= (shl_ln291_fu_1633_p2 or ap_const_lv3_1);
    or_ln301_fu_1712_p2 <= (shl_ln301_fu_1699_p2 or ap_const_lv2_1);
    or_ln691_fu_1494_p2 <= (idx_V_reg_1010 or ap_const_lv4_1);
    r_V_33_fu_1171_p0 <= sext_ln1115_fu_1167_p1(64 - 1 downto 0);
    r_V_33_fu_1171_p1 <= sext_ln1115_fu_1167_p1(64 - 1 downto 0);
    r_V_35_fu_1189_p0 <= sext_ln1115_1_fu_1185_p1(64 - 1 downto 0);
    r_V_35_fu_1189_p1 <= sext_ln1115_1_fu_1185_p1(64 - 1 downto 0);
    r_V_36_fu_1203_p0 <= sext_ln1115_1_fu_1185_p1(64 - 1 downto 0);
    r_V_36_fu_1203_p1 <= sext_ln1115_fu_1167_p1(64 - 1 downto 0);
    r_V_38_fu_1221_p0 <= sext_ln1115_2_fu_1217_p1(64 - 1 downto 0);
    r_V_38_fu_1221_p1 <= sext_ln1115_2_fu_1217_p1(64 - 1 downto 0);
    r_V_40_fu_1239_p0 <= sext_ln1115_3_fu_1235_p1(64 - 1 downto 0);
    r_V_40_fu_1239_p1 <= sext_ln1115_3_fu_1235_p1(64 - 1 downto 0);
    r_V_41_fu_1253_p0 <= sext_ln1115_3_fu_1235_p1(64 - 1 downto 0);
    r_V_41_fu_1253_p1 <= sext_ln1115_2_fu_1217_p1(64 - 1 downto 0);
    ret_V_10_fu_1407_p2 <= std_logic_vector(unsigned(lhs_11_fu_1399_p3) + unsigned(r_V_40_reg_1895));
    ret_V_11_fu_1440_p2 <= std_logic_vector(unsigned(lhs_13_fu_1432_p3) + unsigned(r_V_41_reg_1911));
    ret_V_7_fu_1308_p2 <= std_logic_vector(unsigned(lhs_5_fu_1300_p3) + unsigned(r_V_35_reg_1847));
    ret_V_8_fu_1341_p2 <= std_logic_vector(unsigned(lhs_7_fu_1333_p3) + unsigned(r_V_36_reg_1863));
    ret_V_9_fu_1374_p2 <= std_logic_vector(unsigned(lhs_9_fu_1366_p3) + unsigned(r_V_38_reg_1879));
    ret_V_fu_1275_p2 <= std_logic_vector(unsigned(lhs_3_fu_1267_p3) + unsigned(r_V_33_reg_1831));
    sext_ln1115_1_fu_1185_p0 <= matA_V_0_q0;
        sext_ln1115_1_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1115_1_fu_1185_p0),107));

    sext_ln1115_2_fu_1217_p0 <= matA_V_1_q1;
        sext_ln1115_2_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1115_2_fu_1217_p0),107));

    sext_ln1115_3_fu_1235_p0 <= matA_V_1_q0;
        sext_ln1115_3_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1115_3_fu_1235_p0),107));

    sext_ln1115_fu_1167_p0 <= matA_V_0_q1;
        sext_ln1115_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1115_fu_1167_p0),107));

    shl_ln280_fu_1567_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_k_2_phi_fu_1026_p4),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln291_fu_1633_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_k_3_phi_fu_1038_p4),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln301_fu_1699_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_k_4_phi_fu_1050_p4),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    sub_ln245_fu_1117_p2 <= std_logic_vector(unsigned(tmp_cast_fu_1109_p3) - unsigned(zext_ln245_fu_1101_p1));
    tmp_cast_fu_1109_p3 <= (trunc_ln245_fu_1105_p1 & ap_const_lv2_0);
    trunc_ln245_fu_1105_p1 <= ap_phi_mux_k_phi_fu_991_p4(6 - 1 downto 0);
    trunc_ln708_1_fu_1445_p4 <= ret_V_11_fu_1440_p2(106 downto 43);
    trunc_ln708_7_fu_1313_p4 <= ret_V_7_fu_1308_p2(106 downto 43);
    trunc_ln708_8_fu_1346_p4 <= ret_V_8_fu_1341_p2(106 downto 43);
    trunc_ln708_9_fu_1379_p4 <= ret_V_9_fu_1374_p2(106 downto 43);
    trunc_ln708_s_fu_1412_p4 <= ret_V_10_fu_1407_p2(106 downto 43);
    trunc_ln_fu_1280_p4 <= ret_V_fu_1275_p2(106 downto 43);
    zext_ln220_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_976),64));
    zext_ln236_1_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_j_read_reg_1779),8));
    zext_ln236_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_987),64));
    zext_ln245_1_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln245_fu_1123_p2),64));
    zext_ln245_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_phi_fu_991_p4),8));
    zext_ln246_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln246_fu_1134_p2),64));
    zext_ln258_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_999),64));
    zext_ln278_fu_1593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_1022),64));
    zext_ln280_fu_1573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln280_fu_1567_p2),64));
    zext_ln289_fu_1659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_3_reg_1034),64));
    zext_ln291_fu_1639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln291_fu_1633_p2),64));
    zext_ln299_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_4_reg_1046),64));
    zext_ln301_fu_1705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln301_fu_1699_p2),64));
    zext_ln415_10_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_1906),64));
    zext_ln415_11_fu_1455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_1922),64));
    zext_ln415_7_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_reg_1858),64));
    zext_ln415_8_fu_1356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_reg_1874),64));
    zext_ln415_9_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_1890),64));
    zext_ln415_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1842),64));
    zext_ln534_1_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln691_fu_1494_p2),64));
    zext_ln534_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_V_reg_1010),64));
    zext_ln703_1_fu_1652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln291_fu_1646_p2),64));
    zext_ln703_2_fu_1718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln301_fu_1712_p2),64));
    zext_ln703_fu_1586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln280_fu_1580_p2),64));
end behav;
