// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_computeFirstChannel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_times_address0,
        this_times_ce0,
        this_times_q0,
        p_read,
        this_A_address0,
        this_A_ce0,
        this_A_we0,
        this_A_d0,
        this_A_q0,
        this_b_address0,
        this_b_ce0,
        this_b_we0,
        this_b_d0,
        this_b_q0,
        sliding_window_front_ptr_s,
        sliding_window_back_ptr_s,
        sliding_window_buffer_samples_sample_V_7_11_address0,
        sliding_window_buffer_samples_sample_V_7_11_ce0,
        sliding_window_buffer_samples_sample_V_7_11_q0,
        sliding_window_buffer_samples_sample_V_7_10_address0,
        sliding_window_buffer_samples_sample_V_7_10_ce0,
        sliding_window_buffer_samples_sample_V_7_10_q0,
        sliding_window_buffer_samples_sample_V_7_9_address0,
        sliding_window_buffer_samples_sample_V_7_9_ce0,
        sliding_window_buffer_samples_sample_V_7_9_q0,
        sliding_window_buffer_samples_sample_V_7_8_address0,
        sliding_window_buffer_samples_sample_V_7_8_ce0,
        sliding_window_buffer_samples_sample_V_7_8_q0,
        sliding_window_buffer_samples_sample_V_7_7_address0,
        sliding_window_buffer_samples_sample_V_7_7_ce0,
        sliding_window_buffer_samples_sample_V_7_7_q0,
        sliding_window_buffer_samples_sample_V_7_6_address0,
        sliding_window_buffer_samples_sample_V_7_6_ce0,
        sliding_window_buffer_samples_sample_V_7_6_q0,
        sliding_window_buffer_samples_sample_V_7_5_address0,
        sliding_window_buffer_samples_sample_V_7_5_ce0,
        sliding_window_buffer_samples_sample_V_7_5_q0,
        sliding_window_buffer_samples_sample_V_7_4_address0,
        sliding_window_buffer_samples_sample_V_7_4_ce0,
        sliding_window_buffer_samples_sample_V_7_4_q0,
        sliding_window_buffer_samples_sample_V_7_3_address0,
        sliding_window_buffer_samples_sample_V_7_3_ce0,
        sliding_window_buffer_samples_sample_V_7_3_q0,
        sliding_window_buffer_samples_sample_V_7_2_address0,
        sliding_window_buffer_samples_sample_V_7_2_ce0,
        sliding_window_buffer_samples_sample_V_7_2_q0,
        sliding_window_buffer_samples_sample_V_7_1_address0,
        sliding_window_buffer_samples_sample_V_7_1_ce0,
        sliding_window_buffer_samples_sample_V_7_1_q0,
        sliding_window_buffer_samples_sample_V_7_0_address0,
        sliding_window_buffer_samples_sample_V_7_0_ce0,
        sliding_window_buffer_samples_sample_V_7_0_q0,
        sliding_window_buffer_samples_sample_V_6_11_address0,
        sliding_window_buffer_samples_sample_V_6_11_ce0,
        sliding_window_buffer_samples_sample_V_6_11_q0,
        sliding_window_buffer_samples_sample_V_6_10_address0,
        sliding_window_buffer_samples_sample_V_6_10_ce0,
        sliding_window_buffer_samples_sample_V_6_10_q0,
        sliding_window_buffer_samples_sample_V_6_9_address0,
        sliding_window_buffer_samples_sample_V_6_9_ce0,
        sliding_window_buffer_samples_sample_V_6_9_q0,
        sliding_window_buffer_samples_sample_V_6_8_address0,
        sliding_window_buffer_samples_sample_V_6_8_ce0,
        sliding_window_buffer_samples_sample_V_6_8_q0,
        sliding_window_buffer_samples_sample_V_6_7_address0,
        sliding_window_buffer_samples_sample_V_6_7_ce0,
        sliding_window_buffer_samples_sample_V_6_7_q0,
        sliding_window_buffer_samples_sample_V_6_6_address0,
        sliding_window_buffer_samples_sample_V_6_6_ce0,
        sliding_window_buffer_samples_sample_V_6_6_q0,
        sliding_window_buffer_samples_sample_V_6_5_address0,
        sliding_window_buffer_samples_sample_V_6_5_ce0,
        sliding_window_buffer_samples_sample_V_6_5_q0,
        sliding_window_buffer_samples_sample_V_6_4_address0,
        sliding_window_buffer_samples_sample_V_6_4_ce0,
        sliding_window_buffer_samples_sample_V_6_4_q0,
        sliding_window_buffer_samples_sample_V_6_3_address0,
        sliding_window_buffer_samples_sample_V_6_3_ce0,
        sliding_window_buffer_samples_sample_V_6_3_q0,
        sliding_window_buffer_samples_sample_V_6_2_address0,
        sliding_window_buffer_samples_sample_V_6_2_ce0,
        sliding_window_buffer_samples_sample_V_6_2_q0,
        sliding_window_buffer_samples_sample_V_6_1_address0,
        sliding_window_buffer_samples_sample_V_6_1_ce0,
        sliding_window_buffer_samples_sample_V_6_1_q0,
        sliding_window_buffer_samples_sample_V_6_0_address0,
        sliding_window_buffer_samples_sample_V_6_0_ce0,
        sliding_window_buffer_samples_sample_V_6_0_q0,
        sliding_window_buffer_samples_sample_V_5_11_address0,
        sliding_window_buffer_samples_sample_V_5_11_ce0,
        sliding_window_buffer_samples_sample_V_5_11_q0,
        sliding_window_buffer_samples_sample_V_5_10_address0,
        sliding_window_buffer_samples_sample_V_5_10_ce0,
        sliding_window_buffer_samples_sample_V_5_10_q0,
        sliding_window_buffer_samples_sample_V_5_9_address0,
        sliding_window_buffer_samples_sample_V_5_9_ce0,
        sliding_window_buffer_samples_sample_V_5_9_q0,
        sliding_window_buffer_samples_sample_V_5_8_address0,
        sliding_window_buffer_samples_sample_V_5_8_ce0,
        sliding_window_buffer_samples_sample_V_5_8_q0,
        sliding_window_buffer_samples_sample_V_5_7_address0,
        sliding_window_buffer_samples_sample_V_5_7_ce0,
        sliding_window_buffer_samples_sample_V_5_7_q0,
        sliding_window_buffer_samples_sample_V_5_6_address0,
        sliding_window_buffer_samples_sample_V_5_6_ce0,
        sliding_window_buffer_samples_sample_V_5_6_q0,
        sliding_window_buffer_samples_sample_V_5_5_address0,
        sliding_window_buffer_samples_sample_V_5_5_ce0,
        sliding_window_buffer_samples_sample_V_5_5_q0,
        sliding_window_buffer_samples_sample_V_5_4_address0,
        sliding_window_buffer_samples_sample_V_5_4_ce0,
        sliding_window_buffer_samples_sample_V_5_4_q0,
        sliding_window_buffer_samples_sample_V_5_3_address0,
        sliding_window_buffer_samples_sample_V_5_3_ce0,
        sliding_window_buffer_samples_sample_V_5_3_q0,
        sliding_window_buffer_samples_sample_V_5_2_address0,
        sliding_window_buffer_samples_sample_V_5_2_ce0,
        sliding_window_buffer_samples_sample_V_5_2_q0,
        sliding_window_buffer_samples_sample_V_5_1_address0,
        sliding_window_buffer_samples_sample_V_5_1_ce0,
        sliding_window_buffer_samples_sample_V_5_1_q0,
        sliding_window_buffer_samples_sample_V_5_0_address0,
        sliding_window_buffer_samples_sample_V_5_0_ce0,
        sliding_window_buffer_samples_sample_V_5_0_q0,
        sliding_window_buffer_samples_sample_V_4_11_address0,
        sliding_window_buffer_samples_sample_V_4_11_ce0,
        sliding_window_buffer_samples_sample_V_4_11_q0,
        sliding_window_buffer_samples_sample_V_4_10_address0,
        sliding_window_buffer_samples_sample_V_4_10_ce0,
        sliding_window_buffer_samples_sample_V_4_10_q0,
        sliding_window_buffer_samples_sample_V_4_9_address0,
        sliding_window_buffer_samples_sample_V_4_9_ce0,
        sliding_window_buffer_samples_sample_V_4_9_q0,
        sliding_window_buffer_samples_sample_V_4_8_address0,
        sliding_window_buffer_samples_sample_V_4_8_ce0,
        sliding_window_buffer_samples_sample_V_4_8_q0,
        sliding_window_buffer_samples_sample_V_4_7_address0,
        sliding_window_buffer_samples_sample_V_4_7_ce0,
        sliding_window_buffer_samples_sample_V_4_7_q0,
        sliding_window_buffer_samples_sample_V_4_6_address0,
        sliding_window_buffer_samples_sample_V_4_6_ce0,
        sliding_window_buffer_samples_sample_V_4_6_q0,
        sliding_window_buffer_samples_sample_V_4_5_address0,
        sliding_window_buffer_samples_sample_V_4_5_ce0,
        sliding_window_buffer_samples_sample_V_4_5_q0,
        sliding_window_buffer_samples_sample_V_4_4_address0,
        sliding_window_buffer_samples_sample_V_4_4_ce0,
        sliding_window_buffer_samples_sample_V_4_4_q0,
        sliding_window_buffer_samples_sample_V_4_3_address0,
        sliding_window_buffer_samples_sample_V_4_3_ce0,
        sliding_window_buffer_samples_sample_V_4_3_q0,
        sliding_window_buffer_samples_sample_V_4_2_address0,
        sliding_window_buffer_samples_sample_V_4_2_ce0,
        sliding_window_buffer_samples_sample_V_4_2_q0,
        sliding_window_buffer_samples_sample_V_4_1_address0,
        sliding_window_buffer_samples_sample_V_4_1_ce0,
        sliding_window_buffer_samples_sample_V_4_1_q0,
        sliding_window_buffer_samples_sample_V_4_0_address0,
        sliding_window_buffer_samples_sample_V_4_0_ce0,
        sliding_window_buffer_samples_sample_V_4_0_q0,
        sliding_window_buffer_samples_sample_V_3_11_address0,
        sliding_window_buffer_samples_sample_V_3_11_ce0,
        sliding_window_buffer_samples_sample_V_3_11_q0,
        sliding_window_buffer_samples_sample_V_3_10_address0,
        sliding_window_buffer_samples_sample_V_3_10_ce0,
        sliding_window_buffer_samples_sample_V_3_10_q0,
        sliding_window_buffer_samples_sample_V_3_9_address0,
        sliding_window_buffer_samples_sample_V_3_9_ce0,
        sliding_window_buffer_samples_sample_V_3_9_q0,
        sliding_window_buffer_samples_sample_V_3_8_address0,
        sliding_window_buffer_samples_sample_V_3_8_ce0,
        sliding_window_buffer_samples_sample_V_3_8_q0,
        sliding_window_buffer_samples_sample_V_3_7_address0,
        sliding_window_buffer_samples_sample_V_3_7_ce0,
        sliding_window_buffer_samples_sample_V_3_7_q0,
        sliding_window_buffer_samples_sample_V_3_6_address0,
        sliding_window_buffer_samples_sample_V_3_6_ce0,
        sliding_window_buffer_samples_sample_V_3_6_q0,
        sliding_window_buffer_samples_sample_V_3_5_address0,
        sliding_window_buffer_samples_sample_V_3_5_ce0,
        sliding_window_buffer_samples_sample_V_3_5_q0,
        sliding_window_buffer_samples_sample_V_3_4_address0,
        sliding_window_buffer_samples_sample_V_3_4_ce0,
        sliding_window_buffer_samples_sample_V_3_4_q0,
        sliding_window_buffer_samples_sample_V_3_3_address0,
        sliding_window_buffer_samples_sample_V_3_3_ce0,
        sliding_window_buffer_samples_sample_V_3_3_q0,
        sliding_window_buffer_samples_sample_V_3_2_address0,
        sliding_window_buffer_samples_sample_V_3_2_ce0,
        sliding_window_buffer_samples_sample_V_3_2_q0,
        sliding_window_buffer_samples_sample_V_3_1_address0,
        sliding_window_buffer_samples_sample_V_3_1_ce0,
        sliding_window_buffer_samples_sample_V_3_1_q0,
        sliding_window_buffer_samples_sample_V_3_0_address0,
        sliding_window_buffer_samples_sample_V_3_0_ce0,
        sliding_window_buffer_samples_sample_V_3_0_q0,
        sliding_window_buffer_samples_sample_V_2_11_address0,
        sliding_window_buffer_samples_sample_V_2_11_ce0,
        sliding_window_buffer_samples_sample_V_2_11_q0,
        sliding_window_buffer_samples_sample_V_2_10_address0,
        sliding_window_buffer_samples_sample_V_2_10_ce0,
        sliding_window_buffer_samples_sample_V_2_10_q0,
        sliding_window_buffer_samples_sample_V_2_9_address0,
        sliding_window_buffer_samples_sample_V_2_9_ce0,
        sliding_window_buffer_samples_sample_V_2_9_q0,
        sliding_window_buffer_samples_sample_V_2_8_address0,
        sliding_window_buffer_samples_sample_V_2_8_ce0,
        sliding_window_buffer_samples_sample_V_2_8_q0,
        sliding_window_buffer_samples_sample_V_2_7_address0,
        sliding_window_buffer_samples_sample_V_2_7_ce0,
        sliding_window_buffer_samples_sample_V_2_7_q0,
        sliding_window_buffer_samples_sample_V_2_6_address0,
        sliding_window_buffer_samples_sample_V_2_6_ce0,
        sliding_window_buffer_samples_sample_V_2_6_q0,
        sliding_window_buffer_samples_sample_V_2_5_address0,
        sliding_window_buffer_samples_sample_V_2_5_ce0,
        sliding_window_buffer_samples_sample_V_2_5_q0,
        sliding_window_buffer_samples_sample_V_2_4_address0,
        sliding_window_buffer_samples_sample_V_2_4_ce0,
        sliding_window_buffer_samples_sample_V_2_4_q0,
        sliding_window_buffer_samples_sample_V_2_3_address0,
        sliding_window_buffer_samples_sample_V_2_3_ce0,
        sliding_window_buffer_samples_sample_V_2_3_q0,
        sliding_window_buffer_samples_sample_V_2_2_address0,
        sliding_window_buffer_samples_sample_V_2_2_ce0,
        sliding_window_buffer_samples_sample_V_2_2_q0,
        sliding_window_buffer_samples_sample_V_2_1_address0,
        sliding_window_buffer_samples_sample_V_2_1_ce0,
        sliding_window_buffer_samples_sample_V_2_1_q0,
        sliding_window_buffer_samples_sample_V_2_0_address0,
        sliding_window_buffer_samples_sample_V_2_0_ce0,
        sliding_window_buffer_samples_sample_V_2_0_q0,
        sliding_window_buffer_samples_sample_V_1_11_address0,
        sliding_window_buffer_samples_sample_V_1_11_ce0,
        sliding_window_buffer_samples_sample_V_1_11_q0,
        sliding_window_buffer_samples_sample_V_1_10_address0,
        sliding_window_buffer_samples_sample_V_1_10_ce0,
        sliding_window_buffer_samples_sample_V_1_10_q0,
        sliding_window_buffer_samples_sample_V_1_9_address0,
        sliding_window_buffer_samples_sample_V_1_9_ce0,
        sliding_window_buffer_samples_sample_V_1_9_q0,
        sliding_window_buffer_samples_sample_V_1_8_address0,
        sliding_window_buffer_samples_sample_V_1_8_ce0,
        sliding_window_buffer_samples_sample_V_1_8_q0,
        sliding_window_buffer_samples_sample_V_1_7_address0,
        sliding_window_buffer_samples_sample_V_1_7_ce0,
        sliding_window_buffer_samples_sample_V_1_7_q0,
        sliding_window_buffer_samples_sample_V_1_6_address0,
        sliding_window_buffer_samples_sample_V_1_6_ce0,
        sliding_window_buffer_samples_sample_V_1_6_q0,
        sliding_window_buffer_samples_sample_V_1_5_address0,
        sliding_window_buffer_samples_sample_V_1_5_ce0,
        sliding_window_buffer_samples_sample_V_1_5_q0,
        sliding_window_buffer_samples_sample_V_1_4_address0,
        sliding_window_buffer_samples_sample_V_1_4_ce0,
        sliding_window_buffer_samples_sample_V_1_4_q0,
        sliding_window_buffer_samples_sample_V_1_3_address0,
        sliding_window_buffer_samples_sample_V_1_3_ce0,
        sliding_window_buffer_samples_sample_V_1_3_q0,
        sliding_window_buffer_samples_sample_V_1_2_address0,
        sliding_window_buffer_samples_sample_V_1_2_ce0,
        sliding_window_buffer_samples_sample_V_1_2_q0,
        sliding_window_buffer_samples_sample_V_1_1_address0,
        sliding_window_buffer_samples_sample_V_1_1_ce0,
        sliding_window_buffer_samples_sample_V_1_1_q0,
        sliding_window_buffer_samples_sample_V_1_0_address0,
        sliding_window_buffer_samples_sample_V_1_0_ce0,
        sliding_window_buffer_samples_sample_V_1_0_q0,
        sliding_window_buffer_samples_sample_V_0_11_address0,
        sliding_window_buffer_samples_sample_V_0_11_ce0,
        sliding_window_buffer_samples_sample_V_0_11_q0,
        sliding_window_buffer_samples_sample_V_0_10_address0,
        sliding_window_buffer_samples_sample_V_0_10_ce0,
        sliding_window_buffer_samples_sample_V_0_10_q0,
        sliding_window_buffer_samples_sample_V_0_9_address0,
        sliding_window_buffer_samples_sample_V_0_9_ce0,
        sliding_window_buffer_samples_sample_V_0_9_q0,
        sliding_window_buffer_samples_sample_V_0_8_address0,
        sliding_window_buffer_samples_sample_V_0_8_ce0,
        sliding_window_buffer_samples_sample_V_0_8_q0,
        sliding_window_buffer_samples_sample_V_0_7_address0,
        sliding_window_buffer_samples_sample_V_0_7_ce0,
        sliding_window_buffer_samples_sample_V_0_7_q0,
        sliding_window_buffer_samples_sample_V_0_6_address0,
        sliding_window_buffer_samples_sample_V_0_6_ce0,
        sliding_window_buffer_samples_sample_V_0_6_q0,
        sliding_window_buffer_samples_sample_V_0_5_address0,
        sliding_window_buffer_samples_sample_V_0_5_ce0,
        sliding_window_buffer_samples_sample_V_0_5_q0,
        sliding_window_buffer_samples_sample_V_0_4_address0,
        sliding_window_buffer_samples_sample_V_0_4_ce0,
        sliding_window_buffer_samples_sample_V_0_4_q0,
        sliding_window_buffer_samples_sample_V_0_3_address0,
        sliding_window_buffer_samples_sample_V_0_3_ce0,
        sliding_window_buffer_samples_sample_V_0_3_q0,
        sliding_window_buffer_samples_sample_V_0_2_address0,
        sliding_window_buffer_samples_sample_V_0_2_ce0,
        sliding_window_buffer_samples_sample_V_0_2_q0,
        sliding_window_buffer_samples_sample_V_0_1_address0,
        sliding_window_buffer_samples_sample_V_0_1_ce0,
        sliding_window_buffer_samples_sample_V_0_1_q0,
        sliding_window_buffer_samples_sample_V_0_0_address0,
        sliding_window_buffer_samples_sample_V_0_0_ce0,
        sliding_window_buffer_samples_sample_V_0_0_q0,
        sigma_V_address0,
        sigma_V_ce0,
        sigma_V_q0,
        sigma_V_address1,
        sigma_V_ce1,
        sigma_V_we1,
        sigma_V_d1,
        matU_V_address0,
        matU_V_ce0,
        matU_V_we0,
        matU_V_d0,
        matU_V_q0,
        A_i_V_0_address0,
        A_i_V_0_ce0,
        A_i_V_0_q0,
        A_i_V_0_address1,
        A_i_V_0_ce1,
        A_i_V_0_we1,
        A_i_V_0_d1,
        A_i_V_1_address0,
        A_i_V_1_ce0,
        A_i_V_1_q0,
        A_i_V_1_address1,
        A_i_V_1_ce1,
        A_i_V_1_we1,
        A_i_V_1_d1,
        A_j_V_0_address0,
        A_j_V_0_ce0,
        A_j_V_0_q0,
        A_j_V_0_address1,
        A_j_V_0_ce1,
        A_j_V_0_we1,
        A_j_V_0_d1,
        A_j_V_1_address0,
        A_j_V_1_ce0,
        A_j_V_1_q0,
        A_j_V_1_address1,
        A_j_V_1_ce1,
        A_j_V_1_we1,
        A_j_V_1_d1,
        matA_V_0_address0,
        matA_V_0_ce0,
        matA_V_0_we0,
        matA_V_0_d0,
        matA_V_0_q0,
        matA_V_0_address1,
        matA_V_0_ce1,
        matA_V_0_we1,
        matA_V_0_d1,
        matA_V_0_q1,
        matA_V_1_address0,
        matA_V_1_ce0,
        matA_V_1_we0,
        matA_V_1_d0,
        matA_V_1_q0,
        matA_V_1_address1,
        matA_V_1_ce1,
        matA_V_1_we1,
        matA_V_1_d1,
        matA_V_1_q1,
        V_i_V_0_address0,
        V_i_V_0_ce0,
        V_i_V_0_q0,
        V_i_V_0_address1,
        V_i_V_0_ce1,
        V_i_V_0_we1,
        V_i_V_0_d1,
        V_i_V_1_address0,
        V_i_V_1_ce0,
        V_i_V_1_q0,
        V_i_V_1_address1,
        V_i_V_1_ce1,
        V_i_V_1_we1,
        V_i_V_1_d1,
        V_j_V_0_address0,
        V_j_V_0_ce0,
        V_j_V_0_q0,
        V_j_V_0_address1,
        V_j_V_0_ce1,
        V_j_V_0_we1,
        V_j_V_0_d1,
        V_j_V_1_address0,
        V_j_V_1_ce0,
        V_j_V_1_q0,
        V_j_V_1_address1,
        V_j_V_1_ce1,
        V_j_V_1_we1,
        V_j_V_1_d1,
        matV_V_0_address0,
        matV_V_0_ce0,
        matV_V_0_we0,
        matV_V_0_d0,
        matV_V_0_q0,
        matV_V_0_address1,
        matV_V_0_ce1,
        matV_V_0_we1,
        matV_V_0_d1,
        matV_V_0_q1,
        matV_V_1_address0,
        matV_V_1_ce0,
        matV_V_1_we0,
        matV_V_1_d0,
        matV_V_1_q0,
        matV_V_1_address1,
        matV_V_1_ce1,
        matV_V_1_we1,
        matV_V_1_d1,
        matV_V_1_q1,
        U_V_address0,
        U_V_ce0,
        U_V_we0,
        U_V_d0,
        U_V_q0,
        U_V_address1,
        U_V_ce1,
        U_V_q1,
        S_V_address0,
        S_V_ce0,
        S_V_we0,
        S_V_d0,
        S_V_q0,
        V_V_address0,
        V_V_ce0,
        V_V_we0,
        V_V_d0,
        V_V_q0,
        V_V_address1,
        V_V_ce1,
        V_V_q1,
        UT_V_address0,
        UT_V_ce0,
        UT_V_we0,
        UT_V_d0,
        UT_V_q0,
        A_pinv_V_address0,
        A_pinv_V_ce0,
        A_pinv_V_we0,
        A_pinv_V_d0,
        A_pinv_V_q0,
        ap_return,
        grp_fu_2133_p_din0,
        grp_fu_2133_p_dout0,
        grp_fu_2133_p_ce
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_pp0_stage0 = 19'd64;
parameter    ap_ST_fsm_pp0_stage1 = 19'd128;
parameter    ap_ST_fsm_pp0_stage2 = 19'd256;
parameter    ap_ST_fsm_pp0_stage3 = 19'd512;
parameter    ap_ST_fsm_pp0_stage4 = 19'd1024;
parameter    ap_ST_fsm_pp0_stage5 = 19'd2048;
parameter    ap_ST_fsm_pp0_stage6 = 19'd4096;
parameter    ap_ST_fsm_state28 = 19'd8192;
parameter    ap_ST_fsm_state29 = 19'd16384;
parameter    ap_ST_fsm_state30 = 19'd32768;
parameter    ap_ST_fsm_state31 = 19'd65536;
parameter    ap_ST_fsm_state32 = 19'd131072;
parameter    ap_ST_fsm_state33 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] this_times_address0;
output   this_times_ce0;
input  [63:0] this_times_q0;
input  [3:0] p_read;
output  [8:0] this_A_address0;
output   this_A_ce0;
output   this_A_we0;
output  [63:0] this_A_d0;
input  [63:0] this_A_q0;
output  [7:0] this_b_address0;
output   this_b_ce0;
output   this_b_we0;
output  [54:0] this_b_d0;
input  [54:0] this_b_q0;
input  [5:0] sliding_window_front_ptr_s;
input  [5:0] sliding_window_back_ptr_s;
output  [4:0] sliding_window_buffer_samples_sample_V_7_11_address0;
output   sliding_window_buffer_samples_sample_V_7_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_10_address0;
output   sliding_window_buffer_samples_sample_V_7_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_9_address0;
output   sliding_window_buffer_samples_sample_V_7_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_8_address0;
output   sliding_window_buffer_samples_sample_V_7_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_7_address0;
output   sliding_window_buffer_samples_sample_V_7_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_6_address0;
output   sliding_window_buffer_samples_sample_V_7_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_5_address0;
output   sliding_window_buffer_samples_sample_V_7_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_4_address0;
output   sliding_window_buffer_samples_sample_V_7_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_3_address0;
output   sliding_window_buffer_samples_sample_V_7_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_2_address0;
output   sliding_window_buffer_samples_sample_V_7_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_1_address0;
output   sliding_window_buffer_samples_sample_V_7_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_0_address0;
output   sliding_window_buffer_samples_sample_V_7_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_11_address0;
output   sliding_window_buffer_samples_sample_V_6_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_10_address0;
output   sliding_window_buffer_samples_sample_V_6_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_9_address0;
output   sliding_window_buffer_samples_sample_V_6_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_8_address0;
output   sliding_window_buffer_samples_sample_V_6_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_7_address0;
output   sliding_window_buffer_samples_sample_V_6_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_6_address0;
output   sliding_window_buffer_samples_sample_V_6_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_5_address0;
output   sliding_window_buffer_samples_sample_V_6_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_4_address0;
output   sliding_window_buffer_samples_sample_V_6_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_3_address0;
output   sliding_window_buffer_samples_sample_V_6_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_2_address0;
output   sliding_window_buffer_samples_sample_V_6_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_1_address0;
output   sliding_window_buffer_samples_sample_V_6_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_0_address0;
output   sliding_window_buffer_samples_sample_V_6_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_11_address0;
output   sliding_window_buffer_samples_sample_V_5_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_10_address0;
output   sliding_window_buffer_samples_sample_V_5_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_9_address0;
output   sliding_window_buffer_samples_sample_V_5_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_8_address0;
output   sliding_window_buffer_samples_sample_V_5_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_7_address0;
output   sliding_window_buffer_samples_sample_V_5_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_6_address0;
output   sliding_window_buffer_samples_sample_V_5_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_5_address0;
output   sliding_window_buffer_samples_sample_V_5_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_4_address0;
output   sliding_window_buffer_samples_sample_V_5_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_3_address0;
output   sliding_window_buffer_samples_sample_V_5_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_2_address0;
output   sliding_window_buffer_samples_sample_V_5_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_1_address0;
output   sliding_window_buffer_samples_sample_V_5_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_0_address0;
output   sliding_window_buffer_samples_sample_V_5_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_11_address0;
output   sliding_window_buffer_samples_sample_V_4_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_10_address0;
output   sliding_window_buffer_samples_sample_V_4_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_9_address0;
output   sliding_window_buffer_samples_sample_V_4_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_8_address0;
output   sliding_window_buffer_samples_sample_V_4_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_7_address0;
output   sliding_window_buffer_samples_sample_V_4_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_6_address0;
output   sliding_window_buffer_samples_sample_V_4_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_5_address0;
output   sliding_window_buffer_samples_sample_V_4_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_4_address0;
output   sliding_window_buffer_samples_sample_V_4_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_3_address0;
output   sliding_window_buffer_samples_sample_V_4_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_2_address0;
output   sliding_window_buffer_samples_sample_V_4_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_1_address0;
output   sliding_window_buffer_samples_sample_V_4_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_0_address0;
output   sliding_window_buffer_samples_sample_V_4_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_11_address0;
output   sliding_window_buffer_samples_sample_V_3_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_10_address0;
output   sliding_window_buffer_samples_sample_V_3_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_9_address0;
output   sliding_window_buffer_samples_sample_V_3_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_8_address0;
output   sliding_window_buffer_samples_sample_V_3_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_7_address0;
output   sliding_window_buffer_samples_sample_V_3_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_6_address0;
output   sliding_window_buffer_samples_sample_V_3_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_5_address0;
output   sliding_window_buffer_samples_sample_V_3_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_4_address0;
output   sliding_window_buffer_samples_sample_V_3_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_3_address0;
output   sliding_window_buffer_samples_sample_V_3_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_2_address0;
output   sliding_window_buffer_samples_sample_V_3_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_1_address0;
output   sliding_window_buffer_samples_sample_V_3_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_0_address0;
output   sliding_window_buffer_samples_sample_V_3_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_11_address0;
output   sliding_window_buffer_samples_sample_V_2_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_10_address0;
output   sliding_window_buffer_samples_sample_V_2_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_9_address0;
output   sliding_window_buffer_samples_sample_V_2_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_8_address0;
output   sliding_window_buffer_samples_sample_V_2_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_7_address0;
output   sliding_window_buffer_samples_sample_V_2_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_6_address0;
output   sliding_window_buffer_samples_sample_V_2_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_5_address0;
output   sliding_window_buffer_samples_sample_V_2_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_4_address0;
output   sliding_window_buffer_samples_sample_V_2_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_3_address0;
output   sliding_window_buffer_samples_sample_V_2_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_2_address0;
output   sliding_window_buffer_samples_sample_V_2_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_1_address0;
output   sliding_window_buffer_samples_sample_V_2_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_0_address0;
output   sliding_window_buffer_samples_sample_V_2_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_11_address0;
output   sliding_window_buffer_samples_sample_V_1_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_10_address0;
output   sliding_window_buffer_samples_sample_V_1_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_9_address0;
output   sliding_window_buffer_samples_sample_V_1_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_8_address0;
output   sliding_window_buffer_samples_sample_V_1_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_7_address0;
output   sliding_window_buffer_samples_sample_V_1_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_6_address0;
output   sliding_window_buffer_samples_sample_V_1_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_5_address0;
output   sliding_window_buffer_samples_sample_V_1_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_4_address0;
output   sliding_window_buffer_samples_sample_V_1_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_3_address0;
output   sliding_window_buffer_samples_sample_V_1_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_2_address0;
output   sliding_window_buffer_samples_sample_V_1_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_1_address0;
output   sliding_window_buffer_samples_sample_V_1_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_0_address0;
output   sliding_window_buffer_samples_sample_V_1_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_11_address0;
output   sliding_window_buffer_samples_sample_V_0_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_10_address0;
output   sliding_window_buffer_samples_sample_V_0_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_9_address0;
output   sliding_window_buffer_samples_sample_V_0_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_8_address0;
output   sliding_window_buffer_samples_sample_V_0_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_7_address0;
output   sliding_window_buffer_samples_sample_V_0_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_6_address0;
output   sliding_window_buffer_samples_sample_V_0_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_5_address0;
output   sliding_window_buffer_samples_sample_V_0_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_4_address0;
output   sliding_window_buffer_samples_sample_V_0_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_3_address0;
output   sliding_window_buffer_samples_sample_V_0_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_2_address0;
output   sliding_window_buffer_samples_sample_V_0_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_1_address0;
output   sliding_window_buffer_samples_sample_V_0_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_0_address0;
output   sliding_window_buffer_samples_sample_V_0_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_0_q0;
output  [1:0] sigma_V_address0;
output   sigma_V_ce0;
input  [63:0] sigma_V_q0;
output  [1:0] sigma_V_address1;
output   sigma_V_ce1;
output   sigma_V_we1;
output  [63:0] sigma_V_d1;
output  [14:0] matU_V_address0;
output   matU_V_ce0;
output   matU_V_we0;
output  [63:0] matU_V_d0;
input  [63:0] matU_V_q0;
output  [6:0] A_i_V_0_address0;
output   A_i_V_0_ce0;
input  [63:0] A_i_V_0_q0;
output  [6:0] A_i_V_0_address1;
output   A_i_V_0_ce1;
output   A_i_V_0_we1;
output  [63:0] A_i_V_0_d1;
output  [6:0] A_i_V_1_address0;
output   A_i_V_1_ce0;
input  [63:0] A_i_V_1_q0;
output  [6:0] A_i_V_1_address1;
output   A_i_V_1_ce1;
output   A_i_V_1_we1;
output  [63:0] A_i_V_1_d1;
output  [6:0] A_j_V_0_address0;
output   A_j_V_0_ce0;
input  [63:0] A_j_V_0_q0;
output  [6:0] A_j_V_0_address1;
output   A_j_V_0_ce1;
output   A_j_V_0_we1;
output  [63:0] A_j_V_0_d1;
output  [6:0] A_j_V_1_address0;
output   A_j_V_1_ce0;
input  [63:0] A_j_V_1_q0;
output  [6:0] A_j_V_1_address1;
output   A_j_V_1_ce1;
output   A_j_V_1_we1;
output  [63:0] A_j_V_1_d1;
output  [7:0] matA_V_0_address0;
output   matA_V_0_ce0;
output   matA_V_0_we0;
output  [63:0] matA_V_0_d0;
input  [63:0] matA_V_0_q0;
output  [7:0] matA_V_0_address1;
output   matA_V_0_ce1;
output   matA_V_0_we1;
output  [63:0] matA_V_0_d1;
input  [63:0] matA_V_0_q1;
output  [7:0] matA_V_1_address0;
output   matA_V_1_ce0;
output   matA_V_1_we0;
output  [63:0] matA_V_1_d0;
input  [63:0] matA_V_1_q0;
output  [7:0] matA_V_1_address1;
output   matA_V_1_ce1;
output   matA_V_1_we1;
output  [63:0] matA_V_1_d1;
input  [63:0] matA_V_1_q1;
output  [0:0] V_i_V_0_address0;
output   V_i_V_0_ce0;
input  [63:0] V_i_V_0_q0;
output  [0:0] V_i_V_0_address1;
output   V_i_V_0_ce1;
output   V_i_V_0_we1;
output  [63:0] V_i_V_0_d1;
output  [0:0] V_i_V_1_address0;
output   V_i_V_1_ce0;
input  [63:0] V_i_V_1_q0;
output  [0:0] V_i_V_1_address1;
output   V_i_V_1_ce1;
output   V_i_V_1_we1;
output  [63:0] V_i_V_1_d1;
output  [0:0] V_j_V_0_address0;
output   V_j_V_0_ce0;
input  [63:0] V_j_V_0_q0;
output  [0:0] V_j_V_0_address1;
output   V_j_V_0_ce1;
output   V_j_V_0_we1;
output  [63:0] V_j_V_0_d1;
output  [0:0] V_j_V_1_address0;
output   V_j_V_1_ce0;
input  [63:0] V_j_V_1_q0;
output  [0:0] V_j_V_1_address1;
output   V_j_V_1_ce1;
output   V_j_V_1_we1;
output  [63:0] V_j_V_1_d1;
output  [2:0] matV_V_0_address0;
output   matV_V_0_ce0;
output   matV_V_0_we0;
output  [63:0] matV_V_0_d0;
input  [63:0] matV_V_0_q0;
output  [2:0] matV_V_0_address1;
output   matV_V_0_ce1;
output   matV_V_0_we1;
output  [63:0] matV_V_0_d1;
input  [63:0] matV_V_0_q1;
output  [2:0] matV_V_1_address0;
output   matV_V_1_ce0;
output   matV_V_1_we0;
output  [63:0] matV_V_1_d0;
input  [63:0] matV_V_1_q0;
output  [2:0] matV_V_1_address1;
output   matV_V_1_ce1;
output   matV_V_1_we1;
output  [63:0] matV_V_1_d1;
input  [63:0] matV_V_1_q1;
output  [14:0] U_V_address0;
output   U_V_ce0;
output   U_V_we0;
output  [63:0] U_V_d0;
input  [63:0] U_V_q0;
output  [14:0] U_V_address1;
output   U_V_ce1;
input  [63:0] U_V_q1;
output  [1:0] S_V_address0;
output   S_V_ce0;
output   S_V_we0;
output  [63:0] S_V_d0;
input  [63:0] S_V_q0;
output  [3:0] V_V_address0;
output   V_V_ce0;
output   V_V_we0;
output  [63:0] V_V_d0;
input  [63:0] V_V_q0;
output  [3:0] V_V_address1;
output   V_V_ce1;
input  [63:0] V_V_q1;
output  [8:0] UT_V_address0;
output   UT_V_ce0;
output   UT_V_we0;
output  [63:0] UT_V_d0;
input  [63:0] UT_V_q0;
output  [8:0] A_pinv_V_address0;
output   A_pinv_V_ce0;
output   A_pinv_V_we0;
output  [63:0] A_pinv_V_d0;
input  [63:0] A_pinv_V_q0;
output  [31:0] ap_return;
output  [31:0] grp_fu_2133_p_din0;
input  [63:0] grp_fu_2133_p_dout0;
output   grp_fu_2133_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg this_times_ce0;
reg[8:0] this_A_address0;
reg this_A_ce0;
reg this_A_we0;
reg[63:0] this_A_d0;
reg[7:0] this_b_address0;
reg this_b_ce0;
reg this_b_we0;
reg sliding_window_buffer_samples_sample_V_7_11_ce0;
reg sliding_window_buffer_samples_sample_V_7_10_ce0;
reg sliding_window_buffer_samples_sample_V_7_9_ce0;
reg sliding_window_buffer_samples_sample_V_7_8_ce0;
reg sliding_window_buffer_samples_sample_V_7_7_ce0;
reg sliding_window_buffer_samples_sample_V_7_6_ce0;
reg sliding_window_buffer_samples_sample_V_7_5_ce0;
reg sliding_window_buffer_samples_sample_V_7_4_ce0;
reg sliding_window_buffer_samples_sample_V_7_3_ce0;
reg sliding_window_buffer_samples_sample_V_7_2_ce0;
reg sliding_window_buffer_samples_sample_V_7_1_ce0;
reg sliding_window_buffer_samples_sample_V_7_0_ce0;
reg sliding_window_buffer_samples_sample_V_6_11_ce0;
reg sliding_window_buffer_samples_sample_V_6_10_ce0;
reg sliding_window_buffer_samples_sample_V_6_9_ce0;
reg sliding_window_buffer_samples_sample_V_6_8_ce0;
reg sliding_window_buffer_samples_sample_V_6_7_ce0;
reg sliding_window_buffer_samples_sample_V_6_6_ce0;
reg sliding_window_buffer_samples_sample_V_6_5_ce0;
reg sliding_window_buffer_samples_sample_V_6_4_ce0;
reg sliding_window_buffer_samples_sample_V_6_3_ce0;
reg sliding_window_buffer_samples_sample_V_6_2_ce0;
reg sliding_window_buffer_samples_sample_V_6_1_ce0;
reg sliding_window_buffer_samples_sample_V_6_0_ce0;
reg sliding_window_buffer_samples_sample_V_5_11_ce0;
reg sliding_window_buffer_samples_sample_V_5_10_ce0;
reg sliding_window_buffer_samples_sample_V_5_9_ce0;
reg sliding_window_buffer_samples_sample_V_5_8_ce0;
reg sliding_window_buffer_samples_sample_V_5_7_ce0;
reg sliding_window_buffer_samples_sample_V_5_6_ce0;
reg sliding_window_buffer_samples_sample_V_5_5_ce0;
reg sliding_window_buffer_samples_sample_V_5_4_ce0;
reg sliding_window_buffer_samples_sample_V_5_3_ce0;
reg sliding_window_buffer_samples_sample_V_5_2_ce0;
reg sliding_window_buffer_samples_sample_V_5_1_ce0;
reg sliding_window_buffer_samples_sample_V_5_0_ce0;
reg sliding_window_buffer_samples_sample_V_4_11_ce0;
reg sliding_window_buffer_samples_sample_V_4_10_ce0;
reg sliding_window_buffer_samples_sample_V_4_9_ce0;
reg sliding_window_buffer_samples_sample_V_4_8_ce0;
reg sliding_window_buffer_samples_sample_V_4_7_ce0;
reg sliding_window_buffer_samples_sample_V_4_6_ce0;
reg sliding_window_buffer_samples_sample_V_4_5_ce0;
reg sliding_window_buffer_samples_sample_V_4_4_ce0;
reg sliding_window_buffer_samples_sample_V_4_3_ce0;
reg sliding_window_buffer_samples_sample_V_4_2_ce0;
reg sliding_window_buffer_samples_sample_V_4_1_ce0;
reg sliding_window_buffer_samples_sample_V_4_0_ce0;
reg sliding_window_buffer_samples_sample_V_3_11_ce0;
reg sliding_window_buffer_samples_sample_V_3_10_ce0;
reg sliding_window_buffer_samples_sample_V_3_9_ce0;
reg sliding_window_buffer_samples_sample_V_3_8_ce0;
reg sliding_window_buffer_samples_sample_V_3_7_ce0;
reg sliding_window_buffer_samples_sample_V_3_6_ce0;
reg sliding_window_buffer_samples_sample_V_3_5_ce0;
reg sliding_window_buffer_samples_sample_V_3_4_ce0;
reg sliding_window_buffer_samples_sample_V_3_3_ce0;
reg sliding_window_buffer_samples_sample_V_3_2_ce0;
reg sliding_window_buffer_samples_sample_V_3_1_ce0;
reg sliding_window_buffer_samples_sample_V_3_0_ce0;
reg sliding_window_buffer_samples_sample_V_2_11_ce0;
reg sliding_window_buffer_samples_sample_V_2_10_ce0;
reg sliding_window_buffer_samples_sample_V_2_9_ce0;
reg sliding_window_buffer_samples_sample_V_2_8_ce0;
reg sliding_window_buffer_samples_sample_V_2_7_ce0;
reg sliding_window_buffer_samples_sample_V_2_6_ce0;
reg sliding_window_buffer_samples_sample_V_2_5_ce0;
reg sliding_window_buffer_samples_sample_V_2_4_ce0;
reg sliding_window_buffer_samples_sample_V_2_3_ce0;
reg sliding_window_buffer_samples_sample_V_2_2_ce0;
reg sliding_window_buffer_samples_sample_V_2_1_ce0;
reg sliding_window_buffer_samples_sample_V_2_0_ce0;
reg sliding_window_buffer_samples_sample_V_1_11_ce0;
reg sliding_window_buffer_samples_sample_V_1_10_ce0;
reg sliding_window_buffer_samples_sample_V_1_9_ce0;
reg sliding_window_buffer_samples_sample_V_1_8_ce0;
reg sliding_window_buffer_samples_sample_V_1_7_ce0;
reg sliding_window_buffer_samples_sample_V_1_6_ce0;
reg sliding_window_buffer_samples_sample_V_1_5_ce0;
reg sliding_window_buffer_samples_sample_V_1_4_ce0;
reg sliding_window_buffer_samples_sample_V_1_3_ce0;
reg sliding_window_buffer_samples_sample_V_1_2_ce0;
reg sliding_window_buffer_samples_sample_V_1_1_ce0;
reg sliding_window_buffer_samples_sample_V_1_0_ce0;
reg sliding_window_buffer_samples_sample_V_0_11_ce0;
reg sliding_window_buffer_samples_sample_V_0_10_ce0;
reg sliding_window_buffer_samples_sample_V_0_9_ce0;
reg sliding_window_buffer_samples_sample_V_0_8_ce0;
reg sliding_window_buffer_samples_sample_V_0_7_ce0;
reg sliding_window_buffer_samples_sample_V_0_6_ce0;
reg sliding_window_buffer_samples_sample_V_0_5_ce0;
reg sliding_window_buffer_samples_sample_V_0_4_ce0;
reg sliding_window_buffer_samples_sample_V_0_3_ce0;
reg sliding_window_buffer_samples_sample_V_0_2_ce0;
reg sliding_window_buffer_samples_sample_V_0_1_ce0;
reg sliding_window_buffer_samples_sample_V_0_0_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] j_reg_3013;
reg   [3:0] mag_samples_sample_V_addr_36_reg_5463;
wire  signed [6:0] sext_ln22_fu_3110_p1;
reg  signed [6:0] sext_ln22_reg_5468;
wire   [4:0] trunc_ln22_fu_3118_p1;
reg   [4:0] trunc_ln22_reg_5473;
wire   [4:0] trunc_ln22_1_fu_3122_p1;
reg   [4:0] trunc_ln22_1_reg_5478;
wire   [4:0] add_ln257_fu_3126_p2;
reg   [4:0] add_ln257_reg_5483;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln34_fu_3203_p1;
reg   [63:0] zext_ln34_reg_5491;
wire   [0:0] icmp_ln257_fu_3132_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_20_fu_3231_p3;
reg   [7:0] tmp_20_reg_6047;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln263_fu_3239_p2;
reg   [3:0] add_ln263_reg_6052;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_state21_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln263_fu_3265_p2;
reg   [0:0] icmp_ln263_reg_6057;
reg   [0:0] icmp_ln263_reg_6057_pp0_iter1_reg;
reg   [0:0] icmp_ln263_reg_6057_pp0_iter2_reg;
wire   [63:0] zext_ln268_fu_3276_p1;
reg   [63:0] zext_ln268_reg_6061;
reg   [63:0] zext_ln268_reg_6061_pp0_iter1_reg;
wire   [8:0] sub_ln279_fu_3297_p2;
reg   [8:0] sub_ln279_reg_6131;
reg   [8:0] sub_ln279_reg_6131_pp0_iter1_reg;
reg   [8:0] sub_ln279_reg_6131_pp0_iter2_reg;
wire   [11:0] sample_period_samples_2_sample_V_q0;
reg   [11:0] sample_period_samples_2_sample_V_load_reg_6137;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state8_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_state22_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [11:0] sample_period_samples_3_sample_V_q0;
reg   [11:0] sample_period_samples_3_sample_V_load_reg_6142;
wire   [11:0] sample_period_samples_4_sample_V_q0;
reg   [11:0] sample_period_samples_4_sample_V_load_reg_6147;
wire   [11:0] sample_period_samples_5_sample_V_q0;
reg   [11:0] sample_period_samples_5_sample_V_load_reg_6152;
wire   [11:0] sample_period_samples_6_sample_V_q0;
reg   [11:0] sample_period_samples_6_sample_V_load_reg_6157;
wire   [11:0] sample_period_samples_7_sample_V_q0;
reg   [11:0] sample_period_samples_7_sample_V_load_reg_6162;
wire   [11:0] sample_period_samples_8_sample_V_q0;
reg   [11:0] sample_period_samples_8_sample_V_load_reg_6167;
wire   [11:0] sample_period_samples_9_sample_V_q0;
reg   [11:0] sample_period_samples_9_sample_V_load_reg_6172;
wire   [11:0] sample_period_samples_10_sample_V_q0;
reg   [11:0] sample_period_samples_10_sample_V_load_reg_6177;
wire   [11:0] sample_period_samples_11_sample_V_q0;
reg   [11:0] sample_period_samples_11_sample_V_load_reg_6182;
reg  signed [63:0] time_V_reg_6187;
wire   [63:0] angle_4_fu_3339_p2;
reg   [63:0] angle_4_reg_6192;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state9_pp0_stage2_iter0;
wire    ap_block_state16_pp0_stage2_iter1;
wire    ap_block_state23_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] p_Result_172_reg_6199;
wire   [0:0] icmp_ln935_4_fu_3353_p2;
reg   [0:0] icmp_ln935_4_reg_6205;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state10_pp0_stage3_iter0;
wire    ap_block_state17_pp0_stage3_iter1;
wire    ap_block_state24_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire   [63:0] tmp_V_31_fu_3363_p3;
reg   [63:0] tmp_V_31_reg_6210;
wire   [31:0] sub_ln944_4_fu_3391_p2;
reg   [31:0] sub_ln944_4_reg_6216;
wire   [0:0] icmp_ln954_4_fu_3489_p2;
reg   [0:0] icmp_ln954_4_reg_6222;
wire   [0:0] select_ln954_10_fu_3509_p3;
reg   [0:0] select_ln954_10_reg_6227;
wire   [7:0] trunc_ln943_4_fu_3517_p1;
reg   [7:0] trunc_ln943_4_reg_6232;
reg   [31:0] sin_val_reg_6237;
reg   [31:0] cos_val_reg_6243;
wire   [0:0] p_Result_176_fu_3666_p3;
reg   [0:0] p_Result_176_reg_6249;
wire  signed [53:0] man_V_fu_3710_p3;
reg  signed [53:0] man_V_reg_6254;
wire   [10:0] trunc_ln575_fu_3730_p1;
reg   [10:0] trunc_ln575_reg_6261;
wire   [0:0] icmp_ln585_fu_3770_p2;
reg   [0:0] icmp_ln585_reg_6266;
wire   [5:0] trunc_ln586_fu_3792_p1;
reg   [5:0] trunc_ln586_reg_6271;
wire   [0:0] icmp_ln591_fu_3806_p2;
reg   [0:0] icmp_ln591_reg_6276;
wire   [0:0] and_ln581_fu_3836_p2;
reg   [0:0] and_ln581_reg_6281;
wire   [63:0] select_ln571_fu_3860_p3;
reg   [63:0] select_ln571_reg_6286;
wire   [0:0] or_ln571_fu_3868_p2;
reg   [0:0] or_ln571_reg_6291;
wire   [0:0] or_ln571_12_fu_3880_p2;
reg   [0:0] or_ln571_12_reg_6296;
reg   [0:0] p_Result_178_reg_6301;
reg   [10:0] exp_tmp_3_reg_6307;
wire   [51:0] trunc_ln565_3_fu_3912_p1;
reg   [51:0] trunc_ln565_3_reg_6312;
wire   [0:0] icmp_ln571_3_fu_3916_p2;
reg   [0:0] icmp_ln571_3_reg_6317;
wire  signed [53:0] man_V_20_fu_4050_p3;
reg  signed [53:0] man_V_20_reg_6325;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state12_pp0_stage5_iter0;
wire    ap_block_state19_pp0_stage5_iter1;
wire    ap_block_state26_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_11001;
wire   [10:0] trunc_ln575_3_fu_4063_p1;
reg   [10:0] trunc_ln575_3_reg_6332;
wire   [0:0] icmp_ln585_3_fu_4103_p2;
reg   [0:0] icmp_ln585_3_reg_6337;
wire   [5:0] trunc_ln586_3_fu_4125_p1;
reg   [5:0] trunc_ln586_3_reg_6342;
wire   [0:0] icmp_ln591_4_fu_4139_p2;
reg   [0:0] icmp_ln591_4_reg_6347;
wire   [0:0] and_ln581_3_fu_4167_p2;
reg   [0:0] and_ln581_3_reg_6352;
wire   [63:0] select_ln571_18_fu_4191_p3;
reg   [63:0] select_ln571_18_reg_6357;
wire   [0:0] or_ln571_13_fu_4198_p2;
reg   [0:0] or_ln571_13_reg_6362;
wire   [0:0] or_ln571_15_fu_4209_p2;
reg   [0:0] or_ln571_15_reg_6367;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln935_fu_4323_p2;
reg   [0:0] icmp_ln935_reg_6382;
wire    ap_CS_fsm_state31;
wire   [0:0] p_Result_180_fu_4329_p3;
reg   [0:0] p_Result_180_reg_6387;
wire   [63:0] tmp_V_32_fu_4343_p3;
reg   [63:0] tmp_V_32_reg_6392;
wire   [0:0] icmp_ln954_fu_4471_p2;
reg   [0:0] icmp_ln954_reg_6398;
wire   [31:0] sub_ln955_fu_4483_p2;
reg   [31:0] sub_ln955_reg_6403;
wire   [31:0] add_ln954_fu_4497_p2;
reg   [31:0] add_ln954_reg_6408;
wire   [0:0] select_ln954_fu_4503_p3;
reg   [0:0] select_ln954_reg_6413;
wire   [7:0] trunc_ln943_fu_4511_p1;
reg   [7:0] trunc_ln943_reg_6418;
wire   [0:0] icmp_ln935_3_fu_4515_p2;
reg   [0:0] icmp_ln935_3_reg_6423;
wire   [0:0] p_Result_184_fu_4521_p3;
reg   [0:0] p_Result_184_reg_6428;
wire   [63:0] tmp_V_33_fu_4535_p3;
reg   [63:0] tmp_V_33_reg_6433;
wire   [0:0] icmp_ln954_3_fu_4663_p2;
reg   [0:0] icmp_ln954_3_reg_6439;
wire   [31:0] sub_ln955_3_fu_4675_p2;
reg   [31:0] sub_ln955_3_reg_6444;
wire   [31:0] add_ln954_3_fu_4689_p2;
reg   [31:0] add_ln954_3_reg_6449;
wire   [0:0] select_ln954_8_fu_4695_p3;
reg   [0:0] select_ln954_8_reg_6454;
wire   [7:0] trunc_ln943_3_fu_4703_p1;
reg   [7:0] trunc_ln943_3_reg_6459;
wire   [31:0] select_ln935_fu_4807_p3;
reg   [31:0] select_ln935_reg_6464;
wire    ap_CS_fsm_state32;
wire   [31:0] select_ln935_3_fu_4915_p3;
reg   [31:0] select_ln935_3_reg_6469;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state13_pp0_stage6_iter0;
wire    ap_block_state20_pp0_stage6_iter1;
wire    ap_block_state27_pp0_stage6_iter2;
wire    ap_block_pp0_stage6_subdone;
wire    ap_CS_fsm_pp0_stage6;
reg    ap_enable_reg_pp0_iter2;
reg   [2:0] sample_period_samples_0_sample_V_address0;
reg    sample_period_samples_0_sample_V_ce0;
reg    sample_period_samples_0_sample_V_we0;
reg   [11:0] sample_period_samples_0_sample_V_d0;
wire   [11:0] sample_period_samples_0_sample_V_q0;
reg   [2:0] sample_period_samples_0_sample_V_address1;
reg    sample_period_samples_0_sample_V_ce1;
reg    sample_period_samples_0_sample_V_we1;
reg   [11:0] sample_period_samples_0_sample_V_d1;
reg   [2:0] sample_period_samples_1_sample_V_address0;
reg    sample_period_samples_1_sample_V_ce0;
reg    sample_period_samples_1_sample_V_we0;
reg   [11:0] sample_period_samples_1_sample_V_d0;
wire   [11:0] sample_period_samples_1_sample_V_q0;
reg   [2:0] sample_period_samples_1_sample_V_address1;
reg    sample_period_samples_1_sample_V_ce1;
reg    sample_period_samples_1_sample_V_we1;
reg   [11:0] sample_period_samples_1_sample_V_d1;
reg   [2:0] sample_period_samples_2_sample_V_address0;
reg    sample_period_samples_2_sample_V_ce0;
reg    sample_period_samples_2_sample_V_we0;
reg   [11:0] sample_period_samples_2_sample_V_d0;
reg   [2:0] sample_period_samples_2_sample_V_address1;
reg    sample_period_samples_2_sample_V_ce1;
reg    sample_period_samples_2_sample_V_we1;
reg   [11:0] sample_period_samples_2_sample_V_d1;
reg   [2:0] sample_period_samples_3_sample_V_address0;
reg    sample_period_samples_3_sample_V_ce0;
reg    sample_period_samples_3_sample_V_we0;
reg   [11:0] sample_period_samples_3_sample_V_d0;
reg   [2:0] sample_period_samples_3_sample_V_address1;
reg    sample_period_samples_3_sample_V_ce1;
reg    sample_period_samples_3_sample_V_we1;
reg   [11:0] sample_period_samples_3_sample_V_d1;
reg   [2:0] sample_period_samples_4_sample_V_address0;
reg    sample_period_samples_4_sample_V_ce0;
reg    sample_period_samples_4_sample_V_we0;
reg   [11:0] sample_period_samples_4_sample_V_d0;
reg   [2:0] sample_period_samples_4_sample_V_address1;
reg    sample_period_samples_4_sample_V_ce1;
reg    sample_period_samples_4_sample_V_we1;
reg   [11:0] sample_period_samples_4_sample_V_d1;
reg   [2:0] sample_period_samples_5_sample_V_address0;
reg    sample_period_samples_5_sample_V_ce0;
reg    sample_period_samples_5_sample_V_we0;
reg   [11:0] sample_period_samples_5_sample_V_d0;
reg   [2:0] sample_period_samples_5_sample_V_address1;
reg    sample_period_samples_5_sample_V_ce1;
reg    sample_period_samples_5_sample_V_we1;
reg   [11:0] sample_period_samples_5_sample_V_d1;
reg   [2:0] sample_period_samples_6_sample_V_address0;
reg    sample_period_samples_6_sample_V_ce0;
reg    sample_period_samples_6_sample_V_we0;
reg   [11:0] sample_period_samples_6_sample_V_d0;
reg   [2:0] sample_period_samples_6_sample_V_address1;
reg    sample_period_samples_6_sample_V_ce1;
reg    sample_period_samples_6_sample_V_we1;
reg   [11:0] sample_period_samples_6_sample_V_d1;
reg   [2:0] sample_period_samples_7_sample_V_address0;
reg    sample_period_samples_7_sample_V_ce0;
reg    sample_period_samples_7_sample_V_we0;
reg   [11:0] sample_period_samples_7_sample_V_d0;
reg   [2:0] sample_period_samples_7_sample_V_address1;
reg    sample_period_samples_7_sample_V_ce1;
reg    sample_period_samples_7_sample_V_we1;
reg   [11:0] sample_period_samples_7_sample_V_d1;
reg   [2:0] sample_period_samples_8_sample_V_address0;
reg    sample_period_samples_8_sample_V_ce0;
reg    sample_period_samples_8_sample_V_we0;
reg   [11:0] sample_period_samples_8_sample_V_d0;
reg   [2:0] sample_period_samples_8_sample_V_address1;
reg    sample_period_samples_8_sample_V_ce1;
reg    sample_period_samples_8_sample_V_we1;
reg   [11:0] sample_period_samples_8_sample_V_d1;
reg   [2:0] sample_period_samples_9_sample_V_address0;
reg    sample_period_samples_9_sample_V_ce0;
reg    sample_period_samples_9_sample_V_we0;
reg   [11:0] sample_period_samples_9_sample_V_d0;
reg   [2:0] sample_period_samples_9_sample_V_address1;
reg    sample_period_samples_9_sample_V_ce1;
reg    sample_period_samples_9_sample_V_we1;
reg   [11:0] sample_period_samples_9_sample_V_d1;
reg   [2:0] sample_period_samples_10_sample_V_address0;
reg    sample_period_samples_10_sample_V_ce0;
reg    sample_period_samples_10_sample_V_we0;
reg   [11:0] sample_period_samples_10_sample_V_d0;
reg   [2:0] sample_period_samples_10_sample_V_address1;
reg    sample_period_samples_10_sample_V_ce1;
reg    sample_period_samples_10_sample_V_we1;
reg   [11:0] sample_period_samples_10_sample_V_d1;
reg   [2:0] sample_period_samples_11_sample_V_address0;
reg    sample_period_samples_11_sample_V_ce0;
reg    sample_period_samples_11_sample_V_we0;
reg   [11:0] sample_period_samples_11_sample_V_d0;
reg   [2:0] sample_period_samples_11_sample_V_address1;
reg    sample_period_samples_11_sample_V_ce1;
reg    sample_period_samples_11_sample_V_we1;
reg   [11:0] sample_period_samples_11_sample_V_d1;
reg   [3:0] mag_samples_sample_V_address0;
reg    mag_samples_sample_V_ce0;
reg    mag_samples_sample_V_we0;
reg   [11:0] mag_samples_sample_V_d0;
wire   [11:0] mag_samples_sample_V_q0;
reg   [3:0] mag_samples_sample_V_address1;
reg    mag_samples_sample_V_ce1;
reg    mag_samples_sample_V_we1;
reg   [11:0] mag_samples_sample_V_d1;
reg   [1:0] x_V_address0;
reg    x_V_ce0;
reg    x_V_we0;
wire   [63:0] x_V_q0;
wire   [1:0] x_V_address1;
reg    x_V_ce1;
wire   [63:0] x_V_q1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_done;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_idle;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_ready;
wire   [8:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_ce0;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_ce0;
wire   [1:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_d0;
wire   [1:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce0;
wire   [1:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_d1;
wire   [14:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_d0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_d1;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_d1;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_d1;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_d1;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d0;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d1;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d0;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d1;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_d1;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_d1;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_d1;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_d1;
wire   [2:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d0;
wire   [2:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d1;
wire   [2:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d0;
wire   [2:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d1;
wire   [14:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_d0;
wire   [14:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce1;
wire   [1:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_d0;
wire   [3:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_d0;
wire   [3:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address1;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce1;
wire   [8:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_d0;
wire   [8:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_d0;
wire    grp_atan2_cordic_float_s_fu_3071_ap_start;
wire    grp_atan2_cordic_float_s_fu_3071_ap_done;
wire    grp_atan2_cordic_float_s_fu_3071_ap_idle;
wire    grp_atan2_cordic_float_s_fu_3071_ap_ready;
wire   [31:0] grp_atan2_cordic_float_s_fu_3071_ap_return;
wire    grp_generic_sincos_float_s_fu_3079_ap_start;
wire    grp_generic_sincos_float_s_fu_3079_ap_done;
wire    grp_generic_sincos_float_s_fu_3079_ap_idle;
wire    grp_generic_sincos_float_s_fu_3079_ap_ready;
wire   [31:0] grp_generic_sincos_float_s_fu_3079_t_in;
wire   [31:0] grp_generic_sincos_float_s_fu_3079_ap_return_0;
wire   [31:0] grp_generic_sincos_float_s_fu_3079_ap_return_1;
reg   [4:0] i_reg_3001;
wire    ap_CS_fsm_state28;
reg   [3:0] ap_phi_mux_j_phi_fu_3017_p4;
wire    ap_block_pp0_stage0;
reg    grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg;
wire    ap_CS_fsm_state29;
reg    grp_atan2_cordic_float_s_fu_3071_ap_start_reg;
wire    ap_CS_fsm_state33;
reg    grp_generic_sincos_float_s_fu_3079_ap_start_reg;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire   [63:0] idxprom_fu_3101_p1;
wire   [63:0] j_cast2_fu_3245_p1;
wire   [63:0] zext_ln279_fu_3303_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln280_fu_4025_p1;
wire   [63:0] zext_ln281_fu_4318_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] select_ln571_17_fu_4012_p3;
wire    ap_block_pp0_stage6_11001;
wire   [63:0] select_ln571_21_fu_4305_p3;
wire    ap_block_state11_pp0_stage4_iter0;
wire    ap_block_state18_pp0_stage4_iter1;
wire    ap_block_state25_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] grp_fu_3098_p0;
wire  signed [5:0] sext_ln22_fu_3110_p0;
wire  signed [5:0] trunc_ln22_1_fu_3122_p0;
wire   [5:0] zext_ln22_fu_3138_p1;
wire   [5:0] add_ln22_fu_3142_p2;
wire  signed [6:0] sext_ln22_1_fu_3148_p1;
wire   [4:0] add_ln22_3_fu_3152_p2;
wire   [6:0] buffer_idx_fu_3158_p2;
wire   [4:0] add_ln22_5_fu_3163_p2;
wire   [0:0] tmp_122_fu_3174_p3;
wire   [4:0] add_ln30_fu_3182_p2;
wire   [0:0] icmp_ln24_fu_3168_p2;
wire   [4:0] buffer_idx_6_fu_3188_p3;
wire   [4:0] buffer_idx_7_fu_3196_p3;
wire   [7:0] j_cast_fu_3261_p1;
wire   [7:0] add_ln266_fu_3271_p2;
wire   [6:0] trunc_ln279_fu_3285_p1;
wire   [8:0] shl_ln_fu_3289_p3;
wire   [8:0] zext_ln268_1_fu_3281_p1;
wire   [52:0] r_V_fu_3311_p1;
wire   [106:0] r_V_fu_3311_p2;
wire   [0:0] tmp_124_fu_3327_p3;
wire   [63:0] angle_fu_3317_p4;
wire   [63:0] zext_ln415_fu_3335_p1;
wire   [63:0] tmp_V_29_fu_3358_p2;
reg   [63:0] p_Result_173_fu_3369_p4;
reg   [63:0] tmp_s_fu_3379_p3;
wire   [31:0] l_7_fu_3387_p1;
wire   [31:0] lsb_index_7_fu_3397_p2;
wire   [30:0] tmp_126_fu_3403_p4;
wire   [6:0] trunc_ln947_4_fu_3419_p1;
wire   [6:0] sub_ln947_4_fu_3423_p2;
wire   [63:0] zext_ln947_4_fu_3429_p1;
wire   [63:0] zext_ln949_4_fu_3439_p1;
wire   [63:0] lshr_ln947_4_fu_3433_p2;
wire   [63:0] shl_ln949_4_fu_3443_p2;
wire   [63:0] or_ln949_6_fu_3449_p2;
wire   [63:0] and_ln949_11_fu_3455_p2;
wire   [0:0] tmp_127_fu_3467_p3;
wire   [0:0] p_Result_174_fu_3481_p3;
wire   [0:0] xor_ln949_4_fu_3475_p2;
wire   [0:0] icmp_ln946_4_fu_3413_p2;
wire   [0:0] icmp_ln949_4_fu_3461_p2;
wire   [0:0] select_ln946_4_fu_3501_p3;
wire   [0:0] and_ln949_9_fu_3495_p2;
wire   [31:0] sub_ln955_4_fu_3521_p2;
wire   [63:0] zext_ln955_4_fu_3526_p1;
wire   [31:0] add_ln954_4_fu_3535_p2;
wire   [63:0] zext_ln954_4_fu_3540_p1;
wire   [63:0] lshr_ln954_4_fu_3544_p2;
wire   [63:0] shl_ln955_4_fu_3530_p2;
wire   [63:0] m_44_fu_3549_p3;
wire   [63:0] zext_ln961_4_fu_3556_p1;
wire   [63:0] m_45_fu_3559_p2;
wire   [62:0] m_48_fu_3565_p4;
wire   [0:0] p_Result_164_fu_3579_p3;
wire   [7:0] sub_ln964_4_fu_3595_p2;
wire   [7:0] select_ln943_4_fu_3587_p3;
wire   [7:0] add_ln964_4_fu_3600_p2;
wire   [63:0] zext_ln962_4_fu_3575_p1;
wire   [8:0] tmp_17_fu_3606_p3;
wire   [63:0] p_Result_175_fu_3613_p5;
wire   [31:0] LD_12_fu_3625_p1;
wire   [31:0] bitcast_ln744_3_fu_3629_p1;
wire   [63:0] grp_fu_3098_p1;
wire   [63:0] ireg_fu_3658_p1;
wire   [10:0] exp_tmp_fu_3674_p4;
wire   [51:0] trunc_ln565_fu_3688_p1;
wire   [52:0] p_Result_177_fu_3692_p3;
wire   [53:0] zext_ln569_fu_3700_p1;
wire   [53:0] man_V_15_fu_3704_p2;
wire   [62:0] trunc_ln555_fu_3662_p1;
wire   [11:0] zext_ln455_fu_3684_p1;
wire   [11:0] F2_fu_3724_p2;
wire   [0:0] icmp_ln581_fu_3734_p2;
wire   [11:0] add_ln581_fu_3740_p2;
wire   [11:0] sub_ln581_fu_3746_p2;
wire   [11:0] sh_amt_fu_3752_p3;
wire   [5:0] tmp_130_fu_3776_p4;
wire  signed [63:0] sext_ln583_fu_3766_p1;
wire   [63:0] zext_ln604_fu_3796_p1;
wire   [0:0] icmp_ln571_fu_3718_p2;
wire   [0:0] icmp_ln582_fu_3760_p2;
wire   [0:0] xor_ln571_fu_3812_p2;
wire   [0:0] or_ln582_fu_3824_p2;
wire   [0:0] xor_ln582_fu_3830_p2;
wire   [0:0] or_ln581_fu_3842_p2;
wire   [0:0] icmp_ln603_fu_3786_p2;
wire   [0:0] xor_ln581_fu_3848_p2;
wire   [63:0] shl_ln604_fu_3800_p2;
wire   [0:0] and_ln603_fu_3854_p2;
wire   [0:0] and_ln582_fu_3818_p2;
wire   [0:0] or_ln571_11_fu_3874_p2;
wire   [63:0] ireg_3_fu_3886_p1;
wire   [62:0] trunc_ln555_3_fu_3890_p1;
wire   [53:0] zext_ln586_fu_3925_p1;
wire   [31:0] bitcast_ln702_fu_3933_p1;
wire   [0:0] tmp_131_fu_3936_p3;
wire   [53:0] ashr_ln586_fu_3928_p2;
wire   [53:0] trunc_ln588_cast_fu_3944_p3;
wire   [53:0] select_ln585_fu_3952_p3;
wire   [10:0] add_ln591_fu_3963_p2;
wire   [31:0] zext_ln591_fu_3968_p1;
wire   [0:0] p_Result_168_fu_3972_p3;
wire   [0:0] qb_fu_3979_p3;
wire  signed [54:0] sext_ln591_fu_3959_p1;
wire   [54:0] zext_ln415_18_fu_3985_p1;
wire   [54:0] add_ln415_fu_3989_p2;
wire  signed [54:0] sext_ln585_fu_3922_p1;
wire   [54:0] select_ln571_15_fu_3995_p3;
wire  signed [63:0] sext_ln571_fu_4002_p1;
wire   [63:0] select_ln571_16_fu_4006_p3;
wire   [8:0] add_ln280_fu_4020_p2;
wire   [52:0] p_Result_179_fu_4033_p3;
wire   [53:0] zext_ln569_3_fu_4040_p1;
wire   [53:0] man_V_19_fu_4044_p2;
wire   [11:0] zext_ln455_3_fu_4030_p1;
wire   [11:0] F2_3_fu_4057_p2;
wire   [0:0] icmp_ln581_4_fu_4067_p2;
wire   [11:0] add_ln581_5_fu_4073_p2;
wire   [11:0] sub_ln581_3_fu_4079_p2;
wire   [11:0] sh_amt_3_fu_4085_p3;
wire   [5:0] tmp_133_fu_4109_p4;
wire  signed [63:0] sext_ln583_3_fu_4099_p1;
wire   [63:0] zext_ln604_3_fu_4129_p1;
wire   [0:0] icmp_ln582_3_fu_4093_p2;
wire   [0:0] xor_ln571_3_fu_4145_p2;
wire   [0:0] or_ln582_3_fu_4156_p2;
wire   [0:0] xor_ln582_3_fu_4161_p2;
wire   [0:0] or_ln581_3_fu_4173_p2;
wire   [0:0] icmp_ln603_3_fu_4119_p2;
wire   [0:0] xor_ln581_3_fu_4179_p2;
wire   [63:0] shl_ln604_2_fu_4133_p2;
wire   [0:0] and_ln603_3_fu_4185_p2;
wire   [0:0] and_ln582_3_fu_4150_p2;
wire   [0:0] or_ln571_14_fu_4203_p2;
wire   [53:0] zext_ln586_5_fu_4218_p1;
wire   [31:0] bitcast_ln702_4_fu_4226_p1;
wire   [0:0] tmp_134_fu_4229_p3;
wire   [53:0] ashr_ln586_3_fu_4221_p2;
wire   [53:0] trunc_ln588_3_cast_fu_4237_p3;
wire   [53:0] select_ln585_2_fu_4245_p3;
wire   [10:0] add_ln591_4_fu_4256_p2;
wire   [31:0] zext_ln591_4_fu_4261_p1;
wire   [0:0] p_Result_171_fu_4265_p3;
wire   [0:0] qb_3_fu_4272_p3;
wire  signed [54:0] sext_ln591_2_fu_4252_p1;
wire   [54:0] zext_ln415_19_fu_4278_p1;
wire   [54:0] add_ln415_18_fu_4282_p2;
wire  signed [54:0] sext_ln585_2_fu_4215_p1;
wire   [54:0] select_ln571_19_fu_4288_p3;
wire  signed [63:0] sext_ln571_3_fu_4295_p1;
wire   [63:0] select_ln571_20_fu_4299_p3;
wire   [8:0] add_ln281_fu_4313_p2;
wire   [63:0] tmp_V_fu_4337_p2;
reg   [63:0] p_Result_181_fu_4351_p4;
reg   [63:0] tmp_fu_4361_p3;
wire   [31:0] l_fu_4369_p1;
wire   [31:0] sub_ln944_fu_4373_p2;
wire   [31:0] lsb_index_fu_4379_p2;
wire   [30:0] tmp_115_fu_4385_p4;
wire   [6:0] trunc_ln947_fu_4401_p1;
wire   [6:0] sub_ln947_fu_4405_p2;
wire   [63:0] zext_ln947_fu_4411_p1;
wire   [63:0] zext_ln949_fu_4421_p1;
wire   [63:0] lshr_ln947_fu_4415_p2;
wire   [63:0] shl_ln949_fu_4425_p2;
wire   [63:0] or_ln949_5_fu_4431_p2;
wire   [63:0] and_ln949_fu_4437_p2;
wire   [0:0] tmp_116_fu_4449_p3;
wire   [0:0] p_Result_182_fu_4463_p3;
wire   [0:0] xor_ln949_fu_4457_p2;
wire   [0:0] icmp_ln946_fu_4395_p2;
wire   [0:0] icmp_ln949_fu_4443_p2;
wire   [0:0] select_ln946_fu_4489_p3;
wire   [0:0] and_ln949_7_fu_4477_p2;
wire   [63:0] tmp_V_27_fu_4529_p2;
reg   [63:0] p_Result_185_fu_4543_p4;
reg   [63:0] tmp_15_fu_4553_p3;
wire   [31:0] l_6_fu_4561_p1;
wire   [31:0] sub_ln944_3_fu_4565_p2;
wire   [31:0] lsb_index_6_fu_4571_p2;
wire   [30:0] tmp_119_fu_4577_p4;
wire   [6:0] trunc_ln947_3_fu_4593_p1;
wire   [6:0] sub_ln947_3_fu_4597_p2;
wire   [63:0] zext_ln947_3_fu_4603_p1;
wire   [63:0] zext_ln949_3_fu_4613_p1;
wire   [63:0] lshr_ln947_3_fu_4607_p2;
wire   [63:0] shl_ln949_3_fu_4617_p2;
wire   [63:0] or_ln949_fu_4623_p2;
wire   [63:0] and_ln949_10_fu_4629_p2;
wire   [0:0] tmp_120_fu_4641_p3;
wire   [0:0] p_Result_186_fu_4655_p3;
wire   [0:0] xor_ln949_3_fu_4649_p2;
wire   [0:0] icmp_ln946_3_fu_4587_p2;
wire   [0:0] icmp_ln949_3_fu_4635_p2;
wire   [0:0] select_ln946_3_fu_4681_p3;
wire   [0:0] and_ln949_8_fu_4669_p2;
wire   [63:0] zext_ln955_fu_4707_p1;
wire   [63:0] zext_ln954_fu_4715_p1;
wire   [63:0] lshr_ln954_fu_4718_p2;
wire   [63:0] shl_ln955_fu_4710_p2;
wire   [63:0] m_fu_4723_p3;
wire   [63:0] zext_ln961_fu_4730_p1;
wire   [63:0] m_38_fu_4733_p2;
wire   [62:0] m_49_fu_4739_p4;
wire   [0:0] p_Result_s_fu_4753_p3;
wire   [7:0] sub_ln964_fu_4769_p2;
wire   [7:0] select_ln943_fu_4761_p3;
wire   [7:0] add_ln964_fu_4774_p2;
wire   [63:0] zext_ln962_fu_4749_p1;
wire   [8:0] tmp_14_fu_4780_p3;
wire   [63:0] p_Result_183_fu_4787_p5;
wire   [31:0] LD_fu_4799_p1;
wire   [31:0] bitcast_ln744_fu_4803_p1;
wire   [63:0] zext_ln955_3_fu_4815_p1;
wire   [63:0] zext_ln954_3_fu_4823_p1;
wire   [63:0] lshr_ln954_3_fu_4826_p2;
wire   [63:0] shl_ln955_3_fu_4818_p2;
wire   [63:0] m_41_fu_4831_p3;
wire   [63:0] zext_ln961_3_fu_4838_p1;
wire   [63:0] m_42_fu_4841_p2;
wire   [62:0] m_50_fu_4847_p4;
wire   [0:0] p_Result_160_fu_4861_p3;
wire   [7:0] sub_ln964_3_fu_4877_p2;
wire   [7:0] select_ln943_3_fu_4869_p3;
wire   [7:0] add_ln964_3_fu_4882_p2;
wire   [63:0] zext_ln962_3_fu_4857_p1;
wire   [8:0] tmp_16_fu_4888_p3;
wire   [63:0] p_Result_187_fu_4895_p5;
wire   [31:0] LD_11_fu_4907_p1;
wire   [31:0] bitcast_ln744_4_fu_4911_p1;
wire    grp_fu_3098_ce;
reg   [31:0] ap_return_preg;
reg   [18:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg = 1'b0;
#0 grp_atan2_cordic_float_s_fu_3071_ap_start_reg = 1'b0;
#0 grp_generic_sincos_float_s_fu_3079_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_0_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_0_sample_V_address0),
    .ce0(sample_period_samples_0_sample_V_ce0),
    .we0(sample_period_samples_0_sample_V_we0),
    .d0(sample_period_samples_0_sample_V_d0),
    .q0(sample_period_samples_0_sample_V_q0),
    .address1(sample_period_samples_0_sample_V_address1),
    .ce1(sample_period_samples_0_sample_V_ce1),
    .we1(sample_period_samples_0_sample_V_we1),
    .d1(sample_period_samples_0_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_1_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_1_sample_V_address0),
    .ce0(sample_period_samples_1_sample_V_ce0),
    .we0(sample_period_samples_1_sample_V_we0),
    .d0(sample_period_samples_1_sample_V_d0),
    .q0(sample_period_samples_1_sample_V_q0),
    .address1(sample_period_samples_1_sample_V_address1),
    .ce1(sample_period_samples_1_sample_V_ce1),
    .we1(sample_period_samples_1_sample_V_we1),
    .d1(sample_period_samples_1_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_2_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_2_sample_V_address0),
    .ce0(sample_period_samples_2_sample_V_ce0),
    .we0(sample_period_samples_2_sample_V_we0),
    .d0(sample_period_samples_2_sample_V_d0),
    .q0(sample_period_samples_2_sample_V_q0),
    .address1(sample_period_samples_2_sample_V_address1),
    .ce1(sample_period_samples_2_sample_V_ce1),
    .we1(sample_period_samples_2_sample_V_we1),
    .d1(sample_period_samples_2_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_3_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_3_sample_V_address0),
    .ce0(sample_period_samples_3_sample_V_ce0),
    .we0(sample_period_samples_3_sample_V_we0),
    .d0(sample_period_samples_3_sample_V_d0),
    .q0(sample_period_samples_3_sample_V_q0),
    .address1(sample_period_samples_3_sample_V_address1),
    .ce1(sample_period_samples_3_sample_V_ce1),
    .we1(sample_period_samples_3_sample_V_we1),
    .d1(sample_period_samples_3_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_4_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_4_sample_V_address0),
    .ce0(sample_period_samples_4_sample_V_ce0),
    .we0(sample_period_samples_4_sample_V_we0),
    .d0(sample_period_samples_4_sample_V_d0),
    .q0(sample_period_samples_4_sample_V_q0),
    .address1(sample_period_samples_4_sample_V_address1),
    .ce1(sample_period_samples_4_sample_V_ce1),
    .we1(sample_period_samples_4_sample_V_we1),
    .d1(sample_period_samples_4_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_5_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_5_sample_V_address0),
    .ce0(sample_period_samples_5_sample_V_ce0),
    .we0(sample_period_samples_5_sample_V_we0),
    .d0(sample_period_samples_5_sample_V_d0),
    .q0(sample_period_samples_5_sample_V_q0),
    .address1(sample_period_samples_5_sample_V_address1),
    .ce1(sample_period_samples_5_sample_V_ce1),
    .we1(sample_period_samples_5_sample_V_we1),
    .d1(sample_period_samples_5_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_6_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_6_sample_V_address0),
    .ce0(sample_period_samples_6_sample_V_ce0),
    .we0(sample_period_samples_6_sample_V_we0),
    .d0(sample_period_samples_6_sample_V_d0),
    .q0(sample_period_samples_6_sample_V_q0),
    .address1(sample_period_samples_6_sample_V_address1),
    .ce1(sample_period_samples_6_sample_V_ce1),
    .we1(sample_period_samples_6_sample_V_we1),
    .d1(sample_period_samples_6_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_7_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_7_sample_V_address0),
    .ce0(sample_period_samples_7_sample_V_ce0),
    .we0(sample_period_samples_7_sample_V_we0),
    .d0(sample_period_samples_7_sample_V_d0),
    .q0(sample_period_samples_7_sample_V_q0),
    .address1(sample_period_samples_7_sample_V_address1),
    .ce1(sample_period_samples_7_sample_V_ce1),
    .we1(sample_period_samples_7_sample_V_we1),
    .d1(sample_period_samples_7_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_8_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_8_sample_V_address0),
    .ce0(sample_period_samples_8_sample_V_ce0),
    .we0(sample_period_samples_8_sample_V_we0),
    .d0(sample_period_samples_8_sample_V_d0),
    .q0(sample_period_samples_8_sample_V_q0),
    .address1(sample_period_samples_8_sample_V_address1),
    .ce1(sample_period_samples_8_sample_V_ce1),
    .we1(sample_period_samples_8_sample_V_we1),
    .d1(sample_period_samples_8_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_9_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_9_sample_V_address0),
    .ce0(sample_period_samples_9_sample_V_ce0),
    .we0(sample_period_samples_9_sample_V_we0),
    .d0(sample_period_samples_9_sample_V_d0),
    .q0(sample_period_samples_9_sample_V_q0),
    .address1(sample_period_samples_9_sample_V_address1),
    .ce1(sample_period_samples_9_sample_V_ce1),
    .we1(sample_period_samples_9_sample_V_we1),
    .d1(sample_period_samples_9_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_10_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_10_sample_V_address0),
    .ce0(sample_period_samples_10_sample_V_ce0),
    .we0(sample_period_samples_10_sample_V_we0),
    .d0(sample_period_samples_10_sample_V_d0),
    .q0(sample_period_samples_10_sample_V_q0),
    .address1(sample_period_samples_10_sample_V_address1),
    .ce1(sample_period_samples_10_sample_V_ce1),
    .we1(sample_period_samples_10_sample_V_we1),
    .d1(sample_period_samples_10_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_11_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_11_sample_V_address0),
    .ce0(sample_period_samples_11_sample_V_ce0),
    .we0(sample_period_samples_11_sample_V_we0),
    .d0(sample_period_samples_11_sample_V_d0),
    .q0(sample_period_samples_11_sample_V_q0),
    .address1(sample_period_samples_11_sample_V_address1),
    .ce1(sample_period_samples_11_sample_V_ce1),
    .we1(sample_period_samples_11_sample_V_we1),
    .d1(sample_period_samples_11_sample_V_d1)
);

LLSSineReconstruction_loadData_mag_samples_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mag_samples_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mag_samples_sample_V_address0),
    .ce0(mag_samples_sample_V_ce0),
    .we0(mag_samples_sample_V_we0),
    .d0(mag_samples_sample_V_d0),
    .q0(mag_samples_sample_V_q0),
    .address1(mag_samples_sample_V_address1),
    .ce1(mag_samples_sample_V_ce1),
    .we1(mag_samples_sample_V_we1),
    .d1(mag_samples_sample_V_d1)
);

LLSSineReconstruction_computeFirstChannel_x_V #(
    .DataWidth( 64 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_V_address0),
    .ce0(x_V_ce0),
    .we0(x_V_we0),
    .d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_d0),
    .q0(x_V_q0),
    .address1(x_V_address1),
    .ce1(x_V_ce1),
    .q1(x_V_q1)
);

LLSSineReconstruction_computeLeastSquaresSolution_160_3_s grp_computeLeastSquaresSolution_160_3_s_fu_3024(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start),
    .ap_done(grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_done),
    .ap_idle(grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_idle),
    .ap_ready(grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_ready),
    .A_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_address0),
    .A_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_ce0),
    .A_q0(this_A_q0),
    .b_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_address0),
    .b_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_ce0),
    .b_q0(this_b_q0),
    .x_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_address0),
    .x_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_ce0),
    .x_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_we0),
    .x_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_d0),
    .sigma_V_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address0),
    .sigma_V_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce0),
    .sigma_V_q0(sigma_V_q0),
    .sigma_V_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address1),
    .sigma_V_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce1),
    .sigma_V_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_we1),
    .sigma_V_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_d1),
    .matU_V_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_address0),
    .matU_V_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_ce0),
    .matU_V_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_we0),
    .matU_V_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_d0),
    .matU_V_q0(matU_V_q0),
    .A_i_V_0_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address0),
    .A_i_V_0_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce0),
    .A_i_V_0_q0(A_i_V_0_q0),
    .A_i_V_0_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address1),
    .A_i_V_0_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce1),
    .A_i_V_0_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_we1),
    .A_i_V_0_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_d1),
    .A_i_V_1_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address0),
    .A_i_V_1_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce0),
    .A_i_V_1_q0(A_i_V_1_q0),
    .A_i_V_1_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address1),
    .A_i_V_1_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce1),
    .A_i_V_1_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_we1),
    .A_i_V_1_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_d1),
    .A_j_V_0_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address0),
    .A_j_V_0_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce0),
    .A_j_V_0_q0(A_j_V_0_q0),
    .A_j_V_0_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address1),
    .A_j_V_0_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce1),
    .A_j_V_0_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_we1),
    .A_j_V_0_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_d1),
    .A_j_V_1_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address0),
    .A_j_V_1_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce0),
    .A_j_V_1_q0(A_j_V_1_q0),
    .A_j_V_1_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address1),
    .A_j_V_1_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce1),
    .A_j_V_1_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_we1),
    .A_j_V_1_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_d1),
    .matA_V_0_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address0),
    .matA_V_0_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce0),
    .matA_V_0_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we0),
    .matA_V_0_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d0),
    .matA_V_0_q0(matA_V_0_q0),
    .matA_V_0_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address1),
    .matA_V_0_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce1),
    .matA_V_0_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we1),
    .matA_V_0_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d1),
    .matA_V_0_q1(matA_V_0_q1),
    .matA_V_1_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address0),
    .matA_V_1_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce0),
    .matA_V_1_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we0),
    .matA_V_1_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d0),
    .matA_V_1_q0(matA_V_1_q0),
    .matA_V_1_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address1),
    .matA_V_1_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce1),
    .matA_V_1_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we1),
    .matA_V_1_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d1),
    .matA_V_1_q1(matA_V_1_q1),
    .V_i_V_0_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address0),
    .V_i_V_0_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce0),
    .V_i_V_0_q0(V_i_V_0_q0),
    .V_i_V_0_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address1),
    .V_i_V_0_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce1),
    .V_i_V_0_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_we1),
    .V_i_V_0_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_d1),
    .V_i_V_1_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address0),
    .V_i_V_1_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce0),
    .V_i_V_1_q0(V_i_V_1_q0),
    .V_i_V_1_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address1),
    .V_i_V_1_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce1),
    .V_i_V_1_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_we1),
    .V_i_V_1_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_d1),
    .V_j_V_0_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address0),
    .V_j_V_0_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce0),
    .V_j_V_0_q0(V_j_V_0_q0),
    .V_j_V_0_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address1),
    .V_j_V_0_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce1),
    .V_j_V_0_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_we1),
    .V_j_V_0_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_d1),
    .V_j_V_1_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address0),
    .V_j_V_1_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce0),
    .V_j_V_1_q0(V_j_V_1_q0),
    .V_j_V_1_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address1),
    .V_j_V_1_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce1),
    .V_j_V_1_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_we1),
    .V_j_V_1_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_d1),
    .matV_V_0_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address0),
    .matV_V_0_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce0),
    .matV_V_0_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we0),
    .matV_V_0_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d0),
    .matV_V_0_q0(matV_V_0_q0),
    .matV_V_0_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address1),
    .matV_V_0_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce1),
    .matV_V_0_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we1),
    .matV_V_0_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d1),
    .matV_V_0_q1(matV_V_0_q1),
    .matV_V_1_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address0),
    .matV_V_1_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce0),
    .matV_V_1_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we0),
    .matV_V_1_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d0),
    .matV_V_1_q0(matV_V_1_q0),
    .matV_V_1_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address1),
    .matV_V_1_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce1),
    .matV_V_1_we1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we1),
    .matV_V_1_d1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d1),
    .matV_V_1_q1(matV_V_1_q1),
    .U_V_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address0),
    .U_V_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce0),
    .U_V_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_we0),
    .U_V_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_d0),
    .U_V_q0(U_V_q0),
    .U_V_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address1),
    .U_V_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce1),
    .U_V_q1(U_V_q1),
    .S_V_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_address0),
    .S_V_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_ce0),
    .S_V_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_we0),
    .S_V_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_d0),
    .S_V_q0(S_V_q0),
    .V_V_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address0),
    .V_V_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce0),
    .V_V_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_we0),
    .V_V_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_d0),
    .V_V_q0(V_V_q0),
    .V_V_address1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address1),
    .V_V_ce1(grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce1),
    .V_V_q1(V_V_q1),
    .UT_V_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_address0),
    .UT_V_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_ce0),
    .UT_V_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_we0),
    .UT_V_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_d0),
    .UT_V_q0(UT_V_q0),
    .A_pinv_V_address0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_address0),
    .A_pinv_V_ce0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_ce0),
    .A_pinv_V_we0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_we0),
    .A_pinv_V_d0(grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_d0),
    .A_pinv_V_q0(A_pinv_V_q0)
);

LLSSineReconstruction_atan2_cordic_float_s grp_atan2_cordic_float_s_fu_3071(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_atan2_cordic_float_s_fu_3071_ap_start),
    .ap_done(grp_atan2_cordic_float_s_fu_3071_ap_done),
    .ap_idle(grp_atan2_cordic_float_s_fu_3071_ap_idle),
    .ap_ready(grp_atan2_cordic_float_s_fu_3071_ap_ready),
    .y_in(select_ln935_reg_6464),
    .x_in(select_ln935_3_reg_6469),
    .ap_return(grp_atan2_cordic_float_s_fu_3071_ap_return)
);

LLSSineReconstruction_generic_sincos_float_s grp_generic_sincos_float_s_fu_3079(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_generic_sincos_float_s_fu_3079_ap_start),
    .ap_done(grp_generic_sincos_float_s_fu_3079_ap_done),
    .ap_idle(grp_generic_sincos_float_s_fu_3079_ap_idle),
    .ap_ready(grp_generic_sincos_float_s_fu_3079_ap_ready),
    .t_in(grp_generic_sincos_float_s_fu_3079_t_in),
    .ap_return_0(grp_generic_sincos_float_s_fu_3079_ap_return_0),
    .ap_return_1(grp_generic_sincos_float_s_fu_3079_ap_return_1)
);

LLSSineReconstruction_mul_64s_53ns_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 53 ),
    .dout_WIDTH( 107 ))
mul_64s_53ns_107_1_1_U721(
    .din0(time_V_reg_6187),
    .din1(r_V_fu_3311_p1),
    .dout(r_V_fu_3311_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state33) & (grp_atan2_cordic_float_s_fu_3071_ap_done == 1'b1))) begin
            ap_return_preg <= grp_atan2_cordic_float_s_fu_3071_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_atan2_cordic_float_s_fu_3071_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            grp_atan2_cordic_float_s_fu_3071_ap_start_reg <= 1'b1;
        end else if ((grp_atan2_cordic_float_s_fu_3071_ap_ready == 1'b1)) begin
            grp_atan2_cordic_float_s_fu_3071_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln257_fu_3132_p2 == 1'd1))) begin
            grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg <= 1'b1;
        end else if ((grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_ready == 1'b1)) begin
            grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_generic_sincos_float_s_fu_3079_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            grp_generic_sincos_float_s_fu_3079_ap_start_reg <= 1'b1;
        end else if ((grp_generic_sincos_float_s_fu_3079_ap_ready == 1'b1)) begin
            grp_generic_sincos_float_s_fu_3079_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_reg_3001 <= add_ln257_reg_5483;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_3001 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_3013 <= add_ln263_reg_6052;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_3013 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln257_reg_5483 <= add_ln257_fu_3126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln263_reg_6052 <= add_ln263_fu_3239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        add_ln954_3_reg_6449 <= add_ln954_3_fu_4689_p2;
        add_ln954_reg_6408 <= add_ln954_fu_4497_p2;
        icmp_ln935_3_reg_6423 <= icmp_ln935_3_fu_4515_p2;
        icmp_ln935_reg_6382 <= icmp_ln935_fu_4323_p2;
        icmp_ln954_3_reg_6439 <= icmp_ln954_3_fu_4663_p2;
        icmp_ln954_reg_6398 <= icmp_ln954_fu_4471_p2;
        p_Result_180_reg_6387 <= x_V_q1[32'd63];
        p_Result_184_reg_6428 <= x_V_q0[32'd63];
        select_ln954_8_reg_6454 <= select_ln954_8_fu_4695_p3;
        select_ln954_reg_6413 <= select_ln954_fu_4503_p3;
        sub_ln955_3_reg_6444 <= sub_ln955_3_fu_4675_p2;
        sub_ln955_reg_6403 <= sub_ln955_fu_4483_p2;
        tmp_V_32_reg_6392 <= tmp_V_32_fu_4343_p3;
        tmp_V_33_reg_6433 <= tmp_V_33_fu_4535_p3;
        trunc_ln943_3_reg_6459 <= trunc_ln943_3_fu_4703_p1;
        trunc_ln943_reg_6418 <= trunc_ln943_fu_4511_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln263_reg_6057_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        and_ln581_3_reg_6352 <= and_ln581_3_fu_4167_p2;
        icmp_ln585_3_reg_6337 <= icmp_ln585_3_fu_4103_p2;
        icmp_ln591_4_reg_6347 <= icmp_ln591_4_fu_4139_p2;
        man_V_20_reg_6325 <= man_V_20_fu_4050_p3;
        or_ln571_13_reg_6362 <= or_ln571_13_fu_4198_p2;
        or_ln571_15_reg_6367 <= or_ln571_15_fu_4209_p2;
        select_ln571_18_reg_6357 <= select_ln571_18_fu_4191_p3;
        trunc_ln575_3_reg_6332 <= trunc_ln575_3_fu_4063_p1;
        trunc_ln586_3_reg_6342 <= trunc_ln586_3_fu_4125_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln263_reg_6057_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        and_ln581_reg_6281 <= and_ln581_fu_3836_p2;
        icmp_ln585_reg_6266 <= icmp_ln585_fu_3770_p2;
        icmp_ln591_reg_6276 <= icmp_ln591_fu_3806_p2;
        man_V_reg_6254 <= man_V_fu_3710_p3;
        or_ln571_12_reg_6296 <= or_ln571_12_fu_3880_p2;
        or_ln571_reg_6291 <= or_ln571_fu_3868_p2;
        p_Result_176_reg_6249 <= ireg_fu_3658_p1[32'd63];
        select_ln571_reg_6286 <= select_ln571_fu_3860_p3;
        trunc_ln575_reg_6261 <= trunc_ln575_fu_3730_p1;
        trunc_ln586_reg_6271 <= trunc_ln586_fu_3792_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        angle_4_reg_6192 <= angle_4_fu_3339_p2;
        p_Result_172_reg_6199 <= angle_4_fu_3339_p2[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln263_reg_6057_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cos_val_reg_6243 <= grp_generic_sincos_float_s_fu_3079_ap_return_1;
        sin_val_reg_6237 <= grp_generic_sincos_float_s_fu_3079_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln263_reg_6057_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        exp_tmp_3_reg_6307 <= {{ireg_3_fu_3886_p1[62:52]}};
        icmp_ln571_3_reg_6317 <= icmp_ln571_3_fu_3916_p2;
        p_Result_178_reg_6301 <= ireg_3_fu_3886_p1[32'd63];
        trunc_ln565_3_reg_6312 <= trunc_ln565_3_fu_3912_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln263_reg_6057 <= icmp_ln263_fu_3265_p2;
        icmp_ln263_reg_6057_pp0_iter1_reg <= icmp_ln263_reg_6057;
        icmp_ln263_reg_6057_pp0_iter2_reg <= icmp_ln263_reg_6057_pp0_iter1_reg;
        sub_ln279_reg_6131_pp0_iter1_reg <= sub_ln279_reg_6131;
        sub_ln279_reg_6131_pp0_iter2_reg <= sub_ln279_reg_6131_pp0_iter1_reg;
        zext_ln268_reg_6061_pp0_iter1_reg[7 : 0] <= zext_ln268_reg_6061[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        icmp_ln935_4_reg_6205 <= icmp_ln935_4_fu_3353_p2;
        icmp_ln954_4_reg_6222 <= icmp_ln954_4_fu_3489_p2;
        select_ln954_10_reg_6227 <= select_ln954_10_fu_3509_p3;
        sub_ln944_4_reg_6216 <= sub_ln944_4_fu_3391_p2;
        tmp_V_31_reg_6210 <= tmp_V_31_fu_3363_p3;
        trunc_ln943_4_reg_6232 <= trunc_ln943_4_fu_3517_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mag_samples_sample_V_addr_36_reg_5463 <= idxprom_fu_3101_p1;
        sext_ln22_reg_5468 <= sext_ln22_fu_3110_p1;
        trunc_ln22_1_reg_5478 <= trunc_ln22_1_fu_3122_p1;
        trunc_ln22_reg_5473 <= trunc_ln22_fu_3118_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_10_sample_V_load_reg_6177 <= sample_period_samples_10_sample_V_q0;
        sample_period_samples_11_sample_V_load_reg_6182 <= sample_period_samples_11_sample_V_q0;
        sample_period_samples_2_sample_V_load_reg_6137 <= sample_period_samples_2_sample_V_q0;
        sample_period_samples_3_sample_V_load_reg_6142 <= sample_period_samples_3_sample_V_q0;
        sample_period_samples_4_sample_V_load_reg_6147 <= sample_period_samples_4_sample_V_q0;
        sample_period_samples_5_sample_V_load_reg_6152 <= sample_period_samples_5_sample_V_q0;
        sample_period_samples_6_sample_V_load_reg_6157 <= sample_period_samples_6_sample_V_q0;
        sample_period_samples_7_sample_V_load_reg_6162 <= sample_period_samples_7_sample_V_q0;
        sample_period_samples_8_sample_V_load_reg_6167 <= sample_period_samples_8_sample_V_q0;
        sample_period_samples_9_sample_V_load_reg_6172 <= sample_period_samples_9_sample_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        select_ln935_3_reg_6469 <= select_ln935_3_fu_4915_p3;
        select_ln935_reg_6464 <= select_ln935_fu_4807_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln263_fu_3265_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln279_reg_6131 <= sub_ln279_fu_3297_p2;
        zext_ln268_reg_6061[7 : 0] <= zext_ln268_fu_3276_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        time_V_reg_6187 <= this_times_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_20_reg_6047[7 : 3] <= tmp_20_fu_3231_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln257_fu_3132_p2 == 1'd0))) begin
        zext_ln34_reg_5491[4 : 0] <= zext_ln34_fu_3203_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln263_fu_3265_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state33) & (grp_atan2_cordic_float_s_fu_3071_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_3017_p4 = add_ln263_reg_6052;
    end else begin
        ap_phi_mux_j_phi_fu_3017_p4 = j_reg_3013;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) & (grp_atan2_cordic_float_s_fu_3071_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) & (grp_atan2_cordic_float_s_fu_3071_ap_done == 1'b1))) begin
        ap_return = grp_atan2_cordic_float_s_fu_3071_ap_return;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            grp_fu_3098_p0 = cos_val_reg_6243;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_3098_p0 = sin_val_reg_6237;
        end else begin
            grp_fu_3098_p0 = 'bx;
        end
    end else begin
        grp_fu_3098_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mag_samples_sample_V_address0 = mag_samples_sample_V_addr_36_reg_5463;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd1;
    end else begin
        mag_samples_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            mag_samples_sample_V_address1 = 64'd11;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            mag_samples_sample_V_address1 = 64'd9;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            mag_samples_sample_V_address1 = 64'd7;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            mag_samples_sample_V_address1 = 64'd5;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            mag_samples_sample_V_address1 = 64'd3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            mag_samples_sample_V_address1 = 64'd0;
        end else begin
            mag_samples_sample_V_address1 = 'bx;
        end
    end else begin
        mag_samples_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        mag_samples_sample_V_ce0 = 1'b1;
    end else begin
        mag_samples_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        mag_samples_sample_V_ce1 = 1'b1;
    end else begin
        mag_samples_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            mag_samples_sample_V_d0 = sample_period_samples_10_sample_V_load_reg_6177;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            mag_samples_sample_V_d0 = sample_period_samples_8_sample_V_load_reg_6167;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            mag_samples_sample_V_d0 = sample_period_samples_6_sample_V_load_reg_6157;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            mag_samples_sample_V_d0 = sample_period_samples_4_sample_V_load_reg_6147;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            mag_samples_sample_V_d0 = sample_period_samples_2_sample_V_load_reg_6137;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            mag_samples_sample_V_d0 = sample_period_samples_1_sample_V_q0;
        end else begin
            mag_samples_sample_V_d0 = 'bx;
        end
    end else begin
        mag_samples_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            mag_samples_sample_V_d1 = sample_period_samples_11_sample_V_load_reg_6182;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            mag_samples_sample_V_d1 = sample_period_samples_9_sample_V_load_reg_6172;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            mag_samples_sample_V_d1 = sample_period_samples_7_sample_V_load_reg_6162;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            mag_samples_sample_V_d1 = sample_period_samples_5_sample_V_load_reg_6152;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            mag_samples_sample_V_d1 = sample_period_samples_3_sample_V_load_reg_6142;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            mag_samples_sample_V_d1 = sample_period_samples_0_sample_V_q0;
        end else begin
            mag_samples_sample_V_d1 = 'bx;
        end
    end else begin
        mag_samples_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        mag_samples_sample_V_we0 = 1'b1;
    end else begin
        mag_samples_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln263_reg_6057 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        mag_samples_sample_V_we1 = 1'b1;
    end else begin
        mag_samples_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_0_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_0_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_0_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_0_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_0_q0;
    end else begin
        sample_period_samples_0_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_0_q0;
    end else begin
        sample_period_samples_0_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_10_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_10_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_10_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_10_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_10_q0;
    end else begin
        sample_period_samples_10_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_10_q0;
    end else begin
        sample_period_samples_10_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_11_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_11_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_11_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_11_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_11_q0;
    end else begin
        sample_period_samples_11_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_11_q0;
    end else begin
        sample_period_samples_11_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_1_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_1_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_1_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_1_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_1_q0;
    end else begin
        sample_period_samples_1_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_1_q0;
    end else begin
        sample_period_samples_1_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_2_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_2_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_2_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_2_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_2_q0;
    end else begin
        sample_period_samples_2_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_2_q0;
    end else begin
        sample_period_samples_2_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_3_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_3_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_3_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_3_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_3_q0;
    end else begin
        sample_period_samples_3_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_3_q0;
    end else begin
        sample_period_samples_3_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_4_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_4_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_4_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_4_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_4_q0;
    end else begin
        sample_period_samples_4_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_4_q0;
    end else begin
        sample_period_samples_4_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_5_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_5_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_5_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_5_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_5_q0;
    end else begin
        sample_period_samples_5_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_5_q0;
    end else begin
        sample_period_samples_5_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_6_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_6_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_6_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_6_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_6_q0;
    end else begin
        sample_period_samples_6_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_6_q0;
    end else begin
        sample_period_samples_6_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_7_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_7_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_7_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_7_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_7_q0;
    end else begin
        sample_period_samples_7_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_7_q0;
    end else begin
        sample_period_samples_7_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_8_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_8_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_8_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_8_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_8_q0;
    end else begin
        sample_period_samples_8_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_8_q0;
    end else begin
        sample_period_samples_8_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_9_sample_V_address0 = j_cast2_fu_3245_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_9_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_9_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_9_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_9_q0;
    end else begin
        sample_period_samples_9_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_9_q0;
    end else begin
        sample_period_samples_9_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6))) begin
        this_A_address0 = zext_ln281_fu_4318_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        this_A_address0 = zext_ln280_fu_4025_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        this_A_address0 = zext_ln279_fu_3303_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        this_A_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_address0;
    end else begin
        this_A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        this_A_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        this_A_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_ce0;
    end else begin
        this_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6))) begin
        this_A_d0 = select_ln571_21_fu_4305_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        this_A_d0 = select_ln571_17_fu_4012_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        this_A_d0 = 64'd8796093022208;
    end else begin
        this_A_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln263_reg_6057_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln263_reg_6057_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln263_fu_3265_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        this_A_we0 = 1'b1;
    end else begin
        this_A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        this_b_address0 = zext_ln268_reg_6061_pp0_iter1_reg;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        this_b_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_address0;
    end else begin
        this_b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        this_b_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        this_b_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_b_ce0;
    end else begin
        this_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln263_reg_6057_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        this_b_we0 = 1'b1;
    end else begin
        this_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        this_times_ce0 = 1'b1;
    end else begin
        this_times_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        x_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        x_V_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_address0;
    end else begin
        x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        x_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        x_V_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_ce0;
    end else begin
        x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        x_V_ce1 = 1'b1;
    end else begin
        x_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        x_V_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_x_we0;
    end else begin
        x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln257_fu_3132_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln263_fu_3265_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln263_fu_3265_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage6_subdone)) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (grp_atan2_cordic_float_s_fu_3071_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_i_V_0_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address0;

assign A_i_V_0_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_address1;

assign A_i_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce0;

assign A_i_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_ce1;

assign A_i_V_0_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_d1;

assign A_i_V_0_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_0_we1;

assign A_i_V_1_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address0;

assign A_i_V_1_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_address1;

assign A_i_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce0;

assign A_i_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_ce1;

assign A_i_V_1_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_d1;

assign A_i_V_1_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_i_V_1_we1;

assign A_j_V_0_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address0;

assign A_j_V_0_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_address1;

assign A_j_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce0;

assign A_j_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_ce1;

assign A_j_V_0_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_d1;

assign A_j_V_0_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_0_we1;

assign A_j_V_1_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address0;

assign A_j_V_1_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_address1;

assign A_j_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce0;

assign A_j_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_ce1;

assign A_j_V_1_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_d1;

assign A_j_V_1_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_j_V_1_we1;

assign A_pinv_V_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_address0;

assign A_pinv_V_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_ce0;

assign A_pinv_V_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_d0;

assign A_pinv_V_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_A_pinv_V_we0;

assign F2_3_fu_4057_p2 = (12'd1075 - zext_ln455_3_fu_4030_p1);

assign F2_fu_3724_p2 = (12'd1075 - zext_ln455_fu_3684_p1);

assign LD_11_fu_4907_p1 = p_Result_187_fu_4895_p5[31:0];

assign LD_12_fu_3625_p1 = p_Result_175_fu_3613_p5[31:0];

assign LD_fu_4799_p1 = p_Result_183_fu_4787_p5[31:0];

assign S_V_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_address0;

assign S_V_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_ce0;

assign S_V_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_d0;

assign S_V_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_S_V_we0;

assign UT_V_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_address0;

assign UT_V_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_ce0;

assign UT_V_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_d0;

assign UT_V_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_UT_V_we0;

assign U_V_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address0;

assign U_V_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_address1;

assign U_V_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce0;

assign U_V_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_ce1;

assign U_V_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_d0;

assign U_V_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_U_V_we0;

assign V_V_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address0;

assign V_V_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_address1;

assign V_V_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce0;

assign V_V_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_ce1;

assign V_V_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_d0;

assign V_V_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_V_we0;

assign V_i_V_0_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address0;

assign V_i_V_0_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_address1;

assign V_i_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce0;

assign V_i_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_ce1;

assign V_i_V_0_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_d1;

assign V_i_V_0_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_0_we1;

assign V_i_V_1_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address0;

assign V_i_V_1_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_address1;

assign V_i_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce0;

assign V_i_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_ce1;

assign V_i_V_1_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_d1;

assign V_i_V_1_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_i_V_1_we1;

assign V_j_V_0_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address0;

assign V_j_V_0_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_address1;

assign V_j_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce0;

assign V_j_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_ce1;

assign V_j_V_0_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_d1;

assign V_j_V_0_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_0_we1;

assign V_j_V_1_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address0;

assign V_j_V_1_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_address1;

assign V_j_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce0;

assign V_j_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_ce1;

assign V_j_V_1_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_d1;

assign V_j_V_1_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_V_j_V_1_we1;

assign add_ln22_3_fu_3152_p2 = (i_reg_3001 + 5'd13);

assign add_ln22_5_fu_3163_p2 = (add_ln22_3_fu_3152_p2 + trunc_ln22_1_reg_5478);

assign add_ln22_fu_3142_p2 = ($signed(zext_ln22_fu_3138_p1) + $signed(6'd45));

assign add_ln257_fu_3126_p2 = (i_reg_3001 + 5'd1);

assign add_ln263_fu_3239_p2 = (ap_phi_mux_j_phi_fu_3017_p4 + 4'd1);

assign add_ln266_fu_3271_p2 = (tmp_20_reg_6047 + j_cast_fu_3261_p1);

assign add_ln280_fu_4020_p2 = (sub_ln279_reg_6131_pp0_iter2_reg + 9'd1);

assign add_ln281_fu_4313_p2 = (sub_ln279_reg_6131_pp0_iter2_reg + 9'd2);

assign add_ln30_fu_3182_p2 = ($signed(add_ln22_5_fu_3163_p2) + $signed(5'd20));

assign add_ln415_18_fu_4282_p2 = ($signed(sext_ln591_2_fu_4252_p1) + $signed(zext_ln415_19_fu_4278_p1));

assign add_ln415_fu_3989_p2 = ($signed(sext_ln591_fu_3959_p1) + $signed(zext_ln415_18_fu_3985_p1));

assign add_ln581_5_fu_4073_p2 = ($signed(F2_3_fu_4057_p2) + $signed(12'd4053));

assign add_ln581_fu_3740_p2 = ($signed(F2_fu_3724_p2) + $signed(12'd4053));

assign add_ln591_4_fu_4256_p2 = ($signed(trunc_ln575_3_reg_6332) + $signed(11'd2004));

assign add_ln591_fu_3963_p2 = ($signed(trunc_ln575_reg_6261) + $signed(11'd2004));

assign add_ln954_3_fu_4689_p2 = ($signed(sub_ln944_3_fu_4565_p2) + $signed(32'd4294967271));

assign add_ln954_4_fu_3535_p2 = ($signed(sub_ln944_4_reg_6216) + $signed(32'd4294967271));

assign add_ln954_fu_4497_p2 = ($signed(sub_ln944_fu_4373_p2) + $signed(32'd4294967271));

assign add_ln964_3_fu_4882_p2 = (sub_ln964_3_fu_4877_p2 + select_ln943_3_fu_4869_p3);

assign add_ln964_4_fu_3600_p2 = (sub_ln964_4_fu_3595_p2 + select_ln943_4_fu_3587_p3);

assign add_ln964_fu_4774_p2 = (sub_ln964_fu_4769_p2 + select_ln943_fu_4761_p3);

assign and_ln581_3_fu_4167_p2 = (xor_ln582_3_fu_4161_p2 & icmp_ln581_4_fu_4067_p2);

assign and_ln581_fu_3836_p2 = (xor_ln582_fu_3830_p2 & icmp_ln581_fu_3734_p2);

assign and_ln582_3_fu_4150_p2 = (xor_ln571_3_fu_4145_p2 & icmp_ln582_3_fu_4093_p2);

assign and_ln582_fu_3818_p2 = (xor_ln571_fu_3812_p2 & icmp_ln582_fu_3760_p2);

assign and_ln603_3_fu_4185_p2 = (xor_ln581_3_fu_4179_p2 & icmp_ln603_3_fu_4119_p2);

assign and_ln603_fu_3854_p2 = (xor_ln581_fu_3848_p2 & icmp_ln603_fu_3786_p2);

assign and_ln949_10_fu_4629_p2 = (tmp_V_33_fu_4535_p3 & or_ln949_fu_4623_p2);

assign and_ln949_11_fu_3455_p2 = (tmp_V_31_fu_3363_p3 & or_ln949_6_fu_3449_p2);

assign and_ln949_7_fu_4477_p2 = (xor_ln949_fu_4457_p2 & p_Result_182_fu_4463_p3);

assign and_ln949_8_fu_4669_p2 = (xor_ln949_3_fu_4649_p2 & p_Result_186_fu_4655_p3);

assign and_ln949_9_fu_3495_p2 = (xor_ln949_4_fu_3475_p2 & p_Result_174_fu_3481_p3);

assign and_ln949_fu_4437_p2 = (tmp_V_32_fu_4343_p3 & or_ln949_5_fu_4431_p2);

assign angle_4_fu_3339_p2 = (angle_fu_3317_p4 + zext_ln415_fu_3335_p1);

assign angle_fu_3317_p4 = {{r_V_fu_3311_p2[106:43]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln586_3_fu_4221_p2 = $signed(man_V_20_reg_6325) >>> zext_ln586_5_fu_4218_p1;

assign ashr_ln586_fu_3928_p2 = $signed(man_V_reg_6254) >>> zext_ln586_fu_3925_p1;

assign bitcast_ln702_4_fu_4226_p1 = cos_val_reg_6243;

assign bitcast_ln702_fu_3933_p1 = sin_val_reg_6237;

assign bitcast_ln744_3_fu_3629_p1 = LD_12_fu_3625_p1;

assign bitcast_ln744_4_fu_4911_p1 = LD_11_fu_4907_p1;

assign bitcast_ln744_fu_4803_p1 = LD_fu_4799_p1;

assign buffer_idx_6_fu_3188_p3 = ((tmp_122_fu_3174_p3[0:0] == 1'b1) ? add_ln30_fu_3182_p2 : add_ln22_5_fu_3163_p2);

assign buffer_idx_7_fu_3196_p3 = ((icmp_ln24_fu_3168_p2[0:0] == 1'b1) ? trunc_ln22_reg_5473 : buffer_idx_6_fu_3188_p3);

assign buffer_idx_fu_3158_p2 = ($signed(sext_ln22_1_fu_3148_p1) + $signed(sext_ln22_reg_5468));

assign exp_tmp_fu_3674_p4 = {{ireg_fu_3658_p1[62:52]}};

assign grp_atan2_cordic_float_s_fu_3071_ap_start = grp_atan2_cordic_float_s_fu_3071_ap_start_reg;

assign grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start = grp_computeLeastSquaresSolution_160_3_s_fu_3024_ap_start_reg;

assign grp_fu_2133_p_ce = 1'b1;

assign grp_fu_2133_p_din0 = grp_fu_3098_p0;

assign grp_fu_3098_ce = 1'b1;

assign grp_fu_3098_p1 = grp_fu_2133_p_dout0;

assign grp_generic_sincos_float_s_fu_3079_ap_start = grp_generic_sincos_float_s_fu_3079_ap_start_reg;

assign grp_generic_sincos_float_s_fu_3079_t_in = ((icmp_ln935_4_reg_6205[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_3_fu_3629_p1);

assign icmp_ln24_fu_3168_p2 = (($signed(buffer_idx_fu_3158_p2) < $signed(7'd108)) ? 1'b1 : 1'b0);

assign icmp_ln257_fu_3132_p2 = ((i_reg_3001 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln263_fu_3265_p2 = ((ap_phi_mux_j_phi_fu_3017_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln571_3_fu_3916_p2 = ((trunc_ln555_3_fu_3890_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_3718_p2 = ((trunc_ln555_fu_3662_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_4_fu_4067_p2 = (($signed(F2_3_fu_4057_p2) > $signed(12'd43)) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_3734_p2 = (($signed(F2_fu_3724_p2) > $signed(12'd43)) ? 1'b1 : 1'b0);

assign icmp_ln582_3_fu_4093_p2 = ((F2_3_fu_4057_p2 == 12'd43) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_3760_p2 = ((F2_fu_3724_p2 == 12'd43) ? 1'b1 : 1'b0);

assign icmp_ln585_3_fu_4103_p2 = ((sh_amt_3_fu_4085_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_3770_p2 = ((sh_amt_fu_3752_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln591_4_fu_4139_p2 = (($signed(add_ln581_5_fu_4073_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln591_fu_3806_p2 = (($signed(add_ln581_fu_3740_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln603_3_fu_4119_p2 = ((tmp_133_fu_4109_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_3786_p2 = ((tmp_130_fu_3776_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_3_fu_4515_p2 = ((x_V_q0 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_4_fu_3353_p2 = ((angle_4_reg_6192 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_4323_p2 = ((x_V_q1 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln946_3_fu_4587_p2 = (($signed(tmp_119_fu_4577_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln946_4_fu_3413_p2 = (($signed(tmp_126_fu_3403_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln946_fu_4395_p2 = (($signed(tmp_115_fu_4385_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln949_3_fu_4635_p2 = ((and_ln949_10_fu_4629_p2 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln949_4_fu_3461_p2 = ((and_ln949_11_fu_3455_p2 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln949_fu_4443_p2 = ((and_ln949_fu_4437_p2 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln954_3_fu_4663_p2 = (($signed(lsb_index_6_fu_4571_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln954_4_fu_3489_p2 = (($signed(lsb_index_7_fu_3397_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln954_fu_4471_p2 = (($signed(lsb_index_fu_4379_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign idxprom_fu_3101_p1 = p_read;

assign ireg_3_fu_3886_p1 = grp_fu_2133_p_dout0;

assign ireg_fu_3658_p1 = grp_fu_2133_p_dout0;

assign j_cast2_fu_3245_p1 = ap_phi_mux_j_phi_fu_3017_p4;

assign j_cast_fu_3261_p1 = ap_phi_mux_j_phi_fu_3017_p4;

assign l_6_fu_4561_p1 = tmp_15_fu_4553_p3[31:0];

assign l_7_fu_3387_p1 = tmp_s_fu_3379_p3[31:0];

assign l_fu_4369_p1 = tmp_fu_4361_p3[31:0];

assign lsb_index_6_fu_4571_p2 = ($signed(sub_ln944_3_fu_4565_p2) + $signed(32'd4294967272));

assign lsb_index_7_fu_3397_p2 = ($signed(sub_ln944_4_fu_3391_p2) + $signed(32'd4294967272));

assign lsb_index_fu_4379_p2 = ($signed(sub_ln944_fu_4373_p2) + $signed(32'd4294967272));

assign lshr_ln947_3_fu_4607_p2 = 64'd18446744073709551615 >> zext_ln947_3_fu_4603_p1;

assign lshr_ln947_4_fu_3433_p2 = 64'd18446744073709551615 >> zext_ln947_4_fu_3429_p1;

assign lshr_ln947_fu_4415_p2 = 64'd18446744073709551615 >> zext_ln947_fu_4411_p1;

assign lshr_ln954_3_fu_4826_p2 = tmp_V_33_reg_6433 >> zext_ln954_3_fu_4823_p1;

assign lshr_ln954_4_fu_3544_p2 = tmp_V_31_reg_6210 >> zext_ln954_4_fu_3540_p1;

assign lshr_ln954_fu_4718_p2 = tmp_V_32_reg_6392 >> zext_ln954_fu_4715_p1;

assign m_38_fu_4733_p2 = (m_fu_4723_p3 + zext_ln961_fu_4730_p1);

assign m_41_fu_4831_p3 = ((icmp_ln954_3_reg_6439[0:0] == 1'b1) ? lshr_ln954_3_fu_4826_p2 : shl_ln955_3_fu_4818_p2);

assign m_42_fu_4841_p2 = (m_41_fu_4831_p3 + zext_ln961_3_fu_4838_p1);

assign m_44_fu_3549_p3 = ((icmp_ln954_4_reg_6222[0:0] == 1'b1) ? lshr_ln954_4_fu_3544_p2 : shl_ln955_4_fu_3530_p2);

assign m_45_fu_3559_p2 = (m_44_fu_3549_p3 + zext_ln961_4_fu_3556_p1);

assign m_48_fu_3565_p4 = {{m_45_fu_3559_p2[63:1]}};

assign m_49_fu_4739_p4 = {{m_38_fu_4733_p2[63:1]}};

assign m_50_fu_4847_p4 = {{m_42_fu_4841_p2[63:1]}};

assign m_fu_4723_p3 = ((icmp_ln954_reg_6398[0:0] == 1'b1) ? lshr_ln954_fu_4718_p2 : shl_ln955_fu_4710_p2);

assign man_V_15_fu_3704_p2 = (54'd0 - zext_ln569_fu_3700_p1);

assign man_V_19_fu_4044_p2 = (54'd0 - zext_ln569_3_fu_4040_p1);

assign man_V_20_fu_4050_p3 = ((p_Result_178_reg_6301[0:0] == 1'b1) ? man_V_19_fu_4044_p2 : zext_ln569_3_fu_4040_p1);

assign man_V_fu_3710_p3 = ((p_Result_176_fu_3666_p3[0:0] == 1'b1) ? man_V_15_fu_3704_p2 : zext_ln569_fu_3700_p1);

assign matA_V_0_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address0;

assign matA_V_0_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_address1;

assign matA_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce0;

assign matA_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_ce1;

assign matA_V_0_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d0;

assign matA_V_0_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_d1;

assign matA_V_0_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we0;

assign matA_V_0_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_0_we1;

assign matA_V_1_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address0;

assign matA_V_1_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_address1;

assign matA_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce0;

assign matA_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_ce1;

assign matA_V_1_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d0;

assign matA_V_1_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_d1;

assign matA_V_1_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we0;

assign matA_V_1_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matA_V_1_we1;

assign matU_V_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_address0;

assign matU_V_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_ce0;

assign matU_V_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_d0;

assign matU_V_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matU_V_we0;

assign matV_V_0_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address0;

assign matV_V_0_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_address1;

assign matV_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce0;

assign matV_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_ce1;

assign matV_V_0_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d0;

assign matV_V_0_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_d1;

assign matV_V_0_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we0;

assign matV_V_0_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_0_we1;

assign matV_V_1_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address0;

assign matV_V_1_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_address1;

assign matV_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce0;

assign matV_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_ce1;

assign matV_V_1_d0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d0;

assign matV_V_1_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_d1;

assign matV_V_1_we0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we0;

assign matV_V_1_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_matV_V_1_we1;

assign or_ln571_11_fu_3874_p2 = (and_ln582_fu_3818_p2 | and_ln581_fu_3836_p2);

assign or_ln571_12_fu_3880_p2 = (or_ln571_fu_3868_p2 | or_ln571_11_fu_3874_p2);

assign or_ln571_13_fu_4198_p2 = (icmp_ln571_3_reg_6317 | and_ln603_3_fu_4185_p2);

assign or_ln571_14_fu_4203_p2 = (and_ln582_3_fu_4150_p2 | and_ln581_3_fu_4167_p2);

assign or_ln571_15_fu_4209_p2 = (or_ln571_14_fu_4203_p2 | or_ln571_13_fu_4198_p2);

assign or_ln571_fu_3868_p2 = (icmp_ln571_fu_3718_p2 | and_ln603_fu_3854_p2);

assign or_ln581_3_fu_4173_p2 = (or_ln582_3_fu_4156_p2 | icmp_ln581_4_fu_4067_p2);

assign or_ln581_fu_3842_p2 = (or_ln582_fu_3824_p2 | icmp_ln581_fu_3734_p2);

assign or_ln582_3_fu_4156_p2 = (icmp_ln582_3_fu_4093_p2 | icmp_ln571_3_reg_6317);

assign or_ln582_fu_3824_p2 = (icmp_ln582_fu_3760_p2 | icmp_ln571_fu_3718_p2);

assign or_ln949_5_fu_4431_p2 = (shl_ln949_fu_4425_p2 | lshr_ln947_fu_4415_p2);

assign or_ln949_6_fu_3449_p2 = (shl_ln949_4_fu_3443_p2 | lshr_ln947_4_fu_3433_p2);

assign or_ln949_fu_4623_p2 = (shl_ln949_3_fu_4617_p2 | lshr_ln947_3_fu_4607_p2);

assign p_Result_160_fu_4861_p3 = m_42_fu_4841_p2[32'd25];

assign p_Result_164_fu_3579_p3 = m_45_fu_3559_p2[32'd25];

assign p_Result_168_fu_3972_p3 = man_V_reg_6254[zext_ln591_fu_3968_p1];

assign p_Result_171_fu_4265_p3 = man_V_20_reg_6325[zext_ln591_4_fu_4261_p1];

integer ap_tvar_int_0;

always @ (tmp_V_31_fu_3363_p3) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            p_Result_173_fu_3369_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_173_fu_3369_p4[ap_tvar_int_0] = tmp_V_31_fu_3363_p3[63 - ap_tvar_int_0];
        end
    end
end

assign p_Result_174_fu_3481_p3 = tmp_V_31_fu_3363_p3[lsb_index_7_fu_3397_p2];

assign p_Result_175_fu_3613_p5 = {{zext_ln962_4_fu_3575_p1[63:32]}, {tmp_17_fu_3606_p3}, {zext_ln962_4_fu_3575_p1[22:0]}};

assign p_Result_176_fu_3666_p3 = ireg_fu_3658_p1[32'd63];

assign p_Result_177_fu_3692_p3 = {{1'd1}, {trunc_ln565_fu_3688_p1}};

assign p_Result_179_fu_4033_p3 = {{1'd1}, {trunc_ln565_3_reg_6312}};

assign p_Result_180_fu_4329_p3 = x_V_q1[32'd63];

integer ap_tvar_int_1;

always @ (tmp_V_32_fu_4343_p3) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            p_Result_181_fu_4351_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_181_fu_4351_p4[ap_tvar_int_1] = tmp_V_32_fu_4343_p3[63 - ap_tvar_int_1];
        end
    end
end

assign p_Result_182_fu_4463_p3 = tmp_V_32_fu_4343_p3[lsb_index_fu_4379_p2];

assign p_Result_183_fu_4787_p5 = {{zext_ln962_fu_4749_p1[63:32]}, {tmp_14_fu_4780_p3}, {zext_ln962_fu_4749_p1[22:0]}};

assign p_Result_184_fu_4521_p3 = x_V_q0[32'd63];

integer ap_tvar_int_2;

always @ (tmp_V_33_fu_4535_p3) begin
    for (ap_tvar_int_2 = 64 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 - 0) begin
            p_Result_185_fu_4543_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            p_Result_185_fu_4543_p4[ap_tvar_int_2] = tmp_V_33_fu_4535_p3[63 - ap_tvar_int_2];
        end
    end
end

assign p_Result_186_fu_4655_p3 = tmp_V_33_fu_4535_p3[lsb_index_6_fu_4571_p2];

assign p_Result_187_fu_4895_p5 = {{zext_ln962_3_fu_4857_p1[63:32]}, {tmp_16_fu_4888_p3}, {zext_ln962_3_fu_4857_p1[22:0]}};

assign p_Result_s_fu_4753_p3 = m_38_fu_4733_p2[32'd25];

assign qb_3_fu_4272_p3 = ((icmp_ln591_4_reg_6347[0:0] == 1'b1) ? p_Result_178_reg_6301 : p_Result_171_fu_4265_p3);

assign qb_fu_3979_p3 = ((icmp_ln591_reg_6276[0:0] == 1'b1) ? p_Result_176_reg_6249 : p_Result_168_fu_3972_p3);

assign r_V_fu_3311_p1 = 107'd2763374121886110;

assign select_ln571_15_fu_3995_p3 = ((and_ln581_reg_6281[0:0] == 1'b1) ? add_ln415_fu_3989_p2 : sext_ln585_fu_3922_p1);

assign select_ln571_16_fu_4006_p3 = ((or_ln571_reg_6291[0:0] == 1'b1) ? select_ln571_reg_6286 : sext_ln571_fu_4002_p1);

assign select_ln571_17_fu_4012_p3 = ((or_ln571_12_reg_6296[0:0] == 1'b1) ? select_ln571_16_fu_4006_p3 : 64'd0);

assign select_ln571_18_fu_4191_p3 = ((icmp_ln571_3_reg_6317[0:0] == 1'b1) ? 64'd0 : shl_ln604_2_fu_4133_p2);

assign select_ln571_19_fu_4288_p3 = ((and_ln581_3_reg_6352[0:0] == 1'b1) ? add_ln415_18_fu_4282_p2 : sext_ln585_2_fu_4215_p1);

assign select_ln571_20_fu_4299_p3 = ((or_ln571_13_reg_6362[0:0] == 1'b1) ? select_ln571_18_reg_6357 : sext_ln571_3_fu_4295_p1);

assign select_ln571_21_fu_4305_p3 = ((or_ln571_15_reg_6367[0:0] == 1'b1) ? select_ln571_20_fu_4299_p3 : 64'd0);

assign select_ln571_fu_3860_p3 = ((icmp_ln571_fu_3718_p2[0:0] == 1'b1) ? 64'd0 : shl_ln604_fu_3800_p2);

assign select_ln585_2_fu_4245_p3 = ((icmp_ln585_3_reg_6337[0:0] == 1'b1) ? ashr_ln586_3_fu_4221_p2 : trunc_ln588_3_cast_fu_4237_p3);

assign select_ln585_fu_3952_p3 = ((icmp_ln585_reg_6266[0:0] == 1'b1) ? ashr_ln586_fu_3928_p2 : trunc_ln588_cast_fu_3944_p3);

assign select_ln935_3_fu_4915_p3 = ((icmp_ln935_3_reg_6423[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_4_fu_4911_p1);

assign select_ln935_fu_4807_p3 = ((icmp_ln935_reg_6382[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_fu_4803_p1);

assign select_ln943_3_fu_4869_p3 = ((p_Result_160_fu_4861_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln943_4_fu_3587_p3 = ((p_Result_164_fu_3579_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln943_fu_4761_p3 = ((p_Result_s_fu_4753_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln946_3_fu_4681_p3 = ((icmp_ln946_3_fu_4587_p2[0:0] == 1'b1) ? icmp_ln949_3_fu_4635_p2 : p_Result_186_fu_4655_p3);

assign select_ln946_4_fu_3501_p3 = ((icmp_ln946_4_fu_3413_p2[0:0] == 1'b1) ? icmp_ln949_4_fu_3461_p2 : p_Result_174_fu_3481_p3);

assign select_ln946_fu_4489_p3 = ((icmp_ln946_fu_4395_p2[0:0] == 1'b1) ? icmp_ln949_fu_4443_p2 : p_Result_182_fu_4463_p3);

assign select_ln954_10_fu_3509_p3 = ((icmp_ln954_4_fu_3489_p2[0:0] == 1'b1) ? select_ln946_4_fu_3501_p3 : and_ln949_9_fu_3495_p2);

assign select_ln954_8_fu_4695_p3 = ((icmp_ln954_3_fu_4663_p2[0:0] == 1'b1) ? select_ln946_3_fu_4681_p3 : and_ln949_8_fu_4669_p2);

assign select_ln954_fu_4503_p3 = ((icmp_ln954_fu_4471_p2[0:0] == 1'b1) ? select_ln946_fu_4489_p3 : and_ln949_7_fu_4477_p2);

assign sext_ln22_1_fu_3148_p1 = $signed(add_ln22_fu_3142_p2);

assign sext_ln22_fu_3110_p0 = sliding_window_front_ptr_s;

assign sext_ln22_fu_3110_p1 = sext_ln22_fu_3110_p0;

assign sext_ln571_3_fu_4295_p1 = $signed(select_ln571_19_fu_4288_p3);

assign sext_ln571_fu_4002_p1 = $signed(select_ln571_15_fu_3995_p3);

assign sext_ln583_3_fu_4099_p1 = man_V_20_fu_4050_p3;

assign sext_ln583_fu_3766_p1 = man_V_fu_3710_p3;

assign sext_ln585_2_fu_4215_p1 = man_V_20_reg_6325;

assign sext_ln585_fu_3922_p1 = man_V_reg_6254;

assign sext_ln591_2_fu_4252_p1 = $signed(select_ln585_2_fu_4245_p3);

assign sext_ln591_fu_3959_p1 = $signed(select_ln585_fu_3952_p3);

assign sh_amt_3_fu_4085_p3 = ((icmp_ln581_4_fu_4067_p2[0:0] == 1'b1) ? add_ln581_5_fu_4073_p2 : sub_ln581_3_fu_4079_p2);

assign sh_amt_fu_3752_p3 = ((icmp_ln581_fu_3734_p2[0:0] == 1'b1) ? add_ln581_fu_3740_p2 : sub_ln581_fu_3746_p2);

assign shl_ln604_2_fu_4133_p2 = sext_ln583_3_fu_4099_p1 << zext_ln604_3_fu_4129_p1;

assign shl_ln604_fu_3800_p2 = sext_ln583_fu_3766_p1 << zext_ln604_fu_3796_p1;

assign shl_ln949_3_fu_4617_p2 = 64'd1 << zext_ln949_3_fu_4613_p1;

assign shl_ln949_4_fu_3443_p2 = 64'd1 << zext_ln949_4_fu_3439_p1;

assign shl_ln949_fu_4425_p2 = 64'd1 << zext_ln949_fu_4421_p1;

assign shl_ln955_3_fu_4818_p2 = tmp_V_33_reg_6433 << zext_ln955_3_fu_4815_p1;

assign shl_ln955_4_fu_3530_p2 = tmp_V_31_reg_6210 << zext_ln955_4_fu_3526_p1;

assign shl_ln955_fu_4710_p2 = tmp_V_32_reg_6392 << zext_ln955_fu_4707_p1;

assign shl_ln_fu_3289_p3 = {{trunc_ln279_fu_3285_p1}, {2'd0}};

assign sigma_V_address0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address0;

assign sigma_V_address1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_address1;

assign sigma_V_ce0 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce0;

assign sigma_V_ce1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_ce1;

assign sigma_V_d1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_d1;

assign sigma_V_we1 = grp_computeLeastSquaresSolution_160_3_s_fu_3024_sigma_V_we1;

assign sliding_window_buffer_samples_sample_V_0_0_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_10_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_11_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_1_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_2_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_3_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_4_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_5_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_6_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_7_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_8_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_0_9_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_0_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_10_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_11_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_1_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_2_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_3_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_4_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_5_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_6_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_7_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_8_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_1_9_address0 = zext_ln34_fu_3203_p1;

assign sliding_window_buffer_samples_sample_V_2_0_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_10_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_11_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_1_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_2_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_3_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_4_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_5_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_6_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_7_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_8_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_2_9_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_0_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_10_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_11_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_1_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_2_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_3_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_4_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_5_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_6_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_7_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_8_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_3_9_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_0_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_10_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_11_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_1_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_2_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_3_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_4_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_5_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_6_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_7_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_8_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_4_9_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_0_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_10_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_11_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_1_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_2_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_3_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_4_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_5_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_6_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_7_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_8_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_5_9_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_0_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_10_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_11_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_1_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_2_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_3_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_4_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_5_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_6_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_7_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_8_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_6_9_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_0_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_10_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_11_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_1_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_2_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_3_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_4_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_5_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_6_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_7_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_8_address0 = zext_ln34_reg_5491;

assign sliding_window_buffer_samples_sample_V_7_9_address0 = zext_ln34_reg_5491;

assign sub_ln279_fu_3297_p2 = (shl_ln_fu_3289_p3 - zext_ln268_1_fu_3281_p1);

assign sub_ln581_3_fu_4079_p2 = (12'd43 - F2_3_fu_4057_p2);

assign sub_ln581_fu_3746_p2 = (12'd43 - F2_fu_3724_p2);

assign sub_ln944_3_fu_4565_p2 = (32'd64 - l_6_fu_4561_p1);

assign sub_ln944_4_fu_3391_p2 = (32'd64 - l_7_fu_3387_p1);

assign sub_ln944_fu_4373_p2 = (32'd64 - l_fu_4369_p1);

assign sub_ln947_3_fu_4597_p2 = ($signed(7'd89) - $signed(trunc_ln947_3_fu_4593_p1));

assign sub_ln947_4_fu_3423_p2 = ($signed(7'd89) - $signed(trunc_ln947_4_fu_3419_p1));

assign sub_ln947_fu_4405_p2 = ($signed(7'd89) - $signed(trunc_ln947_fu_4401_p1));

assign sub_ln955_3_fu_4675_p2 = (32'd25 - sub_ln944_3_fu_4565_p2);

assign sub_ln955_4_fu_3521_p2 = (32'd25 - sub_ln944_4_reg_6216);

assign sub_ln955_fu_4483_p2 = (32'd25 - sub_ln944_fu_4373_p2);

assign sub_ln964_3_fu_4877_p2 = (8'd21 - trunc_ln943_3_reg_6459);

assign sub_ln964_4_fu_3595_p2 = (8'd21 - trunc_ln943_4_reg_6232);

assign sub_ln964_fu_4769_p2 = (8'd21 - trunc_ln943_reg_6418);

assign this_b_d0 = {{mag_samples_sample_V_q0}, {43'd0}};

assign this_times_address0 = zext_ln268_fu_3276_p1;

assign tmp_115_fu_4385_p4 = {{lsb_index_fu_4379_p2[31:1]}};

assign tmp_116_fu_4449_p3 = lsb_index_fu_4379_p2[32'd31];

assign tmp_119_fu_4577_p4 = {{lsb_index_6_fu_4571_p2[31:1]}};

assign tmp_120_fu_4641_p3 = lsb_index_6_fu_4571_p2[32'd31];

assign tmp_122_fu_3174_p3 = buffer_idx_fu_3158_p2[32'd6];

assign tmp_124_fu_3327_p3 = r_V_fu_3311_p2[32'd42];

assign tmp_126_fu_3403_p4 = {{lsb_index_7_fu_3397_p2[31:1]}};

assign tmp_127_fu_3467_p3 = lsb_index_7_fu_3397_p2[32'd31];

assign tmp_130_fu_3776_p4 = {{sh_amt_fu_3752_p3[11:6]}};

assign tmp_131_fu_3936_p3 = bitcast_ln702_fu_3933_p1[32'd31];

assign tmp_133_fu_4109_p4 = {{sh_amt_3_fu_4085_p3[11:6]}};

assign tmp_134_fu_4229_p3 = bitcast_ln702_4_fu_4226_p1[32'd31];

assign tmp_14_fu_4780_p3 = {{p_Result_180_reg_6387}, {add_ln964_fu_4774_p2}};


always @ (p_Result_185_fu_4543_p4) begin
    if (p_Result_185_fu_4543_p4[0] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd0;
    end else if (p_Result_185_fu_4543_p4[1] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd1;
    end else if (p_Result_185_fu_4543_p4[2] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd2;
    end else if (p_Result_185_fu_4543_p4[3] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd3;
    end else if (p_Result_185_fu_4543_p4[4] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd4;
    end else if (p_Result_185_fu_4543_p4[5] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd5;
    end else if (p_Result_185_fu_4543_p4[6] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd6;
    end else if (p_Result_185_fu_4543_p4[7] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd7;
    end else if (p_Result_185_fu_4543_p4[8] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd8;
    end else if (p_Result_185_fu_4543_p4[9] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd9;
    end else if (p_Result_185_fu_4543_p4[10] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd10;
    end else if (p_Result_185_fu_4543_p4[11] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd11;
    end else if (p_Result_185_fu_4543_p4[12] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd12;
    end else if (p_Result_185_fu_4543_p4[13] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd13;
    end else if (p_Result_185_fu_4543_p4[14] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd14;
    end else if (p_Result_185_fu_4543_p4[15] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd15;
    end else if (p_Result_185_fu_4543_p4[16] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd16;
    end else if (p_Result_185_fu_4543_p4[17] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd17;
    end else if (p_Result_185_fu_4543_p4[18] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd18;
    end else if (p_Result_185_fu_4543_p4[19] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd19;
    end else if (p_Result_185_fu_4543_p4[20] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd20;
    end else if (p_Result_185_fu_4543_p4[21] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd21;
    end else if (p_Result_185_fu_4543_p4[22] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd22;
    end else if (p_Result_185_fu_4543_p4[23] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd23;
    end else if (p_Result_185_fu_4543_p4[24] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd24;
    end else if (p_Result_185_fu_4543_p4[25] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd25;
    end else if (p_Result_185_fu_4543_p4[26] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd26;
    end else if (p_Result_185_fu_4543_p4[27] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd27;
    end else if (p_Result_185_fu_4543_p4[28] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd28;
    end else if (p_Result_185_fu_4543_p4[29] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd29;
    end else if (p_Result_185_fu_4543_p4[30] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd30;
    end else if (p_Result_185_fu_4543_p4[31] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd31;
    end else if (p_Result_185_fu_4543_p4[32] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd32;
    end else if (p_Result_185_fu_4543_p4[33] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd33;
    end else if (p_Result_185_fu_4543_p4[34] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd34;
    end else if (p_Result_185_fu_4543_p4[35] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd35;
    end else if (p_Result_185_fu_4543_p4[36] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd36;
    end else if (p_Result_185_fu_4543_p4[37] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd37;
    end else if (p_Result_185_fu_4543_p4[38] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd38;
    end else if (p_Result_185_fu_4543_p4[39] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd39;
    end else if (p_Result_185_fu_4543_p4[40] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd40;
    end else if (p_Result_185_fu_4543_p4[41] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd41;
    end else if (p_Result_185_fu_4543_p4[42] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd42;
    end else if (p_Result_185_fu_4543_p4[43] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd43;
    end else if (p_Result_185_fu_4543_p4[44] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd44;
    end else if (p_Result_185_fu_4543_p4[45] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd45;
    end else if (p_Result_185_fu_4543_p4[46] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd46;
    end else if (p_Result_185_fu_4543_p4[47] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd47;
    end else if (p_Result_185_fu_4543_p4[48] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd48;
    end else if (p_Result_185_fu_4543_p4[49] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd49;
    end else if (p_Result_185_fu_4543_p4[50] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd50;
    end else if (p_Result_185_fu_4543_p4[51] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd51;
    end else if (p_Result_185_fu_4543_p4[52] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd52;
    end else if (p_Result_185_fu_4543_p4[53] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd53;
    end else if (p_Result_185_fu_4543_p4[54] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd54;
    end else if (p_Result_185_fu_4543_p4[55] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd55;
    end else if (p_Result_185_fu_4543_p4[56] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd56;
    end else if (p_Result_185_fu_4543_p4[57] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd57;
    end else if (p_Result_185_fu_4543_p4[58] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd58;
    end else if (p_Result_185_fu_4543_p4[59] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd59;
    end else if (p_Result_185_fu_4543_p4[60] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd60;
    end else if (p_Result_185_fu_4543_p4[61] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd61;
    end else if (p_Result_185_fu_4543_p4[62] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd62;
    end else if (p_Result_185_fu_4543_p4[63] == 1'b1) begin
        tmp_15_fu_4553_p3 = 64'd63;
    end else begin
        tmp_15_fu_4553_p3 = 64'd64;
    end
end

assign tmp_16_fu_4888_p3 = {{p_Result_184_reg_6428}, {add_ln964_3_fu_4882_p2}};

assign tmp_17_fu_3606_p3 = {{p_Result_172_reg_6199}, {add_ln964_4_fu_3600_p2}};

assign tmp_20_fu_3231_p3 = {{i_reg_3001}, {3'd0}};

assign tmp_V_27_fu_4529_p2 = (64'd0 - x_V_q0);

assign tmp_V_29_fu_3358_p2 = (64'd0 - angle_4_reg_6192);

assign tmp_V_31_fu_3363_p3 = ((p_Result_172_reg_6199[0:0] == 1'b1) ? tmp_V_29_fu_3358_p2 : angle_4_reg_6192);

assign tmp_V_32_fu_4343_p3 = ((p_Result_180_fu_4329_p3[0:0] == 1'b1) ? tmp_V_fu_4337_p2 : x_V_q1);

assign tmp_V_33_fu_4535_p3 = ((p_Result_184_fu_4521_p3[0:0] == 1'b1) ? tmp_V_27_fu_4529_p2 : x_V_q0);

assign tmp_V_fu_4337_p2 = (64'd0 - x_V_q1);


always @ (p_Result_181_fu_4351_p4) begin
    if (p_Result_181_fu_4351_p4[0] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd0;
    end else if (p_Result_181_fu_4351_p4[1] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd1;
    end else if (p_Result_181_fu_4351_p4[2] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd2;
    end else if (p_Result_181_fu_4351_p4[3] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd3;
    end else if (p_Result_181_fu_4351_p4[4] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd4;
    end else if (p_Result_181_fu_4351_p4[5] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd5;
    end else if (p_Result_181_fu_4351_p4[6] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd6;
    end else if (p_Result_181_fu_4351_p4[7] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd7;
    end else if (p_Result_181_fu_4351_p4[8] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd8;
    end else if (p_Result_181_fu_4351_p4[9] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd9;
    end else if (p_Result_181_fu_4351_p4[10] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd10;
    end else if (p_Result_181_fu_4351_p4[11] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd11;
    end else if (p_Result_181_fu_4351_p4[12] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd12;
    end else if (p_Result_181_fu_4351_p4[13] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd13;
    end else if (p_Result_181_fu_4351_p4[14] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd14;
    end else if (p_Result_181_fu_4351_p4[15] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd15;
    end else if (p_Result_181_fu_4351_p4[16] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd16;
    end else if (p_Result_181_fu_4351_p4[17] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd17;
    end else if (p_Result_181_fu_4351_p4[18] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd18;
    end else if (p_Result_181_fu_4351_p4[19] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd19;
    end else if (p_Result_181_fu_4351_p4[20] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd20;
    end else if (p_Result_181_fu_4351_p4[21] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd21;
    end else if (p_Result_181_fu_4351_p4[22] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd22;
    end else if (p_Result_181_fu_4351_p4[23] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd23;
    end else if (p_Result_181_fu_4351_p4[24] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd24;
    end else if (p_Result_181_fu_4351_p4[25] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd25;
    end else if (p_Result_181_fu_4351_p4[26] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd26;
    end else if (p_Result_181_fu_4351_p4[27] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd27;
    end else if (p_Result_181_fu_4351_p4[28] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd28;
    end else if (p_Result_181_fu_4351_p4[29] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd29;
    end else if (p_Result_181_fu_4351_p4[30] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd30;
    end else if (p_Result_181_fu_4351_p4[31] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd31;
    end else if (p_Result_181_fu_4351_p4[32] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd32;
    end else if (p_Result_181_fu_4351_p4[33] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd33;
    end else if (p_Result_181_fu_4351_p4[34] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd34;
    end else if (p_Result_181_fu_4351_p4[35] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd35;
    end else if (p_Result_181_fu_4351_p4[36] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd36;
    end else if (p_Result_181_fu_4351_p4[37] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd37;
    end else if (p_Result_181_fu_4351_p4[38] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd38;
    end else if (p_Result_181_fu_4351_p4[39] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd39;
    end else if (p_Result_181_fu_4351_p4[40] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd40;
    end else if (p_Result_181_fu_4351_p4[41] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd41;
    end else if (p_Result_181_fu_4351_p4[42] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd42;
    end else if (p_Result_181_fu_4351_p4[43] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd43;
    end else if (p_Result_181_fu_4351_p4[44] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd44;
    end else if (p_Result_181_fu_4351_p4[45] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd45;
    end else if (p_Result_181_fu_4351_p4[46] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd46;
    end else if (p_Result_181_fu_4351_p4[47] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd47;
    end else if (p_Result_181_fu_4351_p4[48] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd48;
    end else if (p_Result_181_fu_4351_p4[49] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd49;
    end else if (p_Result_181_fu_4351_p4[50] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd50;
    end else if (p_Result_181_fu_4351_p4[51] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd51;
    end else if (p_Result_181_fu_4351_p4[52] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd52;
    end else if (p_Result_181_fu_4351_p4[53] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd53;
    end else if (p_Result_181_fu_4351_p4[54] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd54;
    end else if (p_Result_181_fu_4351_p4[55] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd55;
    end else if (p_Result_181_fu_4351_p4[56] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd56;
    end else if (p_Result_181_fu_4351_p4[57] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd57;
    end else if (p_Result_181_fu_4351_p4[58] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd58;
    end else if (p_Result_181_fu_4351_p4[59] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd59;
    end else if (p_Result_181_fu_4351_p4[60] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd60;
    end else if (p_Result_181_fu_4351_p4[61] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd61;
    end else if (p_Result_181_fu_4351_p4[62] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd62;
    end else if (p_Result_181_fu_4351_p4[63] == 1'b1) begin
        tmp_fu_4361_p3 = 64'd63;
    end else begin
        tmp_fu_4361_p3 = 64'd64;
    end
end


always @ (p_Result_173_fu_3369_p4) begin
    if (p_Result_173_fu_3369_p4[0] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd0;
    end else if (p_Result_173_fu_3369_p4[1] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd1;
    end else if (p_Result_173_fu_3369_p4[2] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd2;
    end else if (p_Result_173_fu_3369_p4[3] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd3;
    end else if (p_Result_173_fu_3369_p4[4] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd4;
    end else if (p_Result_173_fu_3369_p4[5] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd5;
    end else if (p_Result_173_fu_3369_p4[6] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd6;
    end else if (p_Result_173_fu_3369_p4[7] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd7;
    end else if (p_Result_173_fu_3369_p4[8] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd8;
    end else if (p_Result_173_fu_3369_p4[9] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd9;
    end else if (p_Result_173_fu_3369_p4[10] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd10;
    end else if (p_Result_173_fu_3369_p4[11] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd11;
    end else if (p_Result_173_fu_3369_p4[12] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd12;
    end else if (p_Result_173_fu_3369_p4[13] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd13;
    end else if (p_Result_173_fu_3369_p4[14] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd14;
    end else if (p_Result_173_fu_3369_p4[15] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd15;
    end else if (p_Result_173_fu_3369_p4[16] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd16;
    end else if (p_Result_173_fu_3369_p4[17] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd17;
    end else if (p_Result_173_fu_3369_p4[18] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd18;
    end else if (p_Result_173_fu_3369_p4[19] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd19;
    end else if (p_Result_173_fu_3369_p4[20] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd20;
    end else if (p_Result_173_fu_3369_p4[21] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd21;
    end else if (p_Result_173_fu_3369_p4[22] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd22;
    end else if (p_Result_173_fu_3369_p4[23] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd23;
    end else if (p_Result_173_fu_3369_p4[24] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd24;
    end else if (p_Result_173_fu_3369_p4[25] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd25;
    end else if (p_Result_173_fu_3369_p4[26] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd26;
    end else if (p_Result_173_fu_3369_p4[27] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd27;
    end else if (p_Result_173_fu_3369_p4[28] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd28;
    end else if (p_Result_173_fu_3369_p4[29] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd29;
    end else if (p_Result_173_fu_3369_p4[30] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd30;
    end else if (p_Result_173_fu_3369_p4[31] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd31;
    end else if (p_Result_173_fu_3369_p4[32] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd32;
    end else if (p_Result_173_fu_3369_p4[33] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd33;
    end else if (p_Result_173_fu_3369_p4[34] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd34;
    end else if (p_Result_173_fu_3369_p4[35] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd35;
    end else if (p_Result_173_fu_3369_p4[36] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd36;
    end else if (p_Result_173_fu_3369_p4[37] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd37;
    end else if (p_Result_173_fu_3369_p4[38] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd38;
    end else if (p_Result_173_fu_3369_p4[39] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd39;
    end else if (p_Result_173_fu_3369_p4[40] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd40;
    end else if (p_Result_173_fu_3369_p4[41] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd41;
    end else if (p_Result_173_fu_3369_p4[42] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd42;
    end else if (p_Result_173_fu_3369_p4[43] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd43;
    end else if (p_Result_173_fu_3369_p4[44] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd44;
    end else if (p_Result_173_fu_3369_p4[45] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd45;
    end else if (p_Result_173_fu_3369_p4[46] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd46;
    end else if (p_Result_173_fu_3369_p4[47] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd47;
    end else if (p_Result_173_fu_3369_p4[48] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd48;
    end else if (p_Result_173_fu_3369_p4[49] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd49;
    end else if (p_Result_173_fu_3369_p4[50] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd50;
    end else if (p_Result_173_fu_3369_p4[51] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd51;
    end else if (p_Result_173_fu_3369_p4[52] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd52;
    end else if (p_Result_173_fu_3369_p4[53] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd53;
    end else if (p_Result_173_fu_3369_p4[54] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd54;
    end else if (p_Result_173_fu_3369_p4[55] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd55;
    end else if (p_Result_173_fu_3369_p4[56] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd56;
    end else if (p_Result_173_fu_3369_p4[57] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd57;
    end else if (p_Result_173_fu_3369_p4[58] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd58;
    end else if (p_Result_173_fu_3369_p4[59] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd59;
    end else if (p_Result_173_fu_3369_p4[60] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd60;
    end else if (p_Result_173_fu_3369_p4[61] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd61;
    end else if (p_Result_173_fu_3369_p4[62] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd62;
    end else if (p_Result_173_fu_3369_p4[63] == 1'b1) begin
        tmp_s_fu_3379_p3 = 64'd63;
    end else begin
        tmp_s_fu_3379_p3 = 64'd64;
    end
end

assign trunc_ln22_1_fu_3122_p0 = sliding_window_front_ptr_s;

assign trunc_ln22_1_fu_3122_p1 = trunc_ln22_1_fu_3122_p0[4:0];

assign trunc_ln22_fu_3118_p1 = sliding_window_back_ptr_s[4:0];

assign trunc_ln279_fu_3285_p1 = add_ln266_fu_3271_p2[6:0];

assign trunc_ln555_3_fu_3890_p1 = ireg_3_fu_3886_p1[62:0];

assign trunc_ln555_fu_3662_p1 = ireg_fu_3658_p1[62:0];

assign trunc_ln565_3_fu_3912_p1 = ireg_3_fu_3886_p1[51:0];

assign trunc_ln565_fu_3688_p1 = ireg_fu_3658_p1[51:0];

assign trunc_ln575_3_fu_4063_p1 = F2_3_fu_4057_p2[10:0];

assign trunc_ln575_fu_3730_p1 = F2_fu_3724_p2[10:0];

assign trunc_ln586_3_fu_4125_p1 = sh_amt_3_fu_4085_p3[5:0];

assign trunc_ln586_fu_3792_p1 = sh_amt_fu_3752_p3[5:0];

assign trunc_ln588_3_cast_fu_4237_p3 = ((tmp_134_fu_4229_p3[0:0] == 1'b1) ? 54'd18014398509481983 : 54'd0);

assign trunc_ln588_cast_fu_3944_p3 = ((tmp_131_fu_3936_p3[0:0] == 1'b1) ? 54'd18014398509481983 : 54'd0);

assign trunc_ln943_3_fu_4703_p1 = tmp_15_fu_4553_p3[7:0];

assign trunc_ln943_4_fu_3517_p1 = tmp_s_fu_3379_p3[7:0];

assign trunc_ln943_fu_4511_p1 = tmp_fu_4361_p3[7:0];

assign trunc_ln947_3_fu_4593_p1 = sub_ln944_3_fu_4565_p2[6:0];

assign trunc_ln947_4_fu_3419_p1 = sub_ln944_4_fu_3391_p2[6:0];

assign trunc_ln947_fu_4401_p1 = sub_ln944_fu_4373_p2[6:0];

assign x_V_address1 = 64'd2;

assign xor_ln571_3_fu_4145_p2 = (icmp_ln571_3_reg_6317 ^ 1'd1);

assign xor_ln571_fu_3812_p2 = (icmp_ln571_fu_3718_p2 ^ 1'd1);

assign xor_ln581_3_fu_4179_p2 = (or_ln581_3_fu_4173_p2 ^ 1'd1);

assign xor_ln581_fu_3848_p2 = (or_ln581_fu_3842_p2 ^ 1'd1);

assign xor_ln582_3_fu_4161_p2 = (or_ln582_3_fu_4156_p2 ^ 1'd1);

assign xor_ln582_fu_3830_p2 = (or_ln582_fu_3824_p2 ^ 1'd1);

assign xor_ln949_3_fu_4649_p2 = (tmp_120_fu_4641_p3 ^ 1'd1);

assign xor_ln949_4_fu_3475_p2 = (tmp_127_fu_3467_p3 ^ 1'd1);

assign xor_ln949_fu_4457_p2 = (tmp_116_fu_4449_p3 ^ 1'd1);

assign zext_ln22_fu_3138_p1 = i_reg_3001;

assign zext_ln268_1_fu_3281_p1 = add_ln266_fu_3271_p2;

assign zext_ln268_fu_3276_p1 = add_ln266_fu_3271_p2;

assign zext_ln279_fu_3303_p1 = sub_ln279_fu_3297_p2;

assign zext_ln280_fu_4025_p1 = add_ln280_fu_4020_p2;

assign zext_ln281_fu_4318_p1 = add_ln281_fu_4313_p2;

assign zext_ln34_fu_3203_p1 = buffer_idx_7_fu_3196_p3;

assign zext_ln415_18_fu_3985_p1 = qb_fu_3979_p3;

assign zext_ln415_19_fu_4278_p1 = qb_3_fu_4272_p3;

assign zext_ln415_fu_3335_p1 = tmp_124_fu_3327_p3;

assign zext_ln455_3_fu_4030_p1 = exp_tmp_3_reg_6307;

assign zext_ln455_fu_3684_p1 = exp_tmp_fu_3674_p4;

assign zext_ln569_3_fu_4040_p1 = p_Result_179_fu_4033_p3;

assign zext_ln569_fu_3700_p1 = p_Result_177_fu_3692_p3;

assign zext_ln586_5_fu_4218_p1 = trunc_ln586_3_reg_6342;

assign zext_ln586_fu_3925_p1 = trunc_ln586_reg_6271;

assign zext_ln591_4_fu_4261_p1 = add_ln591_4_fu_4256_p2;

assign zext_ln591_fu_3968_p1 = add_ln591_fu_3963_p2;

assign zext_ln604_3_fu_4129_p1 = trunc_ln586_3_fu_4125_p1;

assign zext_ln604_fu_3796_p1 = trunc_ln586_fu_3792_p1;

assign zext_ln947_3_fu_4603_p1 = sub_ln947_3_fu_4597_p2;

assign zext_ln947_4_fu_3429_p1 = sub_ln947_4_fu_3423_p2;

assign zext_ln947_fu_4411_p1 = sub_ln947_fu_4405_p2;

assign zext_ln949_3_fu_4613_p1 = lsb_index_6_fu_4571_p2;

assign zext_ln949_4_fu_3439_p1 = lsb_index_7_fu_3397_p2;

assign zext_ln949_fu_4421_p1 = lsb_index_fu_4379_p2;

assign zext_ln954_3_fu_4823_p1 = add_ln954_3_reg_6449;

assign zext_ln954_4_fu_3540_p1 = add_ln954_4_fu_3535_p2;

assign zext_ln954_fu_4715_p1 = add_ln954_reg_6408;

assign zext_ln955_3_fu_4815_p1 = sub_ln955_3_reg_6444;

assign zext_ln955_4_fu_3526_p1 = sub_ln955_4_fu_3521_p2;

assign zext_ln955_fu_4707_p1 = sub_ln955_reg_6403;

assign zext_ln961_3_fu_4838_p1 = select_ln954_8_reg_6454;

assign zext_ln961_4_fu_3556_p1 = select_ln954_10_reg_6227;

assign zext_ln961_fu_4730_p1 = select_ln954_reg_6413;

assign zext_ln962_3_fu_4857_p1 = m_50_fu_4847_p4;

assign zext_ln962_4_fu_3575_p1 = m_48_fu_3565_p4;

assign zext_ln962_fu_4749_p1 = m_49_fu_4739_p4;

always @ (posedge ap_clk) begin
    zext_ln34_reg_5491[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_20_reg_6047[2:0] <= 3'b000;
    zext_ln268_reg_6061[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln268_reg_6061_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //LLSSineReconstruction_computeFirstChannel
