// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_update_A (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        matA_0_address0,
        matA_0_ce0,
        matA_0_we0,
        matA_0_d0,
        A_i_0_address0,
        A_i_0_ce0,
        A_i_0_q0,
        A_j_0_address0,
        A_j_0_ce0,
        A_j_0_q0,
        col_i_dout,
        col_i_empty_n,
        col_i_read,
        col_j_dout,
        col_j_empty_n,
        col_j_read,
        s_dout,
        s_empty_n,
        s_read,
        c_dout,
        c_empty_n,
        c_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] matA_0_address0;
output   matA_0_ce0;
output   matA_0_we0;
output  [59:0] matA_0_d0;
output  [6:0] A_i_0_address0;
output   A_i_0_ce0;
input  [59:0] A_i_0_q0;
output  [6:0] A_j_0_address0;
output   A_j_0_ce0;
input  [59:0] A_j_0_q0;
input  [1:0] col_i_dout;
input   col_i_empty_n;
output   col_i_read;
input  [1:0] col_j_dout;
input   col_j_empty_n;
output   col_j_read;
input  [59:0] s_dout;
input   s_empty_n;
output   s_read;
input  [59:0] c_dout;
input   c_empty_n;
output   c_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] matA_0_address0;
reg matA_0_ce0;
reg matA_0_we0;
reg[59:0] matA_0_d0;
reg A_i_0_ce0;
reg A_j_0_ce0;
reg col_i_read;
reg col_j_read;
reg s_read;
reg c_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    col_i_blk_n;
reg    col_j_blk_n;
reg    s_blk_n;
reg    c_blk_n;
wire  signed [98:0] c_cast_i_fu_144_p1;
reg  signed [98:0] c_cast_i_reg_325;
wire  signed [98:0] s_cast_i_fu_148_p1;
reg  signed [98:0] s_cast_i_reg_331;
wire   [7:0] col_i_load_cast_fu_152_p1;
reg   [7:0] col_i_load_cast_reg_337;
wire   [7:0] zext_ln491_1_fu_156_p1;
reg   [7:0] zext_ln491_1_reg_342;
wire   [6:0] add_ln491_fu_160_p2;
reg   [6:0] add_ln491_reg_347;
wire    ap_CS_fsm_state2;
reg   [7:0] matA_0_addr_reg_352;
reg   [7:0] matA_0_addr_1_reg_357;
wire   [0:0] icmp_ln491_fu_214_p2;
wire   [98:0] r_V_13_fu_224_p2;
reg   [98:0] r_V_13_reg_375;
wire    ap_CS_fsm_state3;
wire   [98:0] r_V_14_fu_233_p2;
reg   [98:0] r_V_14_reg_380;
wire   [98:0] r_V_11_fu_238_p2;
reg   [98:0] r_V_11_reg_385;
wire   [98:0] r_V_12_fu_243_p2;
reg   [98:0] r_V_12_reg_390;
wire   [38:0] trunc_ln1192_fu_248_p1;
reg   [38:0] trunc_ln1192_reg_395;
wire   [38:0] trunc_ln1192_2_fu_252_p1;
reg   [38:0] trunc_ln1192_2_reg_400;
wire   [59:0] add_ln415_2_fu_319_p2;
reg   [59:0] add_ln415_2_reg_405;
wire    ap_CS_fsm_state4;
reg   [6:0] k_reg_133;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
wire   [63:0] zext_ln500_1_fu_199_p1;
wire   [63:0] zext_ln501_fu_209_p1;
wire   [63:0] zext_ln491_fu_166_p1;
wire   [59:0] add_ln415_fu_282_p2;
wire   [5:0] trunc_ln500_fu_176_p1;
wire   [7:0] tmp_cast_fu_180_p3;
wire   [7:0] zext_ln500_fu_172_p1;
wire   [7:0] sub_ln500_fu_188_p2;
wire   [7:0] add_ln500_fu_194_p2;
wire   [7:0] add_ln501_fu_204_p2;
wire  signed [59:0] r_V_13_fu_224_p0;
wire  signed [98:0] sext_ln1118_fu_220_p1;
wire  signed [59:0] r_V_13_fu_224_p1;
wire  signed [59:0] r_V_14_fu_233_p0;
wire  signed [98:0] sext_ln1118_2_fu_229_p1;
wire  signed [59:0] r_V_14_fu_233_p1;
wire  signed [59:0] r_V_11_fu_238_p0;
wire  signed [59:0] r_V_11_fu_238_p1;
wire  signed [59:0] r_V_12_fu_243_p0;
wire  signed [59:0] r_V_12_fu_243_p1;
wire   [98:0] ret_V_fu_256_p2;
wire   [0:0] tmp_fu_270_p3;
wire   [59:0] trunc_ln_fu_260_p4;
wire   [59:0] zext_ln415_fu_278_p1;
wire   [98:0] ret_V_2_fu_289_p2;
wire   [38:0] add_ln713_fu_303_p2;
wire   [0:0] tmp_4_fu_307_p3;
wire   [59:0] trunc_ln708_2_fu_293_p4;
wire   [59:0] zext_ln415_2_fu_315_p1;
reg   [4:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U250(
    .din0(r_V_13_fu_224_p0),
    .din1(r_V_13_fu_224_p1),
    .dout(r_V_13_fu_224_p2)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U251(
    .din0(r_V_14_fu_233_p0),
    .din1(r_V_14_fu_233_p1),
    .dout(r_V_14_fu_233_p2)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U252(
    .din0(r_V_11_fu_238_p0),
    .din1(r_V_11_fu_238_p1),
    .dout(r_V_11_fu_238_p2)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U253(
    .din0(r_V_12_fu_243_p0),
    .din1(r_V_12_fu_243_p1),
    .dout(r_V_12_fu_243_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln491_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_133 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_133 <= add_ln491_reg_347;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln415_2_reg_405 <= add_ln415_2_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln491_reg_347 <= add_ln491_fu_160_p2;
        matA_0_addr_1_reg_357 <= zext_ln501_fu_209_p1;
        matA_0_addr_reg_352 <= zext_ln500_1_fu_199_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        c_cast_i_reg_325 <= c_cast_i_fu_144_p1;
        col_i_load_cast_reg_337[1 : 0] <= col_i_load_cast_fu_152_p1[1 : 0];
        s_cast_i_reg_331 <= s_cast_i_fu_148_p1;
        zext_ln491_1_reg_342[1 : 0] <= zext_ln491_1_fu_156_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_V_11_reg_385 <= r_V_11_fu_238_p2;
        r_V_12_reg_390 <= r_V_12_fu_243_p2;
        r_V_13_reg_375 <= r_V_13_fu_224_p2;
        r_V_14_reg_380 <= r_V_14_fu_233_p2;
        trunc_ln1192_2_reg_400 <= trunc_ln1192_2_fu_252_p1;
        trunc_ln1192_reg_395 <= trunc_ln1192_fu_248_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_i_0_ce0 = 1'b1;
    end else begin
        A_i_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_j_0_ce0 = 1'b1;
    end else begin
        A_j_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln491_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln491_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_blk_n = c_empty_n;
    end else begin
        c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read = 1'b1;
    end else begin
        c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_blk_n = col_i_empty_n;
    end else begin
        col_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_read = 1'b1;
    end else begin
        col_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_blk_n = col_j_empty_n;
    end else begin
        col_j_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_read = 1'b1;
    end else begin
        col_j_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matA_0_address0 = matA_0_addr_1_reg_357;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        matA_0_address0 = matA_0_addr_reg_352;
    end else begin
        matA_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        matA_0_ce0 = 1'b1;
    end else begin
        matA_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matA_0_d0 = add_ln415_2_reg_405;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        matA_0_d0 = add_ln415_fu_282_p2;
    end else begin
        matA_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        matA_0_we0 = 1'b1;
    end else begin
        matA_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_blk_n = s_empty_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_read = 1'b1;
    end else begin
        s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln491_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_i_0_address0 = zext_ln491_fu_166_p1;

assign A_j_0_address0 = zext_ln491_fu_166_p1;

assign add_ln415_2_fu_319_p2 = (trunc_ln708_2_fu_293_p4 + zext_ln415_2_fu_315_p1);

assign add_ln415_fu_282_p2 = (trunc_ln_fu_260_p4 + zext_ln415_fu_278_p1);

assign add_ln491_fu_160_p2 = (k_reg_133 + 7'd1);

assign add_ln500_fu_194_p2 = (sub_ln500_fu_188_p2 + col_i_load_cast_reg_337);

assign add_ln501_fu_204_p2 = (sub_ln500_fu_188_p2 + zext_ln491_1_reg_342);

assign add_ln713_fu_303_p2 = (trunc_ln1192_2_reg_400 + trunc_ln1192_reg_395);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign c_cast_i_fu_144_p1 = $signed(c_dout);

assign col_i_load_cast_fu_152_p1 = col_i_dout;

assign icmp_ln491_fu_214_p2 = ((k_reg_133 == 7'd80) ? 1'b1 : 1'b0);

assign r_V_11_fu_238_p0 = sext_ln1118_fu_220_p1;

assign r_V_11_fu_238_p1 = s_cast_i_reg_331;

assign r_V_12_fu_243_p0 = sext_ln1118_2_fu_229_p1;

assign r_V_12_fu_243_p1 = c_cast_i_reg_325;

assign r_V_13_fu_224_p0 = sext_ln1118_fu_220_p1;

assign r_V_13_fu_224_p1 = c_cast_i_reg_325;

assign r_V_14_fu_233_p0 = sext_ln1118_2_fu_229_p1;

assign r_V_14_fu_233_p1 = s_cast_i_reg_331;

assign ret_V_2_fu_289_p2 = (r_V_12_reg_390 + r_V_11_reg_385);

assign ret_V_fu_256_p2 = (r_V_13_reg_375 - r_V_14_reg_380);

assign s_cast_i_fu_148_p1 = $signed(s_dout);

assign sext_ln1118_2_fu_229_p1 = $signed(A_j_0_q0);

assign sext_ln1118_fu_220_p1 = $signed(A_i_0_q0);

assign sub_ln500_fu_188_p2 = (tmp_cast_fu_180_p3 - zext_ln500_fu_172_p1);

assign tmp_4_fu_307_p3 = add_ln713_fu_303_p2[32'd38];

assign tmp_cast_fu_180_p3 = {{trunc_ln500_fu_176_p1}, {2'd0}};

assign tmp_fu_270_p3 = ret_V_fu_256_p2[32'd38];

assign trunc_ln1192_2_fu_252_p1 = r_V_12_fu_243_p2[38:0];

assign trunc_ln1192_fu_248_p1 = r_V_11_fu_238_p2[38:0];

assign trunc_ln500_fu_176_p1 = k_reg_133[5:0];

assign trunc_ln708_2_fu_293_p4 = {{ret_V_2_fu_289_p2[98:39]}};

assign trunc_ln_fu_260_p4 = {{ret_V_fu_256_p2[98:39]}};

assign zext_ln415_2_fu_315_p1 = tmp_4_fu_307_p3;

assign zext_ln415_fu_278_p1 = tmp_fu_270_p3;

assign zext_ln491_1_fu_156_p1 = col_j_dout;

assign zext_ln491_fu_166_p1 = k_reg_133;

assign zext_ln500_1_fu_199_p1 = add_ln500_fu_194_p2;

assign zext_ln500_fu_172_p1 = k_reg_133;

assign zext_ln501_fu_209_p1 = add_ln501_fu_204_p2;

always @ (posedge ap_clk) begin
    col_i_load_cast_reg_337[7:2] <= 6'b000000;
    zext_ln491_1_reg_342[7:2] <= 6'b000000;
end

endmodule //LLSSineReconstruction_update_A
