// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_read_and_gen_2x2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        sine_reconstructor_16_873_din,
        sine_reconstructor_16_873_full_n,
        sine_reconstructor_16_873_write,
        sine_reconstructor_16_974_din,
        sine_reconstructor_16_974_full_n,
        sine_reconstructor_16_974_write,
        sine_reconstructor_16_1075_din,
        sine_reconstructor_16_1075_full_n,
        sine_reconstructor_16_1075_write,
        this_14_0_address0,
        this_14_0_ce0,
        this_14_0_we0,
        this_14_0_d0,
        this_14_0_q0,
        this_15_0_address0,
        this_15_0_ce0,
        this_15_0_we0,
        this_15_0_d0,
        this_15_0_q0,
        this_16_0_address0,
        this_16_0_ce0,
        this_16_0_we0,
        this_16_0_d0,
        this_16_0_q0,
        this_17_address0,
        this_17_ce0,
        this_17_we0,
        this_17_d0,
        this_17_q0,
        this_17_address1,
        this_17_ce1,
        this_17_q1,
        this_18_address0,
        this_18_ce0,
        this_18_we0,
        this_18_d0,
        this_18_q0,
        this_18_address1,
        this_18_ce1,
        this_18_q1,
        this_19_address0,
        this_19_ce0,
        this_19_we0,
        this_19_d0,
        this_19_q0,
        this_19_address1,
        this_19_ce1,
        this_19_q1,
        matA_0_address0,
        matA_0_ce0,
        matA_0_q0,
        matA_0_address1,
        matA_0_ce1,
        matA_0_q1,
        A_i_0_address0,
        A_i_0_ce0,
        A_i_0_we0,
        A_i_0_d0,
        A_j_0_address0,
        A_j_0_ce0,
        A_j_0_we0,
        A_j_0_d0,
        col_i_dout,
        col_i_empty_n,
        col_i_read,
        col_j_dout,
        col_j_empty_n,
        col_j_read
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [59:0] sine_reconstructor_16_873_din;
input   sine_reconstructor_16_873_full_n;
output   sine_reconstructor_16_873_write;
output  [59:0] sine_reconstructor_16_974_din;
input   sine_reconstructor_16_974_full_n;
output   sine_reconstructor_16_974_write;
output  [59:0] sine_reconstructor_16_1075_din;
input   sine_reconstructor_16_1075_full_n;
output   sine_reconstructor_16_1075_write;
output  [3:0] this_14_0_address0;
output   this_14_0_ce0;
output   this_14_0_we0;
output  [59:0] this_14_0_d0;
input  [59:0] this_14_0_q0;
output  [3:0] this_15_0_address0;
output   this_15_0_ce0;
output   this_15_0_we0;
output  [59:0] this_15_0_d0;
input  [59:0] this_15_0_q0;
output  [3:0] this_16_0_address0;
output   this_16_0_ce0;
output   this_16_0_we0;
output  [59:0] this_16_0_d0;
input  [59:0] this_16_0_q0;
output  [3:0] this_17_address0;
output   this_17_ce0;
output   this_17_we0;
output  [59:0] this_17_d0;
input  [59:0] this_17_q0;
output  [3:0] this_17_address1;
output   this_17_ce1;
input  [59:0] this_17_q1;
output  [3:0] this_18_address0;
output   this_18_ce0;
output   this_18_we0;
output  [59:0] this_18_d0;
input  [59:0] this_18_q0;
output  [3:0] this_18_address1;
output   this_18_ce1;
input  [59:0] this_18_q1;
output  [3:0] this_19_address0;
output   this_19_ce0;
output   this_19_we0;
output  [59:0] this_19_d0;
input  [59:0] this_19_q0;
output  [3:0] this_19_address1;
output   this_19_ce1;
input  [59:0] this_19_q1;
output  [7:0] matA_0_address0;
output   matA_0_ce0;
input  [59:0] matA_0_q0;
output  [7:0] matA_0_address1;
output   matA_0_ce1;
input  [59:0] matA_0_q1;
output  [6:0] A_i_0_address0;
output   A_i_0_ce0;
output   A_i_0_we0;
output  [59:0] A_i_0_d0;
output  [6:0] A_j_0_address0;
output   A_j_0_ce0;
output   A_j_0_we0;
output  [59:0] A_j_0_d0;
input  [1:0] col_i_dout;
input   col_i_empty_n;
output   col_i_read;
input  [1:0] col_j_dout;
input   col_j_empty_n;
output   col_j_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sine_reconstructor_16_873_write;
reg sine_reconstructor_16_974_write;
reg sine_reconstructor_16_1075_write;
reg[3:0] this_14_0_address0;
reg this_14_0_ce0;
reg this_14_0_we0;
reg[59:0] this_14_0_d0;
reg[3:0] this_15_0_address0;
reg this_15_0_ce0;
reg this_15_0_we0;
reg[59:0] this_15_0_d0;
reg[3:0] this_16_0_address0;
reg this_16_0_ce0;
reg this_16_0_we0;
reg[59:0] this_16_0_d0;
reg[3:0] this_17_address0;
reg this_17_ce0;
reg this_17_we0;
reg[59:0] this_17_d0;
reg this_17_ce1;
reg[3:0] this_18_address0;
reg this_18_ce0;
reg this_18_we0;
reg[59:0] this_18_d0;
reg this_18_ce1;
reg[3:0] this_19_address0;
reg this_19_ce0;
reg this_19_we0;
reg[59:0] this_19_d0;
reg this_19_ce1;
reg matA_0_ce0;
reg matA_0_ce1;
reg A_i_0_ce0;
reg A_i_0_we0;
reg A_j_0_ce0;
reg A_j_0_we0;
reg col_i_read;
reg col_j_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    sine_reconstructor_16_873_blk_n;
wire    ap_CS_fsm_state14;
reg    sine_reconstructor_16_974_blk_n;
reg    sine_reconstructor_16_1075_blk_n;
reg    col_i_blk_n;
reg    col_j_blk_n;
reg   [1:0] col_i_read_reg_1306;
reg   [1:0] col_j_read_reg_1311;
wire   [4:0] add_ln581_fu_808_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] col_i_load_cast_fu_830_p1;
reg   [7:0] col_i_load_cast_reg_1324;
wire   [0:0] icmp_ln581_fu_824_p2;
wire   [7:0] zext_ln599_1_fu_833_p1;
reg   [7:0] zext_ln599_1_reg_1329;
wire   [6:0] add_ln599_fu_836_p2;
reg   [6:0] add_ln599_reg_1334;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln599_fu_842_p1;
reg   [63:0] zext_ln599_reg_1339;
wire   [3:0] empty_fu_894_p1;
reg   [3:0] empty_reg_1358;
wire   [0:0] icmp_ln599_fu_888_p2;
wire   [98:0] r_V_23_fu_908_p2;
reg   [98:0] r_V_23_reg_1363;
wire    ap_CS_fsm_state4;
reg   [3:0] this_14_0_addr_1_reg_1368;
reg   [0:0] tmp_reg_1373;
wire   [98:0] r_V_27_fu_926_p2;
reg   [98:0] r_V_27_reg_1378;
reg   [3:0] this_15_0_addr_1_reg_1383;
reg   [0:0] tmp_21_reg_1388;
wire   [98:0] r_V_28_fu_940_p2;
reg   [98:0] r_V_28_reg_1393;
reg   [3:0] this_16_0_addr_1_reg_1398;
reg   [0:0] tmp_22_reg_1403;
wire   [4:0] add_ln691_fu_1053_p2;
reg   [4:0] add_ln691_reg_1408;
wire    ap_CS_fsm_state6;
reg   [3:0] this_17_addr_1_reg_1416;
wire   [0:0] icmp_ln623_fu_1069_p2;
reg   [3:0] this_18_addr_1_reg_1426;
reg   [3:0] this_19_addr_1_reg_1436;
wire   [3:0] add_ln645_fu_1096_p2;
reg   [3:0] add_ln645_reg_1446;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln645_fu_1102_p1;
reg   [63:0] zext_ln645_reg_1451;
wire   [0:0] icmp_ln645_fu_1106_p2;
wire   [2:0] add_ln657_fu_1159_p2;
reg   [2:0] add_ln657_reg_1491;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln657_fu_1165_p1;
reg   [63:0] zext_ln657_reg_1496;
wire   [0:0] icmp_ln657_fu_1169_p2;
wire   [1:0] add_ln668_fu_1222_p2;
reg   [1:0] add_ln668_reg_1536;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln668_fu_1228_p1;
reg   [63:0] zext_ln668_reg_1541;
wire   [0:0] icmp_ln668_fu_1232_p2;
reg   [2:0] alpha_sum_tmp0_V_address0;
reg    alpha_sum_tmp0_V_ce0;
reg    alpha_sum_tmp0_V_we0;
wire   [59:0] alpha_sum_tmp0_V_d0;
wire   [59:0] alpha_sum_tmp0_V_q0;
wire   [2:0] alpha_sum_tmp0_V_address1;
reg    alpha_sum_tmp0_V_ce1;
wire   [59:0] alpha_sum_tmp0_V_q1;
reg   [2:0] beta_sum_tmp0_V_address0;
reg    beta_sum_tmp0_V_ce0;
reg    beta_sum_tmp0_V_we0;
wire   [59:0] beta_sum_tmp0_V_d0;
wire   [59:0] beta_sum_tmp0_V_q0;
wire   [2:0] beta_sum_tmp0_V_address1;
reg    beta_sum_tmp0_V_ce1;
wire   [59:0] beta_sum_tmp0_V_q1;
reg   [2:0] gamma_sum_tmp0_V_address0;
reg    gamma_sum_tmp0_V_ce0;
reg    gamma_sum_tmp0_V_we0;
wire   [59:0] gamma_sum_tmp0_V_d0;
wire   [59:0] gamma_sum_tmp0_V_q0;
wire   [2:0] gamma_sum_tmp0_V_address1;
reg    gamma_sum_tmp0_V_ce1;
wire   [59:0] gamma_sum_tmp0_V_q1;
reg   [1:0] alpha_sum_tmp1_V_address0;
reg    alpha_sum_tmp1_V_ce0;
reg    alpha_sum_tmp1_V_we0;
wire   [59:0] alpha_sum_tmp1_V_d0;
wire   [59:0] alpha_sum_tmp1_V_q0;
wire   [1:0] alpha_sum_tmp1_V_address1;
reg    alpha_sum_tmp1_V_ce1;
wire   [59:0] alpha_sum_tmp1_V_q1;
reg   [1:0] beta_sum_tmp1_V_address0;
reg    beta_sum_tmp1_V_ce0;
reg    beta_sum_tmp1_V_we0;
wire   [59:0] beta_sum_tmp1_V_d0;
wire   [59:0] beta_sum_tmp1_V_q0;
wire   [1:0] beta_sum_tmp1_V_address1;
reg    beta_sum_tmp1_V_ce1;
wire   [59:0] beta_sum_tmp1_V_q1;
reg   [1:0] gamma_sum_tmp1_V_address0;
reg    gamma_sum_tmp1_V_ce0;
reg    gamma_sum_tmp1_V_we0;
wire   [59:0] gamma_sum_tmp1_V_d0;
wire   [59:0] gamma_sum_tmp1_V_q0;
wire   [1:0] gamma_sum_tmp1_V_address1;
reg    gamma_sum_tmp1_V_ce1;
wire   [59:0] gamma_sum_tmp1_V_q1;
reg   [0:0] alpha_sum_tmp2_V_address0;
reg    alpha_sum_tmp2_V_ce0;
reg    alpha_sum_tmp2_V_we0;
wire   [59:0] alpha_sum_tmp2_V_d0;
wire   [59:0] alpha_sum_tmp2_V_q0;
wire   [0:0] alpha_sum_tmp2_V_address1;
reg    alpha_sum_tmp2_V_ce1;
wire   [59:0] alpha_sum_tmp2_V_q1;
reg   [0:0] beta_sum_tmp2_V_address0;
reg    beta_sum_tmp2_V_ce0;
reg    beta_sum_tmp2_V_we0;
wire   [59:0] beta_sum_tmp2_V_d0;
wire   [59:0] beta_sum_tmp2_V_q0;
wire   [0:0] beta_sum_tmp2_V_address1;
reg    beta_sum_tmp2_V_ce1;
wire   [59:0] beta_sum_tmp2_V_q1;
reg   [0:0] gamma_sum_tmp2_V_address0;
reg    gamma_sum_tmp2_V_ce0;
reg    gamma_sum_tmp2_V_we0;
wire   [59:0] gamma_sum_tmp2_V_d0;
wire   [59:0] gamma_sum_tmp2_V_q0;
wire   [0:0] gamma_sum_tmp2_V_address1;
reg    gamma_sum_tmp2_V_ce1;
wire   [59:0] gamma_sum_tmp2_V_q1;
reg   [4:0] t_reg_742;
reg    ap_block_state1;
reg   [6:0] k_reg_753;
wire    ap_CS_fsm_state5;
reg   [4:0] idx_V_reg_764;
wire    ap_CS_fsm_state7;
reg   [3:0] k_2_reg_775;
wire    ap_CS_fsm_state9;
reg   [2:0] k_3_reg_786;
wire    ap_CS_fsm_state11;
reg   [1:0] k_4_reg_797;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln581_fu_814_p1;
wire   [63:0] zext_ln610_1_fu_873_p1;
wire   [63:0] zext_ln611_fu_883_p1;
wire   [63:0] idxprom5625_i_fu_898_p1;
wire   [63:0] zext_ln623_fu_1059_p1;
wire   [63:0] zext_ln648_fu_1118_p1;
wire   [63:0] zext_ln703_fu_1131_p1;
wire   [63:0] zext_ln660_fu_1181_p1;
wire   [63:0] zext_ln703_1_fu_1194_p1;
wire   [63:0] zext_ln671_fu_1244_p1;
wire   [63:0] zext_ln703_2_fu_1257_p1;
reg    ap_block_state14;
wire   [59:0] add_ln415_fu_980_p2;
wire   [59:0] add_ln415_3_fu_1013_p2;
wire   [59:0] add_ln415_4_fu_1046_p2;
wire   [59:0] add_ln703_fu_1075_p2;
wire   [59:0] add_ln703_1_fu_1082_p2;
wire   [59:0] add_ln703_2_fu_1089_p2;
wire   [5:0] trunc_ln610_fu_850_p1;
wire   [7:0] tmp_cast_fu_854_p3;
wire   [7:0] zext_ln610_fu_846_p1;
wire   [7:0] sub_ln610_fu_862_p2;
wire   [7:0] add_ln610_fu_868_p2;
wire   [7:0] add_ln611_fu_878_p2;
wire  signed [59:0] sext_ln1115_fu_904_p0;
wire  signed [59:0] r_V_23_fu_908_p0;
wire  signed [98:0] sext_ln1115_fu_904_p1;
wire  signed [59:0] r_V_23_fu_908_p1;
wire  signed [59:0] sext_ln1115_1_fu_922_p0;
wire  signed [59:0] r_V_27_fu_926_p0;
wire  signed [98:0] sext_ln1115_1_fu_922_p1;
wire  signed [59:0] r_V_27_fu_926_p1;
wire  signed [59:0] r_V_28_fu_940_p0;
wire  signed [59:0] r_V_28_fu_940_p1;
wire   [98:0] lhs_1_fu_954_p3;
wire   [98:0] ret_V_fu_962_p2;
wire   [59:0] trunc_ln_fu_967_p4;
wire   [59:0] zext_ln415_fu_977_p1;
wire   [98:0] lhs_3_fu_987_p3;
wire   [98:0] ret_V_3_fu_995_p2;
wire   [59:0] trunc_ln708_3_fu_1000_p4;
wire   [59:0] zext_ln415_3_fu_1010_p1;
wire   [98:0] lhs_5_fu_1020_p3;
wire   [98:0] ret_V_4_fu_1028_p2;
wire   [59:0] trunc_ln708_4_fu_1033_p4;
wire   [59:0] zext_ln415_4_fu_1043_p1;
wire   [3:0] shl_ln648_fu_1112_p2;
wire   [3:0] or_ln648_fu_1125_p2;
wire   [2:0] shl_ln660_fu_1175_p2;
wire   [2:0] or_ln660_fu_1188_p2;
wire   [1:0] shl_ln671_fu_1238_p2;
wire   [1:0] or_ln671_fu_1251_p2;
reg   [13:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
end

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp0_V #(
    .DataWidth( 60 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
alpha_sum_tmp0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha_sum_tmp0_V_address0),
    .ce0(alpha_sum_tmp0_V_ce0),
    .we0(alpha_sum_tmp0_V_we0),
    .d0(alpha_sum_tmp0_V_d0),
    .q0(alpha_sum_tmp0_V_q0),
    .address1(alpha_sum_tmp0_V_address1),
    .ce1(alpha_sum_tmp0_V_ce1),
    .q1(alpha_sum_tmp0_V_q1)
);

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp0_V #(
    .DataWidth( 60 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
beta_sum_tmp0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(beta_sum_tmp0_V_address0),
    .ce0(beta_sum_tmp0_V_ce0),
    .we0(beta_sum_tmp0_V_we0),
    .d0(beta_sum_tmp0_V_d0),
    .q0(beta_sum_tmp0_V_q0),
    .address1(beta_sum_tmp0_V_address1),
    .ce1(beta_sum_tmp0_V_ce1),
    .q1(beta_sum_tmp0_V_q1)
);

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp0_V #(
    .DataWidth( 60 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
gamma_sum_tmp0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gamma_sum_tmp0_V_address0),
    .ce0(gamma_sum_tmp0_V_ce0),
    .we0(gamma_sum_tmp0_V_we0),
    .d0(gamma_sum_tmp0_V_d0),
    .q0(gamma_sum_tmp0_V_q0),
    .address1(gamma_sum_tmp0_V_address1),
    .ce1(gamma_sum_tmp0_V_ce1),
    .q1(gamma_sum_tmp0_V_q1)
);

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp1_V #(
    .DataWidth( 60 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
alpha_sum_tmp1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha_sum_tmp1_V_address0),
    .ce0(alpha_sum_tmp1_V_ce0),
    .we0(alpha_sum_tmp1_V_we0),
    .d0(alpha_sum_tmp1_V_d0),
    .q0(alpha_sum_tmp1_V_q0),
    .address1(alpha_sum_tmp1_V_address1),
    .ce1(alpha_sum_tmp1_V_ce1),
    .q1(alpha_sum_tmp1_V_q1)
);

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp1_V #(
    .DataWidth( 60 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
beta_sum_tmp1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(beta_sum_tmp1_V_address0),
    .ce0(beta_sum_tmp1_V_ce0),
    .we0(beta_sum_tmp1_V_we0),
    .d0(beta_sum_tmp1_V_d0),
    .q0(beta_sum_tmp1_V_q0),
    .address1(beta_sum_tmp1_V_address1),
    .ce1(beta_sum_tmp1_V_ce1),
    .q1(beta_sum_tmp1_V_q1)
);

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp1_V #(
    .DataWidth( 60 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
gamma_sum_tmp1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gamma_sum_tmp1_V_address0),
    .ce0(gamma_sum_tmp1_V_ce0),
    .we0(gamma_sum_tmp1_V_we0),
    .d0(gamma_sum_tmp1_V_d0),
    .q0(gamma_sum_tmp1_V_q0),
    .address1(gamma_sum_tmp1_V_address1),
    .ce1(gamma_sum_tmp1_V_ce1),
    .q1(gamma_sum_tmp1_V_q1)
);

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp2_V #(
    .DataWidth( 60 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
alpha_sum_tmp2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha_sum_tmp2_V_address0),
    .ce0(alpha_sum_tmp2_V_ce0),
    .we0(alpha_sum_tmp2_V_we0),
    .d0(alpha_sum_tmp2_V_d0),
    .q0(alpha_sum_tmp2_V_q0),
    .address1(alpha_sum_tmp2_V_address1),
    .ce1(alpha_sum_tmp2_V_ce1),
    .q1(alpha_sum_tmp2_V_q1)
);

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp2_V #(
    .DataWidth( 60 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
beta_sum_tmp2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(beta_sum_tmp2_V_address0),
    .ce0(beta_sum_tmp2_V_ce0),
    .we0(beta_sum_tmp2_V_we0),
    .d0(beta_sum_tmp2_V_d0),
    .q0(beta_sum_tmp2_V_q0),
    .address1(beta_sum_tmp2_V_address1),
    .ce1(beta_sum_tmp2_V_ce1),
    .q1(beta_sum_tmp2_V_q1)
);

LLSSineReconstruction_read_and_gen_2x2_alpha_sum_tmp2_V #(
    .DataWidth( 60 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
gamma_sum_tmp2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gamma_sum_tmp2_V_address0),
    .ce0(gamma_sum_tmp2_V_ce0),
    .we0(gamma_sum_tmp2_V_we0),
    .d0(gamma_sum_tmp2_V_d0),
    .q0(gamma_sum_tmp2_V_q0),
    .address1(gamma_sum_tmp2_V_address1),
    .ce1(gamma_sum_tmp2_V_ce1),
    .q1(gamma_sum_tmp2_V_q1)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U133(
    .din0(r_V_23_fu_908_p0),
    .din1(r_V_23_fu_908_p1),
    .dout(r_V_23_fu_908_p2)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U134(
    .din0(r_V_27_fu_926_p0),
    .din1(r_V_27_fu_926_p1),
    .dout(r_V_27_fu_926_p2)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U135(
    .din0(r_V_28_fu_940_p0),
    .din1(r_V_28_fu_940_p1),
    .dout(r_V_28_fu_940_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((sine_reconstructor_16_1075_full_n == 1'b0) | (sine_reconstructor_16_974_full_n == 1'b0) | (sine_reconstructor_16_873_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln599_fu_888_p2 == 1'd1))) begin
        idx_V_reg_764 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        idx_V_reg_764 <= add_ln691_reg_1408;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln623_fu_1069_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        k_2_reg_775 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_2_reg_775 <= add_ln645_reg_1446;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln645_fu_1106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        k_3_reg_786 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        k_3_reg_786 <= add_ln657_reg_1491;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln657_fu_1169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        k_4_reg_797 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        k_4_reg_797 <= add_ln668_reg_1536;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd1))) begin
        k_reg_753 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_753 <= add_ln599_reg_1334;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_742 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd0))) begin
        t_reg_742 <= add_ln581_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln599_reg_1334 <= add_ln599_fu_836_p2;
        zext_ln599_reg_1339[6 : 0] <= zext_ln599_fu_842_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln645_reg_1446 <= add_ln645_fu_1096_p2;
        zext_ln645_reg_1451[3 : 0] <= zext_ln645_fu_1102_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln657_reg_1491 <= add_ln657_fu_1159_p2;
        zext_ln657_reg_1496[2 : 0] <= zext_ln657_fu_1165_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln668_reg_1536 <= add_ln668_fu_1222_p2;
        zext_ln668_reg_1541[1 : 0] <= zext_ln668_fu_1228_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln691_reg_1408 <= add_ln691_fu_1053_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd1))) begin
        col_i_load_cast_reg_1324[1 : 0] <= col_i_load_cast_fu_830_p1[1 : 0];
        zext_ln599_1_reg_1329[1 : 0] <= zext_ln599_1_fu_833_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        col_i_read_reg_1306 <= col_i_dout;
        col_j_read_reg_1311 <= col_j_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln599_fu_888_p2 == 1'd0))) begin
        empty_reg_1358 <= empty_fu_894_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_V_23_reg_1363 <= r_V_23_fu_908_p2;
        r_V_27_reg_1378 <= r_V_27_fu_926_p2;
        r_V_28_reg_1393 <= r_V_28_fu_940_p2;
        this_14_0_addr_1_reg_1368 <= idxprom5625_i_fu_898_p1;
        this_15_0_addr_1_reg_1383 <= idxprom5625_i_fu_898_p1;
        this_16_0_addr_1_reg_1398 <= idxprom5625_i_fu_898_p1;
        tmp_21_reg_1388 <= r_V_27_fu_926_p2[32'd38];
        tmp_22_reg_1403 <= r_V_28_fu_940_p2[32'd38];
        tmp_reg_1373 <= r_V_23_fu_908_p2[32'd38];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln623_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        this_17_addr_1_reg_1416 <= zext_ln623_fu_1059_p1;
        this_18_addr_1_reg_1426 <= zext_ln623_fu_1059_p1;
        this_19_addr_1_reg_1436 <= zext_ln623_fu_1059_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_i_0_ce0 = 1'b1;
    end else begin
        A_i_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_i_0_we0 = 1'b1;
    end else begin
        A_i_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_j_0_ce0 = 1'b1;
    end else begin
        A_j_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_j_0_we0 = 1'b1;
    end else begin
        A_j_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        alpha_sum_tmp0_V_address0 = zext_ln703_1_fu_1194_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        alpha_sum_tmp0_V_address0 = zext_ln645_reg_1451;
    end else begin
        alpha_sum_tmp0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        alpha_sum_tmp0_V_ce0 = 1'b1;
    end else begin
        alpha_sum_tmp0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        alpha_sum_tmp0_V_ce1 = 1'b1;
    end else begin
        alpha_sum_tmp0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        alpha_sum_tmp0_V_we0 = 1'b1;
    end else begin
        alpha_sum_tmp0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        alpha_sum_tmp1_V_address0 = zext_ln703_2_fu_1257_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        alpha_sum_tmp1_V_address0 = zext_ln657_reg_1496;
    end else begin
        alpha_sum_tmp1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        alpha_sum_tmp1_V_ce0 = 1'b1;
    end else begin
        alpha_sum_tmp1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        alpha_sum_tmp1_V_ce1 = 1'b1;
    end else begin
        alpha_sum_tmp1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        alpha_sum_tmp1_V_we0 = 1'b1;
    end else begin
        alpha_sum_tmp1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        alpha_sum_tmp2_V_address0 = zext_ln668_reg_1541;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        alpha_sum_tmp2_V_address0 = 64'd1;
    end else begin
        alpha_sum_tmp2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        alpha_sum_tmp2_V_ce0 = 1'b1;
    end else begin
        alpha_sum_tmp2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        alpha_sum_tmp2_V_ce1 = 1'b1;
    end else begin
        alpha_sum_tmp2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        alpha_sum_tmp2_V_we0 = 1'b1;
    end else begin
        alpha_sum_tmp2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((sine_reconstructor_16_1075_full_n == 1'b0) | (sine_reconstructor_16_974_full_n == 1'b0) | (sine_reconstructor_16_873_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((sine_reconstructor_16_1075_full_n == 1'b0) | (sine_reconstructor_16_974_full_n == 1'b0) | (sine_reconstructor_16_873_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        beta_sum_tmp0_V_address0 = zext_ln703_1_fu_1194_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        beta_sum_tmp0_V_address0 = zext_ln645_reg_1451;
    end else begin
        beta_sum_tmp0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        beta_sum_tmp0_V_ce0 = 1'b1;
    end else begin
        beta_sum_tmp0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        beta_sum_tmp0_V_ce1 = 1'b1;
    end else begin
        beta_sum_tmp0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        beta_sum_tmp0_V_we0 = 1'b1;
    end else begin
        beta_sum_tmp0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        beta_sum_tmp1_V_address0 = zext_ln703_2_fu_1257_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        beta_sum_tmp1_V_address0 = zext_ln657_reg_1496;
    end else begin
        beta_sum_tmp1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        beta_sum_tmp1_V_ce0 = 1'b1;
    end else begin
        beta_sum_tmp1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        beta_sum_tmp1_V_ce1 = 1'b1;
    end else begin
        beta_sum_tmp1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        beta_sum_tmp1_V_we0 = 1'b1;
    end else begin
        beta_sum_tmp1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        beta_sum_tmp2_V_address0 = zext_ln668_reg_1541;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        beta_sum_tmp2_V_address0 = 64'd1;
    end else begin
        beta_sum_tmp2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        beta_sum_tmp2_V_ce0 = 1'b1;
    end else begin
        beta_sum_tmp2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        beta_sum_tmp2_V_ce1 = 1'b1;
    end else begin
        beta_sum_tmp2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        beta_sum_tmp2_V_we0 = 1'b1;
    end else begin
        beta_sum_tmp2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_blk_n = col_i_empty_n;
    end else begin
        col_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_read = 1'b1;
    end else begin
        col_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_blk_n = col_j_empty_n;
    end else begin
        col_j_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_read = 1'b1;
    end else begin
        col_j_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gamma_sum_tmp0_V_address0 = zext_ln703_1_fu_1194_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        gamma_sum_tmp0_V_address0 = zext_ln645_reg_1451;
    end else begin
        gamma_sum_tmp0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        gamma_sum_tmp0_V_ce0 = 1'b1;
    end else begin
        gamma_sum_tmp0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gamma_sum_tmp0_V_ce1 = 1'b1;
    end else begin
        gamma_sum_tmp0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        gamma_sum_tmp0_V_we0 = 1'b1;
    end else begin
        gamma_sum_tmp0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gamma_sum_tmp1_V_address0 = zext_ln703_2_fu_1257_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        gamma_sum_tmp1_V_address0 = zext_ln657_reg_1496;
    end else begin
        gamma_sum_tmp1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        gamma_sum_tmp1_V_ce0 = 1'b1;
    end else begin
        gamma_sum_tmp1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gamma_sum_tmp1_V_ce1 = 1'b1;
    end else begin
        gamma_sum_tmp1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gamma_sum_tmp1_V_we0 = 1'b1;
    end else begin
        gamma_sum_tmp1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gamma_sum_tmp2_V_address0 = zext_ln668_reg_1541;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gamma_sum_tmp2_V_address0 = 64'd1;
    end else begin
        gamma_sum_tmp2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        gamma_sum_tmp2_V_ce0 = 1'b1;
    end else begin
        gamma_sum_tmp2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gamma_sum_tmp2_V_ce1 = 1'b1;
    end else begin
        gamma_sum_tmp2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gamma_sum_tmp2_V_we0 = 1'b1;
    end else begin
        gamma_sum_tmp2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        matA_0_ce0 = 1'b1;
    end else begin
        matA_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        matA_0_ce1 = 1'b1;
    end else begin
        matA_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sine_reconstructor_16_1075_blk_n = sine_reconstructor_16_1075_full_n;
    end else begin
        sine_reconstructor_16_1075_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((sine_reconstructor_16_1075_full_n == 1'b0) | (sine_reconstructor_16_974_full_n == 1'b0) | (sine_reconstructor_16_873_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        sine_reconstructor_16_1075_write = 1'b1;
    end else begin
        sine_reconstructor_16_1075_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sine_reconstructor_16_873_blk_n = sine_reconstructor_16_873_full_n;
    end else begin
        sine_reconstructor_16_873_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((sine_reconstructor_16_1075_full_n == 1'b0) | (sine_reconstructor_16_974_full_n == 1'b0) | (sine_reconstructor_16_873_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        sine_reconstructor_16_873_write = 1'b1;
    end else begin
        sine_reconstructor_16_873_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sine_reconstructor_16_974_blk_n = sine_reconstructor_16_974_full_n;
    end else begin
        sine_reconstructor_16_974_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((sine_reconstructor_16_1075_full_n == 1'b0) | (sine_reconstructor_16_974_full_n == 1'b0) | (sine_reconstructor_16_873_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        sine_reconstructor_16_974_write = 1'b1;
    end else begin
        sine_reconstructor_16_974_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        this_14_0_address0 = zext_ln623_fu_1059_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        this_14_0_address0 = this_14_0_addr_1_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        this_14_0_address0 = idxprom5625_i_fu_898_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_14_0_address0 = zext_ln581_fu_814_p1;
    end else begin
        this_14_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        this_14_0_ce0 = 1'b1;
    end else begin
        this_14_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        this_14_0_d0 = add_ln415_fu_980_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_14_0_d0 = 60'd0;
    end else begin
        this_14_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd0)))) begin
        this_14_0_we0 = 1'b1;
    end else begin
        this_14_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        this_15_0_address0 = zext_ln623_fu_1059_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        this_15_0_address0 = this_15_0_addr_1_reg_1383;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        this_15_0_address0 = idxprom5625_i_fu_898_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_15_0_address0 = zext_ln581_fu_814_p1;
    end else begin
        this_15_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        this_15_0_ce0 = 1'b1;
    end else begin
        this_15_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        this_15_0_d0 = add_ln415_3_fu_1013_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_15_0_d0 = 60'd0;
    end else begin
        this_15_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd0)))) begin
        this_15_0_we0 = 1'b1;
    end else begin
        this_15_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        this_16_0_address0 = zext_ln623_fu_1059_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        this_16_0_address0 = this_16_0_addr_1_reg_1398;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        this_16_0_address0 = idxprom5625_i_fu_898_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_16_0_address0 = zext_ln581_fu_814_p1;
    end else begin
        this_16_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        this_16_0_ce0 = 1'b1;
    end else begin
        this_16_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        this_16_0_d0 = add_ln415_4_fu_1046_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_16_0_d0 = 60'd0;
    end else begin
        this_16_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd0)))) begin
        this_16_0_we0 = 1'b1;
    end else begin
        this_16_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        this_17_address0 = zext_ln703_fu_1131_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        this_17_address0 = this_17_addr_1_reg_1416;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        this_17_address0 = zext_ln623_fu_1059_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_17_address0 = zext_ln581_fu_814_p1;
    end else begin
        this_17_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        this_17_ce0 = 1'b1;
    end else begin
        this_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        this_17_ce1 = 1'b1;
    end else begin
        this_17_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        this_17_d0 = add_ln703_fu_1075_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_17_d0 = 60'd0;
    end else begin
        this_17_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd0)))) begin
        this_17_we0 = 1'b1;
    end else begin
        this_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        this_18_address0 = zext_ln703_fu_1131_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        this_18_address0 = this_18_addr_1_reg_1426;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        this_18_address0 = zext_ln623_fu_1059_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_18_address0 = zext_ln581_fu_814_p1;
    end else begin
        this_18_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        this_18_ce0 = 1'b1;
    end else begin
        this_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        this_18_ce1 = 1'b1;
    end else begin
        this_18_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        this_18_d0 = add_ln703_1_fu_1082_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_18_d0 = 60'd0;
    end else begin
        this_18_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd0)))) begin
        this_18_we0 = 1'b1;
    end else begin
        this_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        this_19_address0 = zext_ln703_fu_1131_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        this_19_address0 = this_19_addr_1_reg_1436;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        this_19_address0 = zext_ln623_fu_1059_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_19_address0 = zext_ln581_fu_814_p1;
    end else begin
        this_19_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        this_19_ce0 = 1'b1;
    end else begin
        this_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        this_19_ce1 = 1'b1;
    end else begin
        this_19_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        this_19_d0 = add_ln703_2_fu_1089_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        this_19_d0 = 60'd0;
    end else begin
        this_19_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd0)))) begin
        this_19_we0 = 1'b1;
    end else begin
        this_19_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln581_fu_824_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln599_fu_888_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln623_fu_1069_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln645_fu_1106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln657_fu_1169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln668_fu_1232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if ((~((sine_reconstructor_16_1075_full_n == 1'b0) | (sine_reconstructor_16_974_full_n == 1'b0) | (sine_reconstructor_16_873_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_i_0_address0 = zext_ln599_reg_1339;

assign A_i_0_d0 = matA_0_q1;

assign A_j_0_address0 = zext_ln599_reg_1339;

assign A_j_0_d0 = matA_0_q0;

assign add_ln415_3_fu_1013_p2 = (trunc_ln708_3_fu_1000_p4 + zext_ln415_3_fu_1010_p1);

assign add_ln415_4_fu_1046_p2 = (trunc_ln708_4_fu_1033_p4 + zext_ln415_4_fu_1043_p1);

assign add_ln415_fu_980_p2 = (trunc_ln_fu_967_p4 + zext_ln415_fu_977_p1);

assign add_ln581_fu_808_p2 = (t_reg_742 + 5'd1);

assign add_ln599_fu_836_p2 = (k_reg_753 + 7'd1);

assign add_ln610_fu_868_p2 = (sub_ln610_fu_862_p2 + col_i_load_cast_reg_1324);

assign add_ln611_fu_878_p2 = (sub_ln610_fu_862_p2 + zext_ln599_1_reg_1329);

assign add_ln645_fu_1096_p2 = (k_2_reg_775 + 4'd1);

assign add_ln657_fu_1159_p2 = (k_3_reg_786 + 3'd1);

assign add_ln668_fu_1222_p2 = (k_4_reg_797 + 2'd1);

assign add_ln691_fu_1053_p2 = (idx_V_reg_764 + 5'd1);

assign add_ln703_1_fu_1082_p2 = (this_15_0_q0 + this_18_q0);

assign add_ln703_2_fu_1089_p2 = (this_16_0_q0 + this_19_q0);

assign add_ln703_fu_1075_p2 = (this_14_0_q0 + this_17_q0);

assign alpha_sum_tmp0_V_address1 = zext_ln660_fu_1181_p1;

assign alpha_sum_tmp0_V_d0 = (this_17_q0 + this_17_q1);

assign alpha_sum_tmp1_V_address1 = zext_ln671_fu_1244_p1;

assign alpha_sum_tmp1_V_d0 = (alpha_sum_tmp0_V_q0 + alpha_sum_tmp0_V_q1);

assign alpha_sum_tmp2_V_address1 = 64'd0;

assign alpha_sum_tmp2_V_d0 = (alpha_sum_tmp1_V_q0 + alpha_sum_tmp1_V_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((sine_reconstructor_16_1075_full_n == 1'b0) | (sine_reconstructor_16_974_full_n == 1'b0) | (sine_reconstructor_16_873_full_n == 1'b0));
end

assign beta_sum_tmp0_V_address1 = zext_ln660_fu_1181_p1;

assign beta_sum_tmp0_V_d0 = (this_18_q0 + this_18_q1);

assign beta_sum_tmp1_V_address1 = zext_ln671_fu_1244_p1;

assign beta_sum_tmp1_V_d0 = (beta_sum_tmp0_V_q0 + beta_sum_tmp0_V_q1);

assign beta_sum_tmp2_V_address1 = 64'd0;

assign beta_sum_tmp2_V_d0 = (beta_sum_tmp1_V_q0 + beta_sum_tmp1_V_q1);

assign col_i_load_cast_fu_830_p1 = col_i_read_reg_1306;

assign empty_fu_894_p1 = k_reg_753[3:0];

assign gamma_sum_tmp0_V_address1 = zext_ln660_fu_1181_p1;

assign gamma_sum_tmp0_V_d0 = (this_19_q0 + this_19_q1);

assign gamma_sum_tmp1_V_address1 = zext_ln671_fu_1244_p1;

assign gamma_sum_tmp1_V_d0 = (gamma_sum_tmp0_V_q0 + gamma_sum_tmp0_V_q1);

assign gamma_sum_tmp2_V_address1 = 64'd0;

assign gamma_sum_tmp2_V_d0 = (gamma_sum_tmp1_V_q0 + gamma_sum_tmp1_V_q1);

assign icmp_ln581_fu_824_p2 = ((t_reg_742 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln599_fu_888_p2 = ((k_reg_753 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln623_fu_1069_p2 = ((idx_V_reg_764 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln645_fu_1106_p2 = ((k_2_reg_775 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln657_fu_1169_p2 = ((k_3_reg_786 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln668_fu_1232_p2 = ((k_4_reg_797 == 2'd2) ? 1'b1 : 1'b0);

assign idxprom5625_i_fu_898_p1 = empty_reg_1358;

assign lhs_1_fu_954_p3 = {{this_14_0_q0}, {39'd0}};

assign lhs_3_fu_987_p3 = {{this_15_0_q0}, {39'd0}};

assign lhs_5_fu_1020_p3 = {{this_16_0_q0}, {39'd0}};

assign matA_0_address0 = zext_ln611_fu_883_p1;

assign matA_0_address1 = zext_ln610_1_fu_873_p1;

assign or_ln648_fu_1125_p2 = (shl_ln648_fu_1112_p2 | 4'd1);

assign or_ln660_fu_1188_p2 = (shl_ln660_fu_1175_p2 | 3'd1);

assign or_ln671_fu_1251_p2 = (shl_ln671_fu_1238_p2 | 2'd1);

assign r_V_23_fu_908_p0 = sext_ln1115_fu_904_p1;

assign r_V_23_fu_908_p1 = sext_ln1115_fu_904_p1;

assign r_V_27_fu_926_p0 = sext_ln1115_1_fu_922_p1;

assign r_V_27_fu_926_p1 = sext_ln1115_1_fu_922_p1;

assign r_V_28_fu_940_p0 = sext_ln1115_1_fu_922_p1;

assign r_V_28_fu_940_p1 = sext_ln1115_fu_904_p1;

assign ret_V_3_fu_995_p2 = (lhs_3_fu_987_p3 + r_V_27_reg_1378);

assign ret_V_4_fu_1028_p2 = (lhs_5_fu_1020_p3 + r_V_28_reg_1393);

assign ret_V_fu_962_p2 = (lhs_1_fu_954_p3 + r_V_23_reg_1363);

assign sext_ln1115_1_fu_922_p0 = matA_0_q0;

assign sext_ln1115_1_fu_922_p1 = sext_ln1115_1_fu_922_p0;

assign sext_ln1115_fu_904_p0 = matA_0_q1;

assign sext_ln1115_fu_904_p1 = sext_ln1115_fu_904_p0;

assign shl_ln648_fu_1112_p2 = k_2_reg_775 << 4'd1;

assign shl_ln660_fu_1175_p2 = k_3_reg_786 << 3'd1;

assign shl_ln671_fu_1238_p2 = k_4_reg_797 << 2'd1;

assign sine_reconstructor_16_1075_din = (gamma_sum_tmp2_V_q0 + gamma_sum_tmp2_V_q1);

assign sine_reconstructor_16_873_din = (alpha_sum_tmp2_V_q0 + alpha_sum_tmp2_V_q1);

assign sine_reconstructor_16_974_din = (beta_sum_tmp2_V_q0 + beta_sum_tmp2_V_q1);

assign sub_ln610_fu_862_p2 = (tmp_cast_fu_854_p3 - zext_ln610_fu_846_p1);

assign this_17_address1 = zext_ln648_fu_1118_p1;

assign this_18_address1 = zext_ln648_fu_1118_p1;

assign this_19_address1 = zext_ln648_fu_1118_p1;

assign tmp_cast_fu_854_p3 = {{trunc_ln610_fu_850_p1}, {2'd0}};

assign trunc_ln610_fu_850_p1 = k_reg_753[5:0];

assign trunc_ln708_3_fu_1000_p4 = {{ret_V_3_fu_995_p2[98:39]}};

assign trunc_ln708_4_fu_1033_p4 = {{ret_V_4_fu_1028_p2[98:39]}};

assign trunc_ln_fu_967_p4 = {{ret_V_fu_962_p2[98:39]}};

assign zext_ln415_3_fu_1010_p1 = tmp_21_reg_1388;

assign zext_ln415_4_fu_1043_p1 = tmp_22_reg_1403;

assign zext_ln415_fu_977_p1 = tmp_reg_1373;

assign zext_ln581_fu_814_p1 = t_reg_742;

assign zext_ln599_1_fu_833_p1 = col_j_read_reg_1311;

assign zext_ln599_fu_842_p1 = k_reg_753;

assign zext_ln610_1_fu_873_p1 = add_ln610_fu_868_p2;

assign zext_ln610_fu_846_p1 = k_reg_753;

assign zext_ln611_fu_883_p1 = add_ln611_fu_878_p2;

assign zext_ln623_fu_1059_p1 = idx_V_reg_764;

assign zext_ln645_fu_1102_p1 = k_2_reg_775;

assign zext_ln648_fu_1118_p1 = shl_ln648_fu_1112_p2;

assign zext_ln657_fu_1165_p1 = k_3_reg_786;

assign zext_ln660_fu_1181_p1 = shl_ln660_fu_1175_p2;

assign zext_ln668_fu_1228_p1 = k_4_reg_797;

assign zext_ln671_fu_1244_p1 = shl_ln671_fu_1238_p2;

assign zext_ln703_1_fu_1194_p1 = or_ln660_fu_1188_p2;

assign zext_ln703_2_fu_1257_p1 = or_ln671_fu_1251_p2;

assign zext_ln703_fu_1131_p1 = or_ln648_fu_1125_p2;

always @ (posedge ap_clk) begin
    col_i_load_cast_reg_1324[7:2] <= 6'b000000;
    zext_ln599_1_reg_1329[7:2] <= 6'b000000;
    zext_ln599_reg_1339[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln645_reg_1451[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln657_reg_1496[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln668_reg_1541[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //LLSSineReconstruction_read_and_gen_2x2
