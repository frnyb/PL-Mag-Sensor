// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_computeRemainingChannels (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_times_address0,
        this_times_ce0,
        this_times_q0,
        this_offsets_s_address0,
        this_offsets_s_ce0,
        this_offsets_s_we0,
        this_offsets_s_d0,
        this_amplitudes_s_address0,
        this_amplitudes_s_ce0,
        this_amplitudes_s_we0,
        this_amplitudes_s_d0,
        p_read,
        this_A_address0,
        this_A_ce0,
        this_A_we0,
        this_A_d0,
        this_A_q0,
        this_b_address0,
        this_b_ce0,
        this_b_we0,
        this_b_d0,
        this_b_q0,
        sliding_window_front_ptr_s,
        sliding_window_back_ptr_s,
        sliding_window_buffer_samples_sample_V_7_11_address0,
        sliding_window_buffer_samples_sample_V_7_11_ce0,
        sliding_window_buffer_samples_sample_V_7_11_q0,
        sliding_window_buffer_samples_sample_V_7_10_address0,
        sliding_window_buffer_samples_sample_V_7_10_ce0,
        sliding_window_buffer_samples_sample_V_7_10_q0,
        sliding_window_buffer_samples_sample_V_7_9_address0,
        sliding_window_buffer_samples_sample_V_7_9_ce0,
        sliding_window_buffer_samples_sample_V_7_9_q0,
        sliding_window_buffer_samples_sample_V_7_8_address0,
        sliding_window_buffer_samples_sample_V_7_8_ce0,
        sliding_window_buffer_samples_sample_V_7_8_q0,
        sliding_window_buffer_samples_sample_V_7_7_address0,
        sliding_window_buffer_samples_sample_V_7_7_ce0,
        sliding_window_buffer_samples_sample_V_7_7_q0,
        sliding_window_buffer_samples_sample_V_7_6_address0,
        sliding_window_buffer_samples_sample_V_7_6_ce0,
        sliding_window_buffer_samples_sample_V_7_6_q0,
        sliding_window_buffer_samples_sample_V_7_5_address0,
        sliding_window_buffer_samples_sample_V_7_5_ce0,
        sliding_window_buffer_samples_sample_V_7_5_q0,
        sliding_window_buffer_samples_sample_V_7_4_address0,
        sliding_window_buffer_samples_sample_V_7_4_ce0,
        sliding_window_buffer_samples_sample_V_7_4_q0,
        sliding_window_buffer_samples_sample_V_7_3_address0,
        sliding_window_buffer_samples_sample_V_7_3_ce0,
        sliding_window_buffer_samples_sample_V_7_3_q0,
        sliding_window_buffer_samples_sample_V_7_2_address0,
        sliding_window_buffer_samples_sample_V_7_2_ce0,
        sliding_window_buffer_samples_sample_V_7_2_q0,
        sliding_window_buffer_samples_sample_V_7_1_address0,
        sliding_window_buffer_samples_sample_V_7_1_ce0,
        sliding_window_buffer_samples_sample_V_7_1_q0,
        sliding_window_buffer_samples_sample_V_7_0_address0,
        sliding_window_buffer_samples_sample_V_7_0_ce0,
        sliding_window_buffer_samples_sample_V_7_0_q0,
        sliding_window_buffer_samples_sample_V_6_11_address0,
        sliding_window_buffer_samples_sample_V_6_11_ce0,
        sliding_window_buffer_samples_sample_V_6_11_q0,
        sliding_window_buffer_samples_sample_V_6_10_address0,
        sliding_window_buffer_samples_sample_V_6_10_ce0,
        sliding_window_buffer_samples_sample_V_6_10_q0,
        sliding_window_buffer_samples_sample_V_6_9_address0,
        sliding_window_buffer_samples_sample_V_6_9_ce0,
        sliding_window_buffer_samples_sample_V_6_9_q0,
        sliding_window_buffer_samples_sample_V_6_8_address0,
        sliding_window_buffer_samples_sample_V_6_8_ce0,
        sliding_window_buffer_samples_sample_V_6_8_q0,
        sliding_window_buffer_samples_sample_V_6_7_address0,
        sliding_window_buffer_samples_sample_V_6_7_ce0,
        sliding_window_buffer_samples_sample_V_6_7_q0,
        sliding_window_buffer_samples_sample_V_6_6_address0,
        sliding_window_buffer_samples_sample_V_6_6_ce0,
        sliding_window_buffer_samples_sample_V_6_6_q0,
        sliding_window_buffer_samples_sample_V_6_5_address0,
        sliding_window_buffer_samples_sample_V_6_5_ce0,
        sliding_window_buffer_samples_sample_V_6_5_q0,
        sliding_window_buffer_samples_sample_V_6_4_address0,
        sliding_window_buffer_samples_sample_V_6_4_ce0,
        sliding_window_buffer_samples_sample_V_6_4_q0,
        sliding_window_buffer_samples_sample_V_6_3_address0,
        sliding_window_buffer_samples_sample_V_6_3_ce0,
        sliding_window_buffer_samples_sample_V_6_3_q0,
        sliding_window_buffer_samples_sample_V_6_2_address0,
        sliding_window_buffer_samples_sample_V_6_2_ce0,
        sliding_window_buffer_samples_sample_V_6_2_q0,
        sliding_window_buffer_samples_sample_V_6_1_address0,
        sliding_window_buffer_samples_sample_V_6_1_ce0,
        sliding_window_buffer_samples_sample_V_6_1_q0,
        sliding_window_buffer_samples_sample_V_6_0_address0,
        sliding_window_buffer_samples_sample_V_6_0_ce0,
        sliding_window_buffer_samples_sample_V_6_0_q0,
        sliding_window_buffer_samples_sample_V_5_11_address0,
        sliding_window_buffer_samples_sample_V_5_11_ce0,
        sliding_window_buffer_samples_sample_V_5_11_q0,
        sliding_window_buffer_samples_sample_V_5_10_address0,
        sliding_window_buffer_samples_sample_V_5_10_ce0,
        sliding_window_buffer_samples_sample_V_5_10_q0,
        sliding_window_buffer_samples_sample_V_5_9_address0,
        sliding_window_buffer_samples_sample_V_5_9_ce0,
        sliding_window_buffer_samples_sample_V_5_9_q0,
        sliding_window_buffer_samples_sample_V_5_8_address0,
        sliding_window_buffer_samples_sample_V_5_8_ce0,
        sliding_window_buffer_samples_sample_V_5_8_q0,
        sliding_window_buffer_samples_sample_V_5_7_address0,
        sliding_window_buffer_samples_sample_V_5_7_ce0,
        sliding_window_buffer_samples_sample_V_5_7_q0,
        sliding_window_buffer_samples_sample_V_5_6_address0,
        sliding_window_buffer_samples_sample_V_5_6_ce0,
        sliding_window_buffer_samples_sample_V_5_6_q0,
        sliding_window_buffer_samples_sample_V_5_5_address0,
        sliding_window_buffer_samples_sample_V_5_5_ce0,
        sliding_window_buffer_samples_sample_V_5_5_q0,
        sliding_window_buffer_samples_sample_V_5_4_address0,
        sliding_window_buffer_samples_sample_V_5_4_ce0,
        sliding_window_buffer_samples_sample_V_5_4_q0,
        sliding_window_buffer_samples_sample_V_5_3_address0,
        sliding_window_buffer_samples_sample_V_5_3_ce0,
        sliding_window_buffer_samples_sample_V_5_3_q0,
        sliding_window_buffer_samples_sample_V_5_2_address0,
        sliding_window_buffer_samples_sample_V_5_2_ce0,
        sliding_window_buffer_samples_sample_V_5_2_q0,
        sliding_window_buffer_samples_sample_V_5_1_address0,
        sliding_window_buffer_samples_sample_V_5_1_ce0,
        sliding_window_buffer_samples_sample_V_5_1_q0,
        sliding_window_buffer_samples_sample_V_5_0_address0,
        sliding_window_buffer_samples_sample_V_5_0_ce0,
        sliding_window_buffer_samples_sample_V_5_0_q0,
        sliding_window_buffer_samples_sample_V_4_11_address0,
        sliding_window_buffer_samples_sample_V_4_11_ce0,
        sliding_window_buffer_samples_sample_V_4_11_q0,
        sliding_window_buffer_samples_sample_V_4_10_address0,
        sliding_window_buffer_samples_sample_V_4_10_ce0,
        sliding_window_buffer_samples_sample_V_4_10_q0,
        sliding_window_buffer_samples_sample_V_4_9_address0,
        sliding_window_buffer_samples_sample_V_4_9_ce0,
        sliding_window_buffer_samples_sample_V_4_9_q0,
        sliding_window_buffer_samples_sample_V_4_8_address0,
        sliding_window_buffer_samples_sample_V_4_8_ce0,
        sliding_window_buffer_samples_sample_V_4_8_q0,
        sliding_window_buffer_samples_sample_V_4_7_address0,
        sliding_window_buffer_samples_sample_V_4_7_ce0,
        sliding_window_buffer_samples_sample_V_4_7_q0,
        sliding_window_buffer_samples_sample_V_4_6_address0,
        sliding_window_buffer_samples_sample_V_4_6_ce0,
        sliding_window_buffer_samples_sample_V_4_6_q0,
        sliding_window_buffer_samples_sample_V_4_5_address0,
        sliding_window_buffer_samples_sample_V_4_5_ce0,
        sliding_window_buffer_samples_sample_V_4_5_q0,
        sliding_window_buffer_samples_sample_V_4_4_address0,
        sliding_window_buffer_samples_sample_V_4_4_ce0,
        sliding_window_buffer_samples_sample_V_4_4_q0,
        sliding_window_buffer_samples_sample_V_4_3_address0,
        sliding_window_buffer_samples_sample_V_4_3_ce0,
        sliding_window_buffer_samples_sample_V_4_3_q0,
        sliding_window_buffer_samples_sample_V_4_2_address0,
        sliding_window_buffer_samples_sample_V_4_2_ce0,
        sliding_window_buffer_samples_sample_V_4_2_q0,
        sliding_window_buffer_samples_sample_V_4_1_address0,
        sliding_window_buffer_samples_sample_V_4_1_ce0,
        sliding_window_buffer_samples_sample_V_4_1_q0,
        sliding_window_buffer_samples_sample_V_4_0_address0,
        sliding_window_buffer_samples_sample_V_4_0_ce0,
        sliding_window_buffer_samples_sample_V_4_0_q0,
        sliding_window_buffer_samples_sample_V_3_11_address0,
        sliding_window_buffer_samples_sample_V_3_11_ce0,
        sliding_window_buffer_samples_sample_V_3_11_q0,
        sliding_window_buffer_samples_sample_V_3_10_address0,
        sliding_window_buffer_samples_sample_V_3_10_ce0,
        sliding_window_buffer_samples_sample_V_3_10_q0,
        sliding_window_buffer_samples_sample_V_3_9_address0,
        sliding_window_buffer_samples_sample_V_3_9_ce0,
        sliding_window_buffer_samples_sample_V_3_9_q0,
        sliding_window_buffer_samples_sample_V_3_8_address0,
        sliding_window_buffer_samples_sample_V_3_8_ce0,
        sliding_window_buffer_samples_sample_V_3_8_q0,
        sliding_window_buffer_samples_sample_V_3_7_address0,
        sliding_window_buffer_samples_sample_V_3_7_ce0,
        sliding_window_buffer_samples_sample_V_3_7_q0,
        sliding_window_buffer_samples_sample_V_3_6_address0,
        sliding_window_buffer_samples_sample_V_3_6_ce0,
        sliding_window_buffer_samples_sample_V_3_6_q0,
        sliding_window_buffer_samples_sample_V_3_5_address0,
        sliding_window_buffer_samples_sample_V_3_5_ce0,
        sliding_window_buffer_samples_sample_V_3_5_q0,
        sliding_window_buffer_samples_sample_V_3_4_address0,
        sliding_window_buffer_samples_sample_V_3_4_ce0,
        sliding_window_buffer_samples_sample_V_3_4_q0,
        sliding_window_buffer_samples_sample_V_3_3_address0,
        sliding_window_buffer_samples_sample_V_3_3_ce0,
        sliding_window_buffer_samples_sample_V_3_3_q0,
        sliding_window_buffer_samples_sample_V_3_2_address0,
        sliding_window_buffer_samples_sample_V_3_2_ce0,
        sliding_window_buffer_samples_sample_V_3_2_q0,
        sliding_window_buffer_samples_sample_V_3_1_address0,
        sliding_window_buffer_samples_sample_V_3_1_ce0,
        sliding_window_buffer_samples_sample_V_3_1_q0,
        sliding_window_buffer_samples_sample_V_3_0_address0,
        sliding_window_buffer_samples_sample_V_3_0_ce0,
        sliding_window_buffer_samples_sample_V_3_0_q0,
        sliding_window_buffer_samples_sample_V_2_11_address0,
        sliding_window_buffer_samples_sample_V_2_11_ce0,
        sliding_window_buffer_samples_sample_V_2_11_q0,
        sliding_window_buffer_samples_sample_V_2_10_address0,
        sliding_window_buffer_samples_sample_V_2_10_ce0,
        sliding_window_buffer_samples_sample_V_2_10_q0,
        sliding_window_buffer_samples_sample_V_2_9_address0,
        sliding_window_buffer_samples_sample_V_2_9_ce0,
        sliding_window_buffer_samples_sample_V_2_9_q0,
        sliding_window_buffer_samples_sample_V_2_8_address0,
        sliding_window_buffer_samples_sample_V_2_8_ce0,
        sliding_window_buffer_samples_sample_V_2_8_q0,
        sliding_window_buffer_samples_sample_V_2_7_address0,
        sliding_window_buffer_samples_sample_V_2_7_ce0,
        sliding_window_buffer_samples_sample_V_2_7_q0,
        sliding_window_buffer_samples_sample_V_2_6_address0,
        sliding_window_buffer_samples_sample_V_2_6_ce0,
        sliding_window_buffer_samples_sample_V_2_6_q0,
        sliding_window_buffer_samples_sample_V_2_5_address0,
        sliding_window_buffer_samples_sample_V_2_5_ce0,
        sliding_window_buffer_samples_sample_V_2_5_q0,
        sliding_window_buffer_samples_sample_V_2_4_address0,
        sliding_window_buffer_samples_sample_V_2_4_ce0,
        sliding_window_buffer_samples_sample_V_2_4_q0,
        sliding_window_buffer_samples_sample_V_2_3_address0,
        sliding_window_buffer_samples_sample_V_2_3_ce0,
        sliding_window_buffer_samples_sample_V_2_3_q0,
        sliding_window_buffer_samples_sample_V_2_2_address0,
        sliding_window_buffer_samples_sample_V_2_2_ce0,
        sliding_window_buffer_samples_sample_V_2_2_q0,
        sliding_window_buffer_samples_sample_V_2_1_address0,
        sliding_window_buffer_samples_sample_V_2_1_ce0,
        sliding_window_buffer_samples_sample_V_2_1_q0,
        sliding_window_buffer_samples_sample_V_2_0_address0,
        sliding_window_buffer_samples_sample_V_2_0_ce0,
        sliding_window_buffer_samples_sample_V_2_0_q0,
        sliding_window_buffer_samples_sample_V_1_11_address0,
        sliding_window_buffer_samples_sample_V_1_11_ce0,
        sliding_window_buffer_samples_sample_V_1_11_q0,
        sliding_window_buffer_samples_sample_V_1_10_address0,
        sliding_window_buffer_samples_sample_V_1_10_ce0,
        sliding_window_buffer_samples_sample_V_1_10_q0,
        sliding_window_buffer_samples_sample_V_1_9_address0,
        sliding_window_buffer_samples_sample_V_1_9_ce0,
        sliding_window_buffer_samples_sample_V_1_9_q0,
        sliding_window_buffer_samples_sample_V_1_8_address0,
        sliding_window_buffer_samples_sample_V_1_8_ce0,
        sliding_window_buffer_samples_sample_V_1_8_q0,
        sliding_window_buffer_samples_sample_V_1_7_address0,
        sliding_window_buffer_samples_sample_V_1_7_ce0,
        sliding_window_buffer_samples_sample_V_1_7_q0,
        sliding_window_buffer_samples_sample_V_1_6_address0,
        sliding_window_buffer_samples_sample_V_1_6_ce0,
        sliding_window_buffer_samples_sample_V_1_6_q0,
        sliding_window_buffer_samples_sample_V_1_5_address0,
        sliding_window_buffer_samples_sample_V_1_5_ce0,
        sliding_window_buffer_samples_sample_V_1_5_q0,
        sliding_window_buffer_samples_sample_V_1_4_address0,
        sliding_window_buffer_samples_sample_V_1_4_ce0,
        sliding_window_buffer_samples_sample_V_1_4_q0,
        sliding_window_buffer_samples_sample_V_1_3_address0,
        sliding_window_buffer_samples_sample_V_1_3_ce0,
        sliding_window_buffer_samples_sample_V_1_3_q0,
        sliding_window_buffer_samples_sample_V_1_2_address0,
        sliding_window_buffer_samples_sample_V_1_2_ce0,
        sliding_window_buffer_samples_sample_V_1_2_q0,
        sliding_window_buffer_samples_sample_V_1_1_address0,
        sliding_window_buffer_samples_sample_V_1_1_ce0,
        sliding_window_buffer_samples_sample_V_1_1_q0,
        sliding_window_buffer_samples_sample_V_1_0_address0,
        sliding_window_buffer_samples_sample_V_1_0_ce0,
        sliding_window_buffer_samples_sample_V_1_0_q0,
        sliding_window_buffer_samples_sample_V_0_11_address0,
        sliding_window_buffer_samples_sample_V_0_11_ce0,
        sliding_window_buffer_samples_sample_V_0_11_q0,
        sliding_window_buffer_samples_sample_V_0_10_address0,
        sliding_window_buffer_samples_sample_V_0_10_ce0,
        sliding_window_buffer_samples_sample_V_0_10_q0,
        sliding_window_buffer_samples_sample_V_0_9_address0,
        sliding_window_buffer_samples_sample_V_0_9_ce0,
        sliding_window_buffer_samples_sample_V_0_9_q0,
        sliding_window_buffer_samples_sample_V_0_8_address0,
        sliding_window_buffer_samples_sample_V_0_8_ce0,
        sliding_window_buffer_samples_sample_V_0_8_q0,
        sliding_window_buffer_samples_sample_V_0_7_address0,
        sliding_window_buffer_samples_sample_V_0_7_ce0,
        sliding_window_buffer_samples_sample_V_0_7_q0,
        sliding_window_buffer_samples_sample_V_0_6_address0,
        sliding_window_buffer_samples_sample_V_0_6_ce0,
        sliding_window_buffer_samples_sample_V_0_6_q0,
        sliding_window_buffer_samples_sample_V_0_5_address0,
        sliding_window_buffer_samples_sample_V_0_5_ce0,
        sliding_window_buffer_samples_sample_V_0_5_q0,
        sliding_window_buffer_samples_sample_V_0_4_address0,
        sliding_window_buffer_samples_sample_V_0_4_ce0,
        sliding_window_buffer_samples_sample_V_0_4_q0,
        sliding_window_buffer_samples_sample_V_0_3_address0,
        sliding_window_buffer_samples_sample_V_0_3_ce0,
        sliding_window_buffer_samples_sample_V_0_3_q0,
        sliding_window_buffer_samples_sample_V_0_2_address0,
        sliding_window_buffer_samples_sample_V_0_2_ce0,
        sliding_window_buffer_samples_sample_V_0_2_q0,
        sliding_window_buffer_samples_sample_V_0_1_address0,
        sliding_window_buffer_samples_sample_V_0_1_ce0,
        sliding_window_buffer_samples_sample_V_0_1_q0,
        sliding_window_buffer_samples_sample_V_0_0_address0,
        sliding_window_buffer_samples_sample_V_0_0_ce0,
        sliding_window_buffer_samples_sample_V_0_0_q0,
        sigma_V_address0,
        sigma_V_ce0,
        sigma_V_q0,
        sigma_V_address1,
        sigma_V_ce1,
        sigma_V_we1,
        sigma_V_d1,
        matU_V_address0,
        matU_V_ce0,
        matU_V_we0,
        matU_V_d0,
        matU_V_q0,
        A_i_V_0_address0,
        A_i_V_0_ce0,
        A_i_V_0_q0,
        A_i_V_0_address1,
        A_i_V_0_ce1,
        A_i_V_0_we1,
        A_i_V_0_d1,
        A_i_V_1_address0,
        A_i_V_1_ce0,
        A_i_V_1_q0,
        A_i_V_1_address1,
        A_i_V_1_ce1,
        A_i_V_1_we1,
        A_i_V_1_d1,
        A_j_V_0_address0,
        A_j_V_0_ce0,
        A_j_V_0_q0,
        A_j_V_0_address1,
        A_j_V_0_ce1,
        A_j_V_0_we1,
        A_j_V_0_d1,
        A_j_V_1_address0,
        A_j_V_1_ce0,
        A_j_V_1_q0,
        A_j_V_1_address1,
        A_j_V_1_ce1,
        A_j_V_1_we1,
        A_j_V_1_d1,
        matA_V_0_address0,
        matA_V_0_ce0,
        matA_V_0_we0,
        matA_V_0_d0,
        matA_V_0_q0,
        matA_V_0_address1,
        matA_V_0_ce1,
        matA_V_0_we1,
        matA_V_0_d1,
        matA_V_0_q1,
        matA_V_1_address0,
        matA_V_1_ce0,
        matA_V_1_we0,
        matA_V_1_d0,
        matA_V_1_q0,
        matA_V_1_address1,
        matA_V_1_ce1,
        matA_V_1_we1,
        matA_V_1_d1,
        matA_V_1_q1,
        V_i_V_0_address0,
        V_i_V_0_ce0,
        V_i_V_0_q0,
        V_i_V_0_address1,
        V_i_V_0_ce1,
        V_i_V_0_we1,
        V_i_V_0_d1,
        V_i_V_1_address0,
        V_i_V_1_ce0,
        V_i_V_1_q0,
        V_i_V_1_address1,
        V_i_V_1_ce1,
        V_i_V_1_we1,
        V_i_V_1_d1,
        V_j_V_0_address0,
        V_j_V_0_ce0,
        V_j_V_0_q0,
        V_j_V_0_address1,
        V_j_V_0_ce1,
        V_j_V_0_we1,
        V_j_V_0_d1,
        V_j_V_1_address0,
        V_j_V_1_ce0,
        V_j_V_1_q0,
        V_j_V_1_address1,
        V_j_V_1_ce1,
        V_j_V_1_we1,
        V_j_V_1_d1,
        matV_V_0_address0,
        matV_V_0_ce0,
        matV_V_0_we0,
        matV_V_0_d0,
        matV_V_0_q0,
        matV_V_0_address1,
        matV_V_0_ce1,
        matV_V_0_we1,
        matV_V_0_d1,
        matV_V_0_q1,
        matV_V_1_address0,
        matV_V_1_ce0,
        matV_V_1_we0,
        matV_V_1_d0,
        matV_V_1_q0,
        matV_V_1_address1,
        matV_V_1_ce1,
        matV_V_1_we1,
        matV_V_1_d1,
        matV_V_1_q1,
        U_V_address0,
        U_V_ce0,
        U_V_we0,
        U_V_d0,
        U_V_q0,
        U_V_address1,
        U_V_ce1,
        U_V_q1,
        S_V_address0,
        S_V_ce0,
        S_V_we0,
        S_V_d0,
        S_V_q0,
        V_V_address0,
        V_V_ce0,
        V_V_we0,
        V_V_d0,
        V_V_q0,
        V_V_address1,
        V_V_ce1,
        V_V_q1,
        UT_V_address0,
        UT_V_ce0,
        UT_V_we0,
        UT_V_d0,
        UT_V_q0,
        A_pinv_V_address0,
        A_pinv_V_ce0,
        A_pinv_V_we0,
        A_pinv_V_d0,
        A_pinv_V_q0,
        grp_fu_2133_p_din0,
        grp_fu_2133_p_dout0,
        grp_fu_2133_p_ce
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_pp0_stage0 = 20'd256;
parameter    ap_ST_fsm_pp0_stage1 = 20'd512;
parameter    ap_ST_fsm_pp0_stage2 = 20'd1024;
parameter    ap_ST_fsm_pp0_stage3 = 20'd2048;
parameter    ap_ST_fsm_pp0_stage4 = 20'd4096;
parameter    ap_ST_fsm_pp0_stage5 = 20'd8192;
parameter    ap_ST_fsm_pp0_stage6 = 20'd16384;
parameter    ap_ST_fsm_state29 = 20'd32768;
parameter    ap_ST_fsm_state30 = 20'd65536;
parameter    ap_ST_fsm_state31 = 20'd131072;
parameter    ap_ST_fsm_state32 = 20'd262144;
parameter    ap_ST_fsm_state33 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] this_times_address0;
output   this_times_ce0;
input  [63:0] this_times_q0;
output  [3:0] this_offsets_s_address0;
output   this_offsets_s_ce0;
output   this_offsets_s_we0;
output  [31:0] this_offsets_s_d0;
output  [3:0] this_amplitudes_s_address0;
output   this_amplitudes_s_ce0;
output   this_amplitudes_s_we0;
output  [31:0] this_amplitudes_s_d0;
input  [31:0] p_read;
output  [8:0] this_A_address0;
output   this_A_ce0;
output   this_A_we0;
output  [63:0] this_A_d0;
input  [63:0] this_A_q0;
output  [7:0] this_b_address0;
output   this_b_ce0;
output   this_b_we0;
output  [54:0] this_b_d0;
input  [54:0] this_b_q0;
input  [5:0] sliding_window_front_ptr_s;
input  [5:0] sliding_window_back_ptr_s;
output  [4:0] sliding_window_buffer_samples_sample_V_7_11_address0;
output   sliding_window_buffer_samples_sample_V_7_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_10_address0;
output   sliding_window_buffer_samples_sample_V_7_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_9_address0;
output   sliding_window_buffer_samples_sample_V_7_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_8_address0;
output   sliding_window_buffer_samples_sample_V_7_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_7_address0;
output   sliding_window_buffer_samples_sample_V_7_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_6_address0;
output   sliding_window_buffer_samples_sample_V_7_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_5_address0;
output   sliding_window_buffer_samples_sample_V_7_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_4_address0;
output   sliding_window_buffer_samples_sample_V_7_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_3_address0;
output   sliding_window_buffer_samples_sample_V_7_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_2_address0;
output   sliding_window_buffer_samples_sample_V_7_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_1_address0;
output   sliding_window_buffer_samples_sample_V_7_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_0_address0;
output   sliding_window_buffer_samples_sample_V_7_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_11_address0;
output   sliding_window_buffer_samples_sample_V_6_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_10_address0;
output   sliding_window_buffer_samples_sample_V_6_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_9_address0;
output   sliding_window_buffer_samples_sample_V_6_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_8_address0;
output   sliding_window_buffer_samples_sample_V_6_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_7_address0;
output   sliding_window_buffer_samples_sample_V_6_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_6_address0;
output   sliding_window_buffer_samples_sample_V_6_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_5_address0;
output   sliding_window_buffer_samples_sample_V_6_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_4_address0;
output   sliding_window_buffer_samples_sample_V_6_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_3_address0;
output   sliding_window_buffer_samples_sample_V_6_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_2_address0;
output   sliding_window_buffer_samples_sample_V_6_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_1_address0;
output   sliding_window_buffer_samples_sample_V_6_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_0_address0;
output   sliding_window_buffer_samples_sample_V_6_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_11_address0;
output   sliding_window_buffer_samples_sample_V_5_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_10_address0;
output   sliding_window_buffer_samples_sample_V_5_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_9_address0;
output   sliding_window_buffer_samples_sample_V_5_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_8_address0;
output   sliding_window_buffer_samples_sample_V_5_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_7_address0;
output   sliding_window_buffer_samples_sample_V_5_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_6_address0;
output   sliding_window_buffer_samples_sample_V_5_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_5_address0;
output   sliding_window_buffer_samples_sample_V_5_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_4_address0;
output   sliding_window_buffer_samples_sample_V_5_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_3_address0;
output   sliding_window_buffer_samples_sample_V_5_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_2_address0;
output   sliding_window_buffer_samples_sample_V_5_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_1_address0;
output   sliding_window_buffer_samples_sample_V_5_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_0_address0;
output   sliding_window_buffer_samples_sample_V_5_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_11_address0;
output   sliding_window_buffer_samples_sample_V_4_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_10_address0;
output   sliding_window_buffer_samples_sample_V_4_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_9_address0;
output   sliding_window_buffer_samples_sample_V_4_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_8_address0;
output   sliding_window_buffer_samples_sample_V_4_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_7_address0;
output   sliding_window_buffer_samples_sample_V_4_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_6_address0;
output   sliding_window_buffer_samples_sample_V_4_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_5_address0;
output   sliding_window_buffer_samples_sample_V_4_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_4_address0;
output   sliding_window_buffer_samples_sample_V_4_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_3_address0;
output   sliding_window_buffer_samples_sample_V_4_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_2_address0;
output   sliding_window_buffer_samples_sample_V_4_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_1_address0;
output   sliding_window_buffer_samples_sample_V_4_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_0_address0;
output   sliding_window_buffer_samples_sample_V_4_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_11_address0;
output   sliding_window_buffer_samples_sample_V_3_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_10_address0;
output   sliding_window_buffer_samples_sample_V_3_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_9_address0;
output   sliding_window_buffer_samples_sample_V_3_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_8_address0;
output   sliding_window_buffer_samples_sample_V_3_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_7_address0;
output   sliding_window_buffer_samples_sample_V_3_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_6_address0;
output   sliding_window_buffer_samples_sample_V_3_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_5_address0;
output   sliding_window_buffer_samples_sample_V_3_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_4_address0;
output   sliding_window_buffer_samples_sample_V_3_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_3_address0;
output   sliding_window_buffer_samples_sample_V_3_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_2_address0;
output   sliding_window_buffer_samples_sample_V_3_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_1_address0;
output   sliding_window_buffer_samples_sample_V_3_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_0_address0;
output   sliding_window_buffer_samples_sample_V_3_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_11_address0;
output   sliding_window_buffer_samples_sample_V_2_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_10_address0;
output   sliding_window_buffer_samples_sample_V_2_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_9_address0;
output   sliding_window_buffer_samples_sample_V_2_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_8_address0;
output   sliding_window_buffer_samples_sample_V_2_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_7_address0;
output   sliding_window_buffer_samples_sample_V_2_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_6_address0;
output   sliding_window_buffer_samples_sample_V_2_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_5_address0;
output   sliding_window_buffer_samples_sample_V_2_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_4_address0;
output   sliding_window_buffer_samples_sample_V_2_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_3_address0;
output   sliding_window_buffer_samples_sample_V_2_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_2_address0;
output   sliding_window_buffer_samples_sample_V_2_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_1_address0;
output   sliding_window_buffer_samples_sample_V_2_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_0_address0;
output   sliding_window_buffer_samples_sample_V_2_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_11_address0;
output   sliding_window_buffer_samples_sample_V_1_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_10_address0;
output   sliding_window_buffer_samples_sample_V_1_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_9_address0;
output   sliding_window_buffer_samples_sample_V_1_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_8_address0;
output   sliding_window_buffer_samples_sample_V_1_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_7_address0;
output   sliding_window_buffer_samples_sample_V_1_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_6_address0;
output   sliding_window_buffer_samples_sample_V_1_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_5_address0;
output   sliding_window_buffer_samples_sample_V_1_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_4_address0;
output   sliding_window_buffer_samples_sample_V_1_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_3_address0;
output   sliding_window_buffer_samples_sample_V_1_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_2_address0;
output   sliding_window_buffer_samples_sample_V_1_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_1_address0;
output   sliding_window_buffer_samples_sample_V_1_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_0_address0;
output   sliding_window_buffer_samples_sample_V_1_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_11_address0;
output   sliding_window_buffer_samples_sample_V_0_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_10_address0;
output   sliding_window_buffer_samples_sample_V_0_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_9_address0;
output   sliding_window_buffer_samples_sample_V_0_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_8_address0;
output   sliding_window_buffer_samples_sample_V_0_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_7_address0;
output   sliding_window_buffer_samples_sample_V_0_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_6_address0;
output   sliding_window_buffer_samples_sample_V_0_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_5_address0;
output   sliding_window_buffer_samples_sample_V_0_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_4_address0;
output   sliding_window_buffer_samples_sample_V_0_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_3_address0;
output   sliding_window_buffer_samples_sample_V_0_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_2_address0;
output   sliding_window_buffer_samples_sample_V_0_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_1_address0;
output   sliding_window_buffer_samples_sample_V_0_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_0_address0;
output   sliding_window_buffer_samples_sample_V_0_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_0_q0;
output  [1:0] sigma_V_address0;
output   sigma_V_ce0;
input  [63:0] sigma_V_q0;
output  [1:0] sigma_V_address1;
output   sigma_V_ce1;
output   sigma_V_we1;
output  [63:0] sigma_V_d1;
output  [14:0] matU_V_address0;
output   matU_V_ce0;
output   matU_V_we0;
output  [63:0] matU_V_d0;
input  [63:0] matU_V_q0;
output  [6:0] A_i_V_0_address0;
output   A_i_V_0_ce0;
input  [63:0] A_i_V_0_q0;
output  [6:0] A_i_V_0_address1;
output   A_i_V_0_ce1;
output   A_i_V_0_we1;
output  [63:0] A_i_V_0_d1;
output  [6:0] A_i_V_1_address0;
output   A_i_V_1_ce0;
input  [63:0] A_i_V_1_q0;
output  [6:0] A_i_V_1_address1;
output   A_i_V_1_ce1;
output   A_i_V_1_we1;
output  [63:0] A_i_V_1_d1;
output  [6:0] A_j_V_0_address0;
output   A_j_V_0_ce0;
input  [63:0] A_j_V_0_q0;
output  [6:0] A_j_V_0_address1;
output   A_j_V_0_ce1;
output   A_j_V_0_we1;
output  [63:0] A_j_V_0_d1;
output  [6:0] A_j_V_1_address0;
output   A_j_V_1_ce0;
input  [63:0] A_j_V_1_q0;
output  [6:0] A_j_V_1_address1;
output   A_j_V_1_ce1;
output   A_j_V_1_we1;
output  [63:0] A_j_V_1_d1;
output  [7:0] matA_V_0_address0;
output   matA_V_0_ce0;
output   matA_V_0_we0;
output  [63:0] matA_V_0_d0;
input  [63:0] matA_V_0_q0;
output  [7:0] matA_V_0_address1;
output   matA_V_0_ce1;
output   matA_V_0_we1;
output  [63:0] matA_V_0_d1;
input  [63:0] matA_V_0_q1;
output  [7:0] matA_V_1_address0;
output   matA_V_1_ce0;
output   matA_V_1_we0;
output  [63:0] matA_V_1_d0;
input  [63:0] matA_V_1_q0;
output  [7:0] matA_V_1_address1;
output   matA_V_1_ce1;
output   matA_V_1_we1;
output  [63:0] matA_V_1_d1;
input  [63:0] matA_V_1_q1;
output  [0:0] V_i_V_0_address0;
output   V_i_V_0_ce0;
input  [63:0] V_i_V_0_q0;
output  [0:0] V_i_V_0_address1;
output   V_i_V_0_ce1;
output   V_i_V_0_we1;
output  [63:0] V_i_V_0_d1;
output  [0:0] V_i_V_1_address0;
output   V_i_V_1_ce0;
input  [63:0] V_i_V_1_q0;
output  [0:0] V_i_V_1_address1;
output   V_i_V_1_ce1;
output   V_i_V_1_we1;
output  [63:0] V_i_V_1_d1;
output  [0:0] V_j_V_0_address0;
output   V_j_V_0_ce0;
input  [63:0] V_j_V_0_q0;
output  [0:0] V_j_V_0_address1;
output   V_j_V_0_ce1;
output   V_j_V_0_we1;
output  [63:0] V_j_V_0_d1;
output  [0:0] V_j_V_1_address0;
output   V_j_V_1_ce0;
input  [63:0] V_j_V_1_q0;
output  [0:0] V_j_V_1_address1;
output   V_j_V_1_ce1;
output   V_j_V_1_we1;
output  [63:0] V_j_V_1_d1;
output  [2:0] matV_V_0_address0;
output   matV_V_0_ce0;
output   matV_V_0_we0;
output  [63:0] matV_V_0_d0;
input  [63:0] matV_V_0_q0;
output  [2:0] matV_V_0_address1;
output   matV_V_0_ce1;
output   matV_V_0_we1;
output  [63:0] matV_V_0_d1;
input  [63:0] matV_V_0_q1;
output  [2:0] matV_V_1_address0;
output   matV_V_1_ce0;
output   matV_V_1_we0;
output  [63:0] matV_V_1_d0;
input  [63:0] matV_V_1_q0;
output  [2:0] matV_V_1_address1;
output   matV_V_1_ce1;
output   matV_V_1_we1;
output  [63:0] matV_V_1_d1;
input  [63:0] matV_V_1_q1;
output  [14:0] U_V_address0;
output   U_V_ce0;
output   U_V_we0;
output  [63:0] U_V_d0;
input  [63:0] U_V_q0;
output  [14:0] U_V_address1;
output   U_V_ce1;
input  [63:0] U_V_q1;
output  [1:0] S_V_address0;
output   S_V_ce0;
output   S_V_we0;
output  [63:0] S_V_d0;
input  [63:0] S_V_q0;
output  [3:0] V_V_address0;
output   V_V_ce0;
output   V_V_we0;
output  [63:0] V_V_d0;
input  [63:0] V_V_q0;
output  [3:0] V_V_address1;
output   V_V_ce1;
input  [63:0] V_V_q1;
output  [8:0] UT_V_address0;
output   UT_V_ce0;
output   UT_V_we0;
output  [63:0] UT_V_d0;
input  [63:0] UT_V_q0;
output  [8:0] A_pinv_V_address0;
output   A_pinv_V_ce0;
output   A_pinv_V_we0;
output  [63:0] A_pinv_V_d0;
input  [63:0] A_pinv_V_q0;
output  [31:0] grp_fu_2133_p_din0;
input  [63:0] grp_fu_2133_p_dout0;
output   grp_fu_2133_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg this_times_ce0;
reg this_offsets_s_ce0;
reg this_offsets_s_we0;
reg this_amplitudes_s_ce0;
reg this_amplitudes_s_we0;
reg[8:0] this_A_address0;
reg this_A_ce0;
reg this_A_we0;
reg[63:0] this_A_d0;
reg[7:0] this_b_address0;
reg this_b_ce0;
reg this_b_we0;
reg sliding_window_buffer_samples_sample_V_7_11_ce0;
reg sliding_window_buffer_samples_sample_V_7_10_ce0;
reg sliding_window_buffer_samples_sample_V_7_9_ce0;
reg sliding_window_buffer_samples_sample_V_7_8_ce0;
reg sliding_window_buffer_samples_sample_V_7_7_ce0;
reg sliding_window_buffer_samples_sample_V_7_6_ce0;
reg sliding_window_buffer_samples_sample_V_7_5_ce0;
reg sliding_window_buffer_samples_sample_V_7_4_ce0;
reg sliding_window_buffer_samples_sample_V_7_3_ce0;
reg sliding_window_buffer_samples_sample_V_7_2_ce0;
reg sliding_window_buffer_samples_sample_V_7_1_ce0;
reg sliding_window_buffer_samples_sample_V_7_0_ce0;
reg sliding_window_buffer_samples_sample_V_6_11_ce0;
reg sliding_window_buffer_samples_sample_V_6_10_ce0;
reg sliding_window_buffer_samples_sample_V_6_9_ce0;
reg sliding_window_buffer_samples_sample_V_6_8_ce0;
reg sliding_window_buffer_samples_sample_V_6_7_ce0;
reg sliding_window_buffer_samples_sample_V_6_6_ce0;
reg sliding_window_buffer_samples_sample_V_6_5_ce0;
reg sliding_window_buffer_samples_sample_V_6_4_ce0;
reg sliding_window_buffer_samples_sample_V_6_3_ce0;
reg sliding_window_buffer_samples_sample_V_6_2_ce0;
reg sliding_window_buffer_samples_sample_V_6_1_ce0;
reg sliding_window_buffer_samples_sample_V_6_0_ce0;
reg sliding_window_buffer_samples_sample_V_5_11_ce0;
reg sliding_window_buffer_samples_sample_V_5_10_ce0;
reg sliding_window_buffer_samples_sample_V_5_9_ce0;
reg sliding_window_buffer_samples_sample_V_5_8_ce0;
reg sliding_window_buffer_samples_sample_V_5_7_ce0;
reg sliding_window_buffer_samples_sample_V_5_6_ce0;
reg sliding_window_buffer_samples_sample_V_5_5_ce0;
reg sliding_window_buffer_samples_sample_V_5_4_ce0;
reg sliding_window_buffer_samples_sample_V_5_3_ce0;
reg sliding_window_buffer_samples_sample_V_5_2_ce0;
reg sliding_window_buffer_samples_sample_V_5_1_ce0;
reg sliding_window_buffer_samples_sample_V_5_0_ce0;
reg sliding_window_buffer_samples_sample_V_4_11_ce0;
reg sliding_window_buffer_samples_sample_V_4_10_ce0;
reg sliding_window_buffer_samples_sample_V_4_9_ce0;
reg sliding_window_buffer_samples_sample_V_4_8_ce0;
reg sliding_window_buffer_samples_sample_V_4_7_ce0;
reg sliding_window_buffer_samples_sample_V_4_6_ce0;
reg sliding_window_buffer_samples_sample_V_4_5_ce0;
reg sliding_window_buffer_samples_sample_V_4_4_ce0;
reg sliding_window_buffer_samples_sample_V_4_3_ce0;
reg sliding_window_buffer_samples_sample_V_4_2_ce0;
reg sliding_window_buffer_samples_sample_V_4_1_ce0;
reg sliding_window_buffer_samples_sample_V_4_0_ce0;
reg sliding_window_buffer_samples_sample_V_3_11_ce0;
reg sliding_window_buffer_samples_sample_V_3_10_ce0;
reg sliding_window_buffer_samples_sample_V_3_9_ce0;
reg sliding_window_buffer_samples_sample_V_3_8_ce0;
reg sliding_window_buffer_samples_sample_V_3_7_ce0;
reg sliding_window_buffer_samples_sample_V_3_6_ce0;
reg sliding_window_buffer_samples_sample_V_3_5_ce0;
reg sliding_window_buffer_samples_sample_V_3_4_ce0;
reg sliding_window_buffer_samples_sample_V_3_3_ce0;
reg sliding_window_buffer_samples_sample_V_3_2_ce0;
reg sliding_window_buffer_samples_sample_V_3_1_ce0;
reg sliding_window_buffer_samples_sample_V_3_0_ce0;
reg sliding_window_buffer_samples_sample_V_2_11_ce0;
reg sliding_window_buffer_samples_sample_V_2_10_ce0;
reg sliding_window_buffer_samples_sample_V_2_9_ce0;
reg sliding_window_buffer_samples_sample_V_2_8_ce0;
reg sliding_window_buffer_samples_sample_V_2_7_ce0;
reg sliding_window_buffer_samples_sample_V_2_6_ce0;
reg sliding_window_buffer_samples_sample_V_2_5_ce0;
reg sliding_window_buffer_samples_sample_V_2_4_ce0;
reg sliding_window_buffer_samples_sample_V_2_3_ce0;
reg sliding_window_buffer_samples_sample_V_2_2_ce0;
reg sliding_window_buffer_samples_sample_V_2_1_ce0;
reg sliding_window_buffer_samples_sample_V_2_0_ce0;
reg sliding_window_buffer_samples_sample_V_1_11_ce0;
reg sliding_window_buffer_samples_sample_V_1_10_ce0;
reg sliding_window_buffer_samples_sample_V_1_9_ce0;
reg sliding_window_buffer_samples_sample_V_1_8_ce0;
reg sliding_window_buffer_samples_sample_V_1_7_ce0;
reg sliding_window_buffer_samples_sample_V_1_6_ce0;
reg sliding_window_buffer_samples_sample_V_1_5_ce0;
reg sliding_window_buffer_samples_sample_V_1_4_ce0;
reg sliding_window_buffer_samples_sample_V_1_3_ce0;
reg sliding_window_buffer_samples_sample_V_1_2_ce0;
reg sliding_window_buffer_samples_sample_V_1_1_ce0;
reg sliding_window_buffer_samples_sample_V_1_0_ce0;
reg sliding_window_buffer_samples_sample_V_0_11_ce0;
reg sliding_window_buffer_samples_sample_V_0_10_ce0;
reg sliding_window_buffer_samples_sample_V_0_9_ce0;
reg sliding_window_buffer_samples_sample_V_0_8_ce0;
reg sliding_window_buffer_samples_sample_V_0_7_ce0;
reg sliding_window_buffer_samples_sample_V_0_6_ce0;
reg sliding_window_buffer_samples_sample_V_0_5_ce0;
reg sliding_window_buffer_samples_sample_V_0_4_ce0;
reg sliding_window_buffer_samples_sample_V_0_3_ce0;
reg sliding_window_buffer_samples_sample_V_0_2_ce0;
reg sliding_window_buffer_samples_sample_V_0_1_ce0;
reg sliding_window_buffer_samples_sample_V_0_0_ce0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] j_reg_2931;
reg   [0:0] tmp_89_reg_4828;
wire    ap_CS_fsm_state2;
wire   [63:0] ireg_fu_3018_p1;
reg   [63:0] ireg_reg_5383;
reg   [0:0] p_Result_139_reg_5389;
wire   [0:0] icmp_ln571_fu_3034_p2;
reg   [0:0] icmp_ln571_reg_5395;
wire   [53:0] trunc_ln588_cast_fu_3040_p3;
reg   [53:0] trunc_ln588_cast_reg_5402;
wire   [0:0] xor_ln571_fu_3047_p2;
reg   [0:0] xor_ln571_reg_5407;
wire   [3:0] add_ln298_fu_3053_p2;
reg   [3:0] add_ln298_reg_5412;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln298_fu_3059_p1;
reg   [63:0] zext_ln298_reg_5417;
reg   [3:0] mag_samples_sample_V_addr_24_reg_5426;
wire   [0:0] icmp_ln298_fu_3064_p2;
wire   [4:0] trunc_ln301_fu_3074_p1;
reg   [4:0] trunc_ln301_reg_5431;
wire  signed [6:0] sext_ln301_fu_3078_p1;
reg  signed [6:0] sext_ln301_reg_5436;
wire   [4:0] trunc_ln22_fu_3086_p1;
reg   [4:0] trunc_ln22_reg_5441;
wire   [4:0] i_12_fu_3090_p2;
reg   [4:0] i_12_reg_5446;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln34_fu_3161_p1;
reg   [63:0] zext_ln34_reg_5454;
wire   [0:0] icmp_ln301_fu_3100_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_18_fu_3189_p3;
reg   [7:0] tmp_18_reg_6010;
wire    ap_CS_fsm_state8;
wire   [3:0] add_ln307_fu_3197_p2;
reg   [3:0] add_ln307_reg_6015;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_state23_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln307_fu_3223_p2;
reg   [0:0] icmp_ln307_reg_6020;
reg   [0:0] icmp_ln307_reg_6020_pp0_iter1_reg;
reg   [0:0] icmp_ln307_reg_6020_pp0_iter2_reg;
wire   [63:0] zext_ln312_fu_3234_p1;
reg   [63:0] zext_ln312_reg_6024;
reg   [63:0] zext_ln312_reg_6024_pp0_iter1_reg;
wire   [106:0] rhs_fu_3520_p3;
reg   [106:0] rhs_reg_6094;
wire   [8:0] shl_ln_fu_3528_p3;
reg   [8:0] shl_ln_reg_6099;
reg   [8:0] shl_ln_reg_6099_pp0_iter1_reg;
reg   [8:0] shl_ln_reg_6099_pp0_iter2_reg;
wire   [11:0] sample_period_samples_2_sample_V_q0;
reg   [11:0] sample_period_samples_2_sample_V_load_reg_6104;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state10_pp0_stage1_iter0;
wire    ap_block_state17_pp0_stage1_iter1;
wire    ap_block_state24_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [11:0] sample_period_samples_3_sample_V_q0;
reg   [11:0] sample_period_samples_3_sample_V_load_reg_6109;
wire   [11:0] sample_period_samples_4_sample_V_q0;
reg   [11:0] sample_period_samples_4_sample_V_load_reg_6114;
wire   [11:0] sample_period_samples_5_sample_V_q0;
reg   [11:0] sample_period_samples_5_sample_V_load_reg_6119;
wire   [11:0] sample_period_samples_6_sample_V_q0;
reg   [11:0] sample_period_samples_6_sample_V_load_reg_6124;
wire   [11:0] sample_period_samples_7_sample_V_q0;
reg   [11:0] sample_period_samples_7_sample_V_load_reg_6129;
wire   [11:0] sample_period_samples_8_sample_V_q0;
reg   [11:0] sample_period_samples_8_sample_V_load_reg_6134;
wire   [11:0] sample_period_samples_9_sample_V_q0;
reg   [11:0] sample_period_samples_9_sample_V_load_reg_6139;
wire   [11:0] sample_period_samples_10_sample_V_q0;
reg   [11:0] sample_period_samples_10_sample_V_load_reg_6144;
wire   [11:0] sample_period_samples_11_sample_V_q0;
reg   [11:0] sample_period_samples_11_sample_V_load_reg_6149;
wire   [106:0] r_V_fu_3545_p2;
reg   [106:0] r_V_reg_6154;
reg   [0:0] tmp_101_reg_6159;
wire   [63:0] angle_2_fu_3576_p2;
reg   [63:0] angle_2_reg_6164;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state11_pp0_stage2_iter0;
wire    ap_block_state18_pp0_stage2_iter1;
wire    ap_block_state25_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] p_Result_141_reg_6171;
wire   [0:0] icmp_ln935_2_fu_3590_p2;
reg   [0:0] icmp_ln935_2_reg_6177;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state12_pp0_stage3_iter0;
wire    ap_block_state19_pp0_stage3_iter1;
wire    ap_block_state26_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire   [63:0] tmp_V_23_fu_3600_p3;
reg   [63:0] tmp_V_23_reg_6182;
wire   [31:0] sub_ln944_2_fu_3628_p2;
reg   [31:0] sub_ln944_2_reg_6188;
wire   [0:0] icmp_ln954_2_fu_3726_p2;
reg   [0:0] icmp_ln954_2_reg_6194;
wire   [0:0] select_ln954_5_fu_3746_p3;
reg   [0:0] select_ln954_5_reg_6199;
wire   [7:0] trunc_ln943_2_fu_3754_p1;
reg   [7:0] trunc_ln943_2_reg_6204;
wire   [31:0] grp_sin_or_cos_float_s_fu_2989_ap_return;
reg   [31:0] v_assign_reg_6209;
wire   [0:0] p_Result_145_fu_3895_p3;
reg   [0:0] p_Result_145_reg_6215;
wire  signed [53:0] man_V_13_fu_3939_p3;
reg  signed [53:0] man_V_13_reg_6220;
wire   [10:0] trunc_ln575_2_fu_3959_p1;
reg   [10:0] trunc_ln575_2_reg_6227;
wire   [0:0] icmp_ln585_2_fu_3999_p2;
reg   [0:0] icmp_ln585_2_reg_6232;
wire   [5:0] trunc_ln586_2_fu_4021_p1;
reg   [5:0] trunc_ln586_2_reg_6237;
wire   [0:0] icmp_ln591_3_fu_4035_p2;
reg   [0:0] icmp_ln591_3_reg_6242;
wire   [0:0] and_ln581_2_fu_4065_p2;
reg   [0:0] and_ln581_2_reg_6247;
wire   [63:0] select_ln571_11_fu_4089_p3;
reg   [63:0] select_ln571_11_reg_6252;
wire   [0:0] or_ln571_8_fu_4097_p2;
reg   [0:0] or_ln571_8_reg_6257;
wire   [0:0] or_ln571_10_fu_4109_p2;
reg   [0:0] or_ln571_10_reg_6262;
wire   [0:0] icmp_ln935_fu_4223_p2;
reg   [0:0] icmp_ln935_reg_6267;
wire    ap_CS_fsm_state32;
wire   [0:0] p_Result_147_fu_4229_p3;
reg   [0:0] p_Result_147_reg_6272;
wire   [63:0] tmp_V_24_fu_4243_p3;
reg   [63:0] tmp_V_24_reg_6277;
wire   [31:0] sub_ln944_fu_4273_p2;
reg   [31:0] sub_ln944_reg_6283;
wire   [0:0] icmp_ln954_fu_4371_p2;
reg   [0:0] icmp_ln954_reg_6289;
wire   [0:0] select_ln954_fu_4391_p3;
reg   [0:0] select_ln954_reg_6294;
wire   [7:0] trunc_ln943_fu_4399_p1;
reg   [7:0] trunc_ln943_reg_6299;
wire   [0:0] icmp_ln935_1_fu_4403_p2;
reg   [0:0] icmp_ln935_1_reg_6304;
wire   [0:0] p_Result_151_fu_4409_p3;
reg   [0:0] p_Result_151_reg_6309;
wire   [63:0] tmp_V_25_fu_4423_p3;
reg   [63:0] tmp_V_25_reg_6314;
wire   [31:0] sub_ln944_1_fu_4453_p2;
reg   [31:0] sub_ln944_1_reg_6320;
wire   [0:0] icmp_ln954_1_fu_4551_p2;
reg   [0:0] icmp_ln954_1_reg_6326;
wire   [0:0] select_ln954_3_fu_4571_p3;
reg   [0:0] select_ln954_3_reg_6331;
wire   [7:0] trunc_ln943_1_fu_4579_p1;
reg   [7:0] trunc_ln943_1_reg_6336;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state15_pp0_stage6_iter0;
wire    ap_block_state22_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_subdone;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state14_pp0_stage5_iter0;
wire    ap_block_state21_pp0_stage5_iter1;
wire    ap_block_state28_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_subdone;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter2;
reg   [2:0] sample_period_samples_0_sample_V_address0;
reg    sample_period_samples_0_sample_V_ce0;
reg    sample_period_samples_0_sample_V_we0;
reg   [11:0] sample_period_samples_0_sample_V_d0;
wire   [11:0] sample_period_samples_0_sample_V_q0;
reg   [2:0] sample_period_samples_0_sample_V_address1;
reg    sample_period_samples_0_sample_V_ce1;
reg    sample_period_samples_0_sample_V_we1;
reg   [11:0] sample_period_samples_0_sample_V_d1;
reg   [2:0] sample_period_samples_1_sample_V_address0;
reg    sample_period_samples_1_sample_V_ce0;
reg    sample_period_samples_1_sample_V_we0;
reg   [11:0] sample_period_samples_1_sample_V_d0;
wire   [11:0] sample_period_samples_1_sample_V_q0;
reg   [2:0] sample_period_samples_1_sample_V_address1;
reg    sample_period_samples_1_sample_V_ce1;
reg    sample_period_samples_1_sample_V_we1;
reg   [11:0] sample_period_samples_1_sample_V_d1;
reg   [2:0] sample_period_samples_2_sample_V_address0;
reg    sample_period_samples_2_sample_V_ce0;
reg    sample_period_samples_2_sample_V_we0;
reg   [11:0] sample_period_samples_2_sample_V_d0;
reg   [2:0] sample_period_samples_2_sample_V_address1;
reg    sample_period_samples_2_sample_V_ce1;
reg    sample_period_samples_2_sample_V_we1;
reg   [11:0] sample_period_samples_2_sample_V_d1;
reg   [2:0] sample_period_samples_3_sample_V_address0;
reg    sample_period_samples_3_sample_V_ce0;
reg    sample_period_samples_3_sample_V_we0;
reg   [11:0] sample_period_samples_3_sample_V_d0;
reg   [2:0] sample_period_samples_3_sample_V_address1;
reg    sample_period_samples_3_sample_V_ce1;
reg    sample_period_samples_3_sample_V_we1;
reg   [11:0] sample_period_samples_3_sample_V_d1;
reg   [2:0] sample_period_samples_4_sample_V_address0;
reg    sample_period_samples_4_sample_V_ce0;
reg    sample_period_samples_4_sample_V_we0;
reg   [11:0] sample_period_samples_4_sample_V_d0;
reg   [2:0] sample_period_samples_4_sample_V_address1;
reg    sample_period_samples_4_sample_V_ce1;
reg    sample_period_samples_4_sample_V_we1;
reg   [11:0] sample_period_samples_4_sample_V_d1;
reg   [2:0] sample_period_samples_5_sample_V_address0;
reg    sample_period_samples_5_sample_V_ce0;
reg    sample_period_samples_5_sample_V_we0;
reg   [11:0] sample_period_samples_5_sample_V_d0;
reg   [2:0] sample_period_samples_5_sample_V_address1;
reg    sample_period_samples_5_sample_V_ce1;
reg    sample_period_samples_5_sample_V_we1;
reg   [11:0] sample_period_samples_5_sample_V_d1;
reg   [2:0] sample_period_samples_6_sample_V_address0;
reg    sample_period_samples_6_sample_V_ce0;
reg    sample_period_samples_6_sample_V_we0;
reg   [11:0] sample_period_samples_6_sample_V_d0;
reg   [2:0] sample_period_samples_6_sample_V_address1;
reg    sample_period_samples_6_sample_V_ce1;
reg    sample_period_samples_6_sample_V_we1;
reg   [11:0] sample_period_samples_6_sample_V_d1;
reg   [2:0] sample_period_samples_7_sample_V_address0;
reg    sample_period_samples_7_sample_V_ce0;
reg    sample_period_samples_7_sample_V_we0;
reg   [11:0] sample_period_samples_7_sample_V_d0;
reg   [2:0] sample_period_samples_7_sample_V_address1;
reg    sample_period_samples_7_sample_V_ce1;
reg    sample_period_samples_7_sample_V_we1;
reg   [11:0] sample_period_samples_7_sample_V_d1;
reg   [2:0] sample_period_samples_8_sample_V_address0;
reg    sample_period_samples_8_sample_V_ce0;
reg    sample_period_samples_8_sample_V_we0;
reg   [11:0] sample_period_samples_8_sample_V_d0;
reg   [2:0] sample_period_samples_8_sample_V_address1;
reg    sample_period_samples_8_sample_V_ce1;
reg    sample_period_samples_8_sample_V_we1;
reg   [11:0] sample_period_samples_8_sample_V_d1;
reg   [2:0] sample_period_samples_9_sample_V_address0;
reg    sample_period_samples_9_sample_V_ce0;
reg    sample_period_samples_9_sample_V_we0;
reg   [11:0] sample_period_samples_9_sample_V_d0;
reg   [2:0] sample_period_samples_9_sample_V_address1;
reg    sample_period_samples_9_sample_V_ce1;
reg    sample_period_samples_9_sample_V_we1;
reg   [11:0] sample_period_samples_9_sample_V_d1;
reg   [2:0] sample_period_samples_10_sample_V_address0;
reg    sample_period_samples_10_sample_V_ce0;
reg    sample_period_samples_10_sample_V_we0;
reg   [11:0] sample_period_samples_10_sample_V_d0;
reg   [2:0] sample_period_samples_10_sample_V_address1;
reg    sample_period_samples_10_sample_V_ce1;
reg    sample_period_samples_10_sample_V_we1;
reg   [11:0] sample_period_samples_10_sample_V_d1;
reg   [2:0] sample_period_samples_11_sample_V_address0;
reg    sample_period_samples_11_sample_V_ce0;
reg    sample_period_samples_11_sample_V_we0;
reg   [11:0] sample_period_samples_11_sample_V_d0;
reg   [2:0] sample_period_samples_11_sample_V_address1;
reg    sample_period_samples_11_sample_V_ce1;
reg    sample_period_samples_11_sample_V_we1;
reg   [11:0] sample_period_samples_11_sample_V_d1;
reg   [3:0] mag_samples_sample_V_address0;
reg    mag_samples_sample_V_ce0;
reg    mag_samples_sample_V_we0;
reg   [11:0] mag_samples_sample_V_d0;
wire   [11:0] mag_samples_sample_V_q0;
reg   [3:0] mag_samples_sample_V_address1;
reg    mag_samples_sample_V_ce1;
reg    mag_samples_sample_V_we1;
reg   [11:0] mag_samples_sample_V_d1;
reg   [0:0] x_V_address0;
reg    x_V_ce0;
reg    x_V_we0;
wire   [63:0] x_V_q0;
wire   [0:0] x_V_address1;
reg    x_V_ce1;
wire   [63:0] x_V_q1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_done;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_idle;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_ready;
wire   [8:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_ce0;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_d0;
wire   [1:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce0;
wire   [1:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_d1;
wire   [14:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_d0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_d1;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_d1;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_d1;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce0;
wire   [6:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_d1;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d0;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d1;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d0;
wire   [7:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d1;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_d1;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_d1;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_d1;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce0;
wire   [0:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_d1;
wire   [2:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d0;
wire   [2:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d1;
wire   [2:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d0;
wire   [2:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we1;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d1;
wire   [14:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_d0;
wire   [14:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce1;
wire   [1:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_d0;
wire   [3:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_d0;
wire   [3:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address1;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce1;
wire   [8:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_d0;
wire   [8:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_address0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_ce0;
wire    grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_we0;
wire   [63:0] grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_d0;
wire    grp_sin_or_cos_float_s_fu_2989_ap_start;
wire    grp_sin_or_cos_float_s_fu_2989_ap_done;
wire    grp_sin_or_cos_float_s_fu_2989_ap_idle;
wire    grp_sin_or_cos_float_s_fu_2989_ap_ready;
wire   [31:0] grp_sin_or_cos_float_s_fu_2989_t_in;
reg   [3:0] k_reg_2908;
wire    ap_CS_fsm_state33;
reg   [4:0] i_reg_2919;
wire    ap_CS_fsm_state29;
reg   [3:0] ap_phi_mux_j_phi_fu_2935_p4;
wire    ap_block_pp0_stage0;
reg    grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg;
wire    ap_CS_fsm_state30;
reg    grp_sin_or_cos_float_s_fu_2989_ap_start_reg;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire   [63:0] j_cast2_fu_3203_p1;
wire   [63:0] zext_ln319_fu_3536_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln320_fu_4218_p1;
wire    ap_block_pp0_stage5_11001;
wire   [63:0] select_ln571_14_fu_4205_p3;
wire    ap_block_state13_pp0_stage4_iter0;
wire    ap_block_state20_pp0_stage4_iter1;
wire    ap_block_state27_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_state31;
reg   [31:0] grp_fu_3002_p0;
wire   [31:0] bitcast_ln702_fu_3006_p1;
wire   [63:0] grp_fu_3002_p1;
wire   [62:0] trunc_ln555_fu_3022_p1;
wire  signed [5:0] trunc_ln301_fu_3074_p0;
wire  signed [5:0] sext_ln301_fu_3078_p0;
wire   [5:0] zext_ln301_fu_3096_p1;
wire   [5:0] add_ln22_fu_3106_p2;
wire  signed [6:0] sext_ln22_fu_3112_p1;
wire   [6:0] add_ln22_2_fu_3116_p2;
wire   [0:0] tmp_98_fu_3127_p3;
wire   [4:0] select_ln28_fu_3135_p3;
wire   [4:0] add_ln28_fu_3143_p2;
wire   [0:0] icmp_ln24_fu_3121_p2;
wire   [4:0] buffer_idx_fu_3149_p2;
wire   [4:0] buffer_idx_4_fu_3154_p3;
wire   [7:0] j_cast_fu_3219_p1;
wire   [7:0] add_ln310_fu_3229_p2;
wire   [10:0] exp_tmp_fu_3239_p4;
wire   [51:0] trunc_ln565_fu_3252_p1;
wire   [52:0] p_Result_140_fu_3255_p3;
wire   [53:0] zext_ln569_fu_3263_p1;
wire   [53:0] man_V_9_fu_3267_p2;
wire   [11:0] zext_ln455_fu_3248_p1;
wire   [11:0] F2_fu_3280_p2;
wire   [0:0] icmp_ln581_fu_3290_p2;
wire   [11:0] add_ln581_fu_3296_p2;
wire   [11:0] sub_ln581_fu_3302_p2;
wire  signed [53:0] man_V_fu_3273_p3;
wire   [11:0] sh_amt_fu_3308_p3;
wire   [5:0] tmp_100_fu_3336_p4;
wire   [5:0] trunc_ln586_fu_3352_p1;
wire   [53:0] zext_ln586_fu_3356_p1;
wire   [0:0] icmp_ln585_fu_3330_p2;
wire   [53:0] ashr_ln586_fu_3360_p2;
wire   [53:0] select_ln585_fu_3366_p3;
wire  signed [63:0] sext_ln583_fu_3322_p1;
wire   [63:0] zext_ln604_fu_3383_p1;
wire   [10:0] trunc_ln575_fu_3286_p1;
wire   [10:0] add_ln591_fu_3393_p2;
wire   [31:0] zext_ln591_fu_3399_p1;
wire   [0:0] icmp_ln591_fu_3377_p2;
wire   [0:0] p_Result_131_fu_3403_p3;
wire   [0:0] qb_fu_3411_p3;
wire  signed [54:0] sext_ln591_fu_3373_p1;
wire   [54:0] zext_ln415_fu_3418_p1;
wire   [0:0] icmp_ln582_fu_3316_p2;
wire   [0:0] or_ln582_fu_3433_p2;
wire   [0:0] xor_ln582_fu_3438_p2;
wire   [0:0] or_ln581_fu_3450_p2;
wire   [0:0] icmp_ln603_fu_3346_p2;
wire   [0:0] xor_ln581_fu_3456_p2;
wire   [0:0] and_ln603_fu_3462_p2;
wire   [0:0] and_ln581_fu_3444_p2;
wire   [54:0] add_ln415_fu_3422_p2;
wire  signed [54:0] sext_ln585_fu_3326_p1;
wire   [54:0] select_ln571_fu_3473_p3;
wire   [0:0] and_ln582_fu_3428_p2;
wire   [0:0] or_ln571_fu_3468_p2;
wire   [0:0] or_ln571_6_fu_3485_p2;
wire   [63:0] shl_ln604_fu_3387_p2;
wire   [63:0] select_ln571_8_fu_3497_p3;
wire  signed [63:0] sext_ln571_fu_3481_p1;
wire   [0:0] or_ln571_7_fu_3491_p2;
wire   [63:0] select_ln571_9_fu_3504_p3;
wire   [63:0] select_ln571_10_fu_3512_p3;
wire   [52:0] r_V_fu_3545_p1;
wire   [106:0] ret_V_fu_3559_p2;
wire   [63:0] angle_fu_3563_p4;
wire   [63:0] zext_ln415_14_fu_3573_p1;
wire   [63:0] tmp_V_21_fu_3595_p2;
reg   [63:0] p_Result_142_fu_3606_p4;
reg   [63:0] tmp_6_fu_3616_p3;
wire   [31:0] l_5_fu_3624_p1;
wire   [31:0] lsb_index_5_fu_3634_p2;
wire   [30:0] tmp_103_fu_3640_p4;
wire   [6:0] trunc_ln947_2_fu_3656_p1;
wire   [6:0] sub_ln947_2_fu_3660_p2;
wire   [63:0] zext_ln947_2_fu_3666_p1;
wire   [63:0] zext_ln949_2_fu_3676_p1;
wire   [63:0] lshr_ln947_2_fu_3670_p2;
wire   [63:0] shl_ln949_2_fu_3680_p2;
wire   [63:0] or_ln949_4_fu_3686_p2;
wire   [63:0] and_ln949_5_fu_3692_p2;
wire   [0:0] tmp_104_fu_3704_p3;
wire   [0:0] p_Result_143_fu_3718_p3;
wire   [0:0] xor_ln949_2_fu_3712_p2;
wire   [0:0] icmp_ln946_2_fu_3650_p2;
wire   [0:0] icmp_ln949_2_fu_3698_p2;
wire   [0:0] select_ln946_2_fu_3738_p3;
wire   [0:0] and_ln949_6_fu_3732_p2;
wire   [31:0] sub_ln955_2_fu_3758_p2;
wire   [63:0] zext_ln955_2_fu_3763_p1;
wire   [31:0] add_ln954_2_fu_3772_p2;
wire   [63:0] zext_ln954_2_fu_3777_p1;
wire   [63:0] lshr_ln954_2_fu_3781_p2;
wire   [63:0] shl_ln955_2_fu_3767_p2;
wire   [63:0] m_32_fu_3786_p3;
wire   [63:0] zext_ln961_2_fu_3793_p1;
wire   [63:0] m_33_fu_3796_p2;
wire   [62:0] m_35_fu_3802_p4;
wire   [0:0] p_Result_134_fu_3816_p3;
wire   [7:0] sub_ln964_2_fu_3832_p2;
wire   [7:0] select_ln943_2_fu_3824_p3;
wire   [7:0] add_ln964_2_fu_3837_p2;
wire   [63:0] zext_ln962_2_fu_3812_p1;
wire   [8:0] tmp_7_fu_3843_p3;
wire   [63:0] p_Result_144_fu_3850_p5;
wire   [31:0] LD_9_fu_3862_p1;
wire   [31:0] bitcast_ln744_2_fu_3866_p1;
wire   [63:0] ireg_2_fu_3887_p1;
wire   [10:0] exp_tmp_2_fu_3903_p4;
wire   [51:0] trunc_ln565_2_fu_3917_p1;
wire   [52:0] p_Result_146_fu_3921_p3;
wire   [53:0] zext_ln569_2_fu_3929_p1;
wire   [53:0] man_V_12_fu_3933_p2;
wire   [62:0] trunc_ln555_2_fu_3891_p1;
wire   [11:0] zext_ln455_2_fu_3913_p1;
wire   [11:0] F2_2_fu_3953_p2;
wire   [0:0] icmp_ln581_3_fu_3963_p2;
wire   [11:0] add_ln581_4_fu_3969_p2;
wire   [11:0] sub_ln581_2_fu_3975_p2;
wire   [11:0] sh_amt_2_fu_3981_p3;
wire   [5:0] tmp_107_fu_4005_p4;
wire  signed [63:0] sext_ln583_2_fu_3995_p1;
wire   [63:0] zext_ln604_2_fu_4025_p1;
wire   [0:0] icmp_ln571_2_fu_3947_p2;
wire   [0:0] icmp_ln582_2_fu_3989_p2;
wire   [0:0] xor_ln571_2_fu_4041_p2;
wire   [0:0] or_ln582_2_fu_4053_p2;
wire   [0:0] xor_ln582_2_fu_4059_p2;
wire   [0:0] or_ln581_2_fu_4071_p2;
wire   [0:0] icmp_ln603_2_fu_4015_p2;
wire   [0:0] xor_ln581_2_fu_4077_p2;
wire   [63:0] shl_ln604_1_fu_4029_p2;
wire   [0:0] and_ln603_2_fu_4083_p2;
wire   [0:0] and_ln582_2_fu_4047_p2;
wire   [0:0] or_ln571_9_fu_4103_p2;
wire   [53:0] zext_ln586_4_fu_4118_p1;
wire   [31:0] bitcast_ln702_2_fu_4126_p1;
wire   [0:0] tmp_108_fu_4129_p3;
wire   [53:0] ashr_ln586_2_fu_4121_p2;
wire   [53:0] trunc_ln588_2_cast_fu_4137_p3;
wire   [53:0] select_ln585_1_fu_4145_p3;
wire   [10:0] add_ln591_3_fu_4156_p2;
wire   [31:0] zext_ln591_3_fu_4161_p1;
wire   [0:0] p_Result_138_fu_4165_p3;
wire   [0:0] qb_2_fu_4172_p3;
wire  signed [54:0] sext_ln591_1_fu_4152_p1;
wire   [54:0] zext_ln415_15_fu_4178_p1;
wire   [54:0] add_ln415_15_fu_4182_p2;
wire  signed [54:0] sext_ln585_1_fu_4115_p1;
wire   [54:0] select_ln571_12_fu_4188_p3;
wire  signed [63:0] sext_ln571_2_fu_4195_p1;
wire   [63:0] select_ln571_13_fu_4199_p3;
wire   [8:0] or_ln320_fu_4213_p2;
wire   [63:0] tmp_V_fu_4237_p2;
reg   [63:0] p_Result_148_fu_4251_p4;
reg   [63:0] tmp_fu_4261_p3;
wire   [31:0] l_fu_4269_p1;
wire   [31:0] lsb_index_fu_4279_p2;
wire   [30:0] tmp_91_fu_4285_p4;
wire   [6:0] trunc_ln947_fu_4301_p1;
wire   [6:0] sub_ln947_fu_4305_p2;
wire   [63:0] zext_ln947_fu_4311_p1;
wire   [63:0] zext_ln949_fu_4321_p1;
wire   [63:0] lshr_ln947_fu_4315_p2;
wire   [63:0] shl_ln949_fu_4325_p2;
wire   [63:0] or_ln949_3_fu_4331_p2;
wire   [63:0] and_ln949_fu_4337_p2;
wire   [0:0] tmp_92_fu_4349_p3;
wire   [0:0] p_Result_149_fu_4363_p3;
wire   [0:0] xor_ln949_fu_4357_p2;
wire   [0:0] icmp_ln946_fu_4295_p2;
wire   [0:0] icmp_ln949_fu_4343_p2;
wire   [0:0] select_ln946_fu_4383_p3;
wire   [0:0] and_ln949_2_fu_4377_p2;
wire   [63:0] tmp_V_18_fu_4417_p2;
reg   [63:0] p_Result_152_fu_4431_p4;
reg   [63:0] tmp_s_fu_4441_p3;
wire   [31:0] l_4_fu_4449_p1;
wire   [31:0] lsb_index_4_fu_4459_p2;
wire   [30:0] tmp_95_fu_4465_p4;
wire   [6:0] trunc_ln947_1_fu_4481_p1;
wire   [6:0] sub_ln947_1_fu_4485_p2;
wire   [63:0] zext_ln947_1_fu_4491_p1;
wire   [63:0] zext_ln949_1_fu_4501_p1;
wire   [63:0] lshr_ln947_1_fu_4495_p2;
wire   [63:0] shl_ln949_1_fu_4505_p2;
wire   [63:0] or_ln949_fu_4511_p2;
wire   [63:0] and_ln949_3_fu_4517_p2;
wire   [0:0] tmp_96_fu_4529_p3;
wire   [0:0] p_Result_153_fu_4543_p3;
wire   [0:0] xor_ln949_1_fu_4537_p2;
wire   [0:0] icmp_ln946_1_fu_4475_p2;
wire   [0:0] icmp_ln949_1_fu_4523_p2;
wire   [0:0] select_ln946_1_fu_4563_p3;
wire   [0:0] and_ln949_4_fu_4557_p2;
wire   [31:0] sub_ln955_fu_4583_p2;
wire   [63:0] zext_ln955_fu_4588_p1;
wire   [31:0] add_ln954_fu_4597_p2;
wire   [63:0] zext_ln954_fu_4602_p1;
wire   [63:0] lshr_ln954_fu_4606_p2;
wire   [63:0] shl_ln955_fu_4592_p2;
wire   [63:0] m_fu_4611_p3;
wire   [63:0] zext_ln961_fu_4618_p1;
wire   [63:0] m_26_fu_4621_p2;
wire   [62:0] m_36_fu_4627_p4;
wire   [0:0] p_Result_s_fu_4641_p3;
wire   [7:0] sub_ln964_fu_4657_p2;
wire   [7:0] select_ln943_fu_4649_p3;
wire   [7:0] add_ln964_fu_4662_p2;
wire   [63:0] zext_ln962_fu_4637_p1;
wire   [8:0] tmp_4_fu_4668_p3;
wire   [63:0] p_Result_150_fu_4675_p5;
wire   [31:0] LD_fu_4687_p1;
wire   [31:0] bitcast_ln744_fu_4691_p1;
wire   [31:0] sub_ln955_1_fu_4703_p2;
wire   [63:0] zext_ln955_1_fu_4708_p1;
wire   [31:0] add_ln954_1_fu_4717_p2;
wire   [63:0] zext_ln954_1_fu_4722_p1;
wire   [63:0] lshr_ln954_1_fu_4726_p2;
wire   [63:0] shl_ln955_1_fu_4712_p2;
wire   [63:0] m_29_fu_4731_p3;
wire   [63:0] zext_ln961_1_fu_4738_p1;
wire   [63:0] m_30_fu_4741_p2;
wire   [62:0] m_37_fu_4747_p4;
wire   [0:0] p_Result_123_fu_4761_p3;
wire   [7:0] sub_ln964_1_fu_4777_p2;
wire   [7:0] select_ln943_1_fu_4769_p3;
wire   [7:0] add_ln964_1_fu_4782_p2;
wire   [63:0] zext_ln962_1_fu_4757_p1;
wire   [8:0] tmp_5_fu_4788_p3;
wire   [63:0] p_Result_154_fu_4795_p5;
wire   [31:0] LD_7_fu_4807_p1;
wire   [31:0] bitcast_ln744_1_fu_4811_p1;
wire    grp_fu_3002_ce;
reg   [19:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_float_s_fu_2989_ap_start_reg = 1'b0;
end

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_0_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_0_sample_V_address0),
    .ce0(sample_period_samples_0_sample_V_ce0),
    .we0(sample_period_samples_0_sample_V_we0),
    .d0(sample_period_samples_0_sample_V_d0),
    .q0(sample_period_samples_0_sample_V_q0),
    .address1(sample_period_samples_0_sample_V_address1),
    .ce1(sample_period_samples_0_sample_V_ce1),
    .we1(sample_period_samples_0_sample_V_we1),
    .d1(sample_period_samples_0_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_1_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_1_sample_V_address0),
    .ce0(sample_period_samples_1_sample_V_ce0),
    .we0(sample_period_samples_1_sample_V_we0),
    .d0(sample_period_samples_1_sample_V_d0),
    .q0(sample_period_samples_1_sample_V_q0),
    .address1(sample_period_samples_1_sample_V_address1),
    .ce1(sample_period_samples_1_sample_V_ce1),
    .we1(sample_period_samples_1_sample_V_we1),
    .d1(sample_period_samples_1_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_2_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_2_sample_V_address0),
    .ce0(sample_period_samples_2_sample_V_ce0),
    .we0(sample_period_samples_2_sample_V_we0),
    .d0(sample_period_samples_2_sample_V_d0),
    .q0(sample_period_samples_2_sample_V_q0),
    .address1(sample_period_samples_2_sample_V_address1),
    .ce1(sample_period_samples_2_sample_V_ce1),
    .we1(sample_period_samples_2_sample_V_we1),
    .d1(sample_period_samples_2_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_3_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_3_sample_V_address0),
    .ce0(sample_period_samples_3_sample_V_ce0),
    .we0(sample_period_samples_3_sample_V_we0),
    .d0(sample_period_samples_3_sample_V_d0),
    .q0(sample_period_samples_3_sample_V_q0),
    .address1(sample_period_samples_3_sample_V_address1),
    .ce1(sample_period_samples_3_sample_V_ce1),
    .we1(sample_period_samples_3_sample_V_we1),
    .d1(sample_period_samples_3_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_4_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_4_sample_V_address0),
    .ce0(sample_period_samples_4_sample_V_ce0),
    .we0(sample_period_samples_4_sample_V_we0),
    .d0(sample_period_samples_4_sample_V_d0),
    .q0(sample_period_samples_4_sample_V_q0),
    .address1(sample_period_samples_4_sample_V_address1),
    .ce1(sample_period_samples_4_sample_V_ce1),
    .we1(sample_period_samples_4_sample_V_we1),
    .d1(sample_period_samples_4_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_5_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_5_sample_V_address0),
    .ce0(sample_period_samples_5_sample_V_ce0),
    .we0(sample_period_samples_5_sample_V_we0),
    .d0(sample_period_samples_5_sample_V_d0),
    .q0(sample_period_samples_5_sample_V_q0),
    .address1(sample_period_samples_5_sample_V_address1),
    .ce1(sample_period_samples_5_sample_V_ce1),
    .we1(sample_period_samples_5_sample_V_we1),
    .d1(sample_period_samples_5_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_6_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_6_sample_V_address0),
    .ce0(sample_period_samples_6_sample_V_ce0),
    .we0(sample_period_samples_6_sample_V_we0),
    .d0(sample_period_samples_6_sample_V_d0),
    .q0(sample_period_samples_6_sample_V_q0),
    .address1(sample_period_samples_6_sample_V_address1),
    .ce1(sample_period_samples_6_sample_V_ce1),
    .we1(sample_period_samples_6_sample_V_we1),
    .d1(sample_period_samples_6_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_7_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_7_sample_V_address0),
    .ce0(sample_period_samples_7_sample_V_ce0),
    .we0(sample_period_samples_7_sample_V_we0),
    .d0(sample_period_samples_7_sample_V_d0),
    .q0(sample_period_samples_7_sample_V_q0),
    .address1(sample_period_samples_7_sample_V_address1),
    .ce1(sample_period_samples_7_sample_V_ce1),
    .we1(sample_period_samples_7_sample_V_we1),
    .d1(sample_period_samples_7_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_8_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_8_sample_V_address0),
    .ce0(sample_period_samples_8_sample_V_ce0),
    .we0(sample_period_samples_8_sample_V_we0),
    .d0(sample_period_samples_8_sample_V_d0),
    .q0(sample_period_samples_8_sample_V_q0),
    .address1(sample_period_samples_8_sample_V_address1),
    .ce1(sample_period_samples_8_sample_V_ce1),
    .we1(sample_period_samples_8_sample_V_we1),
    .d1(sample_period_samples_8_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_9_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_9_sample_V_address0),
    .ce0(sample_period_samples_9_sample_V_ce0),
    .we0(sample_period_samples_9_sample_V_we0),
    .d0(sample_period_samples_9_sample_V_d0),
    .q0(sample_period_samples_9_sample_V_q0),
    .address1(sample_period_samples_9_sample_V_address1),
    .ce1(sample_period_samples_9_sample_V_ce1),
    .we1(sample_period_samples_9_sample_V_we1),
    .d1(sample_period_samples_9_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_10_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_10_sample_V_address0),
    .ce0(sample_period_samples_10_sample_V_ce0),
    .we0(sample_period_samples_10_sample_V_we0),
    .d0(sample_period_samples_10_sample_V_d0),
    .q0(sample_period_samples_10_sample_V_q0),
    .address1(sample_period_samples_10_sample_V_address1),
    .ce1(sample_period_samples_10_sample_V_ce1),
    .we1(sample_period_samples_10_sample_V_we1),
    .d1(sample_period_samples_10_sample_V_d1)
);

LLSSineReconstruction_loadData_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
sample_period_samples_11_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_11_sample_V_address0),
    .ce0(sample_period_samples_11_sample_V_ce0),
    .we0(sample_period_samples_11_sample_V_we0),
    .d0(sample_period_samples_11_sample_V_d0),
    .q0(sample_period_samples_11_sample_V_q0),
    .address1(sample_period_samples_11_sample_V_address1),
    .ce1(sample_period_samples_11_sample_V_ce1),
    .we1(sample_period_samples_11_sample_V_we1),
    .d1(sample_period_samples_11_sample_V_d1)
);

LLSSineReconstruction_loadData_mag_samples_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mag_samples_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mag_samples_sample_V_address0),
    .ce0(mag_samples_sample_V_ce0),
    .we0(mag_samples_sample_V_we0),
    .d0(mag_samples_sample_V_d0),
    .q0(mag_samples_sample_V_q0),
    .address1(mag_samples_sample_V_address1),
    .ce1(mag_samples_sample_V_ce1),
    .we1(mag_samples_sample_V_we1),
    .d1(mag_samples_sample_V_d1)
);

LLSSineReconstruction_read_and_gen_2x2_ap_fixed_64_21_0_3_0_160_3_2_80_s_alpha_sum_tmp2_V #(
    .DataWidth( 64 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
x_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_V_address0),
    .ce0(x_V_ce0),
    .we0(x_V_we0),
    .d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_d0),
    .q0(x_V_q0),
    .address1(x_V_address1),
    .ce1(x_V_ce1),
    .q1(x_V_q1)
);

LLSSineReconstruction_computeLeastSquaresSolution_160_3_1 grp_computeLeastSquaresSolution_160_3_1_fu_2942(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start),
    .ap_done(grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_done),
    .ap_idle(grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_idle),
    .ap_ready(grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_ready),
    .A_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_address0),
    .A_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_ce0),
    .A_q0(this_A_q0),
    .b_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_address0),
    .b_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_ce0),
    .b_q0(this_b_q0),
    .x_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_address0),
    .x_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_ce0),
    .x_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_we0),
    .x_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_d0),
    .sigma_V_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address0),
    .sigma_V_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce0),
    .sigma_V_q0(sigma_V_q0),
    .sigma_V_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address1),
    .sigma_V_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce1),
    .sigma_V_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_we1),
    .sigma_V_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_d1),
    .matU_V_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_address0),
    .matU_V_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_ce0),
    .matU_V_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_we0),
    .matU_V_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_d0),
    .matU_V_q0(matU_V_q0),
    .A_i_V_0_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address0),
    .A_i_V_0_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce0),
    .A_i_V_0_q0(A_i_V_0_q0),
    .A_i_V_0_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address1),
    .A_i_V_0_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce1),
    .A_i_V_0_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_we1),
    .A_i_V_0_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_d1),
    .A_i_V_1_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address0),
    .A_i_V_1_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce0),
    .A_i_V_1_q0(A_i_V_1_q0),
    .A_i_V_1_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address1),
    .A_i_V_1_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce1),
    .A_i_V_1_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_we1),
    .A_i_V_1_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_d1),
    .A_j_V_0_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address0),
    .A_j_V_0_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce0),
    .A_j_V_0_q0(A_j_V_0_q0),
    .A_j_V_0_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address1),
    .A_j_V_0_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce1),
    .A_j_V_0_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_we1),
    .A_j_V_0_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_d1),
    .A_j_V_1_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address0),
    .A_j_V_1_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce0),
    .A_j_V_1_q0(A_j_V_1_q0),
    .A_j_V_1_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address1),
    .A_j_V_1_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce1),
    .A_j_V_1_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_we1),
    .A_j_V_1_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_d1),
    .matA_V_0_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address0),
    .matA_V_0_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce0),
    .matA_V_0_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we0),
    .matA_V_0_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d0),
    .matA_V_0_q0(matA_V_0_q0),
    .matA_V_0_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address1),
    .matA_V_0_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce1),
    .matA_V_0_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we1),
    .matA_V_0_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d1),
    .matA_V_0_q1(matA_V_0_q1),
    .matA_V_1_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address0),
    .matA_V_1_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce0),
    .matA_V_1_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we0),
    .matA_V_1_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d0),
    .matA_V_1_q0(matA_V_1_q0),
    .matA_V_1_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address1),
    .matA_V_1_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce1),
    .matA_V_1_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we1),
    .matA_V_1_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d1),
    .matA_V_1_q1(matA_V_1_q1),
    .V_i_V_0_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address0),
    .V_i_V_0_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce0),
    .V_i_V_0_q0(V_i_V_0_q0),
    .V_i_V_0_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address1),
    .V_i_V_0_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce1),
    .V_i_V_0_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_we1),
    .V_i_V_0_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_d1),
    .V_i_V_1_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address0),
    .V_i_V_1_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce0),
    .V_i_V_1_q0(V_i_V_1_q0),
    .V_i_V_1_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address1),
    .V_i_V_1_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce1),
    .V_i_V_1_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_we1),
    .V_i_V_1_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_d1),
    .V_j_V_0_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address0),
    .V_j_V_0_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce0),
    .V_j_V_0_q0(V_j_V_0_q0),
    .V_j_V_0_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address1),
    .V_j_V_0_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce1),
    .V_j_V_0_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_we1),
    .V_j_V_0_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_d1),
    .V_j_V_1_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address0),
    .V_j_V_1_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce0),
    .V_j_V_1_q0(V_j_V_1_q0),
    .V_j_V_1_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address1),
    .V_j_V_1_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce1),
    .V_j_V_1_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_we1),
    .V_j_V_1_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_d1),
    .matV_V_0_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address0),
    .matV_V_0_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce0),
    .matV_V_0_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we0),
    .matV_V_0_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d0),
    .matV_V_0_q0(matV_V_0_q0),
    .matV_V_0_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address1),
    .matV_V_0_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce1),
    .matV_V_0_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we1),
    .matV_V_0_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d1),
    .matV_V_0_q1(matV_V_0_q1),
    .matV_V_1_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address0),
    .matV_V_1_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce0),
    .matV_V_1_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we0),
    .matV_V_1_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d0),
    .matV_V_1_q0(matV_V_1_q0),
    .matV_V_1_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address1),
    .matV_V_1_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce1),
    .matV_V_1_we1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we1),
    .matV_V_1_d1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d1),
    .matV_V_1_q1(matV_V_1_q1),
    .U_V_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address0),
    .U_V_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce0),
    .U_V_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_we0),
    .U_V_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_d0),
    .U_V_q0(U_V_q0),
    .U_V_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address1),
    .U_V_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce1),
    .U_V_q1(U_V_q1),
    .S_V_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_address0),
    .S_V_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_ce0),
    .S_V_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_we0),
    .S_V_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_d0),
    .S_V_q0(S_V_q0),
    .V_V_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address0),
    .V_V_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce0),
    .V_V_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_we0),
    .V_V_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_d0),
    .V_V_q0(V_V_q0),
    .V_V_address1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address1),
    .V_V_ce1(grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce1),
    .V_V_q1(V_V_q1),
    .UT_V_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_address0),
    .UT_V_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_ce0),
    .UT_V_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_we0),
    .UT_V_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_d0),
    .UT_V_q0(UT_V_q0),
    .A_pinv_V_address0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_address0),
    .A_pinv_V_ce0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_ce0),
    .A_pinv_V_we0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_we0),
    .A_pinv_V_d0(grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_d0),
    .A_pinv_V_q0(A_pinv_V_q0)
);

LLSSineReconstruction_sin_or_cos_float_s grp_sin_or_cos_float_s_fu_2989(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_float_s_fu_2989_ap_start),
    .ap_done(grp_sin_or_cos_float_s_fu_2989_ap_done),
    .ap_idle(grp_sin_or_cos_float_s_fu_2989_ap_idle),
    .ap_ready(grp_sin_or_cos_float_s_fu_2989_ap_ready),
    .t_in(grp_sin_or_cos_float_s_fu_2989_t_in),
    .ap_return(grp_sin_or_cos_float_s_fu_2989_ap_return)
);

LLSSineReconstruction_mul_64s_53ns_107_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 53 ),
    .dout_WIDTH( 107 ))
mul_64s_53ns_107_1_1_U886(
    .din0(this_times_q0),
    .din1(r_V_fu_3545_p1),
    .dout(r_V_fu_3545_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln301_fu_3100_p2 == 1'd1))) begin
            grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg <= 1'b1;
        end else if ((grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_ready == 1'b1)) begin
            grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_float_s_fu_2989_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            grp_sin_or_cos_float_s_fu_2989_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_float_s_fu_2989_ap_ready == 1'b1)) begin
            grp_sin_or_cos_float_s_fu_2989_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln298_fu_3064_p2 == 1'd0))) begin
        i_reg_2919 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_reg_2919 <= i_12_reg_5446;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_2931 <= add_ln307_reg_6015;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_2931 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_2908 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        k_reg_2908 <= add_ln298_reg_5412;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln298_reg_5412 <= add_ln298_fu_3053_p2;
        zext_ln298_reg_5417[3 : 0] <= zext_ln298_fu_3059_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln307_reg_6015 <= add_ln307_fu_3197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln307_reg_6020_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        and_ln581_2_reg_6247 <= and_ln581_2_fu_4065_p2;
        icmp_ln585_2_reg_6232 <= icmp_ln585_2_fu_3999_p2;
        icmp_ln591_3_reg_6242 <= icmp_ln591_3_fu_4035_p2;
        man_V_13_reg_6220 <= man_V_13_fu_3939_p3;
        or_ln571_10_reg_6262 <= or_ln571_10_fu_4109_p2;
        or_ln571_8_reg_6257 <= or_ln571_8_fu_4097_p2;
        p_Result_145_reg_6215 <= ireg_2_fu_3887_p1[32'd63];
        select_ln571_11_reg_6252 <= select_ln571_11_fu_4089_p3;
        trunc_ln575_2_reg_6227 <= trunc_ln575_2_fu_3959_p1;
        trunc_ln586_2_reg_6237 <= trunc_ln586_2_fu_4021_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        angle_2_reg_6164 <= angle_2_fu_3576_p2;
        p_Result_141_reg_6171 <= angle_2_fu_3576_p2[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_12_reg_5446 <= i_12_fu_3090_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln307_reg_6020 <= icmp_ln307_fu_3223_p2;
        icmp_ln307_reg_6020_pp0_iter1_reg <= icmp_ln307_reg_6020;
        icmp_ln307_reg_6020_pp0_iter2_reg <= icmp_ln307_reg_6020_pp0_iter1_reg;
        shl_ln_reg_6099_pp0_iter1_reg[8 : 1] <= shl_ln_reg_6099[8 : 1];
        shl_ln_reg_6099_pp0_iter2_reg[8 : 1] <= shl_ln_reg_6099_pp0_iter1_reg[8 : 1];
        zext_ln312_reg_6024_pp0_iter1_reg[7 : 0] <= zext_ln312_reg_6024[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln571_reg_5395 <= icmp_ln571_fu_3034_p2;
        ireg_reg_5383 <= ireg_fu_3018_p1;
        p_Result_139_reg_5389 <= ireg_fu_3018_p1[32'd63];
        trunc_ln588_cast_reg_5402 <= trunc_ln588_cast_fu_3040_p3;
        xor_ln571_reg_5407 <= xor_ln571_fu_3047_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        icmp_ln935_1_reg_6304 <= icmp_ln935_1_fu_4403_p2;
        icmp_ln935_reg_6267 <= icmp_ln935_fu_4223_p2;
        icmp_ln954_1_reg_6326 <= icmp_ln954_1_fu_4551_p2;
        icmp_ln954_reg_6289 <= icmp_ln954_fu_4371_p2;
        p_Result_147_reg_6272 <= x_V_q1[32'd63];
        p_Result_151_reg_6309 <= x_V_q0[32'd63];
        select_ln954_3_reg_6331 <= select_ln954_3_fu_4571_p3;
        select_ln954_reg_6294 <= select_ln954_fu_4391_p3;
        sub_ln944_1_reg_6320 <= sub_ln944_1_fu_4453_p2;
        sub_ln944_reg_6283 <= sub_ln944_fu_4273_p2;
        tmp_V_24_reg_6277 <= tmp_V_24_fu_4243_p3;
        tmp_V_25_reg_6314 <= tmp_V_25_fu_4423_p3;
        trunc_ln943_1_reg_6336 <= trunc_ln943_1_fu_4579_p1;
        trunc_ln943_reg_6299 <= trunc_ln943_fu_4399_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        icmp_ln935_2_reg_6177 <= icmp_ln935_2_fu_3590_p2;
        icmp_ln954_2_reg_6194 <= icmp_ln954_2_fu_3726_p2;
        select_ln954_5_reg_6199 <= select_ln954_5_fu_3746_p3;
        sub_ln944_2_reg_6188 <= sub_ln944_2_fu_3628_p2;
        tmp_V_23_reg_6182 <= tmp_V_23_fu_3600_p3;
        trunc_ln943_2_reg_6204 <= trunc_ln943_2_fu_3754_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln298_fu_3064_p2 == 1'd0))) begin
        mag_samples_sample_V_addr_24_reg_5426 <= zext_ln298_fu_3059_p1;
        sext_ln301_reg_5436 <= sext_ln301_fu_3078_p1;
        trunc_ln22_reg_5441 <= trunc_ln22_fu_3086_p1;
        trunc_ln301_reg_5431 <= trunc_ln301_fu_3074_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        r_V_reg_6154 <= r_V_fu_3545_p2;
        tmp_101_reg_6159 <= r_V_fu_3545_p2[32'd42];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln307_fu_3223_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rhs_reg_6094[106 : 43] <= rhs_fu_3520_p3[106 : 43];
        shl_ln_reg_6099[8 : 1] <= shl_ln_fu_3528_p3[8 : 1];
        zext_ln312_reg_6024[7 : 0] <= zext_ln312_fu_3234_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_10_sample_V_load_reg_6144 <= sample_period_samples_10_sample_V_q0;
        sample_period_samples_11_sample_V_load_reg_6149 <= sample_period_samples_11_sample_V_q0;
        sample_period_samples_2_sample_V_load_reg_6104 <= sample_period_samples_2_sample_V_q0;
        sample_period_samples_3_sample_V_load_reg_6109 <= sample_period_samples_3_sample_V_q0;
        sample_period_samples_4_sample_V_load_reg_6114 <= sample_period_samples_4_sample_V_q0;
        sample_period_samples_5_sample_V_load_reg_6119 <= sample_period_samples_5_sample_V_q0;
        sample_period_samples_6_sample_V_load_reg_6124 <= sample_period_samples_6_sample_V_q0;
        sample_period_samples_7_sample_V_load_reg_6129 <= sample_period_samples_7_sample_V_q0;
        sample_period_samples_8_sample_V_load_reg_6134 <= sample_period_samples_8_sample_V_q0;
        sample_period_samples_9_sample_V_load_reg_6139 <= sample_period_samples_9_sample_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_18_reg_6010[7 : 3] <= tmp_18_fu_3189_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_89_reg_4828 <= bitcast_ln702_fu_3006_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln307_reg_6020_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v_assign_reg_6209 <= grp_sin_or_cos_float_s_fu_2989_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln301_fu_3100_p2 == 1'd0))) begin
        zext_ln34_reg_5454[4 : 0] <= zext_ln34_fu_3161_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln307_fu_3223_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln298_fu_3064_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_2935_p4 = add_ln307_reg_6015;
    end else begin
        ap_phi_mux_j_phi_fu_2935_p4 = j_reg_2931;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln298_fu_3064_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_3002_p0 = v_assign_reg_6209;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_3002_p0 = p_read;
    end else begin
        grp_fu_3002_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mag_samples_sample_V_address0 = mag_samples_sample_V_addr_24_reg_5426;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mag_samples_sample_V_address0 = 64'd1;
    end else begin
        mag_samples_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            mag_samples_sample_V_address1 = 64'd11;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            mag_samples_sample_V_address1 = 64'd9;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            mag_samples_sample_V_address1 = 64'd7;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            mag_samples_sample_V_address1 = 64'd5;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            mag_samples_sample_V_address1 = 64'd3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            mag_samples_sample_V_address1 = 64'd0;
        end else begin
            mag_samples_sample_V_address1 = 'bx;
        end
    end else begin
        mag_samples_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        mag_samples_sample_V_ce0 = 1'b1;
    end else begin
        mag_samples_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        mag_samples_sample_V_ce1 = 1'b1;
    end else begin
        mag_samples_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            mag_samples_sample_V_d0 = sample_period_samples_10_sample_V_load_reg_6144;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            mag_samples_sample_V_d0 = sample_period_samples_8_sample_V_load_reg_6134;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            mag_samples_sample_V_d0 = sample_period_samples_6_sample_V_load_reg_6124;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            mag_samples_sample_V_d0 = sample_period_samples_4_sample_V_load_reg_6114;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            mag_samples_sample_V_d0 = sample_period_samples_2_sample_V_load_reg_6104;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            mag_samples_sample_V_d0 = sample_period_samples_1_sample_V_q0;
        end else begin
            mag_samples_sample_V_d0 = 'bx;
        end
    end else begin
        mag_samples_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            mag_samples_sample_V_d1 = sample_period_samples_11_sample_V_load_reg_6149;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            mag_samples_sample_V_d1 = sample_period_samples_9_sample_V_load_reg_6139;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            mag_samples_sample_V_d1 = sample_period_samples_7_sample_V_load_reg_6129;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            mag_samples_sample_V_d1 = sample_period_samples_5_sample_V_load_reg_6119;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            mag_samples_sample_V_d1 = sample_period_samples_3_sample_V_load_reg_6109;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            mag_samples_sample_V_d1 = sample_period_samples_0_sample_V_q0;
        end else begin
            mag_samples_sample_V_d1 = 'bx;
        end
    end else begin
        mag_samples_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        mag_samples_sample_V_we0 = 1'b1;
    end else begin
        mag_samples_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln307_reg_6020 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        mag_samples_sample_V_we1 = 1'b1;
    end else begin
        mag_samples_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_0_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_0_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_0_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_0_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_0_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_0_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_0_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_0_q0;
    end else begin
        sample_period_samples_0_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_0_q0;
    end else begin
        sample_period_samples_0_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_0_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_0_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_10_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_10_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_10_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_10_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_10_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_10_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_10_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_10_q0;
    end else begin
        sample_period_samples_10_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_10_q0;
    end else begin
        sample_period_samples_10_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_10_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_10_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_11_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_11_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_11_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_11_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_11_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_11_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_11_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_11_q0;
    end else begin
        sample_period_samples_11_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_11_q0;
    end else begin
        sample_period_samples_11_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_11_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_11_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_1_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_1_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_1_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_1_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_1_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_1_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_1_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_1_q0;
    end else begin
        sample_period_samples_1_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_1_q0;
    end else begin
        sample_period_samples_1_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_1_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_1_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_2_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_2_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_2_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_2_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_2_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_2_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_2_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_2_q0;
    end else begin
        sample_period_samples_2_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_2_q0;
    end else begin
        sample_period_samples_2_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_2_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_2_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_3_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_3_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_3_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_3_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_3_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_3_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_3_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_3_q0;
    end else begin
        sample_period_samples_3_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_3_q0;
    end else begin
        sample_period_samples_3_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_3_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_3_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_4_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_4_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_4_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_4_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_4_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_4_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_4_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_4_q0;
    end else begin
        sample_period_samples_4_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_4_q0;
    end else begin
        sample_period_samples_4_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_4_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_4_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_5_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_5_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_5_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_5_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_5_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_5_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_5_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_5_q0;
    end else begin
        sample_period_samples_5_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_5_q0;
    end else begin
        sample_period_samples_5_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_5_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_5_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_6_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_6_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_6_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_6_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_6_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_6_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_6_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_6_q0;
    end else begin
        sample_period_samples_6_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_6_q0;
    end else begin
        sample_period_samples_6_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_6_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_6_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_7_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_7_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_7_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_7_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_7_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_7_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_7_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_7_q0;
    end else begin
        sample_period_samples_7_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_7_q0;
    end else begin
        sample_period_samples_7_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_7_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_7_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_8_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_8_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_8_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_8_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_8_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_8_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_8_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_8_q0;
    end else begin
        sample_period_samples_8_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_8_q0;
    end else begin
        sample_period_samples_8_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_8_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_8_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        sample_period_samples_9_sample_V_address0 = j_cast2_fu_3203_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_9_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_9_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_9_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_9_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        sample_period_samples_9_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_9_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_9_q0;
    end else begin
        sample_period_samples_9_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_9_q0;
    end else begin
        sample_period_samples_9_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_9_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sample_period_samples_9_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_0_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_1_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_2_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_3_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_4_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_5_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_6_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sliding_window_buffer_samples_sample_V_7_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        this_A_address0 = zext_ln320_fu_4218_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        this_A_address0 = zext_ln319_fu_3536_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        this_A_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_address0;
    end else begin
        this_A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        this_A_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        this_A_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_ce0;
    end else begin
        this_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        this_A_d0 = select_ln571_14_fu_4205_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        this_A_d0 = 64'd8796093022208;
    end else begin
        this_A_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln307_reg_6020_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln307_fu_3223_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        this_A_we0 = 1'b1;
    end else begin
        this_A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        this_amplitudes_s_ce0 = 1'b1;
    end else begin
        this_amplitudes_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        this_amplitudes_s_we0 = 1'b1;
    end else begin
        this_amplitudes_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        this_b_address0 = zext_ln312_reg_6024_pp0_iter1_reg;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        this_b_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_address0;
    end else begin
        this_b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        this_b_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        this_b_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_b_ce0;
    end else begin
        this_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln307_reg_6020_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        this_b_we0 = 1'b1;
    end else begin
        this_b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        this_offsets_s_ce0 = 1'b1;
    end else begin
        this_offsets_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        this_offsets_s_we0 = 1'b1;
    end else begin
        this_offsets_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        this_times_ce0 = 1'b1;
    end else begin
        this_times_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        x_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        x_V_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_address0;
    end else begin
        x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        x_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        x_V_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_ce0;
    end else begin
        x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        x_V_ce1 = 1'b1;
    end else begin
        x_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        x_V_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_x_we0;
    end else begin
        x_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln298_fu_3064_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln301_fu_3100_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln307_fu_3223_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln307_fu_3223_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_i_V_0_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address0;

assign A_i_V_0_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_address1;

assign A_i_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce0;

assign A_i_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_ce1;

assign A_i_V_0_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_d1;

assign A_i_V_0_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_0_we1;

assign A_i_V_1_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address0;

assign A_i_V_1_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_address1;

assign A_i_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce0;

assign A_i_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_ce1;

assign A_i_V_1_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_d1;

assign A_i_V_1_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_i_V_1_we1;

assign A_j_V_0_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address0;

assign A_j_V_0_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_address1;

assign A_j_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce0;

assign A_j_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_ce1;

assign A_j_V_0_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_d1;

assign A_j_V_0_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_0_we1;

assign A_j_V_1_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address0;

assign A_j_V_1_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_address1;

assign A_j_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce0;

assign A_j_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_ce1;

assign A_j_V_1_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_d1;

assign A_j_V_1_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_j_V_1_we1;

assign A_pinv_V_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_address0;

assign A_pinv_V_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_ce0;

assign A_pinv_V_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_d0;

assign A_pinv_V_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_A_pinv_V_we0;

assign F2_2_fu_3953_p2 = (12'd1075 - zext_ln455_2_fu_3913_p1);

assign F2_fu_3280_p2 = (12'd1075 - zext_ln455_fu_3248_p1);

assign LD_7_fu_4807_p1 = p_Result_154_fu_4795_p5[31:0];

assign LD_9_fu_3862_p1 = p_Result_144_fu_3850_p5[31:0];

assign LD_fu_4687_p1 = p_Result_150_fu_4675_p5[31:0];

assign S_V_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_address0;

assign S_V_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_ce0;

assign S_V_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_d0;

assign S_V_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_S_V_we0;

assign UT_V_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_address0;

assign UT_V_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_ce0;

assign UT_V_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_d0;

assign UT_V_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_UT_V_we0;

assign U_V_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address0;

assign U_V_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_address1;

assign U_V_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce0;

assign U_V_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_ce1;

assign U_V_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_d0;

assign U_V_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_U_V_we0;

assign V_V_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address0;

assign V_V_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_address1;

assign V_V_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce0;

assign V_V_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_ce1;

assign V_V_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_d0;

assign V_V_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_V_we0;

assign V_i_V_0_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address0;

assign V_i_V_0_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_address1;

assign V_i_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce0;

assign V_i_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_ce1;

assign V_i_V_0_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_d1;

assign V_i_V_0_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_0_we1;

assign V_i_V_1_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address0;

assign V_i_V_1_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_address1;

assign V_i_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce0;

assign V_i_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_ce1;

assign V_i_V_1_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_d1;

assign V_i_V_1_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_i_V_1_we1;

assign V_j_V_0_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address0;

assign V_j_V_0_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_address1;

assign V_j_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce0;

assign V_j_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_ce1;

assign V_j_V_0_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_d1;

assign V_j_V_0_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_0_we1;

assign V_j_V_1_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address0;

assign V_j_V_1_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_address1;

assign V_j_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce0;

assign V_j_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_ce1;

assign V_j_V_1_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_d1;

assign V_j_V_1_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_V_j_V_1_we1;

assign add_ln22_2_fu_3116_p2 = ($signed(sext_ln22_fu_3112_p1) + $signed(sext_ln301_reg_5436));

assign add_ln22_fu_3106_p2 = ($signed(zext_ln301_fu_3096_p1) + $signed(6'd45));

assign add_ln28_fu_3143_p2 = (select_ln28_fu_3135_p3 + i_reg_2919);

assign add_ln298_fu_3053_p2 = (k_reg_2908 + 4'd1);

assign add_ln307_fu_3197_p2 = (ap_phi_mux_j_phi_fu_2935_p4 + 4'd1);

assign add_ln310_fu_3229_p2 = (tmp_18_reg_6010 + j_cast_fu_3219_p1);

assign add_ln415_15_fu_4182_p2 = ($signed(sext_ln591_1_fu_4152_p1) + $signed(zext_ln415_15_fu_4178_p1));

assign add_ln415_fu_3422_p2 = ($signed(sext_ln591_fu_3373_p1) + $signed(zext_ln415_fu_3418_p1));

assign add_ln581_4_fu_3969_p2 = ($signed(F2_2_fu_3953_p2) + $signed(12'd4053));

assign add_ln581_fu_3296_p2 = ($signed(F2_fu_3280_p2) + $signed(12'd4053));

assign add_ln591_3_fu_4156_p2 = ($signed(trunc_ln575_2_reg_6227) + $signed(11'd2004));

assign add_ln591_fu_3393_p2 = ($signed(trunc_ln575_fu_3286_p1) + $signed(11'd2004));

assign add_ln954_1_fu_4717_p2 = ($signed(sub_ln944_1_reg_6320) + $signed(32'd4294967271));

assign add_ln954_2_fu_3772_p2 = ($signed(sub_ln944_2_reg_6188) + $signed(32'd4294967271));

assign add_ln954_fu_4597_p2 = ($signed(sub_ln944_reg_6283) + $signed(32'd4294967271));

assign add_ln964_1_fu_4782_p2 = (sub_ln964_1_fu_4777_p2 + select_ln943_1_fu_4769_p3);

assign add_ln964_2_fu_3837_p2 = (sub_ln964_2_fu_3832_p2 + select_ln943_2_fu_3824_p3);

assign add_ln964_fu_4662_p2 = (sub_ln964_fu_4657_p2 + select_ln943_fu_4649_p3);

assign and_ln581_2_fu_4065_p2 = (xor_ln582_2_fu_4059_p2 & icmp_ln581_3_fu_3963_p2);

assign and_ln581_fu_3444_p2 = (xor_ln582_fu_3438_p2 & icmp_ln581_fu_3290_p2);

assign and_ln582_2_fu_4047_p2 = (xor_ln571_2_fu_4041_p2 & icmp_ln582_2_fu_3989_p2);

assign and_ln582_fu_3428_p2 = (xor_ln571_reg_5407 & icmp_ln582_fu_3316_p2);

assign and_ln603_2_fu_4083_p2 = (xor_ln581_2_fu_4077_p2 & icmp_ln603_2_fu_4015_p2);

assign and_ln603_fu_3462_p2 = (xor_ln581_fu_3456_p2 & icmp_ln603_fu_3346_p2);

assign and_ln949_2_fu_4377_p2 = (xor_ln949_fu_4357_p2 & p_Result_149_fu_4363_p3);

assign and_ln949_3_fu_4517_p2 = (tmp_V_25_fu_4423_p3 & or_ln949_fu_4511_p2);

assign and_ln949_4_fu_4557_p2 = (xor_ln949_1_fu_4537_p2 & p_Result_153_fu_4543_p3);

assign and_ln949_5_fu_3692_p2 = (tmp_V_23_fu_3600_p3 & or_ln949_4_fu_3686_p2);

assign and_ln949_6_fu_3732_p2 = (xor_ln949_2_fu_3712_p2 & p_Result_143_fu_3718_p3);

assign and_ln949_fu_4337_p2 = (tmp_V_24_fu_4243_p3 & or_ln949_3_fu_4331_p2);

assign angle_2_fu_3576_p2 = (angle_fu_3563_p4 + zext_ln415_14_fu_3573_p1);

assign angle_fu_3563_p4 = {{ret_V_fu_3559_p2[106:43]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln586_2_fu_4121_p2 = $signed(man_V_13_reg_6220) >>> zext_ln586_4_fu_4118_p1;

assign ashr_ln586_fu_3360_p2 = $signed(man_V_fu_3273_p3) >>> zext_ln586_fu_3356_p1;

assign bitcast_ln702_2_fu_4126_p1 = v_assign_reg_6209;

assign bitcast_ln702_fu_3006_p1 = p_read;

assign bitcast_ln744_1_fu_4811_p1 = LD_7_fu_4807_p1;

assign bitcast_ln744_2_fu_3866_p1 = LD_9_fu_3862_p1;

assign bitcast_ln744_fu_4691_p1 = LD_fu_4687_p1;

assign buffer_idx_4_fu_3154_p3 = ((icmp_ln24_fu_3121_p2[0:0] == 1'b1) ? trunc_ln22_reg_5441 : buffer_idx_fu_3149_p2);

assign buffer_idx_fu_3149_p2 = (add_ln28_fu_3143_p2 + trunc_ln301_reg_5431);

assign exp_tmp_2_fu_3903_p4 = {{ireg_2_fu_3887_p1[62:52]}};

assign exp_tmp_fu_3239_p4 = {{ireg_reg_5383[62:52]}};

assign grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start = grp_computeLeastSquaresSolution_160_3_1_fu_2942_ap_start_reg;

assign grp_fu_2133_p_ce = 1'b1;

assign grp_fu_2133_p_din0 = grp_fu_3002_p0;

assign grp_fu_3002_ce = 1'b1;

assign grp_fu_3002_p1 = grp_fu_2133_p_dout0;

assign grp_sin_or_cos_float_s_fu_2989_ap_start = grp_sin_or_cos_float_s_fu_2989_ap_start_reg;

assign grp_sin_or_cos_float_s_fu_2989_t_in = ((icmp_ln935_2_reg_6177[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_2_fu_3866_p1);

assign i_12_fu_3090_p2 = (i_reg_2919 + 5'd1);

assign icmp_ln24_fu_3121_p2 = (($signed(add_ln22_2_fu_3116_p2) < $signed(7'd108)) ? 1'b1 : 1'b0);

assign icmp_ln298_fu_3064_p2 = ((k_reg_2908 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln301_fu_3100_p2 = ((i_reg_2919 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln307_fu_3223_p2 = ((ap_phi_mux_j_phi_fu_2935_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln571_2_fu_3947_p2 = ((trunc_ln555_2_fu_3891_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_3034_p2 = ((trunc_ln555_fu_3022_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_3_fu_3963_p2 = (($signed(F2_2_fu_3953_p2) > $signed(12'd43)) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_3290_p2 = (($signed(F2_fu_3280_p2) > $signed(12'd43)) ? 1'b1 : 1'b0);

assign icmp_ln582_2_fu_3989_p2 = ((F2_2_fu_3953_p2 == 12'd43) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_3316_p2 = ((F2_fu_3280_p2 == 12'd43) ? 1'b1 : 1'b0);

assign icmp_ln585_2_fu_3999_p2 = ((sh_amt_2_fu_3981_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_3330_p2 = ((sh_amt_fu_3308_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln591_3_fu_4035_p2 = (($signed(add_ln581_4_fu_3969_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln591_fu_3377_p2 = (($signed(add_ln581_fu_3296_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln603_2_fu_4015_p2 = ((tmp_107_fu_4005_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_3346_p2 = ((tmp_100_fu_3336_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_1_fu_4403_p2 = ((x_V_q0 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_2_fu_3590_p2 = ((angle_2_reg_6164 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_4223_p2 = ((x_V_q1 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln946_1_fu_4475_p2 = (($signed(tmp_95_fu_4465_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln946_2_fu_3650_p2 = (($signed(tmp_103_fu_3640_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln946_fu_4295_p2 = (($signed(tmp_91_fu_4285_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln949_1_fu_4523_p2 = ((and_ln949_3_fu_4517_p2 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln949_2_fu_3698_p2 = ((and_ln949_5_fu_3692_p2 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln949_fu_4343_p2 = ((and_ln949_fu_4337_p2 != 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln954_1_fu_4551_p2 = (($signed(lsb_index_4_fu_4459_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln954_2_fu_3726_p2 = (($signed(lsb_index_5_fu_3634_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln954_fu_4371_p2 = (($signed(lsb_index_fu_4279_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign ireg_2_fu_3887_p1 = grp_fu_2133_p_dout0;

assign ireg_fu_3018_p1 = grp_fu_2133_p_dout0;

assign j_cast2_fu_3203_p1 = ap_phi_mux_j_phi_fu_2935_p4;

assign j_cast_fu_3219_p1 = ap_phi_mux_j_phi_fu_2935_p4;

assign l_4_fu_4449_p1 = tmp_s_fu_4441_p3[31:0];

assign l_5_fu_3624_p1 = tmp_6_fu_3616_p3[31:0];

assign l_fu_4269_p1 = tmp_fu_4261_p3[31:0];

assign lsb_index_4_fu_4459_p2 = ($signed(sub_ln944_1_fu_4453_p2) + $signed(32'd4294967272));

assign lsb_index_5_fu_3634_p2 = ($signed(sub_ln944_2_fu_3628_p2) + $signed(32'd4294967272));

assign lsb_index_fu_4279_p2 = ($signed(sub_ln944_fu_4273_p2) + $signed(32'd4294967272));

assign lshr_ln947_1_fu_4495_p2 = 64'd18446744073709551615 >> zext_ln947_1_fu_4491_p1;

assign lshr_ln947_2_fu_3670_p2 = 64'd18446744073709551615 >> zext_ln947_2_fu_3666_p1;

assign lshr_ln947_fu_4315_p2 = 64'd18446744073709551615 >> zext_ln947_fu_4311_p1;

assign lshr_ln954_1_fu_4726_p2 = tmp_V_25_reg_6314 >> zext_ln954_1_fu_4722_p1;

assign lshr_ln954_2_fu_3781_p2 = tmp_V_23_reg_6182 >> zext_ln954_2_fu_3777_p1;

assign lshr_ln954_fu_4606_p2 = tmp_V_24_reg_6277 >> zext_ln954_fu_4602_p1;

assign m_26_fu_4621_p2 = (m_fu_4611_p3 + zext_ln961_fu_4618_p1);

assign m_29_fu_4731_p3 = ((icmp_ln954_1_reg_6326[0:0] == 1'b1) ? lshr_ln954_1_fu_4726_p2 : shl_ln955_1_fu_4712_p2);

assign m_30_fu_4741_p2 = (m_29_fu_4731_p3 + zext_ln961_1_fu_4738_p1);

assign m_32_fu_3786_p3 = ((icmp_ln954_2_reg_6194[0:0] == 1'b1) ? lshr_ln954_2_fu_3781_p2 : shl_ln955_2_fu_3767_p2);

assign m_33_fu_3796_p2 = (m_32_fu_3786_p3 + zext_ln961_2_fu_3793_p1);

assign m_35_fu_3802_p4 = {{m_33_fu_3796_p2[63:1]}};

assign m_36_fu_4627_p4 = {{m_26_fu_4621_p2[63:1]}};

assign m_37_fu_4747_p4 = {{m_30_fu_4741_p2[63:1]}};

assign m_fu_4611_p3 = ((icmp_ln954_reg_6289[0:0] == 1'b1) ? lshr_ln954_fu_4606_p2 : shl_ln955_fu_4592_p2);

assign man_V_12_fu_3933_p2 = (54'd0 - zext_ln569_2_fu_3929_p1);

assign man_V_13_fu_3939_p3 = ((p_Result_145_fu_3895_p3[0:0] == 1'b1) ? man_V_12_fu_3933_p2 : zext_ln569_2_fu_3929_p1);

assign man_V_9_fu_3267_p2 = (54'd0 - zext_ln569_fu_3263_p1);

assign man_V_fu_3273_p3 = ((p_Result_139_reg_5389[0:0] == 1'b1) ? man_V_9_fu_3267_p2 : zext_ln569_fu_3263_p1);

assign matA_V_0_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address0;

assign matA_V_0_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_address1;

assign matA_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce0;

assign matA_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_ce1;

assign matA_V_0_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d0;

assign matA_V_0_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_d1;

assign matA_V_0_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we0;

assign matA_V_0_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_0_we1;

assign matA_V_1_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address0;

assign matA_V_1_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_address1;

assign matA_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce0;

assign matA_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_ce1;

assign matA_V_1_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d0;

assign matA_V_1_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_d1;

assign matA_V_1_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we0;

assign matA_V_1_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matA_V_1_we1;

assign matU_V_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_address0;

assign matU_V_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_ce0;

assign matU_V_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_d0;

assign matU_V_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matU_V_we0;

assign matV_V_0_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address0;

assign matV_V_0_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_address1;

assign matV_V_0_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce0;

assign matV_V_0_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_ce1;

assign matV_V_0_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d0;

assign matV_V_0_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_d1;

assign matV_V_0_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we0;

assign matV_V_0_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_0_we1;

assign matV_V_1_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address0;

assign matV_V_1_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_address1;

assign matV_V_1_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce0;

assign matV_V_1_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_ce1;

assign matV_V_1_d0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d0;

assign matV_V_1_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_d1;

assign matV_V_1_we0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we0;

assign matV_V_1_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_matV_V_1_we1;

assign or_ln320_fu_4213_p2 = (shl_ln_reg_6099_pp0_iter2_reg | 9'd1);

assign or_ln571_10_fu_4109_p2 = (or_ln571_9_fu_4103_p2 | or_ln571_8_fu_4097_p2);

assign or_ln571_6_fu_3485_p2 = (and_ln582_fu_3428_p2 | and_ln581_fu_3444_p2);

assign or_ln571_7_fu_3491_p2 = (or_ln571_fu_3468_p2 | or_ln571_6_fu_3485_p2);

assign or_ln571_8_fu_4097_p2 = (icmp_ln571_2_fu_3947_p2 | and_ln603_2_fu_4083_p2);

assign or_ln571_9_fu_4103_p2 = (and_ln582_2_fu_4047_p2 | and_ln581_2_fu_4065_p2);

assign or_ln571_fu_3468_p2 = (icmp_ln571_reg_5395 | and_ln603_fu_3462_p2);

assign or_ln581_2_fu_4071_p2 = (or_ln582_2_fu_4053_p2 | icmp_ln581_3_fu_3963_p2);

assign or_ln581_fu_3450_p2 = (or_ln582_fu_3433_p2 | icmp_ln581_fu_3290_p2);

assign or_ln582_2_fu_4053_p2 = (icmp_ln582_2_fu_3989_p2 | icmp_ln571_2_fu_3947_p2);

assign or_ln582_fu_3433_p2 = (icmp_ln582_fu_3316_p2 | icmp_ln571_reg_5395);

assign or_ln949_3_fu_4331_p2 = (shl_ln949_fu_4325_p2 | lshr_ln947_fu_4315_p2);

assign or_ln949_4_fu_3686_p2 = (shl_ln949_2_fu_3680_p2 | lshr_ln947_2_fu_3670_p2);

assign or_ln949_fu_4511_p2 = (shl_ln949_1_fu_4505_p2 | lshr_ln947_1_fu_4495_p2);

assign p_Result_123_fu_4761_p3 = m_30_fu_4741_p2[32'd25];

assign p_Result_131_fu_3403_p3 = man_V_fu_3273_p3[zext_ln591_fu_3399_p1];

assign p_Result_134_fu_3816_p3 = m_33_fu_3796_p2[32'd25];

assign p_Result_138_fu_4165_p3 = man_V_13_reg_6220[zext_ln591_3_fu_4161_p1];

assign p_Result_140_fu_3255_p3 = {{1'd1}, {trunc_ln565_fu_3252_p1}};

integer ap_tvar_int_0;

always @ (tmp_V_23_fu_3600_p3) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            p_Result_142_fu_3606_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_142_fu_3606_p4[ap_tvar_int_0] = tmp_V_23_fu_3600_p3[63 - ap_tvar_int_0];
        end
    end
end

assign p_Result_143_fu_3718_p3 = tmp_V_23_fu_3600_p3[lsb_index_5_fu_3634_p2];

assign p_Result_144_fu_3850_p5 = {{zext_ln962_2_fu_3812_p1[63:32]}, {tmp_7_fu_3843_p3}, {zext_ln962_2_fu_3812_p1[22:0]}};

assign p_Result_145_fu_3895_p3 = ireg_2_fu_3887_p1[32'd63];

assign p_Result_146_fu_3921_p3 = {{1'd1}, {trunc_ln565_2_fu_3917_p1}};

assign p_Result_147_fu_4229_p3 = x_V_q1[32'd63];

integer ap_tvar_int_1;

always @ (tmp_V_24_fu_4243_p3) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            p_Result_148_fu_4251_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            p_Result_148_fu_4251_p4[ap_tvar_int_1] = tmp_V_24_fu_4243_p3[63 - ap_tvar_int_1];
        end
    end
end

assign p_Result_149_fu_4363_p3 = tmp_V_24_fu_4243_p3[lsb_index_fu_4279_p2];

assign p_Result_150_fu_4675_p5 = {{zext_ln962_fu_4637_p1[63:32]}, {tmp_4_fu_4668_p3}, {zext_ln962_fu_4637_p1[22:0]}};

assign p_Result_151_fu_4409_p3 = x_V_q0[32'd63];

integer ap_tvar_int_2;

always @ (tmp_V_25_fu_4423_p3) begin
    for (ap_tvar_int_2 = 64 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 - 0) begin
            p_Result_152_fu_4431_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            p_Result_152_fu_4431_p4[ap_tvar_int_2] = tmp_V_25_fu_4423_p3[63 - ap_tvar_int_2];
        end
    end
end

assign p_Result_153_fu_4543_p3 = tmp_V_25_fu_4423_p3[lsb_index_4_fu_4459_p2];

assign p_Result_154_fu_4795_p5 = {{zext_ln962_1_fu_4757_p1[63:32]}, {tmp_5_fu_4788_p3}, {zext_ln962_1_fu_4757_p1[22:0]}};

assign p_Result_s_fu_4641_p3 = m_26_fu_4621_p2[32'd25];

assign qb_2_fu_4172_p3 = ((icmp_ln591_3_reg_6242[0:0] == 1'b1) ? p_Result_145_reg_6215 : p_Result_138_fu_4165_p3);

assign qb_fu_3411_p3 = ((icmp_ln591_fu_3377_p2[0:0] == 1'b1) ? p_Result_139_reg_5389 : p_Result_131_fu_3403_p3);

assign r_V_fu_3545_p1 = 107'd2763374121886110;

assign ret_V_fu_3559_p2 = (rhs_reg_6094 + r_V_reg_6154);

assign rhs_fu_3520_p3 = {{select_ln571_10_fu_3512_p3}, {43'd0}};

assign select_ln28_fu_3135_p3 = ((tmp_98_fu_3127_p3[0:0] == 1'b1) ? 5'd1 : 5'd13);

assign select_ln571_10_fu_3512_p3 = ((or_ln571_7_fu_3491_p2[0:0] == 1'b1) ? select_ln571_9_fu_3504_p3 : 64'd0);

assign select_ln571_11_fu_4089_p3 = ((icmp_ln571_2_fu_3947_p2[0:0] == 1'b1) ? 64'd0 : shl_ln604_1_fu_4029_p2);

assign select_ln571_12_fu_4188_p3 = ((and_ln581_2_reg_6247[0:0] == 1'b1) ? add_ln415_15_fu_4182_p2 : sext_ln585_1_fu_4115_p1);

assign select_ln571_13_fu_4199_p3 = ((or_ln571_8_reg_6257[0:0] == 1'b1) ? select_ln571_11_reg_6252 : sext_ln571_2_fu_4195_p1);

assign select_ln571_14_fu_4205_p3 = ((or_ln571_10_reg_6262[0:0] == 1'b1) ? select_ln571_13_fu_4199_p3 : 64'd0);

assign select_ln571_8_fu_3497_p3 = ((icmp_ln571_reg_5395[0:0] == 1'b1) ? 64'd0 : shl_ln604_fu_3387_p2);

assign select_ln571_9_fu_3504_p3 = ((or_ln571_fu_3468_p2[0:0] == 1'b1) ? select_ln571_8_fu_3497_p3 : sext_ln571_fu_3481_p1);

assign select_ln571_fu_3473_p3 = ((and_ln581_fu_3444_p2[0:0] == 1'b1) ? add_ln415_fu_3422_p2 : sext_ln585_fu_3326_p1);

assign select_ln585_1_fu_4145_p3 = ((icmp_ln585_2_reg_6232[0:0] == 1'b1) ? ashr_ln586_2_fu_4121_p2 : trunc_ln588_2_cast_fu_4137_p3);

assign select_ln585_fu_3366_p3 = ((icmp_ln585_fu_3330_p2[0:0] == 1'b1) ? ashr_ln586_fu_3360_p2 : trunc_ln588_cast_reg_5402);

assign select_ln943_1_fu_4769_p3 = ((p_Result_123_fu_4761_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln943_2_fu_3824_p3 = ((p_Result_134_fu_3816_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln943_fu_4649_p3 = ((p_Result_s_fu_4641_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln946_1_fu_4563_p3 = ((icmp_ln946_1_fu_4475_p2[0:0] == 1'b1) ? icmp_ln949_1_fu_4523_p2 : p_Result_153_fu_4543_p3);

assign select_ln946_2_fu_3738_p3 = ((icmp_ln946_2_fu_3650_p2[0:0] == 1'b1) ? icmp_ln949_2_fu_3698_p2 : p_Result_143_fu_3718_p3);

assign select_ln946_fu_4383_p3 = ((icmp_ln946_fu_4295_p2[0:0] == 1'b1) ? icmp_ln949_fu_4343_p2 : p_Result_149_fu_4363_p3);

assign select_ln954_3_fu_4571_p3 = ((icmp_ln954_1_fu_4551_p2[0:0] == 1'b1) ? select_ln946_1_fu_4563_p3 : and_ln949_4_fu_4557_p2);

assign select_ln954_5_fu_3746_p3 = ((icmp_ln954_2_fu_3726_p2[0:0] == 1'b1) ? select_ln946_2_fu_3738_p3 : and_ln949_6_fu_3732_p2);

assign select_ln954_fu_4391_p3 = ((icmp_ln954_fu_4371_p2[0:0] == 1'b1) ? select_ln946_fu_4383_p3 : and_ln949_2_fu_4377_p2);

assign sext_ln22_fu_3112_p1 = $signed(add_ln22_fu_3106_p2);

assign sext_ln301_fu_3078_p0 = sliding_window_front_ptr_s;

assign sext_ln301_fu_3078_p1 = sext_ln301_fu_3078_p0;

assign sext_ln571_2_fu_4195_p1 = $signed(select_ln571_12_fu_4188_p3);

assign sext_ln571_fu_3481_p1 = $signed(select_ln571_fu_3473_p3);

assign sext_ln583_2_fu_3995_p1 = man_V_13_fu_3939_p3;

assign sext_ln583_fu_3322_p1 = man_V_fu_3273_p3;

assign sext_ln585_1_fu_4115_p1 = man_V_13_reg_6220;

assign sext_ln585_fu_3326_p1 = man_V_fu_3273_p3;

assign sext_ln591_1_fu_4152_p1 = $signed(select_ln585_1_fu_4145_p3);

assign sext_ln591_fu_3373_p1 = $signed(select_ln585_fu_3366_p3);

assign sh_amt_2_fu_3981_p3 = ((icmp_ln581_3_fu_3963_p2[0:0] == 1'b1) ? add_ln581_4_fu_3969_p2 : sub_ln581_2_fu_3975_p2);

assign sh_amt_fu_3308_p3 = ((icmp_ln581_fu_3290_p2[0:0] == 1'b1) ? add_ln581_fu_3296_p2 : sub_ln581_fu_3302_p2);

assign shl_ln604_1_fu_4029_p2 = sext_ln583_2_fu_3995_p1 << zext_ln604_2_fu_4025_p1;

assign shl_ln604_fu_3387_p2 = sext_ln583_fu_3322_p1 << zext_ln604_fu_3383_p1;

assign shl_ln949_1_fu_4505_p2 = 64'd1 << zext_ln949_1_fu_4501_p1;

assign shl_ln949_2_fu_3680_p2 = 64'd1 << zext_ln949_2_fu_3676_p1;

assign shl_ln949_fu_4325_p2 = 64'd1 << zext_ln949_fu_4321_p1;

assign shl_ln955_1_fu_4712_p2 = tmp_V_25_reg_6314 << zext_ln955_1_fu_4708_p1;

assign shl_ln955_2_fu_3767_p2 = tmp_V_23_reg_6182 << zext_ln955_2_fu_3763_p1;

assign shl_ln955_fu_4592_p2 = tmp_V_24_reg_6277 << zext_ln955_fu_4588_p1;

assign shl_ln_fu_3528_p3 = {{add_ln310_fu_3229_p2}, {1'd0}};

assign sigma_V_address0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address0;

assign sigma_V_address1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_address1;

assign sigma_V_ce0 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce0;

assign sigma_V_ce1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_ce1;

assign sigma_V_d1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_d1;

assign sigma_V_we1 = grp_computeLeastSquaresSolution_160_3_1_fu_2942_sigma_V_we1;

assign sliding_window_buffer_samples_sample_V_0_0_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_10_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_11_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_1_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_2_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_3_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_4_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_5_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_6_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_7_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_8_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_0_9_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_0_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_10_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_11_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_1_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_2_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_3_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_4_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_5_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_6_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_7_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_8_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_1_9_address0 = zext_ln34_fu_3161_p1;

assign sliding_window_buffer_samples_sample_V_2_0_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_10_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_11_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_1_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_2_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_3_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_4_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_5_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_6_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_7_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_8_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_2_9_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_0_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_10_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_11_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_1_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_2_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_3_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_4_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_5_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_6_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_7_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_8_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_3_9_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_0_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_10_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_11_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_1_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_2_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_3_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_4_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_5_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_6_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_7_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_8_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_4_9_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_0_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_10_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_11_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_1_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_2_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_3_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_4_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_5_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_6_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_7_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_8_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_5_9_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_0_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_10_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_11_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_1_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_2_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_3_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_4_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_5_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_6_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_7_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_8_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_6_9_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_0_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_10_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_11_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_1_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_2_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_3_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_4_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_5_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_6_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_7_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_8_address0 = zext_ln34_reg_5454;

assign sliding_window_buffer_samples_sample_V_7_9_address0 = zext_ln34_reg_5454;

assign sub_ln581_2_fu_3975_p2 = (12'd43 - F2_2_fu_3953_p2);

assign sub_ln581_fu_3302_p2 = (12'd43 - F2_fu_3280_p2);

assign sub_ln944_1_fu_4453_p2 = (32'd64 - l_4_fu_4449_p1);

assign sub_ln944_2_fu_3628_p2 = (32'd64 - l_5_fu_3624_p1);

assign sub_ln944_fu_4273_p2 = (32'd64 - l_fu_4269_p1);

assign sub_ln947_1_fu_4485_p2 = ($signed(7'd89) - $signed(trunc_ln947_1_fu_4481_p1));

assign sub_ln947_2_fu_3660_p2 = ($signed(7'd89) - $signed(trunc_ln947_2_fu_3656_p1));

assign sub_ln947_fu_4305_p2 = ($signed(7'd89) - $signed(trunc_ln947_fu_4301_p1));

assign sub_ln955_1_fu_4703_p2 = (32'd25 - sub_ln944_1_reg_6320);

assign sub_ln955_2_fu_3758_p2 = (32'd25 - sub_ln944_2_reg_6188);

assign sub_ln955_fu_4583_p2 = (32'd25 - sub_ln944_reg_6283);

assign sub_ln964_1_fu_4777_p2 = (8'd21 - trunc_ln943_1_reg_6336);

assign sub_ln964_2_fu_3832_p2 = (8'd21 - trunc_ln943_2_reg_6204);

assign sub_ln964_fu_4657_p2 = (8'd21 - trunc_ln943_reg_6299);

assign this_amplitudes_s_address0 = zext_ln298_reg_5417;

assign this_amplitudes_s_d0 = ((icmp_ln935_1_reg_6304[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_1_fu_4811_p1);

assign this_b_d0 = {{mag_samples_sample_V_q0}, {43'd0}};

assign this_offsets_s_address0 = zext_ln298_reg_5417;

assign this_offsets_s_d0 = ((icmp_ln935_reg_6267[0:0] == 1'b1) ? 32'd0 : bitcast_ln744_fu_4691_p1);

assign this_times_address0 = zext_ln312_fu_3234_p1;

assign tmp_100_fu_3336_p4 = {{sh_amt_fu_3308_p3[11:6]}};

assign tmp_103_fu_3640_p4 = {{lsb_index_5_fu_3634_p2[31:1]}};

assign tmp_104_fu_3704_p3 = lsb_index_5_fu_3634_p2[32'd31];

assign tmp_107_fu_4005_p4 = {{sh_amt_2_fu_3981_p3[11:6]}};

assign tmp_108_fu_4129_p3 = bitcast_ln702_2_fu_4126_p1[32'd31];

assign tmp_18_fu_3189_p3 = {{i_reg_2919}, {3'd0}};

assign tmp_4_fu_4668_p3 = {{p_Result_147_reg_6272}, {add_ln964_fu_4662_p2}};

assign tmp_5_fu_4788_p3 = {{p_Result_151_reg_6309}, {add_ln964_1_fu_4782_p2}};


always @ (p_Result_142_fu_3606_p4) begin
    if (p_Result_142_fu_3606_p4[0] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd0;
    end else if (p_Result_142_fu_3606_p4[1] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd1;
    end else if (p_Result_142_fu_3606_p4[2] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd2;
    end else if (p_Result_142_fu_3606_p4[3] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd3;
    end else if (p_Result_142_fu_3606_p4[4] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd4;
    end else if (p_Result_142_fu_3606_p4[5] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd5;
    end else if (p_Result_142_fu_3606_p4[6] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd6;
    end else if (p_Result_142_fu_3606_p4[7] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd7;
    end else if (p_Result_142_fu_3606_p4[8] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd8;
    end else if (p_Result_142_fu_3606_p4[9] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd9;
    end else if (p_Result_142_fu_3606_p4[10] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd10;
    end else if (p_Result_142_fu_3606_p4[11] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd11;
    end else if (p_Result_142_fu_3606_p4[12] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd12;
    end else if (p_Result_142_fu_3606_p4[13] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd13;
    end else if (p_Result_142_fu_3606_p4[14] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd14;
    end else if (p_Result_142_fu_3606_p4[15] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd15;
    end else if (p_Result_142_fu_3606_p4[16] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd16;
    end else if (p_Result_142_fu_3606_p4[17] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd17;
    end else if (p_Result_142_fu_3606_p4[18] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd18;
    end else if (p_Result_142_fu_3606_p4[19] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd19;
    end else if (p_Result_142_fu_3606_p4[20] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd20;
    end else if (p_Result_142_fu_3606_p4[21] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd21;
    end else if (p_Result_142_fu_3606_p4[22] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd22;
    end else if (p_Result_142_fu_3606_p4[23] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd23;
    end else if (p_Result_142_fu_3606_p4[24] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd24;
    end else if (p_Result_142_fu_3606_p4[25] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd25;
    end else if (p_Result_142_fu_3606_p4[26] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd26;
    end else if (p_Result_142_fu_3606_p4[27] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd27;
    end else if (p_Result_142_fu_3606_p4[28] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd28;
    end else if (p_Result_142_fu_3606_p4[29] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd29;
    end else if (p_Result_142_fu_3606_p4[30] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd30;
    end else if (p_Result_142_fu_3606_p4[31] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd31;
    end else if (p_Result_142_fu_3606_p4[32] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd32;
    end else if (p_Result_142_fu_3606_p4[33] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd33;
    end else if (p_Result_142_fu_3606_p4[34] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd34;
    end else if (p_Result_142_fu_3606_p4[35] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd35;
    end else if (p_Result_142_fu_3606_p4[36] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd36;
    end else if (p_Result_142_fu_3606_p4[37] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd37;
    end else if (p_Result_142_fu_3606_p4[38] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd38;
    end else if (p_Result_142_fu_3606_p4[39] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd39;
    end else if (p_Result_142_fu_3606_p4[40] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd40;
    end else if (p_Result_142_fu_3606_p4[41] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd41;
    end else if (p_Result_142_fu_3606_p4[42] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd42;
    end else if (p_Result_142_fu_3606_p4[43] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd43;
    end else if (p_Result_142_fu_3606_p4[44] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd44;
    end else if (p_Result_142_fu_3606_p4[45] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd45;
    end else if (p_Result_142_fu_3606_p4[46] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd46;
    end else if (p_Result_142_fu_3606_p4[47] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd47;
    end else if (p_Result_142_fu_3606_p4[48] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd48;
    end else if (p_Result_142_fu_3606_p4[49] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd49;
    end else if (p_Result_142_fu_3606_p4[50] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd50;
    end else if (p_Result_142_fu_3606_p4[51] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd51;
    end else if (p_Result_142_fu_3606_p4[52] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd52;
    end else if (p_Result_142_fu_3606_p4[53] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd53;
    end else if (p_Result_142_fu_3606_p4[54] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd54;
    end else if (p_Result_142_fu_3606_p4[55] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd55;
    end else if (p_Result_142_fu_3606_p4[56] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd56;
    end else if (p_Result_142_fu_3606_p4[57] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd57;
    end else if (p_Result_142_fu_3606_p4[58] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd58;
    end else if (p_Result_142_fu_3606_p4[59] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd59;
    end else if (p_Result_142_fu_3606_p4[60] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd60;
    end else if (p_Result_142_fu_3606_p4[61] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd61;
    end else if (p_Result_142_fu_3606_p4[62] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd62;
    end else if (p_Result_142_fu_3606_p4[63] == 1'b1) begin
        tmp_6_fu_3616_p3 = 64'd63;
    end else begin
        tmp_6_fu_3616_p3 = 64'd64;
    end
end

assign tmp_7_fu_3843_p3 = {{p_Result_141_reg_6171}, {add_ln964_2_fu_3837_p2}};

assign tmp_91_fu_4285_p4 = {{lsb_index_fu_4279_p2[31:1]}};

assign tmp_92_fu_4349_p3 = lsb_index_fu_4279_p2[32'd31];

assign tmp_95_fu_4465_p4 = {{lsb_index_4_fu_4459_p2[31:1]}};

assign tmp_96_fu_4529_p3 = lsb_index_4_fu_4459_p2[32'd31];

assign tmp_98_fu_3127_p3 = add_ln22_2_fu_3116_p2[32'd6];

assign tmp_V_18_fu_4417_p2 = (64'd0 - x_V_q0);

assign tmp_V_21_fu_3595_p2 = (64'd0 - angle_2_reg_6164);

assign tmp_V_23_fu_3600_p3 = ((p_Result_141_reg_6171[0:0] == 1'b1) ? tmp_V_21_fu_3595_p2 : angle_2_reg_6164);

assign tmp_V_24_fu_4243_p3 = ((p_Result_147_fu_4229_p3[0:0] == 1'b1) ? tmp_V_fu_4237_p2 : x_V_q1);

assign tmp_V_25_fu_4423_p3 = ((p_Result_151_fu_4409_p3[0:0] == 1'b1) ? tmp_V_18_fu_4417_p2 : x_V_q0);

assign tmp_V_fu_4237_p2 = (64'd0 - x_V_q1);


always @ (p_Result_148_fu_4251_p4) begin
    if (p_Result_148_fu_4251_p4[0] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd0;
    end else if (p_Result_148_fu_4251_p4[1] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd1;
    end else if (p_Result_148_fu_4251_p4[2] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd2;
    end else if (p_Result_148_fu_4251_p4[3] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd3;
    end else if (p_Result_148_fu_4251_p4[4] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd4;
    end else if (p_Result_148_fu_4251_p4[5] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd5;
    end else if (p_Result_148_fu_4251_p4[6] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd6;
    end else if (p_Result_148_fu_4251_p4[7] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd7;
    end else if (p_Result_148_fu_4251_p4[8] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd8;
    end else if (p_Result_148_fu_4251_p4[9] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd9;
    end else if (p_Result_148_fu_4251_p4[10] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd10;
    end else if (p_Result_148_fu_4251_p4[11] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd11;
    end else if (p_Result_148_fu_4251_p4[12] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd12;
    end else if (p_Result_148_fu_4251_p4[13] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd13;
    end else if (p_Result_148_fu_4251_p4[14] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd14;
    end else if (p_Result_148_fu_4251_p4[15] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd15;
    end else if (p_Result_148_fu_4251_p4[16] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd16;
    end else if (p_Result_148_fu_4251_p4[17] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd17;
    end else if (p_Result_148_fu_4251_p4[18] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd18;
    end else if (p_Result_148_fu_4251_p4[19] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd19;
    end else if (p_Result_148_fu_4251_p4[20] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd20;
    end else if (p_Result_148_fu_4251_p4[21] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd21;
    end else if (p_Result_148_fu_4251_p4[22] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd22;
    end else if (p_Result_148_fu_4251_p4[23] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd23;
    end else if (p_Result_148_fu_4251_p4[24] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd24;
    end else if (p_Result_148_fu_4251_p4[25] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd25;
    end else if (p_Result_148_fu_4251_p4[26] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd26;
    end else if (p_Result_148_fu_4251_p4[27] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd27;
    end else if (p_Result_148_fu_4251_p4[28] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd28;
    end else if (p_Result_148_fu_4251_p4[29] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd29;
    end else if (p_Result_148_fu_4251_p4[30] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd30;
    end else if (p_Result_148_fu_4251_p4[31] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd31;
    end else if (p_Result_148_fu_4251_p4[32] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd32;
    end else if (p_Result_148_fu_4251_p4[33] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd33;
    end else if (p_Result_148_fu_4251_p4[34] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd34;
    end else if (p_Result_148_fu_4251_p4[35] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd35;
    end else if (p_Result_148_fu_4251_p4[36] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd36;
    end else if (p_Result_148_fu_4251_p4[37] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd37;
    end else if (p_Result_148_fu_4251_p4[38] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd38;
    end else if (p_Result_148_fu_4251_p4[39] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd39;
    end else if (p_Result_148_fu_4251_p4[40] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd40;
    end else if (p_Result_148_fu_4251_p4[41] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd41;
    end else if (p_Result_148_fu_4251_p4[42] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd42;
    end else if (p_Result_148_fu_4251_p4[43] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd43;
    end else if (p_Result_148_fu_4251_p4[44] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd44;
    end else if (p_Result_148_fu_4251_p4[45] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd45;
    end else if (p_Result_148_fu_4251_p4[46] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd46;
    end else if (p_Result_148_fu_4251_p4[47] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd47;
    end else if (p_Result_148_fu_4251_p4[48] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd48;
    end else if (p_Result_148_fu_4251_p4[49] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd49;
    end else if (p_Result_148_fu_4251_p4[50] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd50;
    end else if (p_Result_148_fu_4251_p4[51] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd51;
    end else if (p_Result_148_fu_4251_p4[52] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd52;
    end else if (p_Result_148_fu_4251_p4[53] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd53;
    end else if (p_Result_148_fu_4251_p4[54] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd54;
    end else if (p_Result_148_fu_4251_p4[55] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd55;
    end else if (p_Result_148_fu_4251_p4[56] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd56;
    end else if (p_Result_148_fu_4251_p4[57] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd57;
    end else if (p_Result_148_fu_4251_p4[58] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd58;
    end else if (p_Result_148_fu_4251_p4[59] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd59;
    end else if (p_Result_148_fu_4251_p4[60] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd60;
    end else if (p_Result_148_fu_4251_p4[61] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd61;
    end else if (p_Result_148_fu_4251_p4[62] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd62;
    end else if (p_Result_148_fu_4251_p4[63] == 1'b1) begin
        tmp_fu_4261_p3 = 64'd63;
    end else begin
        tmp_fu_4261_p3 = 64'd64;
    end
end


always @ (p_Result_152_fu_4431_p4) begin
    if (p_Result_152_fu_4431_p4[0] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd0;
    end else if (p_Result_152_fu_4431_p4[1] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd1;
    end else if (p_Result_152_fu_4431_p4[2] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd2;
    end else if (p_Result_152_fu_4431_p4[3] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd3;
    end else if (p_Result_152_fu_4431_p4[4] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd4;
    end else if (p_Result_152_fu_4431_p4[5] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd5;
    end else if (p_Result_152_fu_4431_p4[6] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd6;
    end else if (p_Result_152_fu_4431_p4[7] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd7;
    end else if (p_Result_152_fu_4431_p4[8] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd8;
    end else if (p_Result_152_fu_4431_p4[9] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd9;
    end else if (p_Result_152_fu_4431_p4[10] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd10;
    end else if (p_Result_152_fu_4431_p4[11] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd11;
    end else if (p_Result_152_fu_4431_p4[12] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd12;
    end else if (p_Result_152_fu_4431_p4[13] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd13;
    end else if (p_Result_152_fu_4431_p4[14] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd14;
    end else if (p_Result_152_fu_4431_p4[15] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd15;
    end else if (p_Result_152_fu_4431_p4[16] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd16;
    end else if (p_Result_152_fu_4431_p4[17] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd17;
    end else if (p_Result_152_fu_4431_p4[18] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd18;
    end else if (p_Result_152_fu_4431_p4[19] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd19;
    end else if (p_Result_152_fu_4431_p4[20] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd20;
    end else if (p_Result_152_fu_4431_p4[21] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd21;
    end else if (p_Result_152_fu_4431_p4[22] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd22;
    end else if (p_Result_152_fu_4431_p4[23] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd23;
    end else if (p_Result_152_fu_4431_p4[24] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd24;
    end else if (p_Result_152_fu_4431_p4[25] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd25;
    end else if (p_Result_152_fu_4431_p4[26] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd26;
    end else if (p_Result_152_fu_4431_p4[27] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd27;
    end else if (p_Result_152_fu_4431_p4[28] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd28;
    end else if (p_Result_152_fu_4431_p4[29] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd29;
    end else if (p_Result_152_fu_4431_p4[30] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd30;
    end else if (p_Result_152_fu_4431_p4[31] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd31;
    end else if (p_Result_152_fu_4431_p4[32] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd32;
    end else if (p_Result_152_fu_4431_p4[33] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd33;
    end else if (p_Result_152_fu_4431_p4[34] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd34;
    end else if (p_Result_152_fu_4431_p4[35] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd35;
    end else if (p_Result_152_fu_4431_p4[36] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd36;
    end else if (p_Result_152_fu_4431_p4[37] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd37;
    end else if (p_Result_152_fu_4431_p4[38] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd38;
    end else if (p_Result_152_fu_4431_p4[39] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd39;
    end else if (p_Result_152_fu_4431_p4[40] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd40;
    end else if (p_Result_152_fu_4431_p4[41] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd41;
    end else if (p_Result_152_fu_4431_p4[42] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd42;
    end else if (p_Result_152_fu_4431_p4[43] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd43;
    end else if (p_Result_152_fu_4431_p4[44] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd44;
    end else if (p_Result_152_fu_4431_p4[45] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd45;
    end else if (p_Result_152_fu_4431_p4[46] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd46;
    end else if (p_Result_152_fu_4431_p4[47] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd47;
    end else if (p_Result_152_fu_4431_p4[48] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd48;
    end else if (p_Result_152_fu_4431_p4[49] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd49;
    end else if (p_Result_152_fu_4431_p4[50] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd50;
    end else if (p_Result_152_fu_4431_p4[51] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd51;
    end else if (p_Result_152_fu_4431_p4[52] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd52;
    end else if (p_Result_152_fu_4431_p4[53] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd53;
    end else if (p_Result_152_fu_4431_p4[54] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd54;
    end else if (p_Result_152_fu_4431_p4[55] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd55;
    end else if (p_Result_152_fu_4431_p4[56] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd56;
    end else if (p_Result_152_fu_4431_p4[57] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd57;
    end else if (p_Result_152_fu_4431_p4[58] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd58;
    end else if (p_Result_152_fu_4431_p4[59] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd59;
    end else if (p_Result_152_fu_4431_p4[60] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd60;
    end else if (p_Result_152_fu_4431_p4[61] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd61;
    end else if (p_Result_152_fu_4431_p4[62] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd62;
    end else if (p_Result_152_fu_4431_p4[63] == 1'b1) begin
        tmp_s_fu_4441_p3 = 64'd63;
    end else begin
        tmp_s_fu_4441_p3 = 64'd64;
    end
end

assign trunc_ln22_fu_3086_p1 = sliding_window_back_ptr_s[4:0];

assign trunc_ln301_fu_3074_p0 = sliding_window_front_ptr_s;

assign trunc_ln301_fu_3074_p1 = trunc_ln301_fu_3074_p0[4:0];

assign trunc_ln555_2_fu_3891_p1 = ireg_2_fu_3887_p1[62:0];

assign trunc_ln555_fu_3022_p1 = ireg_fu_3018_p1[62:0];

assign trunc_ln565_2_fu_3917_p1 = ireg_2_fu_3887_p1[51:0];

assign trunc_ln565_fu_3252_p1 = ireg_reg_5383[51:0];

assign trunc_ln575_2_fu_3959_p1 = F2_2_fu_3953_p2[10:0];

assign trunc_ln575_fu_3286_p1 = F2_fu_3280_p2[10:0];

assign trunc_ln586_2_fu_4021_p1 = sh_amt_2_fu_3981_p3[5:0];

assign trunc_ln586_fu_3352_p1 = sh_amt_fu_3308_p3[5:0];

assign trunc_ln588_2_cast_fu_4137_p3 = ((tmp_108_fu_4129_p3[0:0] == 1'b1) ? 54'd18014398509481983 : 54'd0);

assign trunc_ln588_cast_fu_3040_p3 = ((tmp_89_reg_4828[0:0] == 1'b1) ? 54'd18014398509481983 : 54'd0);

assign trunc_ln943_1_fu_4579_p1 = tmp_s_fu_4441_p3[7:0];

assign trunc_ln943_2_fu_3754_p1 = tmp_6_fu_3616_p3[7:0];

assign trunc_ln943_fu_4399_p1 = tmp_fu_4261_p3[7:0];

assign trunc_ln947_1_fu_4481_p1 = sub_ln944_1_fu_4453_p2[6:0];

assign trunc_ln947_2_fu_3656_p1 = sub_ln944_2_fu_3628_p2[6:0];

assign trunc_ln947_fu_4301_p1 = sub_ln944_fu_4273_p2[6:0];

assign x_V_address1 = 64'd0;

assign xor_ln571_2_fu_4041_p2 = (icmp_ln571_2_fu_3947_p2 ^ 1'd1);

assign xor_ln571_fu_3047_p2 = (icmp_ln571_fu_3034_p2 ^ 1'd1);

assign xor_ln581_2_fu_4077_p2 = (or_ln581_2_fu_4071_p2 ^ 1'd1);

assign xor_ln581_fu_3456_p2 = (or_ln581_fu_3450_p2 ^ 1'd1);

assign xor_ln582_2_fu_4059_p2 = (or_ln582_2_fu_4053_p2 ^ 1'd1);

assign xor_ln582_fu_3438_p2 = (or_ln582_fu_3433_p2 ^ 1'd1);

assign xor_ln949_1_fu_4537_p2 = (tmp_96_fu_4529_p3 ^ 1'd1);

assign xor_ln949_2_fu_3712_p2 = (tmp_104_fu_3704_p3 ^ 1'd1);

assign xor_ln949_fu_4357_p2 = (tmp_92_fu_4349_p3 ^ 1'd1);

assign zext_ln298_fu_3059_p1 = k_reg_2908;

assign zext_ln301_fu_3096_p1 = i_reg_2919;

assign zext_ln312_fu_3234_p1 = add_ln310_fu_3229_p2;

assign zext_ln319_fu_3536_p1 = shl_ln_fu_3528_p3;

assign zext_ln320_fu_4218_p1 = or_ln320_fu_4213_p2;

assign zext_ln34_fu_3161_p1 = buffer_idx_4_fu_3154_p3;

assign zext_ln415_14_fu_3573_p1 = tmp_101_reg_6159;

assign zext_ln415_15_fu_4178_p1 = qb_2_fu_4172_p3;

assign zext_ln415_fu_3418_p1 = qb_fu_3411_p3;

assign zext_ln455_2_fu_3913_p1 = exp_tmp_2_fu_3903_p4;

assign zext_ln455_fu_3248_p1 = exp_tmp_fu_3239_p4;

assign zext_ln569_2_fu_3929_p1 = p_Result_146_fu_3921_p3;

assign zext_ln569_fu_3263_p1 = p_Result_140_fu_3255_p3;

assign zext_ln586_4_fu_4118_p1 = trunc_ln586_2_reg_6237;

assign zext_ln586_fu_3356_p1 = trunc_ln586_fu_3352_p1;

assign zext_ln591_3_fu_4161_p1 = add_ln591_3_fu_4156_p2;

assign zext_ln591_fu_3399_p1 = add_ln591_fu_3393_p2;

assign zext_ln604_2_fu_4025_p1 = trunc_ln586_2_fu_4021_p1;

assign zext_ln604_fu_3383_p1 = trunc_ln586_fu_3352_p1;

assign zext_ln947_1_fu_4491_p1 = sub_ln947_1_fu_4485_p2;

assign zext_ln947_2_fu_3666_p1 = sub_ln947_2_fu_3660_p2;

assign zext_ln947_fu_4311_p1 = sub_ln947_fu_4305_p2;

assign zext_ln949_1_fu_4501_p1 = lsb_index_4_fu_4459_p2;

assign zext_ln949_2_fu_3676_p1 = lsb_index_5_fu_3634_p2;

assign zext_ln949_fu_4321_p1 = lsb_index_fu_4279_p2;

assign zext_ln954_1_fu_4722_p1 = add_ln954_1_fu_4717_p2;

assign zext_ln954_2_fu_3777_p1 = add_ln954_2_fu_3772_p2;

assign zext_ln954_fu_4602_p1 = add_ln954_fu_4597_p2;

assign zext_ln955_1_fu_4708_p1 = sub_ln955_1_fu_4703_p2;

assign zext_ln955_2_fu_3763_p1 = sub_ln955_2_fu_3758_p2;

assign zext_ln955_fu_4588_p1 = sub_ln955_fu_4583_p2;

assign zext_ln961_1_fu_4738_p1 = select_ln954_3_reg_6331;

assign zext_ln961_2_fu_3793_p1 = select_ln954_5_reg_6199;

assign zext_ln961_fu_4618_p1 = select_ln954_reg_6294;

assign zext_ln962_1_fu_4757_p1 = m_37_fu_4747_p4;

assign zext_ln962_2_fu_3812_p1 = m_35_fu_3802_p4;

assign zext_ln962_fu_4637_p1 = m_36_fu_4627_p4;

always @ (posedge ap_clk) begin
    zext_ln298_reg_5417[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln34_reg_5454[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_18_reg_6010[2:0] <= 3'b000;
    zext_ln312_reg_6024[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln312_reg_6024_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    rhs_reg_6094[42:0] <= 43'b0000000000000000000000000000000000000000000;
    shl_ln_reg_6099[0] <= 1'b0;
    shl_ln_reg_6099_pp0_iter1_reg[0] <= 1'b0;
    shl_ln_reg_6099_pp0_iter2_reg[0] <= 1'b0;
end

endmodule //LLSSineReconstruction_computeRemainingChannels
