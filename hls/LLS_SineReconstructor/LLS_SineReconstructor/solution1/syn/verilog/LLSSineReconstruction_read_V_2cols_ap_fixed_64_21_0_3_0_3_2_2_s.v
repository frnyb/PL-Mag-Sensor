// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_read_V_2cols_ap_fixed_64_21_0_3_0_3_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        n_dout,
        n_empty_n,
        n_read,
        col_i_dout,
        col_i_empty_n,
        col_i_read,
        col_j_dout,
        col_j_empty_n,
        col_j_read,
        V_i_V_0_address1,
        V_i_V_0_ce1,
        V_i_V_0_we1,
        V_i_V_0_d1,
        V_i_V_1_address1,
        V_i_V_1_ce1,
        V_i_V_1_we1,
        V_i_V_1_d1,
        V_j_V_0_address1,
        V_j_V_0_ce1,
        V_j_V_0_we1,
        V_j_V_0_d1,
        V_j_V_1_address1,
        V_j_V_1_ce1,
        V_j_V_1_we1,
        V_j_V_1_d1,
        matV_V_0_address0,
        matV_V_0_ce0,
        matV_V_0_q0,
        matV_V_0_address1,
        matV_V_0_ce1,
        matV_V_0_q1,
        matV_V_1_address0,
        matV_V_1_ce0,
        matV_V_1_q0,
        matV_V_1_address1,
        matV_V_1_ce1,
        matV_V_1_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1:0] n_dout;
input   n_empty_n;
output   n_read;
input  [1:0] col_i_dout;
input   col_i_empty_n;
output   col_i_read;
input  [1:0] col_j_dout;
input   col_j_empty_n;
output   col_j_read;
output  [0:0] V_i_V_0_address1;
output   V_i_V_0_ce1;
output   V_i_V_0_we1;
output  [63:0] V_i_V_0_d1;
output  [0:0] V_i_V_1_address1;
output   V_i_V_1_ce1;
output   V_i_V_1_we1;
output  [63:0] V_i_V_1_d1;
output  [0:0] V_j_V_0_address1;
output   V_j_V_0_ce1;
output   V_j_V_0_we1;
output  [63:0] V_j_V_0_d1;
output  [0:0] V_j_V_1_address1;
output   V_j_V_1_ce1;
output   V_j_V_1_we1;
output  [63:0] V_j_V_1_d1;
output  [2:0] matV_V_0_address0;
output   matV_V_0_ce0;
input  [63:0] matV_V_0_q0;
output  [2:0] matV_V_0_address1;
output   matV_V_0_ce1;
input  [63:0] matV_V_0_q1;
output  [2:0] matV_V_1_address0;
output   matV_V_1_ce0;
input  [63:0] matV_V_1_q0;
output  [2:0] matV_V_1_address1;
output   matV_V_1_ce1;
input  [63:0] matV_V_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg n_read;
reg col_i_read;
reg col_j_read;
reg V_i_V_0_ce1;
reg V_i_V_0_we1;
reg V_i_V_1_ce1;
reg V_i_V_1_we1;
reg V_j_V_0_ce1;
reg V_j_V_0_we1;
reg V_j_V_1_ce1;
reg V_j_V_1_we1;
reg matV_V_0_ce0;
reg matV_V_0_ce1;
reg matV_V_1_ce0;
reg matV_V_1_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    n_blk_n;
reg    col_i_blk_n;
reg    col_j_blk_n;
reg   [1:0] k_reg_220;
reg   [1:0] n_read_reg_326;
wire   [2:0] col_i_load_cast_fu_232_p1;
reg   [2:0] col_i_load_cast_reg_332;
wire   [2:0] zext_ln319_1_fu_236_p1;
reg   [2:0] zext_ln319_1_reg_337;
wire   [1:0] add_ln319_fu_240_p2;
reg   [1:0] add_ln319_reg_342;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln319_fu_246_p2;
reg   [0:0] icmp_ln319_reg_347;
wire   [0:0] icmp_ln324_fu_302_p2;
reg   [0:0] icmp_ln324_reg_371;
wire   [0:0] icmp_ln324_1_fu_313_p2;
reg   [0:0] icmp_ln324_1_reg_375;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] ap_phi_mux_k_phi_fu_224_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln325_1_fu_279_p1;
wire   [63:0] zext_ln326_fu_290_p1;
wire   [63:0] zext_ln319_fu_318_p1;
wire   [0:0] trunc_ln325_fu_256_p1;
wire   [2:0] tmp_cast_fu_260_p3;
wire   [2:0] zext_ln325_fu_252_p1;
wire   [2:0] sub_ln325_fu_268_p2;
wire   [2:0] add_ln325_fu_274_p2;
wire   [2:0] add_ln326_fu_285_p2;
wire   [1:0] empty_fu_296_p2;
wire   [1:0] or_ln324_fu_307_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln319_reg_347 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_220 <= add_ln319_reg_342;
    end else if ((~((ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_220 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln319_reg_342 <= add_ln319_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        col_i_load_cast_reg_332[1 : 0] <= col_i_load_cast_fu_232_p1[1 : 0];
        n_read_reg_326 <= n_dout;
        zext_ln319_1_reg_337[1 : 0] <= zext_ln319_1_fu_236_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln319_reg_347 <= icmp_ln319_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln319_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln324_1_reg_375 <= icmp_ln324_1_fu_313_p2;
        icmp_ln324_reg_371 <= icmp_ln324_fu_302_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_i_V_0_ce1 = 1'b1;
    end else begin
        V_i_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln324_reg_371 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_i_V_0_we1 = 1'b1;
    end else begin
        V_i_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_i_V_1_ce1 = 1'b1;
    end else begin
        V_i_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln324_1_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_i_V_1_we1 = 1'b1;
    end else begin
        V_i_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_j_V_0_ce1 = 1'b1;
    end else begin
        V_j_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln324_reg_371 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_j_V_0_we1 = 1'b1;
    end else begin
        V_j_V_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_j_V_1_ce1 = 1'b1;
    end else begin
        V_j_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln324_1_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_j_V_1_we1 = 1'b1;
    end else begin
        V_j_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln319_fu_246_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln319_reg_347 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_k_phi_fu_224_p4 = add_ln319_reg_342;
    end else begin
        ap_phi_mux_k_phi_fu_224_p4 = k_reg_220;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_blk_n = col_i_empty_n;
    end else begin
        col_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_read = 1'b1;
    end else begin
        col_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_blk_n = col_j_empty_n;
    end else begin
        col_j_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_read = 1'b1;
    end else begin
        col_j_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        matV_V_0_ce0 = 1'b1;
    end else begin
        matV_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        matV_V_0_ce1 = 1'b1;
    end else begin
        matV_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        matV_V_1_ce0 = 1'b1;
    end else begin
        matV_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        matV_V_1_ce1 = 1'b1;
    end else begin
        matV_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_blk_n = n_empty_n;
    end else begin
        n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read = 1'b1;
    end else begin
        n_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln319_fu_246_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln319_fu_246_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V_i_V_0_address1 = zext_ln319_fu_318_p1;

assign V_i_V_0_d1 = matV_V_0_q1;

assign V_i_V_1_address1 = zext_ln319_fu_318_p1;

assign V_i_V_1_d1 = matV_V_1_q1;

assign V_j_V_0_address1 = zext_ln319_fu_318_p1;

assign V_j_V_0_d1 = matV_V_0_q0;

assign V_j_V_1_address1 = zext_ln319_fu_318_p1;

assign V_j_V_1_d1 = matV_V_1_q0;

assign add_ln319_fu_240_p2 = (ap_phi_mux_k_phi_fu_224_p4 + 2'd1);

assign add_ln325_fu_274_p2 = (sub_ln325_fu_268_p2 + col_i_load_cast_reg_332);

assign add_ln326_fu_285_p2 = (sub_ln325_fu_268_p2 + zext_ln319_1_reg_337);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_i_load_cast_fu_232_p1 = col_i_dout;

assign empty_fu_296_p2 = ap_phi_mux_k_phi_fu_224_p4 << 2'd1;

assign icmp_ln319_fu_246_p2 = ((ap_phi_mux_k_phi_fu_224_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln324_1_fu_313_p2 = ((or_ln324_fu_307_p2 < n_read_reg_326) ? 1'b1 : 1'b0);

assign icmp_ln324_fu_302_p2 = ((empty_fu_296_p2 < n_read_reg_326) ? 1'b1 : 1'b0);

assign matV_V_0_address0 = zext_ln326_fu_290_p1;

assign matV_V_0_address1 = zext_ln325_1_fu_279_p1;

assign matV_V_1_address0 = zext_ln326_fu_290_p1;

assign matV_V_1_address1 = zext_ln325_1_fu_279_p1;

assign or_ln324_fu_307_p2 = (empty_fu_296_p2 | 2'd1);

assign sub_ln325_fu_268_p2 = (tmp_cast_fu_260_p3 - zext_ln325_fu_252_p1);

assign tmp_cast_fu_260_p3 = {{trunc_ln325_fu_256_p1}, {2'd0}};

assign trunc_ln325_fu_256_p1 = ap_phi_mux_k_phi_fu_224_p4[0:0];

assign zext_ln319_1_fu_236_p1 = col_j_dout;

assign zext_ln319_fu_318_p1 = k_reg_220;

assign zext_ln325_1_fu_279_p1 = add_ln325_fu_274_p2;

assign zext_ln325_fu_252_p1 = ap_phi_mux_k_phi_fu_224_p4;

assign zext_ln326_fu_290_p1 = add_ln326_fu_285_p2;

always @ (posedge ap_clk) begin
    col_i_load_cast_reg_332[2] <= 1'b0;
    zext_ln319_1_reg_337[2] <= 1'b0;
end

endmodule //LLSSineReconstruction_read_V_2cols_ap_fixed_64_21_0_3_0_3_2_2_s
