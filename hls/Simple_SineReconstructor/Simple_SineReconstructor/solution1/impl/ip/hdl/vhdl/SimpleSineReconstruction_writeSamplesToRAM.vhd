-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SimpleSineReconstruction_writeSamplesToRAM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    samples_buffer_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    samples_buffer_out_ce0 : OUT STD_LOGIC;
    samples_buffer_out_we0 : OUT STD_LOGIC;
    samples_buffer_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_periods : IN STD_LOGIC_VECTOR (31 downto 0);
    sample_sliding_window_front_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sample_sliding_window_back_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sample_sliding_window_buffer_count_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_count_s_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_count_s_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_31_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_31_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_31_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_31_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_30_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_30_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_30_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_30_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_29_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_29_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_29_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_29_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_28_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_28_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_28_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_28_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_27_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_27_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_27_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_27_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_26_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_26_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_26_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_26_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_25_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_25_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_25_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_25_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_24_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_24_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_24_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_24_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_23_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_23_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_23_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_23_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_22_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_22_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_22_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_22_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_21_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_21_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_21_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_21_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_20_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_20_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_20_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_20_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_19_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_19_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_19_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_19_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_18_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_18_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_18_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_18_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_17_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_17_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_17_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_17_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_16_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_16_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_16_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_16_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_15_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_15_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_15_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_15_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_14_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_14_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_14_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_14_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_13_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_13_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_13_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_13_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_12_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_12_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_12_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_12_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_11_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_11_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_11_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_11_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_10_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_10_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_10_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_10_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_9_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_9_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_9_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_9_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_8_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_8_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_8_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_8_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_7_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_7_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_7_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_7_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_6_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_6_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_6_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_6_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_5_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_5_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_5_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_5_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_4_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_4_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_4_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_4_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_3_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_3_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_3_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_3_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_2_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_2_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_2_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_2_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_1_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_1_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_1_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_1_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_timestamp_V_0_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_timestamp_V_0_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_11_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_10_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_9_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_8_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_7_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_6_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_5_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_4_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_3_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_2_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_1_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sample_sliding_window_buffer_samples_sample_V_0_0_ce0 : OUT STD_LOGIC;
    sample_sliding_window_buffer_samples_sample_V_0_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SimpleSineReconstruction_writeSamplesToRAM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFEC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv13_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_reg_19399 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_5_reg_19410 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln222_fu_19444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln26_fu_19452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln26_reg_23701 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln22_fu_19460_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln22_reg_23706 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_fu_19524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_reg_23717 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_19472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal period_count_s_reg_28287 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln225_fu_19576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln225_reg_28294 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln229_fu_19580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_reg_28299 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_19586_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_28303 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln40_fu_19615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_reg_28311 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln229_1_fu_19596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_samples_counter_1_fu_19665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_19670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln236_1_fu_19676_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state26_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln236_fu_19688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln236_reg_28470 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_6_fu_19694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_fu_19700_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_40_reg_28489 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln236_fu_19723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal period_samples_0_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_0_sample_V_ce0 : STD_LOGIC;
    signal period_samples_0_sample_V_we0 : STD_LOGIC;
    signal period_samples_0_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_0_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_0_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_0_sample_V_ce1 : STD_LOGIC;
    signal period_samples_0_sample_V_we1 : STD_LOGIC;
    signal period_samples_0_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_1_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_1_sample_V_ce0 : STD_LOGIC;
    signal period_samples_1_sample_V_we0 : STD_LOGIC;
    signal period_samples_1_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_1_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_1_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_1_sample_V_ce1 : STD_LOGIC;
    signal period_samples_1_sample_V_we1 : STD_LOGIC;
    signal period_samples_1_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_2_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_2_sample_V_ce0 : STD_LOGIC;
    signal period_samples_2_sample_V_we0 : STD_LOGIC;
    signal period_samples_2_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_2_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_2_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_2_sample_V_ce1 : STD_LOGIC;
    signal period_samples_2_sample_V_we1 : STD_LOGIC;
    signal period_samples_2_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_3_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_3_sample_V_ce0 : STD_LOGIC;
    signal period_samples_3_sample_V_we0 : STD_LOGIC;
    signal period_samples_3_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_3_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_3_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_3_sample_V_ce1 : STD_LOGIC;
    signal period_samples_3_sample_V_we1 : STD_LOGIC;
    signal period_samples_3_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_4_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_4_sample_V_ce0 : STD_LOGIC;
    signal period_samples_4_sample_V_we0 : STD_LOGIC;
    signal period_samples_4_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_4_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_4_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_4_sample_V_ce1 : STD_LOGIC;
    signal period_samples_4_sample_V_we1 : STD_LOGIC;
    signal period_samples_4_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_5_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_5_sample_V_ce0 : STD_LOGIC;
    signal period_samples_5_sample_V_we0 : STD_LOGIC;
    signal period_samples_5_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_5_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_5_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_5_sample_V_ce1 : STD_LOGIC;
    signal period_samples_5_sample_V_we1 : STD_LOGIC;
    signal period_samples_5_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_6_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_6_sample_V_ce0 : STD_LOGIC;
    signal period_samples_6_sample_V_we0 : STD_LOGIC;
    signal period_samples_6_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_6_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_6_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_6_sample_V_ce1 : STD_LOGIC;
    signal period_samples_6_sample_V_we1 : STD_LOGIC;
    signal period_samples_6_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_7_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_7_sample_V_ce0 : STD_LOGIC;
    signal period_samples_7_sample_V_we0 : STD_LOGIC;
    signal period_samples_7_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_7_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_7_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_7_sample_V_ce1 : STD_LOGIC;
    signal period_samples_7_sample_V_we1 : STD_LOGIC;
    signal period_samples_7_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_8_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_8_sample_V_ce0 : STD_LOGIC;
    signal period_samples_8_sample_V_we0 : STD_LOGIC;
    signal period_samples_8_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_8_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_8_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_8_sample_V_ce1 : STD_LOGIC;
    signal period_samples_8_sample_V_we1 : STD_LOGIC;
    signal period_samples_8_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_9_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_9_sample_V_ce0 : STD_LOGIC;
    signal period_samples_9_sample_V_we0 : STD_LOGIC;
    signal period_samples_9_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_9_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_9_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_9_sample_V_ce1 : STD_LOGIC;
    signal period_samples_9_sample_V_we1 : STD_LOGIC;
    signal period_samples_9_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_10_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_10_sample_V_ce0 : STD_LOGIC;
    signal period_samples_10_sample_V_we0 : STD_LOGIC;
    signal period_samples_10_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_10_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_10_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_10_sample_V_ce1 : STD_LOGIC;
    signal period_samples_10_sample_V_we1 : STD_LOGIC;
    signal period_samples_10_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_11_sample_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_11_sample_V_ce0 : STD_LOGIC;
    signal period_samples_11_sample_V_we0 : STD_LOGIC;
    signal period_samples_11_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_11_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_11_sample_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_11_sample_V_ce1 : STD_LOGIC;
    signal period_samples_11_sample_V_we1 : STD_LOGIC;
    signal period_samples_11_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal period_samples_0_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_0_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_0_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_0_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_0_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_0_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_0_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_0_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_0_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_1_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_1_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_1_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_1_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_1_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_1_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_1_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_1_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_1_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_2_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_2_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_2_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_2_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_2_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_2_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_2_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_2_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_2_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_3_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_3_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_3_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_3_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_3_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_3_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_3_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_3_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_3_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_4_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_4_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_4_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_4_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_4_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_4_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_4_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_4_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_4_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_5_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_5_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_5_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_5_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_5_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_5_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_5_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_5_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_5_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_6_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_6_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_6_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_6_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_6_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_6_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_6_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_6_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_6_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_7_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_7_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_7_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_7_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_7_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_7_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_7_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_7_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_7_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_8_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_8_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_8_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_8_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_8_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_8_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_8_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_8_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_8_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_9_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_9_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_9_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_9_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_9_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_9_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_9_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_9_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_9_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_10_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_10_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_10_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_10_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_10_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_10_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_10_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_10_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_10_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_11_timestamp_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_11_timestamp_V_ce0 : STD_LOGIC;
    signal period_samples_11_timestamp_V_we0 : STD_LOGIC;
    signal period_samples_11_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_11_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal period_samples_11_timestamp_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal period_samples_11_timestamp_V_ce1 : STD_LOGIC;
    signal period_samples_11_timestamp_V_we1 : STD_LOGIC;
    signal period_samples_11_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_sample_V_ce0 : STD_LOGIC;
    signal sample_sample_V_we0 : STD_LOGIC;
    signal sample_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_sample_V_ce1 : STD_LOGIC;
    signal sample_sample_V_we1 : STD_LOGIC;
    signal sample_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_timestamp_V_ce0 : STD_LOGIC;
    signal sample_timestamp_V_we0 : STD_LOGIC;
    signal sample_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_timestamp_V_ce1 : STD_LOGIC;
    signal sample_timestamp_V_we1 : STD_LOGIC;
    signal sample_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal n_samples_counter_reg_19356 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_19368 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_19378 : STD_LOGIC_VECTOR (5 downto 0);
    signal idx_2_reg_19389 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast_fu_19682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln244_fu_19718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_fu_1688 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln229_fu_19655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_19420_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln214_fu_19424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln222_fu_19430_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_19436_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal buffer_idx_fu_19480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln22_1_fu_19485_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_19495_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_19503_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_19489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_idx_2_fu_19509_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_idx_3_fu_19517_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln34_fu_19601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln229_fu_19592_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_fu_19607_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_19623_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln229_1_fu_19634_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln229_fu_19630_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln229_1_fu_19641_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln229_fu_19645_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln229_fu_19651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln244_1_fu_19713_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component SimpleSineReconstruction_writeSamplesToRAM_sample_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component SimpleSineReconstruction_writeSamplesToRAM_sample_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    period_samples_0_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_0_sample_V_address0,
        ce0 => period_samples_0_sample_V_ce0,
        we0 => period_samples_0_sample_V_we0,
        d0 => period_samples_0_sample_V_d0,
        q0 => period_samples_0_sample_V_q0,
        address1 => period_samples_0_sample_V_address1,
        ce1 => period_samples_0_sample_V_ce1,
        we1 => period_samples_0_sample_V_we1,
        d1 => period_samples_0_sample_V_d1);

    period_samples_1_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_1_sample_V_address0,
        ce0 => period_samples_1_sample_V_ce0,
        we0 => period_samples_1_sample_V_we0,
        d0 => period_samples_1_sample_V_d0,
        q0 => period_samples_1_sample_V_q0,
        address1 => period_samples_1_sample_V_address1,
        ce1 => period_samples_1_sample_V_ce1,
        we1 => period_samples_1_sample_V_we1,
        d1 => period_samples_1_sample_V_d1);

    period_samples_2_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_2_sample_V_address0,
        ce0 => period_samples_2_sample_V_ce0,
        we0 => period_samples_2_sample_V_we0,
        d0 => period_samples_2_sample_V_d0,
        q0 => period_samples_2_sample_V_q0,
        address1 => period_samples_2_sample_V_address1,
        ce1 => period_samples_2_sample_V_ce1,
        we1 => period_samples_2_sample_V_we1,
        d1 => period_samples_2_sample_V_d1);

    period_samples_3_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_3_sample_V_address0,
        ce0 => period_samples_3_sample_V_ce0,
        we0 => period_samples_3_sample_V_we0,
        d0 => period_samples_3_sample_V_d0,
        q0 => period_samples_3_sample_V_q0,
        address1 => period_samples_3_sample_V_address1,
        ce1 => period_samples_3_sample_V_ce1,
        we1 => period_samples_3_sample_V_we1,
        d1 => period_samples_3_sample_V_d1);

    period_samples_4_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_4_sample_V_address0,
        ce0 => period_samples_4_sample_V_ce0,
        we0 => period_samples_4_sample_V_we0,
        d0 => period_samples_4_sample_V_d0,
        q0 => period_samples_4_sample_V_q0,
        address1 => period_samples_4_sample_V_address1,
        ce1 => period_samples_4_sample_V_ce1,
        we1 => period_samples_4_sample_V_we1,
        d1 => period_samples_4_sample_V_d1);

    period_samples_5_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_5_sample_V_address0,
        ce0 => period_samples_5_sample_V_ce0,
        we0 => period_samples_5_sample_V_we0,
        d0 => period_samples_5_sample_V_d0,
        q0 => period_samples_5_sample_V_q0,
        address1 => period_samples_5_sample_V_address1,
        ce1 => period_samples_5_sample_V_ce1,
        we1 => period_samples_5_sample_V_we1,
        d1 => period_samples_5_sample_V_d1);

    period_samples_6_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_6_sample_V_address0,
        ce0 => period_samples_6_sample_V_ce0,
        we0 => period_samples_6_sample_V_we0,
        d0 => period_samples_6_sample_V_d0,
        q0 => period_samples_6_sample_V_q0,
        address1 => period_samples_6_sample_V_address1,
        ce1 => period_samples_6_sample_V_ce1,
        we1 => period_samples_6_sample_V_we1,
        d1 => period_samples_6_sample_V_d1);

    period_samples_7_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_7_sample_V_address0,
        ce0 => period_samples_7_sample_V_ce0,
        we0 => period_samples_7_sample_V_we0,
        d0 => period_samples_7_sample_V_d0,
        q0 => period_samples_7_sample_V_q0,
        address1 => period_samples_7_sample_V_address1,
        ce1 => period_samples_7_sample_V_ce1,
        we1 => period_samples_7_sample_V_we1,
        d1 => period_samples_7_sample_V_d1);

    period_samples_8_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_8_sample_V_address0,
        ce0 => period_samples_8_sample_V_ce0,
        we0 => period_samples_8_sample_V_we0,
        d0 => period_samples_8_sample_V_d0,
        q0 => period_samples_8_sample_V_q0,
        address1 => period_samples_8_sample_V_address1,
        ce1 => period_samples_8_sample_V_ce1,
        we1 => period_samples_8_sample_V_we1,
        d1 => period_samples_8_sample_V_d1);

    period_samples_9_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_9_sample_V_address0,
        ce0 => period_samples_9_sample_V_ce0,
        we0 => period_samples_9_sample_V_we0,
        d0 => period_samples_9_sample_V_d0,
        q0 => period_samples_9_sample_V_q0,
        address1 => period_samples_9_sample_V_address1,
        ce1 => period_samples_9_sample_V_ce1,
        we1 => period_samples_9_sample_V_we1,
        d1 => period_samples_9_sample_V_d1);

    period_samples_10_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_10_sample_V_address0,
        ce0 => period_samples_10_sample_V_ce0,
        we0 => period_samples_10_sample_V_we0,
        d0 => period_samples_10_sample_V_d0,
        q0 => period_samples_10_sample_V_q0,
        address1 => period_samples_10_sample_V_address1,
        ce1 => period_samples_10_sample_V_ce1,
        we1 => period_samples_10_sample_V_we1,
        d1 => period_samples_10_sample_V_d1);

    period_samples_11_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_11_sample_V_address0,
        ce0 => period_samples_11_sample_V_ce0,
        we0 => period_samples_11_sample_V_we0,
        d0 => period_samples_11_sample_V_d0,
        q0 => period_samples_11_sample_V_q0,
        address1 => period_samples_11_sample_V_address1,
        ce1 => period_samples_11_sample_V_ce1,
        we1 => period_samples_11_sample_V_we1,
        d1 => period_samples_11_sample_V_d1);

    period_samples_0_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_0_timestamp_V_address0,
        ce0 => period_samples_0_timestamp_V_ce0,
        we0 => period_samples_0_timestamp_V_we0,
        d0 => period_samples_0_timestamp_V_d0,
        q0 => period_samples_0_timestamp_V_q0,
        address1 => period_samples_0_timestamp_V_address1,
        ce1 => period_samples_0_timestamp_V_ce1,
        we1 => period_samples_0_timestamp_V_we1,
        d1 => period_samples_0_timestamp_V_d1);

    period_samples_1_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_1_timestamp_V_address0,
        ce0 => period_samples_1_timestamp_V_ce0,
        we0 => period_samples_1_timestamp_V_we0,
        d0 => period_samples_1_timestamp_V_d0,
        q0 => period_samples_1_timestamp_V_q0,
        address1 => period_samples_1_timestamp_V_address1,
        ce1 => period_samples_1_timestamp_V_ce1,
        we1 => period_samples_1_timestamp_V_we1,
        d1 => period_samples_1_timestamp_V_d1);

    period_samples_2_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_2_timestamp_V_address0,
        ce0 => period_samples_2_timestamp_V_ce0,
        we0 => period_samples_2_timestamp_V_we0,
        d0 => period_samples_2_timestamp_V_d0,
        q0 => period_samples_2_timestamp_V_q0,
        address1 => period_samples_2_timestamp_V_address1,
        ce1 => period_samples_2_timestamp_V_ce1,
        we1 => period_samples_2_timestamp_V_we1,
        d1 => period_samples_2_timestamp_V_d1);

    period_samples_3_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_3_timestamp_V_address0,
        ce0 => period_samples_3_timestamp_V_ce0,
        we0 => period_samples_3_timestamp_V_we0,
        d0 => period_samples_3_timestamp_V_d0,
        q0 => period_samples_3_timestamp_V_q0,
        address1 => period_samples_3_timestamp_V_address1,
        ce1 => period_samples_3_timestamp_V_ce1,
        we1 => period_samples_3_timestamp_V_we1,
        d1 => period_samples_3_timestamp_V_d1);

    period_samples_4_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_4_timestamp_V_address0,
        ce0 => period_samples_4_timestamp_V_ce0,
        we0 => period_samples_4_timestamp_V_we0,
        d0 => period_samples_4_timestamp_V_d0,
        q0 => period_samples_4_timestamp_V_q0,
        address1 => period_samples_4_timestamp_V_address1,
        ce1 => period_samples_4_timestamp_V_ce1,
        we1 => period_samples_4_timestamp_V_we1,
        d1 => period_samples_4_timestamp_V_d1);

    period_samples_5_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_5_timestamp_V_address0,
        ce0 => period_samples_5_timestamp_V_ce0,
        we0 => period_samples_5_timestamp_V_we0,
        d0 => period_samples_5_timestamp_V_d0,
        q0 => period_samples_5_timestamp_V_q0,
        address1 => period_samples_5_timestamp_V_address1,
        ce1 => period_samples_5_timestamp_V_ce1,
        we1 => period_samples_5_timestamp_V_we1,
        d1 => period_samples_5_timestamp_V_d1);

    period_samples_6_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_6_timestamp_V_address0,
        ce0 => period_samples_6_timestamp_V_ce0,
        we0 => period_samples_6_timestamp_V_we0,
        d0 => period_samples_6_timestamp_V_d0,
        q0 => period_samples_6_timestamp_V_q0,
        address1 => period_samples_6_timestamp_V_address1,
        ce1 => period_samples_6_timestamp_V_ce1,
        we1 => period_samples_6_timestamp_V_we1,
        d1 => period_samples_6_timestamp_V_d1);

    period_samples_7_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_7_timestamp_V_address0,
        ce0 => period_samples_7_timestamp_V_ce0,
        we0 => period_samples_7_timestamp_V_we0,
        d0 => period_samples_7_timestamp_V_d0,
        q0 => period_samples_7_timestamp_V_q0,
        address1 => period_samples_7_timestamp_V_address1,
        ce1 => period_samples_7_timestamp_V_ce1,
        we1 => period_samples_7_timestamp_V_we1,
        d1 => period_samples_7_timestamp_V_d1);

    period_samples_8_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_8_timestamp_V_address0,
        ce0 => period_samples_8_timestamp_V_ce0,
        we0 => period_samples_8_timestamp_V_we0,
        d0 => period_samples_8_timestamp_V_d0,
        q0 => period_samples_8_timestamp_V_q0,
        address1 => period_samples_8_timestamp_V_address1,
        ce1 => period_samples_8_timestamp_V_ce1,
        we1 => period_samples_8_timestamp_V_we1,
        d1 => period_samples_8_timestamp_V_d1);

    period_samples_9_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_9_timestamp_V_address0,
        ce0 => period_samples_9_timestamp_V_ce0,
        we0 => period_samples_9_timestamp_V_we0,
        d0 => period_samples_9_timestamp_V_d0,
        q0 => period_samples_9_timestamp_V_q0,
        address1 => period_samples_9_timestamp_V_address1,
        ce1 => period_samples_9_timestamp_V_ce1,
        we1 => period_samples_9_timestamp_V_we1,
        d1 => period_samples_9_timestamp_V_d1);

    period_samples_10_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_10_timestamp_V_address0,
        ce0 => period_samples_10_timestamp_V_ce0,
        we0 => period_samples_10_timestamp_V_we0,
        d0 => period_samples_10_timestamp_V_d0,
        q0 => period_samples_10_timestamp_V_q0,
        address1 => period_samples_10_timestamp_V_address1,
        ce1 => period_samples_10_timestamp_V_ce1,
        we1 => period_samples_10_timestamp_V_we1,
        d1 => period_samples_10_timestamp_V_d1);

    period_samples_11_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => period_samples_11_timestamp_V_address0,
        ce0 => period_samples_11_timestamp_V_ce0,
        we0 => period_samples_11_timestamp_V_we0,
        d0 => period_samples_11_timestamp_V_d0,
        q0 => period_samples_11_timestamp_V_q0,
        address1 => period_samples_11_timestamp_V_address1,
        ce1 => period_samples_11_timestamp_V_ce1,
        we1 => period_samples_11_timestamp_V_we1,
        d1 => period_samples_11_timestamp_V_d1);

    sample_sample_V_U : component SimpleSineReconstruction_writeSamplesToRAM_sample_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_sample_V_address0,
        ce0 => sample_sample_V_ce0,
        we0 => sample_sample_V_we0,
        d0 => sample_sample_V_d0,
        q0 => sample_sample_V_q0,
        address1 => sample_sample_V_address1,
        ce1 => sample_sample_V_ce1,
        we1 => sample_sample_V_we1,
        d1 => sample_sample_V_d1);

    sample_timestamp_V_U : component SimpleSineReconstruction_writeSamplesToRAM_sample_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_timestamp_V_address0,
        ce0 => sample_timestamp_V_ce0,
        we0 => sample_timestamp_V_we0,
        d0 => sample_timestamp_V_d0,
        q0 => sample_timestamp_V_q0,
        address1 => sample_timestamp_V_address1,
        ce1 => sample_timestamp_V_ce1,
        we1 => sample_timestamp_V_we1,
        d1 => sample_timestamp_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state26))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state26);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((tmp_fu_19472_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= n_samples_counter_reg_19356;
                end if; 
            end if;
        end if;
    end process;


    i_3_reg_19368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln229_1_fu_19596_p2 = ap_const_lv1_1) or (icmp_ln229_reg_28299 = ap_const_lv1_1)))) then 
                i_3_reg_19368 <= i_2_fu_19670_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_3_reg_19368 <= sext_ln222_fu_19444_p1;
            end if; 
        end if;
    end process;

    idx_2_reg_19389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_fu_19580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                idx_2_reg_19389 <= idx_fu_1688;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                idx_2_reg_19389 <= add_ln236_fu_19723_p2;
            end if; 
        end if;
    end process;

    idx_5_reg_19410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                idx_5_reg_19410 <= idx_2_reg_19389;
            elsif (((icmp_ln236_fu_19688_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                idx_5_reg_19410 <= idx_6_fu_19694_p2;
            end if; 
        end if;
    end process;

    idx_fu_1688_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_fu_1688 <= ap_const_lv32_0;
            elsif (((icmp_ln229_1_fu_19596_p2 = ap_const_lv1_1) and (icmp_ln229_reg_28299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                idx_fu_1688 <= add_ln229_fu_19655_p2;
            end if; 
        end if;
    end process;

    j_reg_19378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_fu_19580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                j_reg_19378 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                j_reg_19378 <= j_1_reg_28303;
            end if; 
        end if;
    end process;

    k_reg_19399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                k_reg_19399 <= ap_const_lv4_0;
            elsif (((icmp_ln236_fu_19688_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_19399 <= add_ln236_1_fu_19676_p2;
            end if; 
        end if;
    end process;

    n_samples_counter_reg_19356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln229_1_fu_19596_p2 = ap_const_lv1_1) or (icmp_ln229_reg_28299 = ap_const_lv1_1)))) then 
                n_samples_counter_reg_19356 <= n_samples_counter_1_fu_19665_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_samples_counter_reg_19356 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln236_fu_19688_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_40_reg_28489 <= empty_40_fu_19700_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                icmp_ln229_reg_28299 <= icmp_ln229_fu_19580_p2;
                period_count_s_reg_28287 <= sample_sliding_window_buffer_count_s_q0;
                    zext_ln225_reg_28294(5 downto 0) <= zext_ln225_fu_19576_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln236_reg_28470 <= icmp_ln236_fu_19688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_reg_28299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                j_1_reg_28303 <= j_1_fu_19586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sext_ln26_reg_23701 <= sext_ln26_fu_19452_p1;
                trunc_ln22_reg_23706 <= trunc_ln22_fu_19460_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_19472_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln34_reg_23717(4 downto 0) <= zext_ln34_fu_19524_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_1_fu_19596_p2 = ap_const_lv1_0) and (icmp_ln229_reg_28299 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    zext_ln40_reg_28311(4 downto 0) <= zext_ln40_fu_19615_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln34_reg_23717(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln225_reg_28294(31 downto 6) <= "00000000000000000000000000";
    zext_ln40_reg_28311(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_19472_p3, icmp_ln229_reg_28299, ap_CS_fsm_state19, icmp_ln229_1_fu_19596_p2, ap_enable_reg_pp0_iter0, icmp_ln236_fu_19688_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_19472_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln229_1_fu_19596_p2 = ap_const_lv1_1) or (icmp_ln229_reg_28299 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln236_fu_19688_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln236_fu_19688_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln222_fu_19430_p2 <= std_logic_vector(unsigned(empty_fu_19420_p1) + unsigned(ap_const_lv6_3F));
    add_ln229_fu_19655_p2 <= std_logic_vector(signed(sext_ln229_fu_19651_p1) + signed(idx_fu_1688));
    add_ln236_1_fu_19676_p2 <= std_logic_vector(unsigned(k_reg_19399) + unsigned(ap_const_lv4_1));
    add_ln236_fu_19723_p2 <= std_logic_vector(unsigned(idx_2_reg_19389) + unsigned(ap_const_lv32_C));
    add_ln244_1_fu_19713_p2 <= std_logic_vector(unsigned(empty_40_reg_28489) + unsigned(ap_const_lv13_3));
    add_ln30_fu_19503_p2 <= std_logic_vector(unsigned(trunc_ln22_1_fu_19485_p1) + unsigned(ap_const_lv5_14));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state26_assign_proc : process(icmp_ln236_fu_19688_p2)
    begin
        if ((icmp_ln236_fu_19688_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_19472_p3)
    begin
        if ((((tmp_fu_19472_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_19472_p3)
    begin
        if (((tmp_fu_19472_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, tmp_fu_19472_p3, n_samples_counter_reg_19356, ap_return_preg)
    begin
        if (((tmp_fu_19472_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= n_samples_counter_reg_19356;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    buffer_idx_2_fu_19509_p3 <= 
        add_ln30_fu_19503_p2 when (tmp_1_fu_19495_p3(0) = '1') else 
        trunc_ln22_1_fu_19485_p1;
    buffer_idx_3_fu_19517_p3 <= 
        trunc_ln22_reg_23706 when (icmp_ln24_fu_19489_p2(0) = '1') else 
        buffer_idx_2_fu_19509_p3;
    buffer_idx_fu_19480_p2 <= std_logic_vector(signed(sext_ln26_reg_23701) - signed(i_3_reg_19368));
    empty_40_fu_19700_p1 <= idx_5_reg_19410(13 - 1 downto 0);
    empty_fu_19420_p1 <= n_periods(6 - 1 downto 0);
    i_2_fu_19670_p2 <= std_logic_vector(unsigned(i_3_reg_19368) + unsigned(ap_const_lv32_FFFFFFFF));
    i_fu_19436_p3 <= 
        ap_const_lv6_13 when (icmp_ln214_fu_19424_p2(0) = '1') else 
        add_ln222_fu_19430_p2;
    icmp_ln214_fu_19424_p2 <= "1" when (unsigned(n_periods) > unsigned(ap_const_lv32_14)) else "0";
    icmp_ln229_1_fu_19596_p2 <= "1" when (j_reg_19378 = period_count_s_reg_28287) else "0";
    icmp_ln229_fu_19580_p2 <= "1" when (sample_sliding_window_buffer_count_s_q0 = ap_const_lv6_0) else "0";
    icmp_ln236_fu_19688_p2 <= "1" when (k_reg_19399 = ap_const_lv4_C) else "0";
    icmp_ln24_fu_19489_p2 <= "1" when (signed(buffer_idx_fu_19480_p2) < signed(ap_const_lv32_FFFFFFEC)) else "0";
    icmp_ln34_fu_19601_p2 <= "1" when (unsigned(j_reg_19378) > unsigned(ap_const_lv6_20)) else "0";
    idx_6_fu_19694_p2 <= std_logic_vector(unsigned(idx_5_reg_19410) + unsigned(ap_const_lv32_1));
    j_1_fu_19586_p2 <= std_logic_vector(unsigned(j_reg_19378) + unsigned(ap_const_lv6_1));
    k_cast_fu_19682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_19399),64));
    n_samples_counter_1_fu_19665_p2 <= std_logic_vector(unsigned(zext_ln225_reg_28294) + unsigned(n_samples_counter_reg_19356));

    period_samples_0_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln40_fu_19615_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            period_samples_0_sample_V_address0 <= zext_ln40_fu_19615_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_0_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_0_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_0_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_0_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_0_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_0_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_0_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_0_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_0_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_0_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_0_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_0_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_0_q0, sample_sliding_window_buffer_samples_sample_V_29_0_q0, sample_sliding_window_buffer_samples_sample_V_27_0_q0, sample_sliding_window_buffer_samples_sample_V_25_0_q0, sample_sliding_window_buffer_samples_sample_V_23_0_q0, sample_sliding_window_buffer_samples_sample_V_21_0_q0, sample_sliding_window_buffer_samples_sample_V_19_0_q0, sample_sliding_window_buffer_samples_sample_V_17_0_q0, sample_sliding_window_buffer_samples_sample_V_15_0_q0, sample_sliding_window_buffer_samples_sample_V_13_0_q0, sample_sliding_window_buffer_samples_sample_V_11_0_q0, sample_sliding_window_buffer_samples_sample_V_9_0_q0, sample_sliding_window_buffer_samples_sample_V_7_0_q0, sample_sliding_window_buffer_samples_sample_V_5_0_q0, sample_sliding_window_buffer_samples_sample_V_3_0_q0, sample_sliding_window_buffer_samples_sample_V_1_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_0_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_0_q0;
        else 
            period_samples_0_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_0_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_0_q0, sample_sliding_window_buffer_samples_sample_V_28_0_q0, sample_sliding_window_buffer_samples_sample_V_26_0_q0, sample_sliding_window_buffer_samples_sample_V_24_0_q0, sample_sliding_window_buffer_samples_sample_V_22_0_q0, sample_sliding_window_buffer_samples_sample_V_20_0_q0, sample_sliding_window_buffer_samples_sample_V_18_0_q0, sample_sliding_window_buffer_samples_sample_V_16_0_q0, sample_sliding_window_buffer_samples_sample_V_14_0_q0, sample_sliding_window_buffer_samples_sample_V_12_0_q0, sample_sliding_window_buffer_samples_sample_V_10_0_q0, sample_sliding_window_buffer_samples_sample_V_8_0_q0, sample_sliding_window_buffer_samples_sample_V_6_0_q0, sample_sliding_window_buffer_samples_sample_V_4_0_q0, sample_sliding_window_buffer_samples_sample_V_2_0_q0, sample_sliding_window_buffer_samples_sample_V_0_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_0_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_0_q0;
        else 
            period_samples_0_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_0_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_0_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_0_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_0_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_0_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_0_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_0_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln40_fu_19615_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            period_samples_0_timestamp_V_address0 <= zext_ln40_fu_19615_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_0_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_0_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_0_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_0_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_0_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_0_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_0_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_0_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_0_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_0_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_0_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_0_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_0_q0, sample_sliding_window_buffer_samples_timestamp_V_29_0_q0, sample_sliding_window_buffer_samples_timestamp_V_27_0_q0, sample_sliding_window_buffer_samples_timestamp_V_25_0_q0, sample_sliding_window_buffer_samples_timestamp_V_23_0_q0, sample_sliding_window_buffer_samples_timestamp_V_21_0_q0, sample_sliding_window_buffer_samples_timestamp_V_19_0_q0, sample_sliding_window_buffer_samples_timestamp_V_17_0_q0, sample_sliding_window_buffer_samples_timestamp_V_15_0_q0, sample_sliding_window_buffer_samples_timestamp_V_13_0_q0, sample_sliding_window_buffer_samples_timestamp_V_11_0_q0, sample_sliding_window_buffer_samples_timestamp_V_9_0_q0, sample_sliding_window_buffer_samples_timestamp_V_7_0_q0, sample_sliding_window_buffer_samples_timestamp_V_5_0_q0, sample_sliding_window_buffer_samples_timestamp_V_3_0_q0, sample_sliding_window_buffer_samples_timestamp_V_1_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_0_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_0_q0;
        else 
            period_samples_0_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_0_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_0_q0, sample_sliding_window_buffer_samples_timestamp_V_28_0_q0, sample_sliding_window_buffer_samples_timestamp_V_26_0_q0, sample_sliding_window_buffer_samples_timestamp_V_24_0_q0, sample_sliding_window_buffer_samples_timestamp_V_22_0_q0, sample_sliding_window_buffer_samples_timestamp_V_20_0_q0, sample_sliding_window_buffer_samples_timestamp_V_18_0_q0, sample_sliding_window_buffer_samples_timestamp_V_16_0_q0, sample_sliding_window_buffer_samples_timestamp_V_14_0_q0, sample_sliding_window_buffer_samples_timestamp_V_12_0_q0, sample_sliding_window_buffer_samples_timestamp_V_10_0_q0, sample_sliding_window_buffer_samples_timestamp_V_8_0_q0, sample_sliding_window_buffer_samples_timestamp_V_6_0_q0, sample_sliding_window_buffer_samples_timestamp_V_4_0_q0, sample_sliding_window_buffer_samples_timestamp_V_2_0_q0, sample_sliding_window_buffer_samples_timestamp_V_0_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_0_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_0_q0;
        else 
            period_samples_0_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_0_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_0_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_0_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_0_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_0_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_0_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_10_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            period_samples_10_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_10_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_10_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_10_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_10_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_10_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_10_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_10_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_10_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_10_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_10_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_10_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_10_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_10_q0, sample_sliding_window_buffer_samples_sample_V_29_10_q0, sample_sliding_window_buffer_samples_sample_V_27_10_q0, sample_sliding_window_buffer_samples_sample_V_25_10_q0, sample_sliding_window_buffer_samples_sample_V_23_10_q0, sample_sliding_window_buffer_samples_sample_V_21_10_q0, sample_sliding_window_buffer_samples_sample_V_19_10_q0, sample_sliding_window_buffer_samples_sample_V_17_10_q0, sample_sliding_window_buffer_samples_sample_V_15_10_q0, sample_sliding_window_buffer_samples_sample_V_13_10_q0, sample_sliding_window_buffer_samples_sample_V_11_10_q0, sample_sliding_window_buffer_samples_sample_V_9_10_q0, sample_sliding_window_buffer_samples_sample_V_7_10_q0, sample_sliding_window_buffer_samples_sample_V_5_10_q0, sample_sliding_window_buffer_samples_sample_V_3_10_q0, sample_sliding_window_buffer_samples_sample_V_1_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_10_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_10_q0;
        else 
            period_samples_10_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_10_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_10_q0, sample_sliding_window_buffer_samples_sample_V_28_10_q0, sample_sliding_window_buffer_samples_sample_V_26_10_q0, sample_sliding_window_buffer_samples_sample_V_24_10_q0, sample_sliding_window_buffer_samples_sample_V_22_10_q0, sample_sliding_window_buffer_samples_sample_V_20_10_q0, sample_sliding_window_buffer_samples_sample_V_18_10_q0, sample_sliding_window_buffer_samples_sample_V_16_10_q0, sample_sliding_window_buffer_samples_sample_V_14_10_q0, sample_sliding_window_buffer_samples_sample_V_12_10_q0, sample_sliding_window_buffer_samples_sample_V_10_10_q0, sample_sliding_window_buffer_samples_sample_V_8_10_q0, sample_sliding_window_buffer_samples_sample_V_6_10_q0, sample_sliding_window_buffer_samples_sample_V_4_10_q0, sample_sliding_window_buffer_samples_sample_V_2_10_q0, sample_sliding_window_buffer_samples_sample_V_0_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_10_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_10_q0;
        else 
            period_samples_10_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_10_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_10_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_10_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_10_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_10_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_10_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_10_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            period_samples_10_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_10_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_10_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_10_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_10_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_10_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_10_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_10_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_10_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_10_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_10_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_10_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_10_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_10_q0, sample_sliding_window_buffer_samples_timestamp_V_29_10_q0, sample_sliding_window_buffer_samples_timestamp_V_27_10_q0, sample_sliding_window_buffer_samples_timestamp_V_25_10_q0, sample_sliding_window_buffer_samples_timestamp_V_23_10_q0, sample_sliding_window_buffer_samples_timestamp_V_21_10_q0, sample_sliding_window_buffer_samples_timestamp_V_19_10_q0, sample_sliding_window_buffer_samples_timestamp_V_17_10_q0, sample_sliding_window_buffer_samples_timestamp_V_15_10_q0, sample_sliding_window_buffer_samples_timestamp_V_13_10_q0, sample_sliding_window_buffer_samples_timestamp_V_11_10_q0, sample_sliding_window_buffer_samples_timestamp_V_9_10_q0, sample_sliding_window_buffer_samples_timestamp_V_7_10_q0, sample_sliding_window_buffer_samples_timestamp_V_5_10_q0, sample_sliding_window_buffer_samples_timestamp_V_3_10_q0, sample_sliding_window_buffer_samples_timestamp_V_1_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_10_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_10_q0;
        else 
            period_samples_10_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_10_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_10_q0, sample_sliding_window_buffer_samples_timestamp_V_28_10_q0, sample_sliding_window_buffer_samples_timestamp_V_26_10_q0, sample_sliding_window_buffer_samples_timestamp_V_24_10_q0, sample_sliding_window_buffer_samples_timestamp_V_22_10_q0, sample_sliding_window_buffer_samples_timestamp_V_20_10_q0, sample_sliding_window_buffer_samples_timestamp_V_18_10_q0, sample_sliding_window_buffer_samples_timestamp_V_16_10_q0, sample_sliding_window_buffer_samples_timestamp_V_14_10_q0, sample_sliding_window_buffer_samples_timestamp_V_12_10_q0, sample_sliding_window_buffer_samples_timestamp_V_10_10_q0, sample_sliding_window_buffer_samples_timestamp_V_8_10_q0, sample_sliding_window_buffer_samples_timestamp_V_6_10_q0, sample_sliding_window_buffer_samples_timestamp_V_4_10_q0, sample_sliding_window_buffer_samples_timestamp_V_2_10_q0, sample_sliding_window_buffer_samples_timestamp_V_0_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_10_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_10_q0;
        else 
            period_samples_10_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_10_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_10_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_10_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_10_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_10_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_10_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_11_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            period_samples_11_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_11_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_11_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_11_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_11_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_11_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_11_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_11_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_11_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_11_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_11_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_11_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_11_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_11_q0, sample_sliding_window_buffer_samples_sample_V_29_11_q0, sample_sliding_window_buffer_samples_sample_V_27_11_q0, sample_sliding_window_buffer_samples_sample_V_25_11_q0, sample_sliding_window_buffer_samples_sample_V_23_11_q0, sample_sliding_window_buffer_samples_sample_V_21_11_q0, sample_sliding_window_buffer_samples_sample_V_19_11_q0, sample_sliding_window_buffer_samples_sample_V_17_11_q0, sample_sliding_window_buffer_samples_sample_V_15_11_q0, sample_sliding_window_buffer_samples_sample_V_13_11_q0, sample_sliding_window_buffer_samples_sample_V_11_11_q0, sample_sliding_window_buffer_samples_sample_V_9_11_q0, sample_sliding_window_buffer_samples_sample_V_7_11_q0, sample_sliding_window_buffer_samples_sample_V_5_11_q0, sample_sliding_window_buffer_samples_sample_V_3_11_q0, sample_sliding_window_buffer_samples_sample_V_1_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_11_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_11_q0;
        else 
            period_samples_11_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_11_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_11_q0, sample_sliding_window_buffer_samples_sample_V_28_11_q0, sample_sliding_window_buffer_samples_sample_V_26_11_q0, sample_sliding_window_buffer_samples_sample_V_24_11_q0, sample_sliding_window_buffer_samples_sample_V_22_11_q0, sample_sliding_window_buffer_samples_sample_V_20_11_q0, sample_sliding_window_buffer_samples_sample_V_18_11_q0, sample_sliding_window_buffer_samples_sample_V_16_11_q0, sample_sliding_window_buffer_samples_sample_V_14_11_q0, sample_sliding_window_buffer_samples_sample_V_12_11_q0, sample_sliding_window_buffer_samples_sample_V_10_11_q0, sample_sliding_window_buffer_samples_sample_V_8_11_q0, sample_sliding_window_buffer_samples_sample_V_6_11_q0, sample_sliding_window_buffer_samples_sample_V_4_11_q0, sample_sliding_window_buffer_samples_sample_V_2_11_q0, sample_sliding_window_buffer_samples_sample_V_0_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_11_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_11_q0;
        else 
            period_samples_11_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_11_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_11_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_11_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_11_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_11_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_11_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_11_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            period_samples_11_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_11_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_11_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_11_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_11_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_11_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_11_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_11_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_11_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_11_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_11_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_11_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_11_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_11_q0, sample_sliding_window_buffer_samples_timestamp_V_29_11_q0, sample_sliding_window_buffer_samples_timestamp_V_27_11_q0, sample_sliding_window_buffer_samples_timestamp_V_25_11_q0, sample_sliding_window_buffer_samples_timestamp_V_23_11_q0, sample_sliding_window_buffer_samples_timestamp_V_21_11_q0, sample_sliding_window_buffer_samples_timestamp_V_19_11_q0, sample_sliding_window_buffer_samples_timestamp_V_17_11_q0, sample_sliding_window_buffer_samples_timestamp_V_15_11_q0, sample_sliding_window_buffer_samples_timestamp_V_13_11_q0, sample_sliding_window_buffer_samples_timestamp_V_11_11_q0, sample_sliding_window_buffer_samples_timestamp_V_9_11_q0, sample_sliding_window_buffer_samples_timestamp_V_7_11_q0, sample_sliding_window_buffer_samples_timestamp_V_5_11_q0, sample_sliding_window_buffer_samples_timestamp_V_3_11_q0, sample_sliding_window_buffer_samples_timestamp_V_1_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_11_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_11_q0;
        else 
            period_samples_11_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_11_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_11_q0, sample_sliding_window_buffer_samples_timestamp_V_28_11_q0, sample_sliding_window_buffer_samples_timestamp_V_26_11_q0, sample_sliding_window_buffer_samples_timestamp_V_24_11_q0, sample_sliding_window_buffer_samples_timestamp_V_22_11_q0, sample_sliding_window_buffer_samples_timestamp_V_20_11_q0, sample_sliding_window_buffer_samples_timestamp_V_18_11_q0, sample_sliding_window_buffer_samples_timestamp_V_16_11_q0, sample_sliding_window_buffer_samples_timestamp_V_14_11_q0, sample_sliding_window_buffer_samples_timestamp_V_12_11_q0, sample_sliding_window_buffer_samples_timestamp_V_10_11_q0, sample_sliding_window_buffer_samples_timestamp_V_8_11_q0, sample_sliding_window_buffer_samples_timestamp_V_6_11_q0, sample_sliding_window_buffer_samples_timestamp_V_4_11_q0, sample_sliding_window_buffer_samples_timestamp_V_2_11_q0, sample_sliding_window_buffer_samples_timestamp_V_0_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_11_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_11_q0;
        else 
            period_samples_11_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_11_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_11_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_11_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_11_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_11_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_11_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_1_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln40_fu_19615_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            period_samples_1_sample_V_address0 <= zext_ln40_fu_19615_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_1_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_1_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_1_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_1_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_1_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_1_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_1_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_1_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_1_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_1_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_1_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_1_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_1_q0, sample_sliding_window_buffer_samples_sample_V_29_1_q0, sample_sliding_window_buffer_samples_sample_V_27_1_q0, sample_sliding_window_buffer_samples_sample_V_25_1_q0, sample_sliding_window_buffer_samples_sample_V_23_1_q0, sample_sliding_window_buffer_samples_sample_V_21_1_q0, sample_sliding_window_buffer_samples_sample_V_19_1_q0, sample_sliding_window_buffer_samples_sample_V_17_1_q0, sample_sliding_window_buffer_samples_sample_V_15_1_q0, sample_sliding_window_buffer_samples_sample_V_13_1_q0, sample_sliding_window_buffer_samples_sample_V_11_1_q0, sample_sliding_window_buffer_samples_sample_V_9_1_q0, sample_sliding_window_buffer_samples_sample_V_7_1_q0, sample_sliding_window_buffer_samples_sample_V_5_1_q0, sample_sliding_window_buffer_samples_sample_V_3_1_q0, sample_sliding_window_buffer_samples_sample_V_1_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_1_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_1_q0;
        else 
            period_samples_1_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_1_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_1_q0, sample_sliding_window_buffer_samples_sample_V_28_1_q0, sample_sliding_window_buffer_samples_sample_V_26_1_q0, sample_sliding_window_buffer_samples_sample_V_24_1_q0, sample_sliding_window_buffer_samples_sample_V_22_1_q0, sample_sliding_window_buffer_samples_sample_V_20_1_q0, sample_sliding_window_buffer_samples_sample_V_18_1_q0, sample_sliding_window_buffer_samples_sample_V_16_1_q0, sample_sliding_window_buffer_samples_sample_V_14_1_q0, sample_sliding_window_buffer_samples_sample_V_12_1_q0, sample_sliding_window_buffer_samples_sample_V_10_1_q0, sample_sliding_window_buffer_samples_sample_V_8_1_q0, sample_sliding_window_buffer_samples_sample_V_6_1_q0, sample_sliding_window_buffer_samples_sample_V_4_1_q0, sample_sliding_window_buffer_samples_sample_V_2_1_q0, sample_sliding_window_buffer_samples_sample_V_0_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_1_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_1_q0;
        else 
            period_samples_1_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_1_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_1_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_1_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_1_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_1_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_1_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_1_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln40_fu_19615_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            period_samples_1_timestamp_V_address0 <= zext_ln40_fu_19615_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_1_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_1_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_1_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_1_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_1_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_1_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_1_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_1_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_1_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_1_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_1_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_1_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_1_q0, sample_sliding_window_buffer_samples_timestamp_V_29_1_q0, sample_sliding_window_buffer_samples_timestamp_V_27_1_q0, sample_sliding_window_buffer_samples_timestamp_V_25_1_q0, sample_sliding_window_buffer_samples_timestamp_V_23_1_q0, sample_sliding_window_buffer_samples_timestamp_V_21_1_q0, sample_sliding_window_buffer_samples_timestamp_V_19_1_q0, sample_sliding_window_buffer_samples_timestamp_V_17_1_q0, sample_sliding_window_buffer_samples_timestamp_V_15_1_q0, sample_sliding_window_buffer_samples_timestamp_V_13_1_q0, sample_sliding_window_buffer_samples_timestamp_V_11_1_q0, sample_sliding_window_buffer_samples_timestamp_V_9_1_q0, sample_sliding_window_buffer_samples_timestamp_V_7_1_q0, sample_sliding_window_buffer_samples_timestamp_V_5_1_q0, sample_sliding_window_buffer_samples_timestamp_V_3_1_q0, sample_sliding_window_buffer_samples_timestamp_V_1_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_1_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_1_q0;
        else 
            period_samples_1_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_1_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_1_q0, sample_sliding_window_buffer_samples_timestamp_V_28_1_q0, sample_sliding_window_buffer_samples_timestamp_V_26_1_q0, sample_sliding_window_buffer_samples_timestamp_V_24_1_q0, sample_sliding_window_buffer_samples_timestamp_V_22_1_q0, sample_sliding_window_buffer_samples_timestamp_V_20_1_q0, sample_sliding_window_buffer_samples_timestamp_V_18_1_q0, sample_sliding_window_buffer_samples_timestamp_V_16_1_q0, sample_sliding_window_buffer_samples_timestamp_V_14_1_q0, sample_sliding_window_buffer_samples_timestamp_V_12_1_q0, sample_sliding_window_buffer_samples_timestamp_V_10_1_q0, sample_sliding_window_buffer_samples_timestamp_V_8_1_q0, sample_sliding_window_buffer_samples_timestamp_V_6_1_q0, sample_sliding_window_buffer_samples_timestamp_V_4_1_q0, sample_sliding_window_buffer_samples_timestamp_V_2_1_q0, sample_sliding_window_buffer_samples_timestamp_V_0_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_1_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_1_q0;
        else 
            period_samples_1_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_1_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_1_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_1_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_1_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_1_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_1_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_2_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            period_samples_2_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_2_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_2_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_2_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_2_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_2_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_2_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_2_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_2_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_2_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_2_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_2_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_2_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_2_q0, sample_sliding_window_buffer_samples_sample_V_29_2_q0, sample_sliding_window_buffer_samples_sample_V_27_2_q0, sample_sliding_window_buffer_samples_sample_V_25_2_q0, sample_sliding_window_buffer_samples_sample_V_23_2_q0, sample_sliding_window_buffer_samples_sample_V_21_2_q0, sample_sliding_window_buffer_samples_sample_V_19_2_q0, sample_sliding_window_buffer_samples_sample_V_17_2_q0, sample_sliding_window_buffer_samples_sample_V_15_2_q0, sample_sliding_window_buffer_samples_sample_V_13_2_q0, sample_sliding_window_buffer_samples_sample_V_11_2_q0, sample_sliding_window_buffer_samples_sample_V_9_2_q0, sample_sliding_window_buffer_samples_sample_V_7_2_q0, sample_sliding_window_buffer_samples_sample_V_5_2_q0, sample_sliding_window_buffer_samples_sample_V_3_2_q0, sample_sliding_window_buffer_samples_sample_V_1_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_2_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_2_q0;
        else 
            period_samples_2_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_2_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_2_q0, sample_sliding_window_buffer_samples_sample_V_28_2_q0, sample_sliding_window_buffer_samples_sample_V_26_2_q0, sample_sliding_window_buffer_samples_sample_V_24_2_q0, sample_sliding_window_buffer_samples_sample_V_22_2_q0, sample_sliding_window_buffer_samples_sample_V_20_2_q0, sample_sliding_window_buffer_samples_sample_V_18_2_q0, sample_sliding_window_buffer_samples_sample_V_16_2_q0, sample_sliding_window_buffer_samples_sample_V_14_2_q0, sample_sliding_window_buffer_samples_sample_V_12_2_q0, sample_sliding_window_buffer_samples_sample_V_10_2_q0, sample_sliding_window_buffer_samples_sample_V_8_2_q0, sample_sliding_window_buffer_samples_sample_V_6_2_q0, sample_sliding_window_buffer_samples_sample_V_4_2_q0, sample_sliding_window_buffer_samples_sample_V_2_2_q0, sample_sliding_window_buffer_samples_sample_V_0_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_2_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_2_q0;
        else 
            period_samples_2_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_2_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_2_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_2_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_2_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_2_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_2_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_2_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            period_samples_2_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_2_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_2_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_2_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_2_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_2_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_2_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_2_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_2_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_2_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_2_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_2_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_2_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_2_q0, sample_sliding_window_buffer_samples_timestamp_V_29_2_q0, sample_sliding_window_buffer_samples_timestamp_V_27_2_q0, sample_sliding_window_buffer_samples_timestamp_V_25_2_q0, sample_sliding_window_buffer_samples_timestamp_V_23_2_q0, sample_sliding_window_buffer_samples_timestamp_V_21_2_q0, sample_sliding_window_buffer_samples_timestamp_V_19_2_q0, sample_sliding_window_buffer_samples_timestamp_V_17_2_q0, sample_sliding_window_buffer_samples_timestamp_V_15_2_q0, sample_sliding_window_buffer_samples_timestamp_V_13_2_q0, sample_sliding_window_buffer_samples_timestamp_V_11_2_q0, sample_sliding_window_buffer_samples_timestamp_V_9_2_q0, sample_sliding_window_buffer_samples_timestamp_V_7_2_q0, sample_sliding_window_buffer_samples_timestamp_V_5_2_q0, sample_sliding_window_buffer_samples_timestamp_V_3_2_q0, sample_sliding_window_buffer_samples_timestamp_V_1_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_2_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_2_q0;
        else 
            period_samples_2_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_2_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_2_q0, sample_sliding_window_buffer_samples_timestamp_V_28_2_q0, sample_sliding_window_buffer_samples_timestamp_V_26_2_q0, sample_sliding_window_buffer_samples_timestamp_V_24_2_q0, sample_sliding_window_buffer_samples_timestamp_V_22_2_q0, sample_sliding_window_buffer_samples_timestamp_V_20_2_q0, sample_sliding_window_buffer_samples_timestamp_V_18_2_q0, sample_sliding_window_buffer_samples_timestamp_V_16_2_q0, sample_sliding_window_buffer_samples_timestamp_V_14_2_q0, sample_sliding_window_buffer_samples_timestamp_V_12_2_q0, sample_sliding_window_buffer_samples_timestamp_V_10_2_q0, sample_sliding_window_buffer_samples_timestamp_V_8_2_q0, sample_sliding_window_buffer_samples_timestamp_V_6_2_q0, sample_sliding_window_buffer_samples_timestamp_V_4_2_q0, sample_sliding_window_buffer_samples_timestamp_V_2_2_q0, sample_sliding_window_buffer_samples_timestamp_V_0_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_2_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_2_q0;
        else 
            period_samples_2_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_2_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_2_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_2_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_2_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_2_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_2_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_3_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            period_samples_3_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_3_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_3_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_3_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_3_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_3_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_3_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_3_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_3_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_3_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_3_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_3_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_3_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_3_q0, sample_sliding_window_buffer_samples_sample_V_29_3_q0, sample_sliding_window_buffer_samples_sample_V_27_3_q0, sample_sliding_window_buffer_samples_sample_V_25_3_q0, sample_sliding_window_buffer_samples_sample_V_23_3_q0, sample_sliding_window_buffer_samples_sample_V_21_3_q0, sample_sliding_window_buffer_samples_sample_V_19_3_q0, sample_sliding_window_buffer_samples_sample_V_17_3_q0, sample_sliding_window_buffer_samples_sample_V_15_3_q0, sample_sliding_window_buffer_samples_sample_V_13_3_q0, sample_sliding_window_buffer_samples_sample_V_11_3_q0, sample_sliding_window_buffer_samples_sample_V_9_3_q0, sample_sliding_window_buffer_samples_sample_V_7_3_q0, sample_sliding_window_buffer_samples_sample_V_5_3_q0, sample_sliding_window_buffer_samples_sample_V_3_3_q0, sample_sliding_window_buffer_samples_sample_V_1_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_3_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_3_q0;
        else 
            period_samples_3_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_3_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_3_q0, sample_sliding_window_buffer_samples_sample_V_28_3_q0, sample_sliding_window_buffer_samples_sample_V_26_3_q0, sample_sliding_window_buffer_samples_sample_V_24_3_q0, sample_sliding_window_buffer_samples_sample_V_22_3_q0, sample_sliding_window_buffer_samples_sample_V_20_3_q0, sample_sliding_window_buffer_samples_sample_V_18_3_q0, sample_sliding_window_buffer_samples_sample_V_16_3_q0, sample_sliding_window_buffer_samples_sample_V_14_3_q0, sample_sliding_window_buffer_samples_sample_V_12_3_q0, sample_sliding_window_buffer_samples_sample_V_10_3_q0, sample_sliding_window_buffer_samples_sample_V_8_3_q0, sample_sliding_window_buffer_samples_sample_V_6_3_q0, sample_sliding_window_buffer_samples_sample_V_4_3_q0, sample_sliding_window_buffer_samples_sample_V_2_3_q0, sample_sliding_window_buffer_samples_sample_V_0_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_3_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_3_q0;
        else 
            period_samples_3_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_3_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_3_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_3_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_3_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_3_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_3_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_3_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            period_samples_3_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_3_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_3_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_3_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_3_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_3_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_3_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_3_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_3_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_3_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_3_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_3_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_3_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_3_q0, sample_sliding_window_buffer_samples_timestamp_V_29_3_q0, sample_sliding_window_buffer_samples_timestamp_V_27_3_q0, sample_sliding_window_buffer_samples_timestamp_V_25_3_q0, sample_sliding_window_buffer_samples_timestamp_V_23_3_q0, sample_sliding_window_buffer_samples_timestamp_V_21_3_q0, sample_sliding_window_buffer_samples_timestamp_V_19_3_q0, sample_sliding_window_buffer_samples_timestamp_V_17_3_q0, sample_sliding_window_buffer_samples_timestamp_V_15_3_q0, sample_sliding_window_buffer_samples_timestamp_V_13_3_q0, sample_sliding_window_buffer_samples_timestamp_V_11_3_q0, sample_sliding_window_buffer_samples_timestamp_V_9_3_q0, sample_sliding_window_buffer_samples_timestamp_V_7_3_q0, sample_sliding_window_buffer_samples_timestamp_V_5_3_q0, sample_sliding_window_buffer_samples_timestamp_V_3_3_q0, sample_sliding_window_buffer_samples_timestamp_V_1_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_3_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_3_q0;
        else 
            period_samples_3_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_3_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_3_q0, sample_sliding_window_buffer_samples_timestamp_V_28_3_q0, sample_sliding_window_buffer_samples_timestamp_V_26_3_q0, sample_sliding_window_buffer_samples_timestamp_V_24_3_q0, sample_sliding_window_buffer_samples_timestamp_V_22_3_q0, sample_sliding_window_buffer_samples_timestamp_V_20_3_q0, sample_sliding_window_buffer_samples_timestamp_V_18_3_q0, sample_sliding_window_buffer_samples_timestamp_V_16_3_q0, sample_sliding_window_buffer_samples_timestamp_V_14_3_q0, sample_sliding_window_buffer_samples_timestamp_V_12_3_q0, sample_sliding_window_buffer_samples_timestamp_V_10_3_q0, sample_sliding_window_buffer_samples_timestamp_V_8_3_q0, sample_sliding_window_buffer_samples_timestamp_V_6_3_q0, sample_sliding_window_buffer_samples_timestamp_V_4_3_q0, sample_sliding_window_buffer_samples_timestamp_V_2_3_q0, sample_sliding_window_buffer_samples_timestamp_V_0_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_3_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_3_q0;
        else 
            period_samples_3_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_3_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_3_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_3_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_3_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_3_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_3_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_4_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            period_samples_4_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_4_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_4_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_4_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_4_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_4_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_4_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_4_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_4_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_4_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_4_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_4_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_4_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_4_q0, sample_sliding_window_buffer_samples_sample_V_29_4_q0, sample_sliding_window_buffer_samples_sample_V_27_4_q0, sample_sliding_window_buffer_samples_sample_V_25_4_q0, sample_sliding_window_buffer_samples_sample_V_23_4_q0, sample_sliding_window_buffer_samples_sample_V_21_4_q0, sample_sliding_window_buffer_samples_sample_V_19_4_q0, sample_sliding_window_buffer_samples_sample_V_17_4_q0, sample_sliding_window_buffer_samples_sample_V_15_4_q0, sample_sliding_window_buffer_samples_sample_V_13_4_q0, sample_sliding_window_buffer_samples_sample_V_11_4_q0, sample_sliding_window_buffer_samples_sample_V_9_4_q0, sample_sliding_window_buffer_samples_sample_V_7_4_q0, sample_sliding_window_buffer_samples_sample_V_5_4_q0, sample_sliding_window_buffer_samples_sample_V_3_4_q0, sample_sliding_window_buffer_samples_sample_V_1_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_4_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_4_q0;
        else 
            period_samples_4_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_4_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_4_q0, sample_sliding_window_buffer_samples_sample_V_28_4_q0, sample_sliding_window_buffer_samples_sample_V_26_4_q0, sample_sliding_window_buffer_samples_sample_V_24_4_q0, sample_sliding_window_buffer_samples_sample_V_22_4_q0, sample_sliding_window_buffer_samples_sample_V_20_4_q0, sample_sliding_window_buffer_samples_sample_V_18_4_q0, sample_sliding_window_buffer_samples_sample_V_16_4_q0, sample_sliding_window_buffer_samples_sample_V_14_4_q0, sample_sliding_window_buffer_samples_sample_V_12_4_q0, sample_sliding_window_buffer_samples_sample_V_10_4_q0, sample_sliding_window_buffer_samples_sample_V_8_4_q0, sample_sliding_window_buffer_samples_sample_V_6_4_q0, sample_sliding_window_buffer_samples_sample_V_4_4_q0, sample_sliding_window_buffer_samples_sample_V_2_4_q0, sample_sliding_window_buffer_samples_sample_V_0_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_4_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_4_q0;
        else 
            period_samples_4_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_4_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_4_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_4_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_4_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_4_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_4_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_4_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            period_samples_4_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_4_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_4_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_4_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_4_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_4_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_4_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_4_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_4_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_4_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_4_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_4_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_4_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_4_q0, sample_sliding_window_buffer_samples_timestamp_V_29_4_q0, sample_sliding_window_buffer_samples_timestamp_V_27_4_q0, sample_sliding_window_buffer_samples_timestamp_V_25_4_q0, sample_sliding_window_buffer_samples_timestamp_V_23_4_q0, sample_sliding_window_buffer_samples_timestamp_V_21_4_q0, sample_sliding_window_buffer_samples_timestamp_V_19_4_q0, sample_sliding_window_buffer_samples_timestamp_V_17_4_q0, sample_sliding_window_buffer_samples_timestamp_V_15_4_q0, sample_sliding_window_buffer_samples_timestamp_V_13_4_q0, sample_sliding_window_buffer_samples_timestamp_V_11_4_q0, sample_sliding_window_buffer_samples_timestamp_V_9_4_q0, sample_sliding_window_buffer_samples_timestamp_V_7_4_q0, sample_sliding_window_buffer_samples_timestamp_V_5_4_q0, sample_sliding_window_buffer_samples_timestamp_V_3_4_q0, sample_sliding_window_buffer_samples_timestamp_V_1_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_4_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_4_q0;
        else 
            period_samples_4_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_4_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_4_q0, sample_sliding_window_buffer_samples_timestamp_V_28_4_q0, sample_sliding_window_buffer_samples_timestamp_V_26_4_q0, sample_sliding_window_buffer_samples_timestamp_V_24_4_q0, sample_sliding_window_buffer_samples_timestamp_V_22_4_q0, sample_sliding_window_buffer_samples_timestamp_V_20_4_q0, sample_sliding_window_buffer_samples_timestamp_V_18_4_q0, sample_sliding_window_buffer_samples_timestamp_V_16_4_q0, sample_sliding_window_buffer_samples_timestamp_V_14_4_q0, sample_sliding_window_buffer_samples_timestamp_V_12_4_q0, sample_sliding_window_buffer_samples_timestamp_V_10_4_q0, sample_sliding_window_buffer_samples_timestamp_V_8_4_q0, sample_sliding_window_buffer_samples_timestamp_V_6_4_q0, sample_sliding_window_buffer_samples_timestamp_V_4_4_q0, sample_sliding_window_buffer_samples_timestamp_V_2_4_q0, sample_sliding_window_buffer_samples_timestamp_V_0_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_4_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_4_q0;
        else 
            period_samples_4_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_4_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_4_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_4_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_4_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_4_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_4_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_5_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            period_samples_5_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_5_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_5_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_5_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_5_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_5_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_5_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_5_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_5_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_5_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_5_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_5_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_5_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_5_q0, sample_sliding_window_buffer_samples_sample_V_29_5_q0, sample_sliding_window_buffer_samples_sample_V_27_5_q0, sample_sliding_window_buffer_samples_sample_V_25_5_q0, sample_sliding_window_buffer_samples_sample_V_23_5_q0, sample_sliding_window_buffer_samples_sample_V_21_5_q0, sample_sliding_window_buffer_samples_sample_V_19_5_q0, sample_sliding_window_buffer_samples_sample_V_17_5_q0, sample_sliding_window_buffer_samples_sample_V_15_5_q0, sample_sliding_window_buffer_samples_sample_V_13_5_q0, sample_sliding_window_buffer_samples_sample_V_11_5_q0, sample_sliding_window_buffer_samples_sample_V_9_5_q0, sample_sliding_window_buffer_samples_sample_V_7_5_q0, sample_sliding_window_buffer_samples_sample_V_5_5_q0, sample_sliding_window_buffer_samples_sample_V_3_5_q0, sample_sliding_window_buffer_samples_sample_V_1_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_5_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_5_q0;
        else 
            period_samples_5_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_5_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_5_q0, sample_sliding_window_buffer_samples_sample_V_28_5_q0, sample_sliding_window_buffer_samples_sample_V_26_5_q0, sample_sliding_window_buffer_samples_sample_V_24_5_q0, sample_sliding_window_buffer_samples_sample_V_22_5_q0, sample_sliding_window_buffer_samples_sample_V_20_5_q0, sample_sliding_window_buffer_samples_sample_V_18_5_q0, sample_sliding_window_buffer_samples_sample_V_16_5_q0, sample_sliding_window_buffer_samples_sample_V_14_5_q0, sample_sliding_window_buffer_samples_sample_V_12_5_q0, sample_sliding_window_buffer_samples_sample_V_10_5_q0, sample_sliding_window_buffer_samples_sample_V_8_5_q0, sample_sliding_window_buffer_samples_sample_V_6_5_q0, sample_sliding_window_buffer_samples_sample_V_4_5_q0, sample_sliding_window_buffer_samples_sample_V_2_5_q0, sample_sliding_window_buffer_samples_sample_V_0_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_5_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_5_q0;
        else 
            period_samples_5_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_5_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_5_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_5_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_5_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_5_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_5_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_5_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            period_samples_5_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_5_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_5_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_5_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_5_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_5_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_5_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_5_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_5_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_5_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_5_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_5_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_5_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_5_q0, sample_sliding_window_buffer_samples_timestamp_V_29_5_q0, sample_sliding_window_buffer_samples_timestamp_V_27_5_q0, sample_sliding_window_buffer_samples_timestamp_V_25_5_q0, sample_sliding_window_buffer_samples_timestamp_V_23_5_q0, sample_sliding_window_buffer_samples_timestamp_V_21_5_q0, sample_sliding_window_buffer_samples_timestamp_V_19_5_q0, sample_sliding_window_buffer_samples_timestamp_V_17_5_q0, sample_sliding_window_buffer_samples_timestamp_V_15_5_q0, sample_sliding_window_buffer_samples_timestamp_V_13_5_q0, sample_sliding_window_buffer_samples_timestamp_V_11_5_q0, sample_sliding_window_buffer_samples_timestamp_V_9_5_q0, sample_sliding_window_buffer_samples_timestamp_V_7_5_q0, sample_sliding_window_buffer_samples_timestamp_V_5_5_q0, sample_sliding_window_buffer_samples_timestamp_V_3_5_q0, sample_sliding_window_buffer_samples_timestamp_V_1_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_5_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_5_q0;
        else 
            period_samples_5_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_5_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_5_q0, sample_sliding_window_buffer_samples_timestamp_V_28_5_q0, sample_sliding_window_buffer_samples_timestamp_V_26_5_q0, sample_sliding_window_buffer_samples_timestamp_V_24_5_q0, sample_sliding_window_buffer_samples_timestamp_V_22_5_q0, sample_sliding_window_buffer_samples_timestamp_V_20_5_q0, sample_sliding_window_buffer_samples_timestamp_V_18_5_q0, sample_sliding_window_buffer_samples_timestamp_V_16_5_q0, sample_sliding_window_buffer_samples_timestamp_V_14_5_q0, sample_sliding_window_buffer_samples_timestamp_V_12_5_q0, sample_sliding_window_buffer_samples_timestamp_V_10_5_q0, sample_sliding_window_buffer_samples_timestamp_V_8_5_q0, sample_sliding_window_buffer_samples_timestamp_V_6_5_q0, sample_sliding_window_buffer_samples_timestamp_V_4_5_q0, sample_sliding_window_buffer_samples_timestamp_V_2_5_q0, sample_sliding_window_buffer_samples_timestamp_V_0_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_5_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_5_q0;
        else 
            period_samples_5_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_5_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_5_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_5_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_5_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_5_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_5_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_6_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            period_samples_6_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_6_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_6_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_6_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_6_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_6_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_6_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_6_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_6_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_6_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_6_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_6_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_6_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_6_q0, sample_sliding_window_buffer_samples_sample_V_29_6_q0, sample_sliding_window_buffer_samples_sample_V_27_6_q0, sample_sliding_window_buffer_samples_sample_V_25_6_q0, sample_sliding_window_buffer_samples_sample_V_23_6_q0, sample_sliding_window_buffer_samples_sample_V_21_6_q0, sample_sliding_window_buffer_samples_sample_V_19_6_q0, sample_sliding_window_buffer_samples_sample_V_17_6_q0, sample_sliding_window_buffer_samples_sample_V_15_6_q0, sample_sliding_window_buffer_samples_sample_V_13_6_q0, sample_sliding_window_buffer_samples_sample_V_11_6_q0, sample_sliding_window_buffer_samples_sample_V_9_6_q0, sample_sliding_window_buffer_samples_sample_V_7_6_q0, sample_sliding_window_buffer_samples_sample_V_5_6_q0, sample_sliding_window_buffer_samples_sample_V_3_6_q0, sample_sliding_window_buffer_samples_sample_V_1_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_6_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_6_q0;
        else 
            period_samples_6_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_6_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_6_q0, sample_sliding_window_buffer_samples_sample_V_28_6_q0, sample_sliding_window_buffer_samples_sample_V_26_6_q0, sample_sliding_window_buffer_samples_sample_V_24_6_q0, sample_sliding_window_buffer_samples_sample_V_22_6_q0, sample_sliding_window_buffer_samples_sample_V_20_6_q0, sample_sliding_window_buffer_samples_sample_V_18_6_q0, sample_sliding_window_buffer_samples_sample_V_16_6_q0, sample_sliding_window_buffer_samples_sample_V_14_6_q0, sample_sliding_window_buffer_samples_sample_V_12_6_q0, sample_sliding_window_buffer_samples_sample_V_10_6_q0, sample_sliding_window_buffer_samples_sample_V_8_6_q0, sample_sliding_window_buffer_samples_sample_V_6_6_q0, sample_sliding_window_buffer_samples_sample_V_4_6_q0, sample_sliding_window_buffer_samples_sample_V_2_6_q0, sample_sliding_window_buffer_samples_sample_V_0_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_6_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_6_q0;
        else 
            period_samples_6_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_6_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_6_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_6_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_6_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_6_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_6_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_6_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            period_samples_6_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_6_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_6_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_6_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_6_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_6_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_6_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_6_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_6_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_6_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_6_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_6_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_6_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_6_q0, sample_sliding_window_buffer_samples_timestamp_V_29_6_q0, sample_sliding_window_buffer_samples_timestamp_V_27_6_q0, sample_sliding_window_buffer_samples_timestamp_V_25_6_q0, sample_sliding_window_buffer_samples_timestamp_V_23_6_q0, sample_sliding_window_buffer_samples_timestamp_V_21_6_q0, sample_sliding_window_buffer_samples_timestamp_V_19_6_q0, sample_sliding_window_buffer_samples_timestamp_V_17_6_q0, sample_sliding_window_buffer_samples_timestamp_V_15_6_q0, sample_sliding_window_buffer_samples_timestamp_V_13_6_q0, sample_sliding_window_buffer_samples_timestamp_V_11_6_q0, sample_sliding_window_buffer_samples_timestamp_V_9_6_q0, sample_sliding_window_buffer_samples_timestamp_V_7_6_q0, sample_sliding_window_buffer_samples_timestamp_V_5_6_q0, sample_sliding_window_buffer_samples_timestamp_V_3_6_q0, sample_sliding_window_buffer_samples_timestamp_V_1_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_6_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_6_q0;
        else 
            period_samples_6_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_6_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_6_q0, sample_sliding_window_buffer_samples_timestamp_V_28_6_q0, sample_sliding_window_buffer_samples_timestamp_V_26_6_q0, sample_sliding_window_buffer_samples_timestamp_V_24_6_q0, sample_sliding_window_buffer_samples_timestamp_V_22_6_q0, sample_sliding_window_buffer_samples_timestamp_V_20_6_q0, sample_sliding_window_buffer_samples_timestamp_V_18_6_q0, sample_sliding_window_buffer_samples_timestamp_V_16_6_q0, sample_sliding_window_buffer_samples_timestamp_V_14_6_q0, sample_sliding_window_buffer_samples_timestamp_V_12_6_q0, sample_sliding_window_buffer_samples_timestamp_V_10_6_q0, sample_sliding_window_buffer_samples_timestamp_V_8_6_q0, sample_sliding_window_buffer_samples_timestamp_V_6_6_q0, sample_sliding_window_buffer_samples_timestamp_V_4_6_q0, sample_sliding_window_buffer_samples_timestamp_V_2_6_q0, sample_sliding_window_buffer_samples_timestamp_V_0_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_6_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_6_q0;
        else 
            period_samples_6_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_6_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_6_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_6_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_6_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_6_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_6_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_7_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            period_samples_7_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_7_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_7_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_7_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_7_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_7_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_7_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_7_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_7_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_7_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_7_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_7_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_7_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_7_q0, sample_sliding_window_buffer_samples_sample_V_29_7_q0, sample_sliding_window_buffer_samples_sample_V_27_7_q0, sample_sliding_window_buffer_samples_sample_V_25_7_q0, sample_sliding_window_buffer_samples_sample_V_23_7_q0, sample_sliding_window_buffer_samples_sample_V_21_7_q0, sample_sliding_window_buffer_samples_sample_V_19_7_q0, sample_sliding_window_buffer_samples_sample_V_17_7_q0, sample_sliding_window_buffer_samples_sample_V_15_7_q0, sample_sliding_window_buffer_samples_sample_V_13_7_q0, sample_sliding_window_buffer_samples_sample_V_11_7_q0, sample_sliding_window_buffer_samples_sample_V_9_7_q0, sample_sliding_window_buffer_samples_sample_V_7_7_q0, sample_sliding_window_buffer_samples_sample_V_5_7_q0, sample_sliding_window_buffer_samples_sample_V_3_7_q0, sample_sliding_window_buffer_samples_sample_V_1_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_7_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_7_q0;
        else 
            period_samples_7_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_7_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_7_q0, sample_sliding_window_buffer_samples_sample_V_28_7_q0, sample_sliding_window_buffer_samples_sample_V_26_7_q0, sample_sliding_window_buffer_samples_sample_V_24_7_q0, sample_sliding_window_buffer_samples_sample_V_22_7_q0, sample_sliding_window_buffer_samples_sample_V_20_7_q0, sample_sliding_window_buffer_samples_sample_V_18_7_q0, sample_sliding_window_buffer_samples_sample_V_16_7_q0, sample_sliding_window_buffer_samples_sample_V_14_7_q0, sample_sliding_window_buffer_samples_sample_V_12_7_q0, sample_sliding_window_buffer_samples_sample_V_10_7_q0, sample_sliding_window_buffer_samples_sample_V_8_7_q0, sample_sliding_window_buffer_samples_sample_V_6_7_q0, sample_sliding_window_buffer_samples_sample_V_4_7_q0, sample_sliding_window_buffer_samples_sample_V_2_7_q0, sample_sliding_window_buffer_samples_sample_V_0_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_7_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_7_q0;
        else 
            period_samples_7_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_7_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_7_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_7_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_7_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_7_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_7_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_7_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            period_samples_7_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_7_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_7_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_7_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_7_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_7_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_7_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_7_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_7_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_7_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_7_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_7_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_7_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_7_q0, sample_sliding_window_buffer_samples_timestamp_V_29_7_q0, sample_sliding_window_buffer_samples_timestamp_V_27_7_q0, sample_sliding_window_buffer_samples_timestamp_V_25_7_q0, sample_sliding_window_buffer_samples_timestamp_V_23_7_q0, sample_sliding_window_buffer_samples_timestamp_V_21_7_q0, sample_sliding_window_buffer_samples_timestamp_V_19_7_q0, sample_sliding_window_buffer_samples_timestamp_V_17_7_q0, sample_sliding_window_buffer_samples_timestamp_V_15_7_q0, sample_sliding_window_buffer_samples_timestamp_V_13_7_q0, sample_sliding_window_buffer_samples_timestamp_V_11_7_q0, sample_sliding_window_buffer_samples_timestamp_V_9_7_q0, sample_sliding_window_buffer_samples_timestamp_V_7_7_q0, sample_sliding_window_buffer_samples_timestamp_V_5_7_q0, sample_sliding_window_buffer_samples_timestamp_V_3_7_q0, sample_sliding_window_buffer_samples_timestamp_V_1_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_7_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_7_q0;
        else 
            period_samples_7_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_7_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_7_q0, sample_sliding_window_buffer_samples_timestamp_V_28_7_q0, sample_sliding_window_buffer_samples_timestamp_V_26_7_q0, sample_sliding_window_buffer_samples_timestamp_V_24_7_q0, sample_sliding_window_buffer_samples_timestamp_V_22_7_q0, sample_sliding_window_buffer_samples_timestamp_V_20_7_q0, sample_sliding_window_buffer_samples_timestamp_V_18_7_q0, sample_sliding_window_buffer_samples_timestamp_V_16_7_q0, sample_sliding_window_buffer_samples_timestamp_V_14_7_q0, sample_sliding_window_buffer_samples_timestamp_V_12_7_q0, sample_sliding_window_buffer_samples_timestamp_V_10_7_q0, sample_sliding_window_buffer_samples_timestamp_V_8_7_q0, sample_sliding_window_buffer_samples_timestamp_V_6_7_q0, sample_sliding_window_buffer_samples_timestamp_V_4_7_q0, sample_sliding_window_buffer_samples_timestamp_V_2_7_q0, sample_sliding_window_buffer_samples_timestamp_V_0_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_7_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_7_q0;
        else 
            period_samples_7_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_7_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_7_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_7_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_7_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_7_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_7_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_8_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            period_samples_8_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_8_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_8_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_8_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_8_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_8_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_8_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_8_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_8_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_8_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_8_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_8_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_8_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_8_q0, sample_sliding_window_buffer_samples_sample_V_29_8_q0, sample_sliding_window_buffer_samples_sample_V_27_8_q0, sample_sliding_window_buffer_samples_sample_V_25_8_q0, sample_sliding_window_buffer_samples_sample_V_23_8_q0, sample_sliding_window_buffer_samples_sample_V_21_8_q0, sample_sliding_window_buffer_samples_sample_V_19_8_q0, sample_sliding_window_buffer_samples_sample_V_17_8_q0, sample_sliding_window_buffer_samples_sample_V_15_8_q0, sample_sliding_window_buffer_samples_sample_V_13_8_q0, sample_sliding_window_buffer_samples_sample_V_11_8_q0, sample_sliding_window_buffer_samples_sample_V_9_8_q0, sample_sliding_window_buffer_samples_sample_V_7_8_q0, sample_sliding_window_buffer_samples_sample_V_5_8_q0, sample_sliding_window_buffer_samples_sample_V_3_8_q0, sample_sliding_window_buffer_samples_sample_V_1_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_8_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_8_q0;
        else 
            period_samples_8_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_8_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_8_q0, sample_sliding_window_buffer_samples_sample_V_28_8_q0, sample_sliding_window_buffer_samples_sample_V_26_8_q0, sample_sliding_window_buffer_samples_sample_V_24_8_q0, sample_sliding_window_buffer_samples_sample_V_22_8_q0, sample_sliding_window_buffer_samples_sample_V_20_8_q0, sample_sliding_window_buffer_samples_sample_V_18_8_q0, sample_sliding_window_buffer_samples_sample_V_16_8_q0, sample_sliding_window_buffer_samples_sample_V_14_8_q0, sample_sliding_window_buffer_samples_sample_V_12_8_q0, sample_sliding_window_buffer_samples_sample_V_10_8_q0, sample_sliding_window_buffer_samples_sample_V_8_8_q0, sample_sliding_window_buffer_samples_sample_V_6_8_q0, sample_sliding_window_buffer_samples_sample_V_4_8_q0, sample_sliding_window_buffer_samples_sample_V_2_8_q0, sample_sliding_window_buffer_samples_sample_V_0_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_8_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_8_q0;
        else 
            period_samples_8_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_8_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_8_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_8_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_8_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_8_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_8_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_8_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            period_samples_8_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_8_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_8_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_8_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_8_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_8_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_8_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_8_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_8_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_8_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_8_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_8_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_8_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_8_q0, sample_sliding_window_buffer_samples_timestamp_V_29_8_q0, sample_sliding_window_buffer_samples_timestamp_V_27_8_q0, sample_sliding_window_buffer_samples_timestamp_V_25_8_q0, sample_sliding_window_buffer_samples_timestamp_V_23_8_q0, sample_sliding_window_buffer_samples_timestamp_V_21_8_q0, sample_sliding_window_buffer_samples_timestamp_V_19_8_q0, sample_sliding_window_buffer_samples_timestamp_V_17_8_q0, sample_sliding_window_buffer_samples_timestamp_V_15_8_q0, sample_sliding_window_buffer_samples_timestamp_V_13_8_q0, sample_sliding_window_buffer_samples_timestamp_V_11_8_q0, sample_sliding_window_buffer_samples_timestamp_V_9_8_q0, sample_sliding_window_buffer_samples_timestamp_V_7_8_q0, sample_sliding_window_buffer_samples_timestamp_V_5_8_q0, sample_sliding_window_buffer_samples_timestamp_V_3_8_q0, sample_sliding_window_buffer_samples_timestamp_V_1_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_8_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_8_q0;
        else 
            period_samples_8_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_8_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_8_q0, sample_sliding_window_buffer_samples_timestamp_V_28_8_q0, sample_sliding_window_buffer_samples_timestamp_V_26_8_q0, sample_sliding_window_buffer_samples_timestamp_V_24_8_q0, sample_sliding_window_buffer_samples_timestamp_V_22_8_q0, sample_sliding_window_buffer_samples_timestamp_V_20_8_q0, sample_sliding_window_buffer_samples_timestamp_V_18_8_q0, sample_sliding_window_buffer_samples_timestamp_V_16_8_q0, sample_sliding_window_buffer_samples_timestamp_V_14_8_q0, sample_sliding_window_buffer_samples_timestamp_V_12_8_q0, sample_sliding_window_buffer_samples_timestamp_V_10_8_q0, sample_sliding_window_buffer_samples_timestamp_V_8_8_q0, sample_sliding_window_buffer_samples_timestamp_V_6_8_q0, sample_sliding_window_buffer_samples_timestamp_V_4_8_q0, sample_sliding_window_buffer_samples_timestamp_V_2_8_q0, sample_sliding_window_buffer_samples_timestamp_V_0_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_8_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_8_q0;
        else 
            period_samples_8_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_8_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_8_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_8_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_8_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_8_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_8_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_9_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            period_samples_9_sample_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_9_sample_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_9_sample_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_9_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_9_sample_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_9_sample_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_9_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_9_sample_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_9_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_9_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_9_sample_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_9_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_9_sample_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_31_9_q0, sample_sliding_window_buffer_samples_sample_V_29_9_q0, sample_sliding_window_buffer_samples_sample_V_27_9_q0, sample_sliding_window_buffer_samples_sample_V_25_9_q0, sample_sliding_window_buffer_samples_sample_V_23_9_q0, sample_sliding_window_buffer_samples_sample_V_21_9_q0, sample_sliding_window_buffer_samples_sample_V_19_9_q0, sample_sliding_window_buffer_samples_sample_V_17_9_q0, sample_sliding_window_buffer_samples_sample_V_15_9_q0, sample_sliding_window_buffer_samples_sample_V_13_9_q0, sample_sliding_window_buffer_samples_sample_V_11_9_q0, sample_sliding_window_buffer_samples_sample_V_9_9_q0, sample_sliding_window_buffer_samples_sample_V_7_9_q0, sample_sliding_window_buffer_samples_sample_V_5_9_q0, sample_sliding_window_buffer_samples_sample_V_3_9_q0, sample_sliding_window_buffer_samples_sample_V_1_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_31_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_29_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_27_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_25_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_23_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_21_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_19_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_17_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_15_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_13_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_11_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_9_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_7_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_5_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_3_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_9_sample_V_d0 <= sample_sliding_window_buffer_samples_sample_V_1_9_q0;
        else 
            period_samples_9_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_9_sample_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_sample_V_30_9_q0, sample_sliding_window_buffer_samples_sample_V_28_9_q0, sample_sliding_window_buffer_samples_sample_V_26_9_q0, sample_sliding_window_buffer_samples_sample_V_24_9_q0, sample_sliding_window_buffer_samples_sample_V_22_9_q0, sample_sliding_window_buffer_samples_sample_V_20_9_q0, sample_sliding_window_buffer_samples_sample_V_18_9_q0, sample_sliding_window_buffer_samples_sample_V_16_9_q0, sample_sliding_window_buffer_samples_sample_V_14_9_q0, sample_sliding_window_buffer_samples_sample_V_12_9_q0, sample_sliding_window_buffer_samples_sample_V_10_9_q0, sample_sliding_window_buffer_samples_sample_V_8_9_q0, sample_sliding_window_buffer_samples_sample_V_6_9_q0, sample_sliding_window_buffer_samples_sample_V_4_9_q0, sample_sliding_window_buffer_samples_sample_V_2_9_q0, sample_sliding_window_buffer_samples_sample_V_0_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_30_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_28_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_26_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_24_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_22_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_20_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_18_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_16_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_14_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_12_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_10_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_8_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_6_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_4_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_2_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_9_sample_V_d1 <= sample_sliding_window_buffer_samples_sample_V_0_9_q0;
        else 
            period_samples_9_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_9_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_9_sample_V_we0 <= ap_const_logic_1;
        else 
            period_samples_9_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_9_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_9_sample_V_we1 <= ap_const_logic_1;
        else 
            period_samples_9_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_9_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, zext_ln40_reg_28311, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            period_samples_9_timestamp_V_address0 <= zext_ln40_reg_28311(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_9_timestamp_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            period_samples_9_timestamp_V_address0 <= "XXXXX";
        end if; 
    end process;


    period_samples_9_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_9_timestamp_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            period_samples_9_timestamp_V_address1 <= "XXXXX";
        end if; 
    end process;


    period_samples_9_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_9_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            period_samples_9_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_9_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_9_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            period_samples_9_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_9_timestamp_V_d0_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_31_9_q0, sample_sliding_window_buffer_samples_timestamp_V_29_9_q0, sample_sliding_window_buffer_samples_timestamp_V_27_9_q0, sample_sliding_window_buffer_samples_timestamp_V_25_9_q0, sample_sliding_window_buffer_samples_timestamp_V_23_9_q0, sample_sliding_window_buffer_samples_timestamp_V_21_9_q0, sample_sliding_window_buffer_samples_timestamp_V_19_9_q0, sample_sliding_window_buffer_samples_timestamp_V_17_9_q0, sample_sliding_window_buffer_samples_timestamp_V_15_9_q0, sample_sliding_window_buffer_samples_timestamp_V_13_9_q0, sample_sliding_window_buffer_samples_timestamp_V_11_9_q0, sample_sliding_window_buffer_samples_timestamp_V_9_9_q0, sample_sliding_window_buffer_samples_timestamp_V_7_9_q0, sample_sliding_window_buffer_samples_timestamp_V_5_9_q0, sample_sliding_window_buffer_samples_timestamp_V_3_9_q0, sample_sliding_window_buffer_samples_timestamp_V_1_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_31_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_29_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_27_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_25_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_23_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_21_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_19_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_17_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_15_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_13_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_11_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_9_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_7_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_5_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_3_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_9_timestamp_V_d0 <= sample_sliding_window_buffer_samples_timestamp_V_1_9_q0;
        else 
            period_samples_9_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_9_timestamp_V_d1_assign_proc : process(sample_sliding_window_buffer_samples_timestamp_V_30_9_q0, sample_sliding_window_buffer_samples_timestamp_V_28_9_q0, sample_sliding_window_buffer_samples_timestamp_V_26_9_q0, sample_sliding_window_buffer_samples_timestamp_V_24_9_q0, sample_sliding_window_buffer_samples_timestamp_V_22_9_q0, sample_sliding_window_buffer_samples_timestamp_V_20_9_q0, sample_sliding_window_buffer_samples_timestamp_V_18_9_q0, sample_sliding_window_buffer_samples_timestamp_V_16_9_q0, sample_sliding_window_buffer_samples_timestamp_V_14_9_q0, sample_sliding_window_buffer_samples_timestamp_V_12_9_q0, sample_sliding_window_buffer_samples_timestamp_V_10_9_q0, sample_sliding_window_buffer_samples_timestamp_V_8_9_q0, sample_sliding_window_buffer_samples_timestamp_V_6_9_q0, sample_sliding_window_buffer_samples_timestamp_V_4_9_q0, sample_sliding_window_buffer_samples_timestamp_V_2_9_q0, sample_sliding_window_buffer_samples_timestamp_V_0_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_30_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_28_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_26_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_24_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_22_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_20_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_18_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_16_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_14_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_12_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_10_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_8_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_6_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_4_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_2_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            period_samples_9_timestamp_V_d1 <= sample_sliding_window_buffer_samples_timestamp_V_0_9_q0;
        else 
            period_samples_9_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    period_samples_9_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_9_timestamp_V_we0 <= ap_const_logic_1;
        else 
            period_samples_9_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    period_samples_9_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            period_samples_9_timestamp_V_we1 <= ap_const_logic_1;
        else 
            period_samples_9_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state25, k_cast_fu_19682_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_sample_V_address0 <= k_cast_fu_19682_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sample_sample_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sample_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sample_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sample_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sample_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sample_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_sample_V_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sample_sample_V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sample_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sample_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sample_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sample_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sample_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_sample_V_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sample_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            sample_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, period_samples_1_sample_V_q0, period_samples_3_sample_V_q0, period_samples_5_sample_V_q0, period_samples_7_sample_V_q0, period_samples_9_sample_V_q0, period_samples_11_sample_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sample_sample_V_d0 <= period_samples_11_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sample_sample_V_d0 <= period_samples_9_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sample_sample_V_d0 <= period_samples_7_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sample_sample_V_d0 <= period_samples_5_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sample_sample_V_d0 <= period_samples_3_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sample_sample_V_d0 <= period_samples_1_sample_V_q0;
        else 
            sample_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_sample_V_d1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, period_samples_0_sample_V_q0, period_samples_2_sample_V_q0, period_samples_4_sample_V_q0, period_samples_6_sample_V_q0, period_samples_8_sample_V_q0, period_samples_10_sample_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sample_sample_V_d1 <= period_samples_10_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sample_sample_V_d1 <= period_samples_8_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sample_sample_V_d1 <= period_samples_6_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sample_sample_V_d1 <= period_samples_4_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sample_sample_V_d1 <= period_samples_2_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sample_sample_V_d1 <= period_samples_0_sample_V_q0;
        else 
            sample_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_sample_V_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            sample_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_we1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            sample_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_count_s_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_count_s_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_count_s_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_count_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_0_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_10_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_11_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_1_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_2_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_3_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_4_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_5_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_6_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_7_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_8_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_0_9_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_0_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_10_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_10_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_10_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_10_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_11_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_11_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_sample_V_11_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_11_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_10_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_11_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_8_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_12_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_12_9_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_12_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_12_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_10_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_11_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_8_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_13_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_13_9_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_sample_V_13_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_13_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_10_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_11_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_3_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_4_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_5_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_6_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_7_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_8_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_14_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_14_9_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_14_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_14_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_10_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_11_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_3_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_4_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_5_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_6_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_7_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_8_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_15_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_15_9_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_sample_V_15_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_15_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_10_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_11_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_4_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_5_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_6_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_7_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_8_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_16_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_16_9_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_16_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_16_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_10_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_11_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_4_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_5_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_6_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_7_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_8_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_17_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_17_9_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_sample_V_17_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_17_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_0_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_10_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_11_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_1_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_3_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_4_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_5_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_6_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_7_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_8_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_18_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_18_9_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_18_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_18_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_0_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_10_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_11_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_1_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_3_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_4_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_5_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_6_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_7_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_8_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_19_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_19_9_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_sample_V_19_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_19_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_0_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_10_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_11_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_1_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_2_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_3_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_4_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_5_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_6_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_7_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_8_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_1_9_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_1_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_10_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_11_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_2_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_3_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_4_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_5_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_6_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_7_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_8_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_20_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_20_9_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_20_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_20_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_10_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_11_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_2_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_3_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_4_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_5_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_6_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_7_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_8_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_21_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_21_9_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_sample_V_21_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_21_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_0_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_10_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_11_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_2_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_3_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_4_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_5_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_6_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_7_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_8_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_22_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_22_9_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_22_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_22_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_0_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_10_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_11_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_2_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_3_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_4_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_5_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_6_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_7_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_8_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_23_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_23_9_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_sample_V_23_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_23_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_0_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_10_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_11_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_3_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_4_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_5_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_7_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_8_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_24_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_24_9_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_24_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_24_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_0_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_10_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_11_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_3_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_4_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_5_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_7_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_8_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_25_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_25_9_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_sample_V_25_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_25_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_0_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_10_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_11_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_2_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_3_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_4_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_5_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_6_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_7_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_8_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_26_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_26_9_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_26_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_26_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_0_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_10_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_11_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_2_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_3_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_4_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_5_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_6_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_7_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_8_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_27_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_27_9_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_sample_V_27_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_27_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_0_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_10_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_11_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_1_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_2_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_3_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_4_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_5_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_6_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_7_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_8_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_28_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_28_9_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_28_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_28_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_0_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_10_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_11_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_1_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_2_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_3_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_4_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_5_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_6_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_7_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_8_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_29_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_29_9_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_sample_V_29_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_29_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_2_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_2_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_0_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_10_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_11_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_1_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_2_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_3_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_4_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_5_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_6_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_7_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_8_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_30_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_30_9_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_30_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_30_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_0_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_10_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_11_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_1_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_2_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_3_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_4_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_5_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_6_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_7_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_8_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_31_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_31_9_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_sample_V_31_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_31_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_3_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_3_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_4_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_4_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_5_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_5_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_6_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_6_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_7_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_7_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_8_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_8_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_8_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_8_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_sample_V_9_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_sample_V_9_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_sample_V_9_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_sample_V_9_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_0_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_10_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_11_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_1_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_2_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_3_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_4_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_5_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_6_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_7_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_8_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_0_9_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_0_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_0_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_10_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_10_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_10_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_10_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_11_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_11_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_sliding_window_buffer_samples_timestamp_V_11_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_11_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_10_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_11_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_8_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_12_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_12_9_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_12_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_12_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_10_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_11_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_8_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_13_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_13_9_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_sliding_window_buffer_samples_timestamp_V_13_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_13_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_10_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_11_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_3_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_4_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_5_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_6_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_7_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_8_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_14_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_14_9_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_14_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_14_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_10_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_11_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_3_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_4_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_5_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_6_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_7_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_8_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_15_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_15_9_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sliding_window_buffer_samples_timestamp_V_15_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_15_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_10_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_11_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_4_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_5_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_6_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_7_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_8_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_16_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_16_9_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_16_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_16_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_10_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_11_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_4_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_5_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_6_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_7_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_8_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_17_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_17_9_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sliding_window_buffer_samples_timestamp_V_17_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_17_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_0_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_10_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_11_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_1_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_3_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_4_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_5_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_6_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_7_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_8_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_18_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_18_9_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_18_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_18_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_0_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_10_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_11_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_1_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_3_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_4_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_5_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_6_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_7_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_8_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_19_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_19_9_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sliding_window_buffer_samples_timestamp_V_19_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_19_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_0_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_10_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_11_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_1_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_2_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_3_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_4_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_5_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_6_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_7_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_8_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_1_9_address0 <= zext_ln34_fu_19524_p1(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_1_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sample_sliding_window_buffer_samples_timestamp_V_1_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_10_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_11_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_2_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_3_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_4_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_5_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_6_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_7_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_8_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_20_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_20_9_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_20_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_20_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_0_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_10_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_11_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_2_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_3_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_4_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_5_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_6_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_7_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_8_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_21_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_21_9_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sliding_window_buffer_samples_timestamp_V_21_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_21_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_0_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_10_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_11_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_2_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_3_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_4_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_5_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_6_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_7_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_8_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_22_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_22_9_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_22_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_22_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_0_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_10_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_11_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_2_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_3_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_4_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_5_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_6_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_7_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_8_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_23_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_23_9_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sliding_window_buffer_samples_timestamp_V_23_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_23_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_0_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_10_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_11_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_3_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_4_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_5_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_7_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_8_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_24_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_24_9_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_24_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_24_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_0_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_10_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_11_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_3_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_4_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_5_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_7_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_8_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_25_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_25_9_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sliding_window_buffer_samples_timestamp_V_25_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_25_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_0_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_10_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_11_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_2_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_3_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_4_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_5_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_6_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_7_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_8_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_26_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_26_9_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_26_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_26_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_0_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_10_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_11_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_2_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_3_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_4_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_5_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_6_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_7_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_8_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_27_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_27_9_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sample_sliding_window_buffer_samples_timestamp_V_27_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_27_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_0_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_10_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_11_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_1_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_2_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_3_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_4_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_5_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_6_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_7_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_8_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_28_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_28_9_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_28_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_28_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_0_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_10_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_11_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_1_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_2_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_3_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_4_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_5_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_6_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_7_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_8_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_29_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_29_9_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sample_sliding_window_buffer_samples_timestamp_V_29_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_29_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_2_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_2_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_2_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_0_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_10_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_11_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_1_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_2_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_3_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_4_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_5_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_6_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_7_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_8_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_30_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_30_9_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_30_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_30_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_0_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_10_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_11_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_1_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_2_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_3_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_4_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_5_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_6_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_7_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_8_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_31_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_31_9_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sample_sliding_window_buffer_samples_timestamp_V_31_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_31_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_3_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_3_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_sliding_window_buffer_samples_timestamp_V_3_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_4_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_4_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_4_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_5_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_5_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_sliding_window_buffer_samples_timestamp_V_5_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_5_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_6_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_6_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_6_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_6_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_7_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_7_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_sliding_window_buffer_samples_timestamp_V_7_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_7_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_8_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_8_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_8_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_8_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_0_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_0_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_10_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_10_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_11_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_11_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_1_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_1_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_2_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_2_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_3_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_3_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_4_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_4_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_5_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_5_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_6_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_6_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_7_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_7_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_8_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_8_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_sliding_window_buffer_samples_timestamp_V_9_9_address0 <= zext_ln34_reg_23717(5 - 1 downto 0);

    sample_sliding_window_buffer_samples_timestamp_V_9_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_sliding_window_buffer_samples_timestamp_V_9_9_ce0 <= ap_const_logic_1;
        else 
            sample_sliding_window_buffer_samples_timestamp_V_9_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state25, k_cast_fu_19682_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_timestamp_V_address0 <= k_cast_fu_19682_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sample_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            sample_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, period_samples_1_timestamp_V_q0, period_samples_3_timestamp_V_q0, period_samples_5_timestamp_V_q0, period_samples_7_timestamp_V_q0, period_samples_9_timestamp_V_q0, period_samples_11_timestamp_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sample_timestamp_V_d0 <= period_samples_11_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sample_timestamp_V_d0 <= period_samples_9_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sample_timestamp_V_d0 <= period_samples_7_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sample_timestamp_V_d0 <= period_samples_5_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sample_timestamp_V_d0 <= period_samples_3_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sample_timestamp_V_d0 <= period_samples_1_timestamp_V_q0;
        else 
            sample_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_timestamp_V_d1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, period_samples_0_timestamp_V_q0, period_samples_2_timestamp_V_q0, period_samples_4_timestamp_V_q0, period_samples_6_timestamp_V_q0, period_samples_8_timestamp_V_q0, period_samples_10_timestamp_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sample_timestamp_V_d1 <= period_samples_10_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sample_timestamp_V_d1 <= period_samples_8_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sample_timestamp_V_d1 <= period_samples_6_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sample_timestamp_V_d1 <= period_samples_4_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sample_timestamp_V_d1 <= period_samples_2_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sample_timestamp_V_d1 <= period_samples_0_timestamp_V_q0;
        else 
            sample_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            sample_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            sample_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    samples_buffer_out_address0 <= zext_ln244_fu_19718_p1(13 - 1 downto 0);

    samples_buffer_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            samples_buffer_out_ce0 <= ap_const_logic_1;
        else 
            samples_buffer_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_buffer_out_d0 <= (sample_timestamp_V_q0 & sample_sample_V_q0);

    samples_buffer_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln236_reg_28470, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln236_reg_28470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            samples_buffer_out_we0 <= ap_const_logic_1;
        else 
            samples_buffer_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln34_fu_19607_p3 <= 
        ap_const_lv5_1F when (icmp_ln34_fu_19601_p2(0) = '1') else 
        trunc_ln229_fu_19592_p1;
        sext_ln222_fu_19444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_fu_19436_p3),32));

        sext_ln229_fu_19651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln229_fu_19645_p2),32));

        sext_ln26_fu_19452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sample_sliding_window_front_ptr_s),32));

    shl_ln229_1_fu_19634_p3 <= (period_count_s_reg_28287 & ap_const_lv2_0);
    shl_ln_fu_19623_p3 <= (period_count_s_reg_28287 & ap_const_lv4_0);
    sub_ln229_fu_19645_p2 <= std_logic_vector(unsigned(zext_ln229_fu_19630_p1) - unsigned(zext_ln229_1_fu_19641_p1));
    tmp_1_fu_19495_p3 <= buffer_idx_fu_19480_p2(31 downto 31);
    tmp_fu_19472_p3 <= i_3_reg_19368(31 downto 31);
    trunc_ln229_fu_19592_p1 <= j_reg_19378(5 - 1 downto 0);
    trunc_ln22_1_fu_19485_p1 <= buffer_idx_fu_19480_p2(5 - 1 downto 0);
    trunc_ln22_fu_19460_p1 <= sample_sliding_window_back_ptr_s(5 - 1 downto 0);
    zext_ln225_fu_19576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sample_sliding_window_buffer_count_s_q0),32));
    zext_ln229_1_fu_19641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln229_1_fu_19634_p3),11));
    zext_ln229_fu_19630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_19623_p3),11));
    zext_ln244_fu_19718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln244_1_fu_19713_p2),64));
    zext_ln34_fu_19524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_idx_3_fu_19517_p3),64));
    zext_ln40_fu_19615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_19607_p3),64));
end behav;
