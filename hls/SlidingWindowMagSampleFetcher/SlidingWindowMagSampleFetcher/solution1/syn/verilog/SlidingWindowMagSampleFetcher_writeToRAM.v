// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SlidingWindowMagSampleFetcher_writeToRAM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_out_address0,
        buffer_out_ce0,
        buffer_out_we0,
        buffer_out_d0,
        n_periods,
        sliding_window_front_ptr_s,
        sliding_window_back_ptr_s,
        sliding_window_buffer_count_s_address0,
        sliding_window_buffer_count_s_ce0,
        sliding_window_buffer_count_s_q0,
        sliding_window_buffer_samples_timestamp_V_9_11_address0,
        sliding_window_buffer_samples_timestamp_V_9_11_ce0,
        sliding_window_buffer_samples_timestamp_V_9_11_q0,
        sliding_window_buffer_samples_timestamp_V_9_10_address0,
        sliding_window_buffer_samples_timestamp_V_9_10_ce0,
        sliding_window_buffer_samples_timestamp_V_9_10_q0,
        sliding_window_buffer_samples_timestamp_V_9_9_address0,
        sliding_window_buffer_samples_timestamp_V_9_9_ce0,
        sliding_window_buffer_samples_timestamp_V_9_9_q0,
        sliding_window_buffer_samples_timestamp_V_9_8_address0,
        sliding_window_buffer_samples_timestamp_V_9_8_ce0,
        sliding_window_buffer_samples_timestamp_V_9_8_q0,
        sliding_window_buffer_samples_timestamp_V_9_7_address0,
        sliding_window_buffer_samples_timestamp_V_9_7_ce0,
        sliding_window_buffer_samples_timestamp_V_9_7_q0,
        sliding_window_buffer_samples_timestamp_V_9_6_address0,
        sliding_window_buffer_samples_timestamp_V_9_6_ce0,
        sliding_window_buffer_samples_timestamp_V_9_6_q0,
        sliding_window_buffer_samples_timestamp_V_9_5_address0,
        sliding_window_buffer_samples_timestamp_V_9_5_ce0,
        sliding_window_buffer_samples_timestamp_V_9_5_q0,
        sliding_window_buffer_samples_timestamp_V_9_4_address0,
        sliding_window_buffer_samples_timestamp_V_9_4_ce0,
        sliding_window_buffer_samples_timestamp_V_9_4_q0,
        sliding_window_buffer_samples_timestamp_V_9_3_address0,
        sliding_window_buffer_samples_timestamp_V_9_3_ce0,
        sliding_window_buffer_samples_timestamp_V_9_3_q0,
        sliding_window_buffer_samples_timestamp_V_9_2_address0,
        sliding_window_buffer_samples_timestamp_V_9_2_ce0,
        sliding_window_buffer_samples_timestamp_V_9_2_q0,
        sliding_window_buffer_samples_timestamp_V_9_1_address0,
        sliding_window_buffer_samples_timestamp_V_9_1_ce0,
        sliding_window_buffer_samples_timestamp_V_9_1_q0,
        sliding_window_buffer_samples_timestamp_V_9_0_address0,
        sliding_window_buffer_samples_timestamp_V_9_0_ce0,
        sliding_window_buffer_samples_timestamp_V_9_0_q0,
        sliding_window_buffer_samples_sample_V_9_11_address0,
        sliding_window_buffer_samples_sample_V_9_11_ce0,
        sliding_window_buffer_samples_sample_V_9_11_q0,
        sliding_window_buffer_samples_sample_V_9_10_address0,
        sliding_window_buffer_samples_sample_V_9_10_ce0,
        sliding_window_buffer_samples_sample_V_9_10_q0,
        sliding_window_buffer_samples_sample_V_9_9_address0,
        sliding_window_buffer_samples_sample_V_9_9_ce0,
        sliding_window_buffer_samples_sample_V_9_9_q0,
        sliding_window_buffer_samples_sample_V_9_8_address0,
        sliding_window_buffer_samples_sample_V_9_8_ce0,
        sliding_window_buffer_samples_sample_V_9_8_q0,
        sliding_window_buffer_samples_sample_V_9_7_address0,
        sliding_window_buffer_samples_sample_V_9_7_ce0,
        sliding_window_buffer_samples_sample_V_9_7_q0,
        sliding_window_buffer_samples_sample_V_9_6_address0,
        sliding_window_buffer_samples_sample_V_9_6_ce0,
        sliding_window_buffer_samples_sample_V_9_6_q0,
        sliding_window_buffer_samples_sample_V_9_5_address0,
        sliding_window_buffer_samples_sample_V_9_5_ce0,
        sliding_window_buffer_samples_sample_V_9_5_q0,
        sliding_window_buffer_samples_sample_V_9_4_address0,
        sliding_window_buffer_samples_sample_V_9_4_ce0,
        sliding_window_buffer_samples_sample_V_9_4_q0,
        sliding_window_buffer_samples_sample_V_9_3_address0,
        sliding_window_buffer_samples_sample_V_9_3_ce0,
        sliding_window_buffer_samples_sample_V_9_3_q0,
        sliding_window_buffer_samples_sample_V_9_2_address0,
        sliding_window_buffer_samples_sample_V_9_2_ce0,
        sliding_window_buffer_samples_sample_V_9_2_q0,
        sliding_window_buffer_samples_sample_V_9_1_address0,
        sliding_window_buffer_samples_sample_V_9_1_ce0,
        sliding_window_buffer_samples_sample_V_9_1_q0,
        sliding_window_buffer_samples_sample_V_9_0_address0,
        sliding_window_buffer_samples_sample_V_9_0_ce0,
        sliding_window_buffer_samples_sample_V_9_0_q0,
        sliding_window_buffer_samples_timestamp_V_8_11_address0,
        sliding_window_buffer_samples_timestamp_V_8_11_ce0,
        sliding_window_buffer_samples_timestamp_V_8_11_q0,
        sliding_window_buffer_samples_timestamp_V_8_10_address0,
        sliding_window_buffer_samples_timestamp_V_8_10_ce0,
        sliding_window_buffer_samples_timestamp_V_8_10_q0,
        sliding_window_buffer_samples_timestamp_V_8_9_address0,
        sliding_window_buffer_samples_timestamp_V_8_9_ce0,
        sliding_window_buffer_samples_timestamp_V_8_9_q0,
        sliding_window_buffer_samples_timestamp_V_8_8_address0,
        sliding_window_buffer_samples_timestamp_V_8_8_ce0,
        sliding_window_buffer_samples_timestamp_V_8_8_q0,
        sliding_window_buffer_samples_timestamp_V_8_7_address0,
        sliding_window_buffer_samples_timestamp_V_8_7_ce0,
        sliding_window_buffer_samples_timestamp_V_8_7_q0,
        sliding_window_buffer_samples_timestamp_V_8_6_address0,
        sliding_window_buffer_samples_timestamp_V_8_6_ce0,
        sliding_window_buffer_samples_timestamp_V_8_6_q0,
        sliding_window_buffer_samples_timestamp_V_8_5_address0,
        sliding_window_buffer_samples_timestamp_V_8_5_ce0,
        sliding_window_buffer_samples_timestamp_V_8_5_q0,
        sliding_window_buffer_samples_timestamp_V_8_4_address0,
        sliding_window_buffer_samples_timestamp_V_8_4_ce0,
        sliding_window_buffer_samples_timestamp_V_8_4_q0,
        sliding_window_buffer_samples_timestamp_V_8_3_address0,
        sliding_window_buffer_samples_timestamp_V_8_3_ce0,
        sliding_window_buffer_samples_timestamp_V_8_3_q0,
        sliding_window_buffer_samples_timestamp_V_8_2_address0,
        sliding_window_buffer_samples_timestamp_V_8_2_ce0,
        sliding_window_buffer_samples_timestamp_V_8_2_q0,
        sliding_window_buffer_samples_timestamp_V_8_1_address0,
        sliding_window_buffer_samples_timestamp_V_8_1_ce0,
        sliding_window_buffer_samples_timestamp_V_8_1_q0,
        sliding_window_buffer_samples_timestamp_V_8_0_address0,
        sliding_window_buffer_samples_timestamp_V_8_0_ce0,
        sliding_window_buffer_samples_timestamp_V_8_0_q0,
        sliding_window_buffer_samples_sample_V_8_11_address0,
        sliding_window_buffer_samples_sample_V_8_11_ce0,
        sliding_window_buffer_samples_sample_V_8_11_q0,
        sliding_window_buffer_samples_sample_V_8_10_address0,
        sliding_window_buffer_samples_sample_V_8_10_ce0,
        sliding_window_buffer_samples_sample_V_8_10_q0,
        sliding_window_buffer_samples_sample_V_8_9_address0,
        sliding_window_buffer_samples_sample_V_8_9_ce0,
        sliding_window_buffer_samples_sample_V_8_9_q0,
        sliding_window_buffer_samples_sample_V_8_8_address0,
        sliding_window_buffer_samples_sample_V_8_8_ce0,
        sliding_window_buffer_samples_sample_V_8_8_q0,
        sliding_window_buffer_samples_sample_V_8_7_address0,
        sliding_window_buffer_samples_sample_V_8_7_ce0,
        sliding_window_buffer_samples_sample_V_8_7_q0,
        sliding_window_buffer_samples_sample_V_8_6_address0,
        sliding_window_buffer_samples_sample_V_8_6_ce0,
        sliding_window_buffer_samples_sample_V_8_6_q0,
        sliding_window_buffer_samples_sample_V_8_5_address0,
        sliding_window_buffer_samples_sample_V_8_5_ce0,
        sliding_window_buffer_samples_sample_V_8_5_q0,
        sliding_window_buffer_samples_sample_V_8_4_address0,
        sliding_window_buffer_samples_sample_V_8_4_ce0,
        sliding_window_buffer_samples_sample_V_8_4_q0,
        sliding_window_buffer_samples_sample_V_8_3_address0,
        sliding_window_buffer_samples_sample_V_8_3_ce0,
        sliding_window_buffer_samples_sample_V_8_3_q0,
        sliding_window_buffer_samples_sample_V_8_2_address0,
        sliding_window_buffer_samples_sample_V_8_2_ce0,
        sliding_window_buffer_samples_sample_V_8_2_q0,
        sliding_window_buffer_samples_sample_V_8_1_address0,
        sliding_window_buffer_samples_sample_V_8_1_ce0,
        sliding_window_buffer_samples_sample_V_8_1_q0,
        sliding_window_buffer_samples_sample_V_8_0_address0,
        sliding_window_buffer_samples_sample_V_8_0_ce0,
        sliding_window_buffer_samples_sample_V_8_0_q0,
        sliding_window_buffer_samples_timestamp_V_7_11_address0,
        sliding_window_buffer_samples_timestamp_V_7_11_ce0,
        sliding_window_buffer_samples_timestamp_V_7_11_q0,
        sliding_window_buffer_samples_timestamp_V_7_10_address0,
        sliding_window_buffer_samples_timestamp_V_7_10_ce0,
        sliding_window_buffer_samples_timestamp_V_7_10_q0,
        sliding_window_buffer_samples_timestamp_V_7_9_address0,
        sliding_window_buffer_samples_timestamp_V_7_9_ce0,
        sliding_window_buffer_samples_timestamp_V_7_9_q0,
        sliding_window_buffer_samples_timestamp_V_7_8_address0,
        sliding_window_buffer_samples_timestamp_V_7_8_ce0,
        sliding_window_buffer_samples_timestamp_V_7_8_q0,
        sliding_window_buffer_samples_timestamp_V_7_7_address0,
        sliding_window_buffer_samples_timestamp_V_7_7_ce0,
        sliding_window_buffer_samples_timestamp_V_7_7_q0,
        sliding_window_buffer_samples_timestamp_V_7_6_address0,
        sliding_window_buffer_samples_timestamp_V_7_6_ce0,
        sliding_window_buffer_samples_timestamp_V_7_6_q0,
        sliding_window_buffer_samples_timestamp_V_7_5_address0,
        sliding_window_buffer_samples_timestamp_V_7_5_ce0,
        sliding_window_buffer_samples_timestamp_V_7_5_q0,
        sliding_window_buffer_samples_timestamp_V_7_4_address0,
        sliding_window_buffer_samples_timestamp_V_7_4_ce0,
        sliding_window_buffer_samples_timestamp_V_7_4_q0,
        sliding_window_buffer_samples_timestamp_V_7_3_address0,
        sliding_window_buffer_samples_timestamp_V_7_3_ce0,
        sliding_window_buffer_samples_timestamp_V_7_3_q0,
        sliding_window_buffer_samples_timestamp_V_7_2_address0,
        sliding_window_buffer_samples_timestamp_V_7_2_ce0,
        sliding_window_buffer_samples_timestamp_V_7_2_q0,
        sliding_window_buffer_samples_timestamp_V_7_1_address0,
        sliding_window_buffer_samples_timestamp_V_7_1_ce0,
        sliding_window_buffer_samples_timestamp_V_7_1_q0,
        sliding_window_buffer_samples_timestamp_V_7_0_address0,
        sliding_window_buffer_samples_timestamp_V_7_0_ce0,
        sliding_window_buffer_samples_timestamp_V_7_0_q0,
        sliding_window_buffer_samples_sample_V_7_11_address0,
        sliding_window_buffer_samples_sample_V_7_11_ce0,
        sliding_window_buffer_samples_sample_V_7_11_q0,
        sliding_window_buffer_samples_sample_V_7_10_address0,
        sliding_window_buffer_samples_sample_V_7_10_ce0,
        sliding_window_buffer_samples_sample_V_7_10_q0,
        sliding_window_buffer_samples_sample_V_7_9_address0,
        sliding_window_buffer_samples_sample_V_7_9_ce0,
        sliding_window_buffer_samples_sample_V_7_9_q0,
        sliding_window_buffer_samples_sample_V_7_8_address0,
        sliding_window_buffer_samples_sample_V_7_8_ce0,
        sliding_window_buffer_samples_sample_V_7_8_q0,
        sliding_window_buffer_samples_sample_V_7_7_address0,
        sliding_window_buffer_samples_sample_V_7_7_ce0,
        sliding_window_buffer_samples_sample_V_7_7_q0,
        sliding_window_buffer_samples_sample_V_7_6_address0,
        sliding_window_buffer_samples_sample_V_7_6_ce0,
        sliding_window_buffer_samples_sample_V_7_6_q0,
        sliding_window_buffer_samples_sample_V_7_5_address0,
        sliding_window_buffer_samples_sample_V_7_5_ce0,
        sliding_window_buffer_samples_sample_V_7_5_q0,
        sliding_window_buffer_samples_sample_V_7_4_address0,
        sliding_window_buffer_samples_sample_V_7_4_ce0,
        sliding_window_buffer_samples_sample_V_7_4_q0,
        sliding_window_buffer_samples_sample_V_7_3_address0,
        sliding_window_buffer_samples_sample_V_7_3_ce0,
        sliding_window_buffer_samples_sample_V_7_3_q0,
        sliding_window_buffer_samples_sample_V_7_2_address0,
        sliding_window_buffer_samples_sample_V_7_2_ce0,
        sliding_window_buffer_samples_sample_V_7_2_q0,
        sliding_window_buffer_samples_sample_V_7_1_address0,
        sliding_window_buffer_samples_sample_V_7_1_ce0,
        sliding_window_buffer_samples_sample_V_7_1_q0,
        sliding_window_buffer_samples_sample_V_7_0_address0,
        sliding_window_buffer_samples_sample_V_7_0_ce0,
        sliding_window_buffer_samples_sample_V_7_0_q0,
        sliding_window_buffer_samples_timestamp_V_6_11_address0,
        sliding_window_buffer_samples_timestamp_V_6_11_ce0,
        sliding_window_buffer_samples_timestamp_V_6_11_q0,
        sliding_window_buffer_samples_timestamp_V_6_10_address0,
        sliding_window_buffer_samples_timestamp_V_6_10_ce0,
        sliding_window_buffer_samples_timestamp_V_6_10_q0,
        sliding_window_buffer_samples_timestamp_V_6_9_address0,
        sliding_window_buffer_samples_timestamp_V_6_9_ce0,
        sliding_window_buffer_samples_timestamp_V_6_9_q0,
        sliding_window_buffer_samples_timestamp_V_6_8_address0,
        sliding_window_buffer_samples_timestamp_V_6_8_ce0,
        sliding_window_buffer_samples_timestamp_V_6_8_q0,
        sliding_window_buffer_samples_timestamp_V_6_7_address0,
        sliding_window_buffer_samples_timestamp_V_6_7_ce0,
        sliding_window_buffer_samples_timestamp_V_6_7_q0,
        sliding_window_buffer_samples_timestamp_V_6_6_address0,
        sliding_window_buffer_samples_timestamp_V_6_6_ce0,
        sliding_window_buffer_samples_timestamp_V_6_6_q0,
        sliding_window_buffer_samples_timestamp_V_6_5_address0,
        sliding_window_buffer_samples_timestamp_V_6_5_ce0,
        sliding_window_buffer_samples_timestamp_V_6_5_q0,
        sliding_window_buffer_samples_timestamp_V_6_4_address0,
        sliding_window_buffer_samples_timestamp_V_6_4_ce0,
        sliding_window_buffer_samples_timestamp_V_6_4_q0,
        sliding_window_buffer_samples_timestamp_V_6_3_address0,
        sliding_window_buffer_samples_timestamp_V_6_3_ce0,
        sliding_window_buffer_samples_timestamp_V_6_3_q0,
        sliding_window_buffer_samples_timestamp_V_6_2_address0,
        sliding_window_buffer_samples_timestamp_V_6_2_ce0,
        sliding_window_buffer_samples_timestamp_V_6_2_q0,
        sliding_window_buffer_samples_timestamp_V_6_1_address0,
        sliding_window_buffer_samples_timestamp_V_6_1_ce0,
        sliding_window_buffer_samples_timestamp_V_6_1_q0,
        sliding_window_buffer_samples_timestamp_V_6_0_address0,
        sliding_window_buffer_samples_timestamp_V_6_0_ce0,
        sliding_window_buffer_samples_timestamp_V_6_0_q0,
        sliding_window_buffer_samples_sample_V_6_11_address0,
        sliding_window_buffer_samples_sample_V_6_11_ce0,
        sliding_window_buffer_samples_sample_V_6_11_q0,
        sliding_window_buffer_samples_sample_V_6_10_address0,
        sliding_window_buffer_samples_sample_V_6_10_ce0,
        sliding_window_buffer_samples_sample_V_6_10_q0,
        sliding_window_buffer_samples_sample_V_6_9_address0,
        sliding_window_buffer_samples_sample_V_6_9_ce0,
        sliding_window_buffer_samples_sample_V_6_9_q0,
        sliding_window_buffer_samples_sample_V_6_8_address0,
        sliding_window_buffer_samples_sample_V_6_8_ce0,
        sliding_window_buffer_samples_sample_V_6_8_q0,
        sliding_window_buffer_samples_sample_V_6_7_address0,
        sliding_window_buffer_samples_sample_V_6_7_ce0,
        sliding_window_buffer_samples_sample_V_6_7_q0,
        sliding_window_buffer_samples_sample_V_6_6_address0,
        sliding_window_buffer_samples_sample_V_6_6_ce0,
        sliding_window_buffer_samples_sample_V_6_6_q0,
        sliding_window_buffer_samples_sample_V_6_5_address0,
        sliding_window_buffer_samples_sample_V_6_5_ce0,
        sliding_window_buffer_samples_sample_V_6_5_q0,
        sliding_window_buffer_samples_sample_V_6_4_address0,
        sliding_window_buffer_samples_sample_V_6_4_ce0,
        sliding_window_buffer_samples_sample_V_6_4_q0,
        sliding_window_buffer_samples_sample_V_6_3_address0,
        sliding_window_buffer_samples_sample_V_6_3_ce0,
        sliding_window_buffer_samples_sample_V_6_3_q0,
        sliding_window_buffer_samples_sample_V_6_2_address0,
        sliding_window_buffer_samples_sample_V_6_2_ce0,
        sliding_window_buffer_samples_sample_V_6_2_q0,
        sliding_window_buffer_samples_sample_V_6_1_address0,
        sliding_window_buffer_samples_sample_V_6_1_ce0,
        sliding_window_buffer_samples_sample_V_6_1_q0,
        sliding_window_buffer_samples_sample_V_6_0_address0,
        sliding_window_buffer_samples_sample_V_6_0_ce0,
        sliding_window_buffer_samples_sample_V_6_0_q0,
        sliding_window_buffer_samples_timestamp_V_5_11_address0,
        sliding_window_buffer_samples_timestamp_V_5_11_ce0,
        sliding_window_buffer_samples_timestamp_V_5_11_q0,
        sliding_window_buffer_samples_timestamp_V_5_10_address0,
        sliding_window_buffer_samples_timestamp_V_5_10_ce0,
        sliding_window_buffer_samples_timestamp_V_5_10_q0,
        sliding_window_buffer_samples_timestamp_V_5_9_address0,
        sliding_window_buffer_samples_timestamp_V_5_9_ce0,
        sliding_window_buffer_samples_timestamp_V_5_9_q0,
        sliding_window_buffer_samples_timestamp_V_5_8_address0,
        sliding_window_buffer_samples_timestamp_V_5_8_ce0,
        sliding_window_buffer_samples_timestamp_V_5_8_q0,
        sliding_window_buffer_samples_timestamp_V_5_7_address0,
        sliding_window_buffer_samples_timestamp_V_5_7_ce0,
        sliding_window_buffer_samples_timestamp_V_5_7_q0,
        sliding_window_buffer_samples_timestamp_V_5_6_address0,
        sliding_window_buffer_samples_timestamp_V_5_6_ce0,
        sliding_window_buffer_samples_timestamp_V_5_6_q0,
        sliding_window_buffer_samples_timestamp_V_5_5_address0,
        sliding_window_buffer_samples_timestamp_V_5_5_ce0,
        sliding_window_buffer_samples_timestamp_V_5_5_q0,
        sliding_window_buffer_samples_timestamp_V_5_4_address0,
        sliding_window_buffer_samples_timestamp_V_5_4_ce0,
        sliding_window_buffer_samples_timestamp_V_5_4_q0,
        sliding_window_buffer_samples_timestamp_V_5_3_address0,
        sliding_window_buffer_samples_timestamp_V_5_3_ce0,
        sliding_window_buffer_samples_timestamp_V_5_3_q0,
        sliding_window_buffer_samples_timestamp_V_5_2_address0,
        sliding_window_buffer_samples_timestamp_V_5_2_ce0,
        sliding_window_buffer_samples_timestamp_V_5_2_q0,
        sliding_window_buffer_samples_timestamp_V_5_1_address0,
        sliding_window_buffer_samples_timestamp_V_5_1_ce0,
        sliding_window_buffer_samples_timestamp_V_5_1_q0,
        sliding_window_buffer_samples_timestamp_V_5_0_address0,
        sliding_window_buffer_samples_timestamp_V_5_0_ce0,
        sliding_window_buffer_samples_timestamp_V_5_0_q0,
        sliding_window_buffer_samples_sample_V_5_11_address0,
        sliding_window_buffer_samples_sample_V_5_11_ce0,
        sliding_window_buffer_samples_sample_V_5_11_q0,
        sliding_window_buffer_samples_sample_V_5_10_address0,
        sliding_window_buffer_samples_sample_V_5_10_ce0,
        sliding_window_buffer_samples_sample_V_5_10_q0,
        sliding_window_buffer_samples_sample_V_5_9_address0,
        sliding_window_buffer_samples_sample_V_5_9_ce0,
        sliding_window_buffer_samples_sample_V_5_9_q0,
        sliding_window_buffer_samples_sample_V_5_8_address0,
        sliding_window_buffer_samples_sample_V_5_8_ce0,
        sliding_window_buffer_samples_sample_V_5_8_q0,
        sliding_window_buffer_samples_sample_V_5_7_address0,
        sliding_window_buffer_samples_sample_V_5_7_ce0,
        sliding_window_buffer_samples_sample_V_5_7_q0,
        sliding_window_buffer_samples_sample_V_5_6_address0,
        sliding_window_buffer_samples_sample_V_5_6_ce0,
        sliding_window_buffer_samples_sample_V_5_6_q0,
        sliding_window_buffer_samples_sample_V_5_5_address0,
        sliding_window_buffer_samples_sample_V_5_5_ce0,
        sliding_window_buffer_samples_sample_V_5_5_q0,
        sliding_window_buffer_samples_sample_V_5_4_address0,
        sliding_window_buffer_samples_sample_V_5_4_ce0,
        sliding_window_buffer_samples_sample_V_5_4_q0,
        sliding_window_buffer_samples_sample_V_5_3_address0,
        sliding_window_buffer_samples_sample_V_5_3_ce0,
        sliding_window_buffer_samples_sample_V_5_3_q0,
        sliding_window_buffer_samples_sample_V_5_2_address0,
        sliding_window_buffer_samples_sample_V_5_2_ce0,
        sliding_window_buffer_samples_sample_V_5_2_q0,
        sliding_window_buffer_samples_sample_V_5_1_address0,
        sliding_window_buffer_samples_sample_V_5_1_ce0,
        sliding_window_buffer_samples_sample_V_5_1_q0,
        sliding_window_buffer_samples_sample_V_5_0_address0,
        sliding_window_buffer_samples_sample_V_5_0_ce0,
        sliding_window_buffer_samples_sample_V_5_0_q0,
        sliding_window_buffer_samples_timestamp_V_4_11_address0,
        sliding_window_buffer_samples_timestamp_V_4_11_ce0,
        sliding_window_buffer_samples_timestamp_V_4_11_q0,
        sliding_window_buffer_samples_timestamp_V_4_10_address0,
        sliding_window_buffer_samples_timestamp_V_4_10_ce0,
        sliding_window_buffer_samples_timestamp_V_4_10_q0,
        sliding_window_buffer_samples_timestamp_V_4_9_address0,
        sliding_window_buffer_samples_timestamp_V_4_9_ce0,
        sliding_window_buffer_samples_timestamp_V_4_9_q0,
        sliding_window_buffer_samples_timestamp_V_4_8_address0,
        sliding_window_buffer_samples_timestamp_V_4_8_ce0,
        sliding_window_buffer_samples_timestamp_V_4_8_q0,
        sliding_window_buffer_samples_timestamp_V_4_7_address0,
        sliding_window_buffer_samples_timestamp_V_4_7_ce0,
        sliding_window_buffer_samples_timestamp_V_4_7_q0,
        sliding_window_buffer_samples_timestamp_V_4_6_address0,
        sliding_window_buffer_samples_timestamp_V_4_6_ce0,
        sliding_window_buffer_samples_timestamp_V_4_6_q0,
        sliding_window_buffer_samples_timestamp_V_4_5_address0,
        sliding_window_buffer_samples_timestamp_V_4_5_ce0,
        sliding_window_buffer_samples_timestamp_V_4_5_q0,
        sliding_window_buffer_samples_timestamp_V_4_4_address0,
        sliding_window_buffer_samples_timestamp_V_4_4_ce0,
        sliding_window_buffer_samples_timestamp_V_4_4_q0,
        sliding_window_buffer_samples_timestamp_V_4_3_address0,
        sliding_window_buffer_samples_timestamp_V_4_3_ce0,
        sliding_window_buffer_samples_timestamp_V_4_3_q0,
        sliding_window_buffer_samples_timestamp_V_4_2_address0,
        sliding_window_buffer_samples_timestamp_V_4_2_ce0,
        sliding_window_buffer_samples_timestamp_V_4_2_q0,
        sliding_window_buffer_samples_timestamp_V_4_1_address0,
        sliding_window_buffer_samples_timestamp_V_4_1_ce0,
        sliding_window_buffer_samples_timestamp_V_4_1_q0,
        sliding_window_buffer_samples_timestamp_V_4_0_address0,
        sliding_window_buffer_samples_timestamp_V_4_0_ce0,
        sliding_window_buffer_samples_timestamp_V_4_0_q0,
        sliding_window_buffer_samples_sample_V_4_11_address0,
        sliding_window_buffer_samples_sample_V_4_11_ce0,
        sliding_window_buffer_samples_sample_V_4_11_q0,
        sliding_window_buffer_samples_sample_V_4_10_address0,
        sliding_window_buffer_samples_sample_V_4_10_ce0,
        sliding_window_buffer_samples_sample_V_4_10_q0,
        sliding_window_buffer_samples_sample_V_4_9_address0,
        sliding_window_buffer_samples_sample_V_4_9_ce0,
        sliding_window_buffer_samples_sample_V_4_9_q0,
        sliding_window_buffer_samples_sample_V_4_8_address0,
        sliding_window_buffer_samples_sample_V_4_8_ce0,
        sliding_window_buffer_samples_sample_V_4_8_q0,
        sliding_window_buffer_samples_sample_V_4_7_address0,
        sliding_window_buffer_samples_sample_V_4_7_ce0,
        sliding_window_buffer_samples_sample_V_4_7_q0,
        sliding_window_buffer_samples_sample_V_4_6_address0,
        sliding_window_buffer_samples_sample_V_4_6_ce0,
        sliding_window_buffer_samples_sample_V_4_6_q0,
        sliding_window_buffer_samples_sample_V_4_5_address0,
        sliding_window_buffer_samples_sample_V_4_5_ce0,
        sliding_window_buffer_samples_sample_V_4_5_q0,
        sliding_window_buffer_samples_sample_V_4_4_address0,
        sliding_window_buffer_samples_sample_V_4_4_ce0,
        sliding_window_buffer_samples_sample_V_4_4_q0,
        sliding_window_buffer_samples_sample_V_4_3_address0,
        sliding_window_buffer_samples_sample_V_4_3_ce0,
        sliding_window_buffer_samples_sample_V_4_3_q0,
        sliding_window_buffer_samples_sample_V_4_2_address0,
        sliding_window_buffer_samples_sample_V_4_2_ce0,
        sliding_window_buffer_samples_sample_V_4_2_q0,
        sliding_window_buffer_samples_sample_V_4_1_address0,
        sliding_window_buffer_samples_sample_V_4_1_ce0,
        sliding_window_buffer_samples_sample_V_4_1_q0,
        sliding_window_buffer_samples_sample_V_4_0_address0,
        sliding_window_buffer_samples_sample_V_4_0_ce0,
        sliding_window_buffer_samples_sample_V_4_0_q0,
        sliding_window_buffer_samples_timestamp_V_3_11_address0,
        sliding_window_buffer_samples_timestamp_V_3_11_ce0,
        sliding_window_buffer_samples_timestamp_V_3_11_q0,
        sliding_window_buffer_samples_timestamp_V_3_10_address0,
        sliding_window_buffer_samples_timestamp_V_3_10_ce0,
        sliding_window_buffer_samples_timestamp_V_3_10_q0,
        sliding_window_buffer_samples_timestamp_V_3_9_address0,
        sliding_window_buffer_samples_timestamp_V_3_9_ce0,
        sliding_window_buffer_samples_timestamp_V_3_9_q0,
        sliding_window_buffer_samples_timestamp_V_3_8_address0,
        sliding_window_buffer_samples_timestamp_V_3_8_ce0,
        sliding_window_buffer_samples_timestamp_V_3_8_q0,
        sliding_window_buffer_samples_timestamp_V_3_7_address0,
        sliding_window_buffer_samples_timestamp_V_3_7_ce0,
        sliding_window_buffer_samples_timestamp_V_3_7_q0,
        sliding_window_buffer_samples_timestamp_V_3_6_address0,
        sliding_window_buffer_samples_timestamp_V_3_6_ce0,
        sliding_window_buffer_samples_timestamp_V_3_6_q0,
        sliding_window_buffer_samples_timestamp_V_3_5_address0,
        sliding_window_buffer_samples_timestamp_V_3_5_ce0,
        sliding_window_buffer_samples_timestamp_V_3_5_q0,
        sliding_window_buffer_samples_timestamp_V_3_4_address0,
        sliding_window_buffer_samples_timestamp_V_3_4_ce0,
        sliding_window_buffer_samples_timestamp_V_3_4_q0,
        sliding_window_buffer_samples_timestamp_V_3_3_address0,
        sliding_window_buffer_samples_timestamp_V_3_3_ce0,
        sliding_window_buffer_samples_timestamp_V_3_3_q0,
        sliding_window_buffer_samples_timestamp_V_3_2_address0,
        sliding_window_buffer_samples_timestamp_V_3_2_ce0,
        sliding_window_buffer_samples_timestamp_V_3_2_q0,
        sliding_window_buffer_samples_timestamp_V_3_1_address0,
        sliding_window_buffer_samples_timestamp_V_3_1_ce0,
        sliding_window_buffer_samples_timestamp_V_3_1_q0,
        sliding_window_buffer_samples_timestamp_V_3_0_address0,
        sliding_window_buffer_samples_timestamp_V_3_0_ce0,
        sliding_window_buffer_samples_timestamp_V_3_0_q0,
        sliding_window_buffer_samples_sample_V_3_11_address0,
        sliding_window_buffer_samples_sample_V_3_11_ce0,
        sliding_window_buffer_samples_sample_V_3_11_q0,
        sliding_window_buffer_samples_sample_V_3_10_address0,
        sliding_window_buffer_samples_sample_V_3_10_ce0,
        sliding_window_buffer_samples_sample_V_3_10_q0,
        sliding_window_buffer_samples_sample_V_3_9_address0,
        sliding_window_buffer_samples_sample_V_3_9_ce0,
        sliding_window_buffer_samples_sample_V_3_9_q0,
        sliding_window_buffer_samples_sample_V_3_8_address0,
        sliding_window_buffer_samples_sample_V_3_8_ce0,
        sliding_window_buffer_samples_sample_V_3_8_q0,
        sliding_window_buffer_samples_sample_V_3_7_address0,
        sliding_window_buffer_samples_sample_V_3_7_ce0,
        sliding_window_buffer_samples_sample_V_3_7_q0,
        sliding_window_buffer_samples_sample_V_3_6_address0,
        sliding_window_buffer_samples_sample_V_3_6_ce0,
        sliding_window_buffer_samples_sample_V_3_6_q0,
        sliding_window_buffer_samples_sample_V_3_5_address0,
        sliding_window_buffer_samples_sample_V_3_5_ce0,
        sliding_window_buffer_samples_sample_V_3_5_q0,
        sliding_window_buffer_samples_sample_V_3_4_address0,
        sliding_window_buffer_samples_sample_V_3_4_ce0,
        sliding_window_buffer_samples_sample_V_3_4_q0,
        sliding_window_buffer_samples_sample_V_3_3_address0,
        sliding_window_buffer_samples_sample_V_3_3_ce0,
        sliding_window_buffer_samples_sample_V_3_3_q0,
        sliding_window_buffer_samples_sample_V_3_2_address0,
        sliding_window_buffer_samples_sample_V_3_2_ce0,
        sliding_window_buffer_samples_sample_V_3_2_q0,
        sliding_window_buffer_samples_sample_V_3_1_address0,
        sliding_window_buffer_samples_sample_V_3_1_ce0,
        sliding_window_buffer_samples_sample_V_3_1_q0,
        sliding_window_buffer_samples_sample_V_3_0_address0,
        sliding_window_buffer_samples_sample_V_3_0_ce0,
        sliding_window_buffer_samples_sample_V_3_0_q0,
        sliding_window_buffer_samples_timestamp_V_2_11_address0,
        sliding_window_buffer_samples_timestamp_V_2_11_ce0,
        sliding_window_buffer_samples_timestamp_V_2_11_q0,
        sliding_window_buffer_samples_timestamp_V_2_10_address0,
        sliding_window_buffer_samples_timestamp_V_2_10_ce0,
        sliding_window_buffer_samples_timestamp_V_2_10_q0,
        sliding_window_buffer_samples_timestamp_V_2_9_address0,
        sliding_window_buffer_samples_timestamp_V_2_9_ce0,
        sliding_window_buffer_samples_timestamp_V_2_9_q0,
        sliding_window_buffer_samples_timestamp_V_2_8_address0,
        sliding_window_buffer_samples_timestamp_V_2_8_ce0,
        sliding_window_buffer_samples_timestamp_V_2_8_q0,
        sliding_window_buffer_samples_timestamp_V_2_7_address0,
        sliding_window_buffer_samples_timestamp_V_2_7_ce0,
        sliding_window_buffer_samples_timestamp_V_2_7_q0,
        sliding_window_buffer_samples_timestamp_V_2_6_address0,
        sliding_window_buffer_samples_timestamp_V_2_6_ce0,
        sliding_window_buffer_samples_timestamp_V_2_6_q0,
        sliding_window_buffer_samples_timestamp_V_2_5_address0,
        sliding_window_buffer_samples_timestamp_V_2_5_ce0,
        sliding_window_buffer_samples_timestamp_V_2_5_q0,
        sliding_window_buffer_samples_timestamp_V_2_4_address0,
        sliding_window_buffer_samples_timestamp_V_2_4_ce0,
        sliding_window_buffer_samples_timestamp_V_2_4_q0,
        sliding_window_buffer_samples_timestamp_V_2_3_address0,
        sliding_window_buffer_samples_timestamp_V_2_3_ce0,
        sliding_window_buffer_samples_timestamp_V_2_3_q0,
        sliding_window_buffer_samples_timestamp_V_2_2_address0,
        sliding_window_buffer_samples_timestamp_V_2_2_ce0,
        sliding_window_buffer_samples_timestamp_V_2_2_q0,
        sliding_window_buffer_samples_timestamp_V_2_1_address0,
        sliding_window_buffer_samples_timestamp_V_2_1_ce0,
        sliding_window_buffer_samples_timestamp_V_2_1_q0,
        sliding_window_buffer_samples_timestamp_V_2_0_address0,
        sliding_window_buffer_samples_timestamp_V_2_0_ce0,
        sliding_window_buffer_samples_timestamp_V_2_0_q0,
        sliding_window_buffer_samples_sample_V_2_11_address0,
        sliding_window_buffer_samples_sample_V_2_11_ce0,
        sliding_window_buffer_samples_sample_V_2_11_q0,
        sliding_window_buffer_samples_sample_V_2_10_address0,
        sliding_window_buffer_samples_sample_V_2_10_ce0,
        sliding_window_buffer_samples_sample_V_2_10_q0,
        sliding_window_buffer_samples_sample_V_2_9_address0,
        sliding_window_buffer_samples_sample_V_2_9_ce0,
        sliding_window_buffer_samples_sample_V_2_9_q0,
        sliding_window_buffer_samples_sample_V_2_8_address0,
        sliding_window_buffer_samples_sample_V_2_8_ce0,
        sliding_window_buffer_samples_sample_V_2_8_q0,
        sliding_window_buffer_samples_sample_V_2_7_address0,
        sliding_window_buffer_samples_sample_V_2_7_ce0,
        sliding_window_buffer_samples_sample_V_2_7_q0,
        sliding_window_buffer_samples_sample_V_2_6_address0,
        sliding_window_buffer_samples_sample_V_2_6_ce0,
        sliding_window_buffer_samples_sample_V_2_6_q0,
        sliding_window_buffer_samples_sample_V_2_5_address0,
        sliding_window_buffer_samples_sample_V_2_5_ce0,
        sliding_window_buffer_samples_sample_V_2_5_q0,
        sliding_window_buffer_samples_sample_V_2_4_address0,
        sliding_window_buffer_samples_sample_V_2_4_ce0,
        sliding_window_buffer_samples_sample_V_2_4_q0,
        sliding_window_buffer_samples_sample_V_2_3_address0,
        sliding_window_buffer_samples_sample_V_2_3_ce0,
        sliding_window_buffer_samples_sample_V_2_3_q0,
        sliding_window_buffer_samples_sample_V_2_2_address0,
        sliding_window_buffer_samples_sample_V_2_2_ce0,
        sliding_window_buffer_samples_sample_V_2_2_q0,
        sliding_window_buffer_samples_sample_V_2_1_address0,
        sliding_window_buffer_samples_sample_V_2_1_ce0,
        sliding_window_buffer_samples_sample_V_2_1_q0,
        sliding_window_buffer_samples_sample_V_2_0_address0,
        sliding_window_buffer_samples_sample_V_2_0_ce0,
        sliding_window_buffer_samples_sample_V_2_0_q0,
        sliding_window_buffer_samples_timestamp_V_1_11_address0,
        sliding_window_buffer_samples_timestamp_V_1_11_ce0,
        sliding_window_buffer_samples_timestamp_V_1_11_q0,
        sliding_window_buffer_samples_timestamp_V_1_10_address0,
        sliding_window_buffer_samples_timestamp_V_1_10_ce0,
        sliding_window_buffer_samples_timestamp_V_1_10_q0,
        sliding_window_buffer_samples_timestamp_V_1_9_address0,
        sliding_window_buffer_samples_timestamp_V_1_9_ce0,
        sliding_window_buffer_samples_timestamp_V_1_9_q0,
        sliding_window_buffer_samples_timestamp_V_1_8_address0,
        sliding_window_buffer_samples_timestamp_V_1_8_ce0,
        sliding_window_buffer_samples_timestamp_V_1_8_q0,
        sliding_window_buffer_samples_timestamp_V_1_7_address0,
        sliding_window_buffer_samples_timestamp_V_1_7_ce0,
        sliding_window_buffer_samples_timestamp_V_1_7_q0,
        sliding_window_buffer_samples_timestamp_V_1_6_address0,
        sliding_window_buffer_samples_timestamp_V_1_6_ce0,
        sliding_window_buffer_samples_timestamp_V_1_6_q0,
        sliding_window_buffer_samples_timestamp_V_1_5_address0,
        sliding_window_buffer_samples_timestamp_V_1_5_ce0,
        sliding_window_buffer_samples_timestamp_V_1_5_q0,
        sliding_window_buffer_samples_timestamp_V_1_4_address0,
        sliding_window_buffer_samples_timestamp_V_1_4_ce0,
        sliding_window_buffer_samples_timestamp_V_1_4_q0,
        sliding_window_buffer_samples_timestamp_V_1_3_address0,
        sliding_window_buffer_samples_timestamp_V_1_3_ce0,
        sliding_window_buffer_samples_timestamp_V_1_3_q0,
        sliding_window_buffer_samples_timestamp_V_1_2_address0,
        sliding_window_buffer_samples_timestamp_V_1_2_ce0,
        sliding_window_buffer_samples_timestamp_V_1_2_q0,
        sliding_window_buffer_samples_timestamp_V_1_1_address0,
        sliding_window_buffer_samples_timestamp_V_1_1_ce0,
        sliding_window_buffer_samples_timestamp_V_1_1_q0,
        sliding_window_buffer_samples_timestamp_V_1_0_address0,
        sliding_window_buffer_samples_timestamp_V_1_0_ce0,
        sliding_window_buffer_samples_timestamp_V_1_0_q0,
        sliding_window_buffer_samples_sample_V_1_11_address0,
        sliding_window_buffer_samples_sample_V_1_11_ce0,
        sliding_window_buffer_samples_sample_V_1_11_q0,
        sliding_window_buffer_samples_sample_V_1_10_address0,
        sliding_window_buffer_samples_sample_V_1_10_ce0,
        sliding_window_buffer_samples_sample_V_1_10_q0,
        sliding_window_buffer_samples_sample_V_1_9_address0,
        sliding_window_buffer_samples_sample_V_1_9_ce0,
        sliding_window_buffer_samples_sample_V_1_9_q0,
        sliding_window_buffer_samples_sample_V_1_8_address0,
        sliding_window_buffer_samples_sample_V_1_8_ce0,
        sliding_window_buffer_samples_sample_V_1_8_q0,
        sliding_window_buffer_samples_sample_V_1_7_address0,
        sliding_window_buffer_samples_sample_V_1_7_ce0,
        sliding_window_buffer_samples_sample_V_1_7_q0,
        sliding_window_buffer_samples_sample_V_1_6_address0,
        sliding_window_buffer_samples_sample_V_1_6_ce0,
        sliding_window_buffer_samples_sample_V_1_6_q0,
        sliding_window_buffer_samples_sample_V_1_5_address0,
        sliding_window_buffer_samples_sample_V_1_5_ce0,
        sliding_window_buffer_samples_sample_V_1_5_q0,
        sliding_window_buffer_samples_sample_V_1_4_address0,
        sliding_window_buffer_samples_sample_V_1_4_ce0,
        sliding_window_buffer_samples_sample_V_1_4_q0,
        sliding_window_buffer_samples_sample_V_1_3_address0,
        sliding_window_buffer_samples_sample_V_1_3_ce0,
        sliding_window_buffer_samples_sample_V_1_3_q0,
        sliding_window_buffer_samples_sample_V_1_2_address0,
        sliding_window_buffer_samples_sample_V_1_2_ce0,
        sliding_window_buffer_samples_sample_V_1_2_q0,
        sliding_window_buffer_samples_sample_V_1_1_address0,
        sliding_window_buffer_samples_sample_V_1_1_ce0,
        sliding_window_buffer_samples_sample_V_1_1_q0,
        sliding_window_buffer_samples_sample_V_1_0_address0,
        sliding_window_buffer_samples_sample_V_1_0_ce0,
        sliding_window_buffer_samples_sample_V_1_0_q0,
        sliding_window_buffer_samples_timestamp_V_0_11_address0,
        sliding_window_buffer_samples_timestamp_V_0_11_ce0,
        sliding_window_buffer_samples_timestamp_V_0_11_q0,
        sliding_window_buffer_samples_timestamp_V_0_10_address0,
        sliding_window_buffer_samples_timestamp_V_0_10_ce0,
        sliding_window_buffer_samples_timestamp_V_0_10_q0,
        sliding_window_buffer_samples_timestamp_V_0_9_address0,
        sliding_window_buffer_samples_timestamp_V_0_9_ce0,
        sliding_window_buffer_samples_timestamp_V_0_9_q0,
        sliding_window_buffer_samples_timestamp_V_0_8_address0,
        sliding_window_buffer_samples_timestamp_V_0_8_ce0,
        sliding_window_buffer_samples_timestamp_V_0_8_q0,
        sliding_window_buffer_samples_timestamp_V_0_7_address0,
        sliding_window_buffer_samples_timestamp_V_0_7_ce0,
        sliding_window_buffer_samples_timestamp_V_0_7_q0,
        sliding_window_buffer_samples_timestamp_V_0_6_address0,
        sliding_window_buffer_samples_timestamp_V_0_6_ce0,
        sliding_window_buffer_samples_timestamp_V_0_6_q0,
        sliding_window_buffer_samples_timestamp_V_0_5_address0,
        sliding_window_buffer_samples_timestamp_V_0_5_ce0,
        sliding_window_buffer_samples_timestamp_V_0_5_q0,
        sliding_window_buffer_samples_timestamp_V_0_4_address0,
        sliding_window_buffer_samples_timestamp_V_0_4_ce0,
        sliding_window_buffer_samples_timestamp_V_0_4_q0,
        sliding_window_buffer_samples_timestamp_V_0_3_address0,
        sliding_window_buffer_samples_timestamp_V_0_3_ce0,
        sliding_window_buffer_samples_timestamp_V_0_3_q0,
        sliding_window_buffer_samples_timestamp_V_0_2_address0,
        sliding_window_buffer_samples_timestamp_V_0_2_ce0,
        sliding_window_buffer_samples_timestamp_V_0_2_q0,
        sliding_window_buffer_samples_timestamp_V_0_1_address0,
        sliding_window_buffer_samples_timestamp_V_0_1_ce0,
        sliding_window_buffer_samples_timestamp_V_0_1_q0,
        sliding_window_buffer_samples_timestamp_V_0_0_address0,
        sliding_window_buffer_samples_timestamp_V_0_0_ce0,
        sliding_window_buffer_samples_timestamp_V_0_0_q0,
        sliding_window_buffer_samples_sample_V_0_11_address0,
        sliding_window_buffer_samples_sample_V_0_11_ce0,
        sliding_window_buffer_samples_sample_V_0_11_q0,
        sliding_window_buffer_samples_sample_V_0_10_address0,
        sliding_window_buffer_samples_sample_V_0_10_ce0,
        sliding_window_buffer_samples_sample_V_0_10_q0,
        sliding_window_buffer_samples_sample_V_0_9_address0,
        sliding_window_buffer_samples_sample_V_0_9_ce0,
        sliding_window_buffer_samples_sample_V_0_9_q0,
        sliding_window_buffer_samples_sample_V_0_8_address0,
        sliding_window_buffer_samples_sample_V_0_8_ce0,
        sliding_window_buffer_samples_sample_V_0_8_q0,
        sliding_window_buffer_samples_sample_V_0_7_address0,
        sliding_window_buffer_samples_sample_V_0_7_ce0,
        sliding_window_buffer_samples_sample_V_0_7_q0,
        sliding_window_buffer_samples_sample_V_0_6_address0,
        sliding_window_buffer_samples_sample_V_0_6_ce0,
        sliding_window_buffer_samples_sample_V_0_6_q0,
        sliding_window_buffer_samples_sample_V_0_5_address0,
        sliding_window_buffer_samples_sample_V_0_5_ce0,
        sliding_window_buffer_samples_sample_V_0_5_q0,
        sliding_window_buffer_samples_sample_V_0_4_address0,
        sliding_window_buffer_samples_sample_V_0_4_ce0,
        sliding_window_buffer_samples_sample_V_0_4_q0,
        sliding_window_buffer_samples_sample_V_0_3_address0,
        sliding_window_buffer_samples_sample_V_0_3_ce0,
        sliding_window_buffer_samples_sample_V_0_3_q0,
        sliding_window_buffer_samples_sample_V_0_2_address0,
        sliding_window_buffer_samples_sample_V_0_2_ce0,
        sliding_window_buffer_samples_sample_V_0_2_q0,
        sliding_window_buffer_samples_sample_V_0_1_address0,
        sliding_window_buffer_samples_sample_V_0_1_ce0,
        sliding_window_buffer_samples_sample_V_0_1_q0,
        sliding_window_buffer_samples_sample_V_0_0_address0,
        sliding_window_buffer_samples_sample_V_0_0_ce0,
        sliding_window_buffer_samples_sample_V_0_0_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 16'd16384;
parameter    ap_ST_fsm_state17 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] buffer_out_address0;
output   buffer_out_ce0;
output   buffer_out_we0;
output  [31:0] buffer_out_d0;
input  [7:0] n_periods;
input  [5:0] sliding_window_front_ptr_s;
input  [5:0] sliding_window_back_ptr_s;
output  [4:0] sliding_window_buffer_count_s_address0;
output   sliding_window_buffer_count_s_ce0;
input  [5:0] sliding_window_buffer_count_s_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_11_address0;
output   sliding_window_buffer_samples_timestamp_V_9_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_10_address0;
output   sliding_window_buffer_samples_timestamp_V_9_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_9_address0;
output   sliding_window_buffer_samples_timestamp_V_9_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_8_address0;
output   sliding_window_buffer_samples_timestamp_V_9_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_7_address0;
output   sliding_window_buffer_samples_timestamp_V_9_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_6_address0;
output   sliding_window_buffer_samples_timestamp_V_9_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_5_address0;
output   sliding_window_buffer_samples_timestamp_V_9_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_4_address0;
output   sliding_window_buffer_samples_timestamp_V_9_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_3_address0;
output   sliding_window_buffer_samples_timestamp_V_9_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_2_address0;
output   sliding_window_buffer_samples_timestamp_V_9_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_1_address0;
output   sliding_window_buffer_samples_timestamp_V_9_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_9_0_address0;
output   sliding_window_buffer_samples_timestamp_V_9_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_9_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_11_address0;
output   sliding_window_buffer_samples_sample_V_9_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_10_address0;
output   sliding_window_buffer_samples_sample_V_9_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_9_address0;
output   sliding_window_buffer_samples_sample_V_9_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_8_address0;
output   sliding_window_buffer_samples_sample_V_9_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_7_address0;
output   sliding_window_buffer_samples_sample_V_9_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_6_address0;
output   sliding_window_buffer_samples_sample_V_9_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_5_address0;
output   sliding_window_buffer_samples_sample_V_9_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_4_address0;
output   sliding_window_buffer_samples_sample_V_9_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_3_address0;
output   sliding_window_buffer_samples_sample_V_9_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_2_address0;
output   sliding_window_buffer_samples_sample_V_9_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_1_address0;
output   sliding_window_buffer_samples_sample_V_9_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_9_0_address0;
output   sliding_window_buffer_samples_sample_V_9_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_9_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_11_address0;
output   sliding_window_buffer_samples_timestamp_V_8_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_10_address0;
output   sliding_window_buffer_samples_timestamp_V_8_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_9_address0;
output   sliding_window_buffer_samples_timestamp_V_8_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_8_address0;
output   sliding_window_buffer_samples_timestamp_V_8_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_7_address0;
output   sliding_window_buffer_samples_timestamp_V_8_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_6_address0;
output   sliding_window_buffer_samples_timestamp_V_8_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_5_address0;
output   sliding_window_buffer_samples_timestamp_V_8_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_4_address0;
output   sliding_window_buffer_samples_timestamp_V_8_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_3_address0;
output   sliding_window_buffer_samples_timestamp_V_8_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_2_address0;
output   sliding_window_buffer_samples_timestamp_V_8_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_1_address0;
output   sliding_window_buffer_samples_timestamp_V_8_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_8_0_address0;
output   sliding_window_buffer_samples_timestamp_V_8_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_8_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_11_address0;
output   sliding_window_buffer_samples_sample_V_8_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_10_address0;
output   sliding_window_buffer_samples_sample_V_8_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_9_address0;
output   sliding_window_buffer_samples_sample_V_8_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_8_address0;
output   sliding_window_buffer_samples_sample_V_8_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_7_address0;
output   sliding_window_buffer_samples_sample_V_8_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_6_address0;
output   sliding_window_buffer_samples_sample_V_8_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_5_address0;
output   sliding_window_buffer_samples_sample_V_8_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_4_address0;
output   sliding_window_buffer_samples_sample_V_8_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_3_address0;
output   sliding_window_buffer_samples_sample_V_8_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_2_address0;
output   sliding_window_buffer_samples_sample_V_8_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_1_address0;
output   sliding_window_buffer_samples_sample_V_8_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_8_0_address0;
output   sliding_window_buffer_samples_sample_V_8_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_8_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_11_address0;
output   sliding_window_buffer_samples_timestamp_V_7_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_10_address0;
output   sliding_window_buffer_samples_timestamp_V_7_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_9_address0;
output   sliding_window_buffer_samples_timestamp_V_7_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_8_address0;
output   sliding_window_buffer_samples_timestamp_V_7_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_7_address0;
output   sliding_window_buffer_samples_timestamp_V_7_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_6_address0;
output   sliding_window_buffer_samples_timestamp_V_7_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_5_address0;
output   sliding_window_buffer_samples_timestamp_V_7_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_4_address0;
output   sliding_window_buffer_samples_timestamp_V_7_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_3_address0;
output   sliding_window_buffer_samples_timestamp_V_7_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_2_address0;
output   sliding_window_buffer_samples_timestamp_V_7_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_1_address0;
output   sliding_window_buffer_samples_timestamp_V_7_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_7_0_address0;
output   sliding_window_buffer_samples_timestamp_V_7_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_7_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_11_address0;
output   sliding_window_buffer_samples_sample_V_7_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_10_address0;
output   sliding_window_buffer_samples_sample_V_7_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_9_address0;
output   sliding_window_buffer_samples_sample_V_7_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_8_address0;
output   sliding_window_buffer_samples_sample_V_7_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_7_address0;
output   sliding_window_buffer_samples_sample_V_7_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_6_address0;
output   sliding_window_buffer_samples_sample_V_7_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_5_address0;
output   sliding_window_buffer_samples_sample_V_7_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_4_address0;
output   sliding_window_buffer_samples_sample_V_7_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_3_address0;
output   sliding_window_buffer_samples_sample_V_7_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_2_address0;
output   sliding_window_buffer_samples_sample_V_7_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_1_address0;
output   sliding_window_buffer_samples_sample_V_7_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_7_0_address0;
output   sliding_window_buffer_samples_sample_V_7_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_7_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_11_address0;
output   sliding_window_buffer_samples_timestamp_V_6_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_10_address0;
output   sliding_window_buffer_samples_timestamp_V_6_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_9_address0;
output   sliding_window_buffer_samples_timestamp_V_6_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_8_address0;
output   sliding_window_buffer_samples_timestamp_V_6_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_7_address0;
output   sliding_window_buffer_samples_timestamp_V_6_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_6_address0;
output   sliding_window_buffer_samples_timestamp_V_6_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_5_address0;
output   sliding_window_buffer_samples_timestamp_V_6_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_4_address0;
output   sliding_window_buffer_samples_timestamp_V_6_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_3_address0;
output   sliding_window_buffer_samples_timestamp_V_6_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_2_address0;
output   sliding_window_buffer_samples_timestamp_V_6_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_1_address0;
output   sliding_window_buffer_samples_timestamp_V_6_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_6_0_address0;
output   sliding_window_buffer_samples_timestamp_V_6_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_6_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_11_address0;
output   sliding_window_buffer_samples_sample_V_6_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_10_address0;
output   sliding_window_buffer_samples_sample_V_6_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_9_address0;
output   sliding_window_buffer_samples_sample_V_6_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_8_address0;
output   sliding_window_buffer_samples_sample_V_6_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_7_address0;
output   sliding_window_buffer_samples_sample_V_6_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_6_address0;
output   sliding_window_buffer_samples_sample_V_6_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_5_address0;
output   sliding_window_buffer_samples_sample_V_6_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_4_address0;
output   sliding_window_buffer_samples_sample_V_6_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_3_address0;
output   sliding_window_buffer_samples_sample_V_6_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_2_address0;
output   sliding_window_buffer_samples_sample_V_6_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_1_address0;
output   sliding_window_buffer_samples_sample_V_6_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_6_0_address0;
output   sliding_window_buffer_samples_sample_V_6_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_6_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_11_address0;
output   sliding_window_buffer_samples_timestamp_V_5_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_10_address0;
output   sliding_window_buffer_samples_timestamp_V_5_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_9_address0;
output   sliding_window_buffer_samples_timestamp_V_5_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_8_address0;
output   sliding_window_buffer_samples_timestamp_V_5_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_7_address0;
output   sliding_window_buffer_samples_timestamp_V_5_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_6_address0;
output   sliding_window_buffer_samples_timestamp_V_5_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_5_address0;
output   sliding_window_buffer_samples_timestamp_V_5_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_4_address0;
output   sliding_window_buffer_samples_timestamp_V_5_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_3_address0;
output   sliding_window_buffer_samples_timestamp_V_5_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_2_address0;
output   sliding_window_buffer_samples_timestamp_V_5_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_1_address0;
output   sliding_window_buffer_samples_timestamp_V_5_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_5_0_address0;
output   sliding_window_buffer_samples_timestamp_V_5_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_5_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_11_address0;
output   sliding_window_buffer_samples_sample_V_5_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_10_address0;
output   sliding_window_buffer_samples_sample_V_5_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_9_address0;
output   sliding_window_buffer_samples_sample_V_5_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_8_address0;
output   sliding_window_buffer_samples_sample_V_5_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_7_address0;
output   sliding_window_buffer_samples_sample_V_5_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_6_address0;
output   sliding_window_buffer_samples_sample_V_5_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_5_address0;
output   sliding_window_buffer_samples_sample_V_5_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_4_address0;
output   sliding_window_buffer_samples_sample_V_5_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_3_address0;
output   sliding_window_buffer_samples_sample_V_5_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_2_address0;
output   sliding_window_buffer_samples_sample_V_5_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_1_address0;
output   sliding_window_buffer_samples_sample_V_5_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_5_0_address0;
output   sliding_window_buffer_samples_sample_V_5_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_5_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_11_address0;
output   sliding_window_buffer_samples_timestamp_V_4_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_10_address0;
output   sliding_window_buffer_samples_timestamp_V_4_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_9_address0;
output   sliding_window_buffer_samples_timestamp_V_4_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_8_address0;
output   sliding_window_buffer_samples_timestamp_V_4_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_7_address0;
output   sliding_window_buffer_samples_timestamp_V_4_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_6_address0;
output   sliding_window_buffer_samples_timestamp_V_4_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_5_address0;
output   sliding_window_buffer_samples_timestamp_V_4_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_4_address0;
output   sliding_window_buffer_samples_timestamp_V_4_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_3_address0;
output   sliding_window_buffer_samples_timestamp_V_4_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_2_address0;
output   sliding_window_buffer_samples_timestamp_V_4_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_1_address0;
output   sliding_window_buffer_samples_timestamp_V_4_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_4_0_address0;
output   sliding_window_buffer_samples_timestamp_V_4_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_4_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_11_address0;
output   sliding_window_buffer_samples_sample_V_4_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_10_address0;
output   sliding_window_buffer_samples_sample_V_4_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_9_address0;
output   sliding_window_buffer_samples_sample_V_4_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_8_address0;
output   sliding_window_buffer_samples_sample_V_4_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_7_address0;
output   sliding_window_buffer_samples_sample_V_4_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_6_address0;
output   sliding_window_buffer_samples_sample_V_4_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_5_address0;
output   sliding_window_buffer_samples_sample_V_4_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_4_address0;
output   sliding_window_buffer_samples_sample_V_4_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_3_address0;
output   sliding_window_buffer_samples_sample_V_4_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_2_address0;
output   sliding_window_buffer_samples_sample_V_4_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_1_address0;
output   sliding_window_buffer_samples_sample_V_4_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_4_0_address0;
output   sliding_window_buffer_samples_sample_V_4_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_4_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_11_address0;
output   sliding_window_buffer_samples_timestamp_V_3_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_10_address0;
output   sliding_window_buffer_samples_timestamp_V_3_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_9_address0;
output   sliding_window_buffer_samples_timestamp_V_3_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_8_address0;
output   sliding_window_buffer_samples_timestamp_V_3_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_7_address0;
output   sliding_window_buffer_samples_timestamp_V_3_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_6_address0;
output   sliding_window_buffer_samples_timestamp_V_3_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_5_address0;
output   sliding_window_buffer_samples_timestamp_V_3_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_4_address0;
output   sliding_window_buffer_samples_timestamp_V_3_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_3_address0;
output   sliding_window_buffer_samples_timestamp_V_3_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_2_address0;
output   sliding_window_buffer_samples_timestamp_V_3_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_1_address0;
output   sliding_window_buffer_samples_timestamp_V_3_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_3_0_address0;
output   sliding_window_buffer_samples_timestamp_V_3_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_3_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_11_address0;
output   sliding_window_buffer_samples_sample_V_3_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_10_address0;
output   sliding_window_buffer_samples_sample_V_3_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_9_address0;
output   sliding_window_buffer_samples_sample_V_3_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_8_address0;
output   sliding_window_buffer_samples_sample_V_3_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_7_address0;
output   sliding_window_buffer_samples_sample_V_3_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_6_address0;
output   sliding_window_buffer_samples_sample_V_3_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_5_address0;
output   sliding_window_buffer_samples_sample_V_3_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_4_address0;
output   sliding_window_buffer_samples_sample_V_3_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_3_address0;
output   sliding_window_buffer_samples_sample_V_3_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_2_address0;
output   sliding_window_buffer_samples_sample_V_3_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_1_address0;
output   sliding_window_buffer_samples_sample_V_3_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_3_0_address0;
output   sliding_window_buffer_samples_sample_V_3_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_3_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_11_address0;
output   sliding_window_buffer_samples_timestamp_V_2_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_10_address0;
output   sliding_window_buffer_samples_timestamp_V_2_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_9_address0;
output   sliding_window_buffer_samples_timestamp_V_2_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_8_address0;
output   sliding_window_buffer_samples_timestamp_V_2_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_7_address0;
output   sliding_window_buffer_samples_timestamp_V_2_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_6_address0;
output   sliding_window_buffer_samples_timestamp_V_2_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_5_address0;
output   sliding_window_buffer_samples_timestamp_V_2_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_4_address0;
output   sliding_window_buffer_samples_timestamp_V_2_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_3_address0;
output   sliding_window_buffer_samples_timestamp_V_2_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_2_address0;
output   sliding_window_buffer_samples_timestamp_V_2_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_1_address0;
output   sliding_window_buffer_samples_timestamp_V_2_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_2_0_address0;
output   sliding_window_buffer_samples_timestamp_V_2_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_2_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_11_address0;
output   sliding_window_buffer_samples_sample_V_2_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_10_address0;
output   sliding_window_buffer_samples_sample_V_2_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_9_address0;
output   sliding_window_buffer_samples_sample_V_2_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_8_address0;
output   sliding_window_buffer_samples_sample_V_2_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_7_address0;
output   sliding_window_buffer_samples_sample_V_2_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_6_address0;
output   sliding_window_buffer_samples_sample_V_2_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_5_address0;
output   sliding_window_buffer_samples_sample_V_2_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_4_address0;
output   sliding_window_buffer_samples_sample_V_2_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_3_address0;
output   sliding_window_buffer_samples_sample_V_2_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_2_address0;
output   sliding_window_buffer_samples_sample_V_2_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_1_address0;
output   sliding_window_buffer_samples_sample_V_2_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_2_0_address0;
output   sliding_window_buffer_samples_sample_V_2_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_2_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_11_address0;
output   sliding_window_buffer_samples_timestamp_V_1_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_10_address0;
output   sliding_window_buffer_samples_timestamp_V_1_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_9_address0;
output   sliding_window_buffer_samples_timestamp_V_1_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_8_address0;
output   sliding_window_buffer_samples_timestamp_V_1_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_7_address0;
output   sliding_window_buffer_samples_timestamp_V_1_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_6_address0;
output   sliding_window_buffer_samples_timestamp_V_1_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_5_address0;
output   sliding_window_buffer_samples_timestamp_V_1_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_4_address0;
output   sliding_window_buffer_samples_timestamp_V_1_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_3_address0;
output   sliding_window_buffer_samples_timestamp_V_1_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_2_address0;
output   sliding_window_buffer_samples_timestamp_V_1_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_1_address0;
output   sliding_window_buffer_samples_timestamp_V_1_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_1_0_address0;
output   sliding_window_buffer_samples_timestamp_V_1_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_1_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_11_address0;
output   sliding_window_buffer_samples_sample_V_1_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_10_address0;
output   sliding_window_buffer_samples_sample_V_1_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_9_address0;
output   sliding_window_buffer_samples_sample_V_1_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_8_address0;
output   sliding_window_buffer_samples_sample_V_1_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_7_address0;
output   sliding_window_buffer_samples_sample_V_1_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_6_address0;
output   sliding_window_buffer_samples_sample_V_1_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_5_address0;
output   sliding_window_buffer_samples_sample_V_1_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_4_address0;
output   sliding_window_buffer_samples_sample_V_1_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_3_address0;
output   sliding_window_buffer_samples_sample_V_1_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_2_address0;
output   sliding_window_buffer_samples_sample_V_1_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_1_address0;
output   sliding_window_buffer_samples_sample_V_1_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_1_0_address0;
output   sliding_window_buffer_samples_sample_V_1_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_1_0_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_11_address0;
output   sliding_window_buffer_samples_timestamp_V_0_11_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_11_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_10_address0;
output   sliding_window_buffer_samples_timestamp_V_0_10_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_10_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_9_address0;
output   sliding_window_buffer_samples_timestamp_V_0_9_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_9_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_8_address0;
output   sliding_window_buffer_samples_timestamp_V_0_8_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_8_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_7_address0;
output   sliding_window_buffer_samples_timestamp_V_0_7_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_7_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_6_address0;
output   sliding_window_buffer_samples_timestamp_V_0_6_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_6_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_5_address0;
output   sliding_window_buffer_samples_timestamp_V_0_5_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_5_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_4_address0;
output   sliding_window_buffer_samples_timestamp_V_0_4_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_4_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_3_address0;
output   sliding_window_buffer_samples_timestamp_V_0_3_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_3_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_2_address0;
output   sliding_window_buffer_samples_timestamp_V_0_2_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_2_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_1_address0;
output   sliding_window_buffer_samples_timestamp_V_0_1_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_1_q0;
output  [4:0] sliding_window_buffer_samples_timestamp_V_0_0_address0;
output   sliding_window_buffer_samples_timestamp_V_0_0_ce0;
input  [19:0] sliding_window_buffer_samples_timestamp_V_0_0_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_11_address0;
output   sliding_window_buffer_samples_sample_V_0_11_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_11_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_10_address0;
output   sliding_window_buffer_samples_sample_V_0_10_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_10_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_9_address0;
output   sliding_window_buffer_samples_sample_V_0_9_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_9_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_8_address0;
output   sliding_window_buffer_samples_sample_V_0_8_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_8_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_7_address0;
output   sliding_window_buffer_samples_sample_V_0_7_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_7_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_6_address0;
output   sliding_window_buffer_samples_sample_V_0_6_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_6_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_5_address0;
output   sliding_window_buffer_samples_sample_V_0_5_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_5_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_4_address0;
output   sliding_window_buffer_samples_sample_V_0_4_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_4_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_3_address0;
output   sliding_window_buffer_samples_sample_V_0_3_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_3_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_2_address0;
output   sliding_window_buffer_samples_sample_V_0_2_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_2_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_1_address0;
output   sliding_window_buffer_samples_sample_V_0_1_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_1_q0;
output  [4:0] sliding_window_buffer_samples_sample_V_0_0_address0;
output   sliding_window_buffer_samples_sample_V_0_0_ce0;
input  [11:0] sliding_window_buffer_samples_sample_V_0_0_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_out_ce0;
reg buffer_out_we0;
reg sliding_window_buffer_count_s_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_9_0_ce0;
reg sliding_window_buffer_samples_sample_V_9_11_ce0;
reg sliding_window_buffer_samples_sample_V_9_10_ce0;
reg sliding_window_buffer_samples_sample_V_9_9_ce0;
reg sliding_window_buffer_samples_sample_V_9_8_ce0;
reg sliding_window_buffer_samples_sample_V_9_7_ce0;
reg sliding_window_buffer_samples_sample_V_9_6_ce0;
reg sliding_window_buffer_samples_sample_V_9_5_ce0;
reg sliding_window_buffer_samples_sample_V_9_4_ce0;
reg sliding_window_buffer_samples_sample_V_9_3_ce0;
reg sliding_window_buffer_samples_sample_V_9_2_ce0;
reg sliding_window_buffer_samples_sample_V_9_1_ce0;
reg sliding_window_buffer_samples_sample_V_9_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_8_0_ce0;
reg sliding_window_buffer_samples_sample_V_8_11_ce0;
reg sliding_window_buffer_samples_sample_V_8_10_ce0;
reg sliding_window_buffer_samples_sample_V_8_9_ce0;
reg sliding_window_buffer_samples_sample_V_8_8_ce0;
reg sliding_window_buffer_samples_sample_V_8_7_ce0;
reg sliding_window_buffer_samples_sample_V_8_6_ce0;
reg sliding_window_buffer_samples_sample_V_8_5_ce0;
reg sliding_window_buffer_samples_sample_V_8_4_ce0;
reg sliding_window_buffer_samples_sample_V_8_3_ce0;
reg sliding_window_buffer_samples_sample_V_8_2_ce0;
reg sliding_window_buffer_samples_sample_V_8_1_ce0;
reg sliding_window_buffer_samples_sample_V_8_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_7_0_ce0;
reg sliding_window_buffer_samples_sample_V_7_11_ce0;
reg sliding_window_buffer_samples_sample_V_7_10_ce0;
reg sliding_window_buffer_samples_sample_V_7_9_ce0;
reg sliding_window_buffer_samples_sample_V_7_8_ce0;
reg sliding_window_buffer_samples_sample_V_7_7_ce0;
reg sliding_window_buffer_samples_sample_V_7_6_ce0;
reg sliding_window_buffer_samples_sample_V_7_5_ce0;
reg sliding_window_buffer_samples_sample_V_7_4_ce0;
reg sliding_window_buffer_samples_sample_V_7_3_ce0;
reg sliding_window_buffer_samples_sample_V_7_2_ce0;
reg sliding_window_buffer_samples_sample_V_7_1_ce0;
reg sliding_window_buffer_samples_sample_V_7_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_6_0_ce0;
reg sliding_window_buffer_samples_sample_V_6_11_ce0;
reg sliding_window_buffer_samples_sample_V_6_10_ce0;
reg sliding_window_buffer_samples_sample_V_6_9_ce0;
reg sliding_window_buffer_samples_sample_V_6_8_ce0;
reg sliding_window_buffer_samples_sample_V_6_7_ce0;
reg sliding_window_buffer_samples_sample_V_6_6_ce0;
reg sliding_window_buffer_samples_sample_V_6_5_ce0;
reg sliding_window_buffer_samples_sample_V_6_4_ce0;
reg sliding_window_buffer_samples_sample_V_6_3_ce0;
reg sliding_window_buffer_samples_sample_V_6_2_ce0;
reg sliding_window_buffer_samples_sample_V_6_1_ce0;
reg sliding_window_buffer_samples_sample_V_6_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_5_0_ce0;
reg sliding_window_buffer_samples_sample_V_5_11_ce0;
reg sliding_window_buffer_samples_sample_V_5_10_ce0;
reg sliding_window_buffer_samples_sample_V_5_9_ce0;
reg sliding_window_buffer_samples_sample_V_5_8_ce0;
reg sliding_window_buffer_samples_sample_V_5_7_ce0;
reg sliding_window_buffer_samples_sample_V_5_6_ce0;
reg sliding_window_buffer_samples_sample_V_5_5_ce0;
reg sliding_window_buffer_samples_sample_V_5_4_ce0;
reg sliding_window_buffer_samples_sample_V_5_3_ce0;
reg sliding_window_buffer_samples_sample_V_5_2_ce0;
reg sliding_window_buffer_samples_sample_V_5_1_ce0;
reg sliding_window_buffer_samples_sample_V_5_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_4_0_ce0;
reg sliding_window_buffer_samples_sample_V_4_11_ce0;
reg sliding_window_buffer_samples_sample_V_4_10_ce0;
reg sliding_window_buffer_samples_sample_V_4_9_ce0;
reg sliding_window_buffer_samples_sample_V_4_8_ce0;
reg sliding_window_buffer_samples_sample_V_4_7_ce0;
reg sliding_window_buffer_samples_sample_V_4_6_ce0;
reg sliding_window_buffer_samples_sample_V_4_5_ce0;
reg sliding_window_buffer_samples_sample_V_4_4_ce0;
reg sliding_window_buffer_samples_sample_V_4_3_ce0;
reg sliding_window_buffer_samples_sample_V_4_2_ce0;
reg sliding_window_buffer_samples_sample_V_4_1_ce0;
reg sliding_window_buffer_samples_sample_V_4_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_3_0_ce0;
reg sliding_window_buffer_samples_sample_V_3_11_ce0;
reg sliding_window_buffer_samples_sample_V_3_10_ce0;
reg sliding_window_buffer_samples_sample_V_3_9_ce0;
reg sliding_window_buffer_samples_sample_V_3_8_ce0;
reg sliding_window_buffer_samples_sample_V_3_7_ce0;
reg sliding_window_buffer_samples_sample_V_3_6_ce0;
reg sliding_window_buffer_samples_sample_V_3_5_ce0;
reg sliding_window_buffer_samples_sample_V_3_4_ce0;
reg sliding_window_buffer_samples_sample_V_3_3_ce0;
reg sliding_window_buffer_samples_sample_V_3_2_ce0;
reg sliding_window_buffer_samples_sample_V_3_1_ce0;
reg sliding_window_buffer_samples_sample_V_3_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_2_0_ce0;
reg sliding_window_buffer_samples_sample_V_2_11_ce0;
reg sliding_window_buffer_samples_sample_V_2_10_ce0;
reg sliding_window_buffer_samples_sample_V_2_9_ce0;
reg sliding_window_buffer_samples_sample_V_2_8_ce0;
reg sliding_window_buffer_samples_sample_V_2_7_ce0;
reg sliding_window_buffer_samples_sample_V_2_6_ce0;
reg sliding_window_buffer_samples_sample_V_2_5_ce0;
reg sliding_window_buffer_samples_sample_V_2_4_ce0;
reg sliding_window_buffer_samples_sample_V_2_3_ce0;
reg sliding_window_buffer_samples_sample_V_2_2_ce0;
reg sliding_window_buffer_samples_sample_V_2_1_ce0;
reg sliding_window_buffer_samples_sample_V_2_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_1_0_ce0;
reg sliding_window_buffer_samples_sample_V_1_11_ce0;
reg sliding_window_buffer_samples_sample_V_1_10_ce0;
reg sliding_window_buffer_samples_sample_V_1_9_ce0;
reg sliding_window_buffer_samples_sample_V_1_8_ce0;
reg sliding_window_buffer_samples_sample_V_1_7_ce0;
reg sliding_window_buffer_samples_sample_V_1_6_ce0;
reg sliding_window_buffer_samples_sample_V_1_5_ce0;
reg sliding_window_buffer_samples_sample_V_1_4_ce0;
reg sliding_window_buffer_samples_sample_V_1_3_ce0;
reg sliding_window_buffer_samples_sample_V_1_2_ce0;
reg sliding_window_buffer_samples_sample_V_1_1_ce0;
reg sliding_window_buffer_samples_sample_V_1_0_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_11_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_10_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_9_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_8_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_7_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_6_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_5_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_4_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_3_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_2_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_1_ce0;
reg sliding_window_buffer_samples_timestamp_V_0_0_ce0;
reg sliding_window_buffer_samples_sample_V_0_11_ce0;
reg sliding_window_buffer_samples_sample_V_0_10_ce0;
reg sliding_window_buffer_samples_sample_V_0_9_ce0;
reg sliding_window_buffer_samples_sample_V_0_8_ce0;
reg sliding_window_buffer_samples_sample_V_0_7_ce0;
reg sliding_window_buffer_samples_sample_V_0_6_ce0;
reg sliding_window_buffer_samples_sample_V_0_5_ce0;
reg sliding_window_buffer_samples_sample_V_0_4_ce0;
reg sliding_window_buffer_samples_sample_V_0_3_ce0;
reg sliding_window_buffer_samples_sample_V_0_2_ce0;
reg sliding_window_buffer_samples_sample_V_0_1_ce0;
reg sliding_window_buffer_samples_sample_V_0_0_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [32:0] idx_4_reg_6670;
reg   [3:0] k_reg_6679;
wire   [31:0] n_periods_cast_fu_6690_p1;
wire  signed [31:0] sext_ln34_fu_6698_p1;
reg  signed [31:0] sext_ln34_reg_8278;
wire   [4:0] trunc_ln22_fu_6706_p1;
reg   [4:0] trunc_ln22_reg_8283;
wire   [31:0] i_fu_6718_p2;
reg   [31:0] i_reg_8291;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln46_fu_6752_p1;
reg   [63:0] zext_ln46_reg_8299;
wire   [0:0] icmp_ln151_fu_6724_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [5:0] sample_period_count_s_reg_9701;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln160_fu_6804_p2;
reg   [0:0] icmp_ln160_reg_9708;
wire   [5:0] j_1_fu_6810_p2;
reg   [5:0] j_1_reg_9712;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln40_fu_6839_p1;
reg   [63:0] zext_ln40_reg_9720;
wire   [0:0] icmp_ln160_1_fu_6820_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire  signed [32:0] sext_ln167_fu_6889_p1;
wire    ap_CS_fsm_state14;
wire   [3:0] add_ln167_fu_6893_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state15_pp0_stage0_iter0;
wire    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln167_fu_6905_p2;
reg   [0:0] icmp_ln167_reg_9874;
wire   [11:0] trunc_ln176_fu_6911_p1;
reg   [11:0] trunc_ln176_reg_9888;
wire   [32:0] add_ln176_fu_6915_p2;
wire   [31:0] add_ln160_1_fu_6940_p2;
wire    ap_CS_fsm_state17;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] sample_period_samples_0_sample_V_address0;
reg    sample_period_samples_0_sample_V_ce0;
reg    sample_period_samples_0_sample_V_we0;
reg   [11:0] sample_period_samples_0_sample_V_d0;
wire   [11:0] sample_period_samples_0_sample_V_q0;
reg   [3:0] sample_period_samples_0_sample_V_address1;
reg    sample_period_samples_0_sample_V_ce1;
reg    sample_period_samples_0_sample_V_we1;
reg   [11:0] sample_period_samples_0_sample_V_d1;
reg   [3:0] sample_period_samples_1_sample_V_address0;
reg    sample_period_samples_1_sample_V_ce0;
reg    sample_period_samples_1_sample_V_we0;
reg   [11:0] sample_period_samples_1_sample_V_d0;
wire   [11:0] sample_period_samples_1_sample_V_q0;
reg   [3:0] sample_period_samples_1_sample_V_address1;
reg    sample_period_samples_1_sample_V_ce1;
reg    sample_period_samples_1_sample_V_we1;
reg   [11:0] sample_period_samples_1_sample_V_d1;
reg   [3:0] sample_period_samples_2_sample_V_address0;
reg    sample_period_samples_2_sample_V_ce0;
reg    sample_period_samples_2_sample_V_we0;
reg   [11:0] sample_period_samples_2_sample_V_d0;
wire   [11:0] sample_period_samples_2_sample_V_q0;
reg   [3:0] sample_period_samples_2_sample_V_address1;
reg    sample_period_samples_2_sample_V_ce1;
reg    sample_period_samples_2_sample_V_we1;
reg   [11:0] sample_period_samples_2_sample_V_d1;
reg   [3:0] sample_period_samples_3_sample_V_address0;
reg    sample_period_samples_3_sample_V_ce0;
reg    sample_period_samples_3_sample_V_we0;
reg   [11:0] sample_period_samples_3_sample_V_d0;
wire   [11:0] sample_period_samples_3_sample_V_q0;
reg   [3:0] sample_period_samples_3_sample_V_address1;
reg    sample_period_samples_3_sample_V_ce1;
reg    sample_period_samples_3_sample_V_we1;
reg   [11:0] sample_period_samples_3_sample_V_d1;
reg   [3:0] sample_period_samples_4_sample_V_address0;
reg    sample_period_samples_4_sample_V_ce0;
reg    sample_period_samples_4_sample_V_we0;
reg   [11:0] sample_period_samples_4_sample_V_d0;
wire   [11:0] sample_period_samples_4_sample_V_q0;
reg   [3:0] sample_period_samples_4_sample_V_address1;
reg    sample_period_samples_4_sample_V_ce1;
reg    sample_period_samples_4_sample_V_we1;
reg   [11:0] sample_period_samples_4_sample_V_d1;
reg   [3:0] sample_period_samples_5_sample_V_address0;
reg    sample_period_samples_5_sample_V_ce0;
reg    sample_period_samples_5_sample_V_we0;
reg   [11:0] sample_period_samples_5_sample_V_d0;
wire   [11:0] sample_period_samples_5_sample_V_q0;
reg   [3:0] sample_period_samples_5_sample_V_address1;
reg    sample_period_samples_5_sample_V_ce1;
reg    sample_period_samples_5_sample_V_we1;
reg   [11:0] sample_period_samples_5_sample_V_d1;
reg   [3:0] sample_period_samples_6_sample_V_address0;
reg    sample_period_samples_6_sample_V_ce0;
reg    sample_period_samples_6_sample_V_we0;
reg   [11:0] sample_period_samples_6_sample_V_d0;
wire   [11:0] sample_period_samples_6_sample_V_q0;
reg   [3:0] sample_period_samples_6_sample_V_address1;
reg    sample_period_samples_6_sample_V_ce1;
reg    sample_period_samples_6_sample_V_we1;
reg   [11:0] sample_period_samples_6_sample_V_d1;
reg   [3:0] sample_period_samples_7_sample_V_address0;
reg    sample_period_samples_7_sample_V_ce0;
reg    sample_period_samples_7_sample_V_we0;
reg   [11:0] sample_period_samples_7_sample_V_d0;
wire   [11:0] sample_period_samples_7_sample_V_q0;
reg   [3:0] sample_period_samples_7_sample_V_address1;
reg    sample_period_samples_7_sample_V_ce1;
reg    sample_period_samples_7_sample_V_we1;
reg   [11:0] sample_period_samples_7_sample_V_d1;
reg   [3:0] sample_period_samples_8_sample_V_address0;
reg    sample_period_samples_8_sample_V_ce0;
reg    sample_period_samples_8_sample_V_we0;
reg   [11:0] sample_period_samples_8_sample_V_d0;
wire   [11:0] sample_period_samples_8_sample_V_q0;
reg   [3:0] sample_period_samples_8_sample_V_address1;
reg    sample_period_samples_8_sample_V_ce1;
reg    sample_period_samples_8_sample_V_we1;
reg   [11:0] sample_period_samples_8_sample_V_d1;
reg   [3:0] sample_period_samples_9_sample_V_address0;
reg    sample_period_samples_9_sample_V_ce0;
reg    sample_period_samples_9_sample_V_we0;
reg   [11:0] sample_period_samples_9_sample_V_d0;
wire   [11:0] sample_period_samples_9_sample_V_q0;
reg   [3:0] sample_period_samples_9_sample_V_address1;
reg    sample_period_samples_9_sample_V_ce1;
reg    sample_period_samples_9_sample_V_we1;
reg   [11:0] sample_period_samples_9_sample_V_d1;
reg   [3:0] sample_period_samples_10_sample_V_address0;
reg    sample_period_samples_10_sample_V_ce0;
reg    sample_period_samples_10_sample_V_we0;
reg   [11:0] sample_period_samples_10_sample_V_d0;
wire   [11:0] sample_period_samples_10_sample_V_q0;
reg   [3:0] sample_period_samples_10_sample_V_address1;
reg    sample_period_samples_10_sample_V_ce1;
reg    sample_period_samples_10_sample_V_we1;
reg   [11:0] sample_period_samples_10_sample_V_d1;
reg   [3:0] sample_period_samples_11_sample_V_address0;
reg    sample_period_samples_11_sample_V_ce0;
reg    sample_period_samples_11_sample_V_we0;
reg   [11:0] sample_period_samples_11_sample_V_d0;
wire   [11:0] sample_period_samples_11_sample_V_q0;
reg   [3:0] sample_period_samples_11_sample_V_address1;
reg    sample_period_samples_11_sample_V_ce1;
reg    sample_period_samples_11_sample_V_we1;
reg   [11:0] sample_period_samples_11_sample_V_d1;
reg   [3:0] sample_period_samples_0_timestamp_V_address0;
reg    sample_period_samples_0_timestamp_V_ce0;
reg    sample_period_samples_0_timestamp_V_we0;
reg   [19:0] sample_period_samples_0_timestamp_V_d0;
wire   [19:0] sample_period_samples_0_timestamp_V_q0;
reg   [3:0] sample_period_samples_0_timestamp_V_address1;
reg    sample_period_samples_0_timestamp_V_ce1;
reg    sample_period_samples_0_timestamp_V_we1;
reg   [19:0] sample_period_samples_0_timestamp_V_d1;
reg   [3:0] sample_period_samples_1_timestamp_V_address0;
reg    sample_period_samples_1_timestamp_V_ce0;
reg    sample_period_samples_1_timestamp_V_we0;
reg   [19:0] sample_period_samples_1_timestamp_V_d0;
wire   [19:0] sample_period_samples_1_timestamp_V_q0;
reg   [3:0] sample_period_samples_1_timestamp_V_address1;
reg    sample_period_samples_1_timestamp_V_ce1;
reg    sample_period_samples_1_timestamp_V_we1;
reg   [19:0] sample_period_samples_1_timestamp_V_d1;
reg   [3:0] sample_period_samples_2_timestamp_V_address0;
reg    sample_period_samples_2_timestamp_V_ce0;
reg    sample_period_samples_2_timestamp_V_we0;
reg   [19:0] sample_period_samples_2_timestamp_V_d0;
wire   [19:0] sample_period_samples_2_timestamp_V_q0;
reg   [3:0] sample_period_samples_2_timestamp_V_address1;
reg    sample_period_samples_2_timestamp_V_ce1;
reg    sample_period_samples_2_timestamp_V_we1;
reg   [19:0] sample_period_samples_2_timestamp_V_d1;
reg   [3:0] sample_period_samples_3_timestamp_V_address0;
reg    sample_period_samples_3_timestamp_V_ce0;
reg    sample_period_samples_3_timestamp_V_we0;
reg   [19:0] sample_period_samples_3_timestamp_V_d0;
wire   [19:0] sample_period_samples_3_timestamp_V_q0;
reg   [3:0] sample_period_samples_3_timestamp_V_address1;
reg    sample_period_samples_3_timestamp_V_ce1;
reg    sample_period_samples_3_timestamp_V_we1;
reg   [19:0] sample_period_samples_3_timestamp_V_d1;
reg   [3:0] sample_period_samples_4_timestamp_V_address0;
reg    sample_period_samples_4_timestamp_V_ce0;
reg    sample_period_samples_4_timestamp_V_we0;
reg   [19:0] sample_period_samples_4_timestamp_V_d0;
wire   [19:0] sample_period_samples_4_timestamp_V_q0;
reg   [3:0] sample_period_samples_4_timestamp_V_address1;
reg    sample_period_samples_4_timestamp_V_ce1;
reg    sample_period_samples_4_timestamp_V_we1;
reg   [19:0] sample_period_samples_4_timestamp_V_d1;
reg   [3:0] sample_period_samples_5_timestamp_V_address0;
reg    sample_period_samples_5_timestamp_V_ce0;
reg    sample_period_samples_5_timestamp_V_we0;
reg   [19:0] sample_period_samples_5_timestamp_V_d0;
wire   [19:0] sample_period_samples_5_timestamp_V_q0;
reg   [3:0] sample_period_samples_5_timestamp_V_address1;
reg    sample_period_samples_5_timestamp_V_ce1;
reg    sample_period_samples_5_timestamp_V_we1;
reg   [19:0] sample_period_samples_5_timestamp_V_d1;
reg   [3:0] sample_period_samples_6_timestamp_V_address0;
reg    sample_period_samples_6_timestamp_V_ce0;
reg    sample_period_samples_6_timestamp_V_we0;
reg   [19:0] sample_period_samples_6_timestamp_V_d0;
wire   [19:0] sample_period_samples_6_timestamp_V_q0;
reg   [3:0] sample_period_samples_6_timestamp_V_address1;
reg    sample_period_samples_6_timestamp_V_ce1;
reg    sample_period_samples_6_timestamp_V_we1;
reg   [19:0] sample_period_samples_6_timestamp_V_d1;
reg   [3:0] sample_period_samples_7_timestamp_V_address0;
reg    sample_period_samples_7_timestamp_V_ce0;
reg    sample_period_samples_7_timestamp_V_we0;
reg   [19:0] sample_period_samples_7_timestamp_V_d0;
wire   [19:0] sample_period_samples_7_timestamp_V_q0;
reg   [3:0] sample_period_samples_7_timestamp_V_address1;
reg    sample_period_samples_7_timestamp_V_ce1;
reg    sample_period_samples_7_timestamp_V_we1;
reg   [19:0] sample_period_samples_7_timestamp_V_d1;
reg   [3:0] sample_period_samples_8_timestamp_V_address0;
reg    sample_period_samples_8_timestamp_V_ce0;
reg    sample_period_samples_8_timestamp_V_we0;
reg   [19:0] sample_period_samples_8_timestamp_V_d0;
wire   [19:0] sample_period_samples_8_timestamp_V_q0;
reg   [3:0] sample_period_samples_8_timestamp_V_address1;
reg    sample_period_samples_8_timestamp_V_ce1;
reg    sample_period_samples_8_timestamp_V_we1;
reg   [19:0] sample_period_samples_8_timestamp_V_d1;
reg   [3:0] sample_period_samples_9_timestamp_V_address0;
reg    sample_period_samples_9_timestamp_V_ce0;
reg    sample_period_samples_9_timestamp_V_we0;
reg   [19:0] sample_period_samples_9_timestamp_V_d0;
wire   [19:0] sample_period_samples_9_timestamp_V_q0;
reg   [3:0] sample_period_samples_9_timestamp_V_address1;
reg    sample_period_samples_9_timestamp_V_ce1;
reg    sample_period_samples_9_timestamp_V_we1;
reg   [19:0] sample_period_samples_9_timestamp_V_d1;
reg   [3:0] sample_period_samples_10_timestamp_V_address0;
reg    sample_period_samples_10_timestamp_V_ce0;
reg    sample_period_samples_10_timestamp_V_we0;
reg   [19:0] sample_period_samples_10_timestamp_V_d0;
wire   [19:0] sample_period_samples_10_timestamp_V_q0;
reg   [3:0] sample_period_samples_10_timestamp_V_address1;
reg    sample_period_samples_10_timestamp_V_ce1;
reg    sample_period_samples_10_timestamp_V_we1;
reg   [19:0] sample_period_samples_10_timestamp_V_d1;
reg   [3:0] sample_period_samples_11_timestamp_V_address0;
reg    sample_period_samples_11_timestamp_V_ce0;
reg    sample_period_samples_11_timestamp_V_we0;
reg   [19:0] sample_period_samples_11_timestamp_V_d0;
wire   [19:0] sample_period_samples_11_timestamp_V_q0;
reg   [3:0] sample_period_samples_11_timestamp_V_address1;
reg    sample_period_samples_11_timestamp_V_ce1;
reg    sample_period_samples_11_timestamp_V_we1;
reg   [19:0] sample_period_samples_11_timestamp_V_d1;
reg   [3:0] sample_sample_V_address0;
reg    sample_sample_V_ce0;
reg    sample_sample_V_we0;
reg   [11:0] sample_sample_V_d0;
wire   [11:0] sample_sample_V_q0;
reg   [3:0] sample_sample_V_address1;
reg    sample_sample_V_ce1;
reg    sample_sample_V_we1;
reg   [11:0] sample_sample_V_d1;
reg   [3:0] sample_timestamp_V_address0;
reg    sample_timestamp_V_ce0;
reg    sample_timestamp_V_we0;
reg   [19:0] sample_timestamp_V_d0;
wire   [19:0] sample_timestamp_V_q0;
reg   [3:0] sample_timestamp_V_address1;
reg    sample_timestamp_V_ce1;
reg    sample_timestamp_V_we1;
reg   [19:0] sample_timestamp_V_d1;
reg   [31:0] i_08_in_reg_6640;
reg   [5:0] j_reg_6649;
reg  signed [31:0] idx_2_reg_6660;
wire   [63:0] k_cast_fu_6899_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln176_fu_6935_p1;
reg   [31:0] idx_fu_588;
wire   [31:0] add_ln160_fu_6879_p2;
wire   [31:0] buffer_idx_fu_6730_p2;
wire   [0:0] icmp_ln32_fu_6739_p2;
wire   [4:0] buffer_idx_2_fu_6735_p1;
wire   [4:0] buffer_idx_3_fu_6745_p3;
wire   [0:0] icmp_ln34_fu_6825_p2;
wire   [3:0] trunc_ln160_fu_6816_p1;
wire   [3:0] select_ln34_fu_6831_p3;
wire   [9:0] shl_ln_fu_6847_p3;
wire   [7:0] shl_ln160_1_fu_6858_p3;
wire   [10:0] zext_ln160_fu_6854_p1;
wire   [10:0] zext_ln160_1_fu_6865_p1;
wire   [10:0] sub_ln160_fu_6869_p2;
wire  signed [31:0] sext_ln160_fu_6875_p1;
wire   [11:0] add_ln176_1_fu_6930_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_0_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_0_sample_V_address0),
    .ce0(sample_period_samples_0_sample_V_ce0),
    .we0(sample_period_samples_0_sample_V_we0),
    .d0(sample_period_samples_0_sample_V_d0),
    .q0(sample_period_samples_0_sample_V_q0),
    .address1(sample_period_samples_0_sample_V_address1),
    .ce1(sample_period_samples_0_sample_V_ce1),
    .we1(sample_period_samples_0_sample_V_we1),
    .d1(sample_period_samples_0_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_1_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_1_sample_V_address0),
    .ce0(sample_period_samples_1_sample_V_ce0),
    .we0(sample_period_samples_1_sample_V_we0),
    .d0(sample_period_samples_1_sample_V_d0),
    .q0(sample_period_samples_1_sample_V_q0),
    .address1(sample_period_samples_1_sample_V_address1),
    .ce1(sample_period_samples_1_sample_V_ce1),
    .we1(sample_period_samples_1_sample_V_we1),
    .d1(sample_period_samples_1_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_2_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_2_sample_V_address0),
    .ce0(sample_period_samples_2_sample_V_ce0),
    .we0(sample_period_samples_2_sample_V_we0),
    .d0(sample_period_samples_2_sample_V_d0),
    .q0(sample_period_samples_2_sample_V_q0),
    .address1(sample_period_samples_2_sample_V_address1),
    .ce1(sample_period_samples_2_sample_V_ce1),
    .we1(sample_period_samples_2_sample_V_we1),
    .d1(sample_period_samples_2_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_3_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_3_sample_V_address0),
    .ce0(sample_period_samples_3_sample_V_ce0),
    .we0(sample_period_samples_3_sample_V_we0),
    .d0(sample_period_samples_3_sample_V_d0),
    .q0(sample_period_samples_3_sample_V_q0),
    .address1(sample_period_samples_3_sample_V_address1),
    .ce1(sample_period_samples_3_sample_V_ce1),
    .we1(sample_period_samples_3_sample_V_we1),
    .d1(sample_period_samples_3_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_4_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_4_sample_V_address0),
    .ce0(sample_period_samples_4_sample_V_ce0),
    .we0(sample_period_samples_4_sample_V_we0),
    .d0(sample_period_samples_4_sample_V_d0),
    .q0(sample_period_samples_4_sample_V_q0),
    .address1(sample_period_samples_4_sample_V_address1),
    .ce1(sample_period_samples_4_sample_V_ce1),
    .we1(sample_period_samples_4_sample_V_we1),
    .d1(sample_period_samples_4_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_5_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_5_sample_V_address0),
    .ce0(sample_period_samples_5_sample_V_ce0),
    .we0(sample_period_samples_5_sample_V_we0),
    .d0(sample_period_samples_5_sample_V_d0),
    .q0(sample_period_samples_5_sample_V_q0),
    .address1(sample_period_samples_5_sample_V_address1),
    .ce1(sample_period_samples_5_sample_V_ce1),
    .we1(sample_period_samples_5_sample_V_we1),
    .d1(sample_period_samples_5_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_6_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_6_sample_V_address0),
    .ce0(sample_period_samples_6_sample_V_ce0),
    .we0(sample_period_samples_6_sample_V_we0),
    .d0(sample_period_samples_6_sample_V_d0),
    .q0(sample_period_samples_6_sample_V_q0),
    .address1(sample_period_samples_6_sample_V_address1),
    .ce1(sample_period_samples_6_sample_V_ce1),
    .we1(sample_period_samples_6_sample_V_we1),
    .d1(sample_period_samples_6_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_7_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_7_sample_V_address0),
    .ce0(sample_period_samples_7_sample_V_ce0),
    .we0(sample_period_samples_7_sample_V_we0),
    .d0(sample_period_samples_7_sample_V_d0),
    .q0(sample_period_samples_7_sample_V_q0),
    .address1(sample_period_samples_7_sample_V_address1),
    .ce1(sample_period_samples_7_sample_V_ce1),
    .we1(sample_period_samples_7_sample_V_we1),
    .d1(sample_period_samples_7_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_8_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_8_sample_V_address0),
    .ce0(sample_period_samples_8_sample_V_ce0),
    .we0(sample_period_samples_8_sample_V_we0),
    .d0(sample_period_samples_8_sample_V_d0),
    .q0(sample_period_samples_8_sample_V_q0),
    .address1(sample_period_samples_8_sample_V_address1),
    .ce1(sample_period_samples_8_sample_V_ce1),
    .we1(sample_period_samples_8_sample_V_we1),
    .d1(sample_period_samples_8_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_9_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_9_sample_V_address0),
    .ce0(sample_period_samples_9_sample_V_ce0),
    .we0(sample_period_samples_9_sample_V_we0),
    .d0(sample_period_samples_9_sample_V_d0),
    .q0(sample_period_samples_9_sample_V_q0),
    .address1(sample_period_samples_9_sample_V_address1),
    .ce1(sample_period_samples_9_sample_V_ce1),
    .we1(sample_period_samples_9_sample_V_we1),
    .d1(sample_period_samples_9_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_10_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_10_sample_V_address0),
    .ce0(sample_period_samples_10_sample_V_ce0),
    .we0(sample_period_samples_10_sample_V_we0),
    .d0(sample_period_samples_10_sample_V_d0),
    .q0(sample_period_samples_10_sample_V_q0),
    .address1(sample_period_samples_10_sample_V_address1),
    .ce1(sample_period_samples_10_sample_V_ce1),
    .we1(sample_period_samples_10_sample_V_we1),
    .d1(sample_period_samples_10_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_11_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_11_sample_V_address0),
    .ce0(sample_period_samples_11_sample_V_ce0),
    .we0(sample_period_samples_11_sample_V_we0),
    .d0(sample_period_samples_11_sample_V_d0),
    .q0(sample_period_samples_11_sample_V_q0),
    .address1(sample_period_samples_11_sample_V_address1),
    .ce1(sample_period_samples_11_sample_V_ce1),
    .we1(sample_period_samples_11_sample_V_we1),
    .d1(sample_period_samples_11_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_0_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_0_timestamp_V_address0),
    .ce0(sample_period_samples_0_timestamp_V_ce0),
    .we0(sample_period_samples_0_timestamp_V_we0),
    .d0(sample_period_samples_0_timestamp_V_d0),
    .q0(sample_period_samples_0_timestamp_V_q0),
    .address1(sample_period_samples_0_timestamp_V_address1),
    .ce1(sample_period_samples_0_timestamp_V_ce1),
    .we1(sample_period_samples_0_timestamp_V_we1),
    .d1(sample_period_samples_0_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_1_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_1_timestamp_V_address0),
    .ce0(sample_period_samples_1_timestamp_V_ce0),
    .we0(sample_period_samples_1_timestamp_V_we0),
    .d0(sample_period_samples_1_timestamp_V_d0),
    .q0(sample_period_samples_1_timestamp_V_q0),
    .address1(sample_period_samples_1_timestamp_V_address1),
    .ce1(sample_period_samples_1_timestamp_V_ce1),
    .we1(sample_period_samples_1_timestamp_V_we1),
    .d1(sample_period_samples_1_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_2_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_2_timestamp_V_address0),
    .ce0(sample_period_samples_2_timestamp_V_ce0),
    .we0(sample_period_samples_2_timestamp_V_we0),
    .d0(sample_period_samples_2_timestamp_V_d0),
    .q0(sample_period_samples_2_timestamp_V_q0),
    .address1(sample_period_samples_2_timestamp_V_address1),
    .ce1(sample_period_samples_2_timestamp_V_ce1),
    .we1(sample_period_samples_2_timestamp_V_we1),
    .d1(sample_period_samples_2_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_3_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_3_timestamp_V_address0),
    .ce0(sample_period_samples_3_timestamp_V_ce0),
    .we0(sample_period_samples_3_timestamp_V_we0),
    .d0(sample_period_samples_3_timestamp_V_d0),
    .q0(sample_period_samples_3_timestamp_V_q0),
    .address1(sample_period_samples_3_timestamp_V_address1),
    .ce1(sample_period_samples_3_timestamp_V_ce1),
    .we1(sample_period_samples_3_timestamp_V_we1),
    .d1(sample_period_samples_3_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_4_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_4_timestamp_V_address0),
    .ce0(sample_period_samples_4_timestamp_V_ce0),
    .we0(sample_period_samples_4_timestamp_V_we0),
    .d0(sample_period_samples_4_timestamp_V_d0),
    .q0(sample_period_samples_4_timestamp_V_q0),
    .address1(sample_period_samples_4_timestamp_V_address1),
    .ce1(sample_period_samples_4_timestamp_V_ce1),
    .we1(sample_period_samples_4_timestamp_V_we1),
    .d1(sample_period_samples_4_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_5_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_5_timestamp_V_address0),
    .ce0(sample_period_samples_5_timestamp_V_ce0),
    .we0(sample_period_samples_5_timestamp_V_we0),
    .d0(sample_period_samples_5_timestamp_V_d0),
    .q0(sample_period_samples_5_timestamp_V_q0),
    .address1(sample_period_samples_5_timestamp_V_address1),
    .ce1(sample_period_samples_5_timestamp_V_ce1),
    .we1(sample_period_samples_5_timestamp_V_we1),
    .d1(sample_period_samples_5_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_6_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_6_timestamp_V_address0),
    .ce0(sample_period_samples_6_timestamp_V_ce0),
    .we0(sample_period_samples_6_timestamp_V_we0),
    .d0(sample_period_samples_6_timestamp_V_d0),
    .q0(sample_period_samples_6_timestamp_V_q0),
    .address1(sample_period_samples_6_timestamp_V_address1),
    .ce1(sample_period_samples_6_timestamp_V_ce1),
    .we1(sample_period_samples_6_timestamp_V_we1),
    .d1(sample_period_samples_6_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_7_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_7_timestamp_V_address0),
    .ce0(sample_period_samples_7_timestamp_V_ce0),
    .we0(sample_period_samples_7_timestamp_V_we0),
    .d0(sample_period_samples_7_timestamp_V_d0),
    .q0(sample_period_samples_7_timestamp_V_q0),
    .address1(sample_period_samples_7_timestamp_V_address1),
    .ce1(sample_period_samples_7_timestamp_V_ce1),
    .we1(sample_period_samples_7_timestamp_V_we1),
    .d1(sample_period_samples_7_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_8_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_8_timestamp_V_address0),
    .ce0(sample_period_samples_8_timestamp_V_ce0),
    .we0(sample_period_samples_8_timestamp_V_we0),
    .d0(sample_period_samples_8_timestamp_V_d0),
    .q0(sample_period_samples_8_timestamp_V_q0),
    .address1(sample_period_samples_8_timestamp_V_address1),
    .ce1(sample_period_samples_8_timestamp_V_ce1),
    .we1(sample_period_samples_8_timestamp_V_we1),
    .d1(sample_period_samples_8_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_9_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_9_timestamp_V_address0),
    .ce0(sample_period_samples_9_timestamp_V_ce0),
    .we0(sample_period_samples_9_timestamp_V_we0),
    .d0(sample_period_samples_9_timestamp_V_d0),
    .q0(sample_period_samples_9_timestamp_V_q0),
    .address1(sample_period_samples_9_timestamp_V_address1),
    .ce1(sample_period_samples_9_timestamp_V_ce1),
    .we1(sample_period_samples_9_timestamp_V_we1),
    .d1(sample_period_samples_9_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_10_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_10_timestamp_V_address0),
    .ce0(sample_period_samples_10_timestamp_V_ce0),
    .we0(sample_period_samples_10_timestamp_V_we0),
    .d0(sample_period_samples_10_timestamp_V_d0),
    .q0(sample_period_samples_10_timestamp_V_q0),
    .address1(sample_period_samples_10_timestamp_V_address1),
    .ce1(sample_period_samples_10_timestamp_V_ce1),
    .we1(sample_period_samples_10_timestamp_V_we1),
    .d1(sample_period_samples_10_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
sample_period_samples_11_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_period_samples_11_timestamp_V_address0),
    .ce0(sample_period_samples_11_timestamp_V_ce0),
    .we0(sample_period_samples_11_timestamp_V_we0),
    .d0(sample_period_samples_11_timestamp_V_d0),
    .q0(sample_period_samples_11_timestamp_V_q0),
    .address1(sample_period_samples_11_timestamp_V_address1),
    .ce1(sample_period_samples_11_timestamp_V_ce1),
    .we1(sample_period_samples_11_timestamp_V_we1),
    .d1(sample_period_samples_11_timestamp_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_sample_V #(
    .DataWidth( 12 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
sample_sample_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_sample_V_address0),
    .ce0(sample_sample_V_ce0),
    .we0(sample_sample_V_we0),
    .d0(sample_sample_V_d0),
    .q0(sample_sample_V_q0),
    .address1(sample_sample_V_address1),
    .ce1(sample_sample_V_ce1),
    .we1(sample_sample_V_we1),
    .d1(sample_sample_V_d1)
);

SlidingWindowMagSampleFetcher_writeToRAM_sample_timestamp_V #(
    .DataWidth( 20 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
sample_timestamp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sample_timestamp_V_address0),
    .ce0(sample_timestamp_V_ce0),
    .we0(sample_timestamp_V_we0),
    .d0(sample_timestamp_V_d0),
    .q0(sample_timestamp_V_q0),
    .address1(sample_timestamp_V_address1),
    .ce1(sample_timestamp_V_ce1),
    .we1(sample_timestamp_V_we1),
    .d1(sample_timestamp_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state15))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state15);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln160_1_fu_6820_p2 == 1'd1) | (icmp_ln160_reg_9708 == 1'd1)))) begin
        i_08_in_reg_6640 <= i_reg_8291;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_08_in_reg_6640 <= n_periods_cast_fu_6690_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln160_fu_6804_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        idx_2_reg_6660 <= idx_fu_588;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        idx_2_reg_6660 <= add_ln160_1_fu_6940_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        idx_4_reg_6670 <= sext_ln167_fu_6889_p1;
    end else if (((icmp_ln167_fu_6905_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_4_reg_6670 <= add_ln176_fu_6915_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idx_fu_588 <= 32'd0;
    end else if (((icmp_ln160_1_fu_6820_p2 == 1'd1) & (icmp_ln160_reg_9708 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        idx_fu_588 <= add_ln160_fu_6879_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln160_fu_6804_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_reg_6649 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_reg_6649 <= j_1_reg_9712;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        k_reg_6679 <= 4'd0;
    end else if (((icmp_ln167_fu_6905_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_6679 <= add_ln167_fu_6893_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_8291 <= i_fu_6718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln160_reg_9708 <= icmp_ln160_fu_6804_p2;
        sample_period_count_s_reg_9701 <= sliding_window_buffer_count_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln167_reg_9874 <= icmp_ln167_fu_6905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln160_reg_9708 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j_1_reg_9712 <= j_1_fu_6810_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln34_reg_8278 <= sext_ln34_fu_6698_p1;
        trunc_ln22_reg_8283 <= trunc_ln22_fu_6706_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_6905_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln176_reg_9888 <= trunc_ln176_fu_6911_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln160_1_fu_6820_p2 == 1'd0) & (icmp_ln160_reg_9708 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        zext_ln40_reg_9720[3 : 0] <= zext_ln40_fu_6839_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_fu_6724_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln46_reg_8299[4 : 0] <= zext_ln46_fu_6752_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln167_fu_6905_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln151_fu_6724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_6724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_out_ce0 = 1'b1;
    end else begin
        buffer_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln167_reg_9874 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_out_we0 = 1'b1;
    end else begin
        buffer_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_0_sample_V_address0 = zext_ln40_fu_6839_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_0_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_0_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_0_q0;
    end else begin
        sample_period_samples_0_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_0_q0;
    end else begin
        sample_period_samples_0_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_0_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_0_timestamp_V_address0 = zext_ln40_fu_6839_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_0_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_0_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_0_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_0_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_0_q0;
    end else begin
        sample_period_samples_0_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_0_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_0_q0;
    end else begin
        sample_period_samples_0_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_0_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_0_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_0_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_period_samples_10_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_10_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_10_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_10_q0;
    end else begin
        sample_period_samples_10_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_10_q0;
    end else begin
        sample_period_samples_10_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_10_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_period_samples_10_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_10_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_10_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_10_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_10_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_10_q0;
    end else begin
        sample_period_samples_10_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_10_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_10_q0;
    end else begin
        sample_period_samples_10_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_10_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_10_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_10_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_period_samples_11_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_11_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_11_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_11_q0;
    end else begin
        sample_period_samples_11_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_11_q0;
    end else begin
        sample_period_samples_11_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_11_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_period_samples_11_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_11_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_11_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_11_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_11_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_11_q0;
    end else begin
        sample_period_samples_11_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_11_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_11_q0;
    end else begin
        sample_period_samples_11_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_11_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_11_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_11_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_1_sample_V_address0 = zext_ln40_fu_6839_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_1_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_1_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_1_q0;
    end else begin
        sample_period_samples_1_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_1_q0;
    end else begin
        sample_period_samples_1_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_1_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_period_samples_1_timestamp_V_address0 = zext_ln40_fu_6839_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_1_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_1_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_1_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_1_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_1_q0;
    end else begin
        sample_period_samples_1_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_1_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_1_q0;
    end else begin
        sample_period_samples_1_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_1_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_1_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_1_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_period_samples_2_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_2_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_2_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_2_q0;
    end else begin
        sample_period_samples_2_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_2_q0;
    end else begin
        sample_period_samples_2_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_2_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_period_samples_2_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_2_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_2_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_2_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_2_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_2_q0;
    end else begin
        sample_period_samples_2_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_2_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_2_q0;
    end else begin
        sample_period_samples_2_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_2_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_2_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_2_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_period_samples_3_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_3_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_3_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_3_q0;
    end else begin
        sample_period_samples_3_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_3_q0;
    end else begin
        sample_period_samples_3_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_3_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_period_samples_3_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_3_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_3_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_3_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_3_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_3_q0;
    end else begin
        sample_period_samples_3_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_3_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_3_q0;
    end else begin
        sample_period_samples_3_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_3_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_3_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_3_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_period_samples_4_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_4_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_4_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_4_q0;
    end else begin
        sample_period_samples_4_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_4_q0;
    end else begin
        sample_period_samples_4_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_4_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_period_samples_4_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_4_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_4_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_4_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_4_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_4_q0;
    end else begin
        sample_period_samples_4_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_4_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_4_q0;
    end else begin
        sample_period_samples_4_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_4_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_4_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_4_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_period_samples_5_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_5_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_5_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_5_q0;
    end else begin
        sample_period_samples_5_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_5_q0;
    end else begin
        sample_period_samples_5_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_5_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_period_samples_5_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_5_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_5_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_5_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_5_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_5_q0;
    end else begin
        sample_period_samples_5_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_5_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_5_q0;
    end else begin
        sample_period_samples_5_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_5_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_5_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_5_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_period_samples_6_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_6_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_6_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_6_q0;
    end else begin
        sample_period_samples_6_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_6_q0;
    end else begin
        sample_period_samples_6_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_6_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_period_samples_6_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_6_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_6_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_6_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_6_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_6_q0;
    end else begin
        sample_period_samples_6_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_6_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_6_q0;
    end else begin
        sample_period_samples_6_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_6_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_6_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_6_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_period_samples_7_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_7_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_7_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_7_q0;
    end else begin
        sample_period_samples_7_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_7_q0;
    end else begin
        sample_period_samples_7_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_7_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_period_samples_7_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_7_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_7_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_7_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_7_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_7_q0;
    end else begin
        sample_period_samples_7_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_7_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_7_q0;
    end else begin
        sample_period_samples_7_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_7_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_7_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_7_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_period_samples_8_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_8_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_8_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_8_q0;
    end else begin
        sample_period_samples_8_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_8_q0;
    end else begin
        sample_period_samples_8_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_8_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_period_samples_8_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_8_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_8_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_8_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_8_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_8_q0;
    end else begin
        sample_period_samples_8_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_8_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_8_q0;
    end else begin
        sample_period_samples_8_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_8_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_8_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_8_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_period_samples_9_sample_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_address0 = 64'd1;
    end else begin
        sample_period_samples_9_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_address1 = 64'd0;
    end else begin
        sample_period_samples_9_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_9_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_7_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_5_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_3_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_d0 = sliding_window_buffer_samples_sample_V_1_9_q0;
    end else begin
        sample_period_samples_9_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_8_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_6_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_4_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_2_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_sample_V_d1 = sliding_window_buffer_samples_sample_V_0_9_q0;
    end else begin
        sample_period_samples_9_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_we0 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_sample_V_we1 = 1'b1;
    end else begin
        sample_period_samples_9_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_period_samples_9_timestamp_V_address0 = zext_ln40_reg_9720;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_timestamp_V_address0 = 64'd1;
    end else begin
        sample_period_samples_9_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_timestamp_V_address1 = 64'd0;
    end else begin
        sample_period_samples_9_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_period_samples_9_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_period_samples_9_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_9_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_7_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_5_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_3_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_timestamp_V_d0 = sliding_window_buffer_samples_timestamp_V_1_9_q0;
    end else begin
        sample_period_samples_9_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_8_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_6_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_4_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_2_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sample_period_samples_9_timestamp_V_d1 = sliding_window_buffer_samples_timestamp_V_0_9_q0;
    end else begin
        sample_period_samples_9_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_timestamp_V_we0 = 1'b1;
    end else begin
        sample_period_samples_9_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        sample_period_samples_9_timestamp_V_we1 = 1'b1;
    end else begin
        sample_period_samples_9_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_sample_V_address0 = k_cast_fu_6899_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sample_sample_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_sample_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_sample_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_sample_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_sample_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_sample_V_address0 = 64'd1;
    end else begin
        sample_sample_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sample_sample_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_sample_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_sample_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_sample_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_sample_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_sample_V_address1 = 64'd0;
    end else begin
        sample_sample_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sample_sample_V_ce0 = 1'b1;
    end else begin
        sample_sample_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_sample_V_ce1 = 1'b1;
    end else begin
        sample_sample_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sample_sample_V_d0 = sample_period_samples_11_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_sample_V_d0 = sample_period_samples_9_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_sample_V_d0 = sample_period_samples_7_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_sample_V_d0 = sample_period_samples_5_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_sample_V_d0 = sample_period_samples_3_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_sample_V_d0 = sample_period_samples_1_sample_V_q0;
    end else begin
        sample_sample_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sample_sample_V_d1 = sample_period_samples_10_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_sample_V_d1 = sample_period_samples_8_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_sample_V_d1 = sample_period_samples_6_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_sample_V_d1 = sample_period_samples_4_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_sample_V_d1 = sample_period_samples_2_sample_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_sample_V_d1 = sample_period_samples_0_sample_V_q0;
    end else begin
        sample_sample_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_sample_V_we0 = 1'b1;
    end else begin
        sample_sample_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_sample_V_we1 = 1'b1;
    end else begin
        sample_sample_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_timestamp_V_address0 = k_cast_fu_6899_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sample_timestamp_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_timestamp_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_timestamp_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_timestamp_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_timestamp_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_timestamp_V_address0 = 64'd1;
    end else begin
        sample_timestamp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sample_timestamp_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_timestamp_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_timestamp_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_timestamp_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_timestamp_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_timestamp_V_address1 = 64'd0;
    end else begin
        sample_timestamp_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sample_timestamp_V_ce0 = 1'b1;
    end else begin
        sample_timestamp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_timestamp_V_ce1 = 1'b1;
    end else begin
        sample_timestamp_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sample_timestamp_V_d0 = sample_period_samples_11_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_timestamp_V_d0 = sample_period_samples_9_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_timestamp_V_d0 = sample_period_samples_7_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_timestamp_V_d0 = sample_period_samples_5_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_timestamp_V_d0 = sample_period_samples_3_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_timestamp_V_d0 = sample_period_samples_1_timestamp_V_q0;
    end else begin
        sample_timestamp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sample_timestamp_V_d1 = sample_period_samples_10_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sample_timestamp_V_d1 = sample_period_samples_8_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sample_timestamp_V_d1 = sample_period_samples_6_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sample_timestamp_V_d1 = sample_period_samples_4_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_timestamp_V_d1 = sample_period_samples_2_timestamp_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sample_timestamp_V_d1 = sample_period_samples_0_timestamp_V_q0;
    end else begin
        sample_timestamp_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_timestamp_V_we0 = 1'b1;
    end else begin
        sample_timestamp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        sample_timestamp_V_we1 = 1'b1;
    end else begin
        sample_timestamp_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_count_s_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_count_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_0_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_sample_V_1_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_2_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_sample_V_3_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_4_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_sample_V_5_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_5_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_6_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_6_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_sample_V_7_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_7_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_8_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_8_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_sample_V_9_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_sample_V_9_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_0_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sliding_window_buffer_samples_timestamp_V_1_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_2_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sliding_window_buffer_samples_timestamp_V_3_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_4_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sliding_window_buffer_samples_timestamp_V_5_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_5_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_6_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_6_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sliding_window_buffer_samples_timestamp_V_7_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_7_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_8_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_8_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_0_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_10_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_11_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_1_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_2_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_3_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_4_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_5_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_6_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_7_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_8_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sliding_window_buffer_samples_timestamp_V_9_9_ce0 = 1'b1;
    end else begin
        sliding_window_buffer_samples_timestamp_V_9_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln151_fu_6724_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & ((icmp_ln160_1_fu_6820_p2 == 1'd1) | (icmp_ln160_reg_9708 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln167_fu_6905_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln167_fu_6905_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln160_1_fu_6940_p2 = ($signed(idx_2_reg_6660) + $signed(32'd12));

assign add_ln160_fu_6879_p2 = ($signed(sext_ln160_fu_6875_p1) + $signed(idx_fu_588));

assign add_ln167_fu_6893_p2 = (k_reg_6679 + 4'd1);

assign add_ln176_1_fu_6930_p2 = (trunc_ln176_reg_9888 + 12'd1);

assign add_ln176_fu_6915_p2 = (idx_4_reg_6670 + 33'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = idx_fu_588;

assign buffer_idx_2_fu_6735_p1 = buffer_idx_fu_6730_p2[4:0];

assign buffer_idx_3_fu_6745_p3 = ((icmp_ln32_fu_6739_p2[0:0] == 1'b1) ? trunc_ln22_reg_8283 : buffer_idx_2_fu_6735_p1);

assign buffer_idx_fu_6730_p2 = ($signed(sext_ln34_reg_8278) - $signed(i_fu_6718_p2));

assign buffer_out_address0 = zext_ln176_fu_6935_p1;

assign buffer_out_d0 = {{sample_timestamp_V_q0}, {sample_sample_V_q0}};

assign i_fu_6718_p2 = ($signed(i_08_in_reg_6640) + $signed(32'd4294967295));

assign icmp_ln151_fu_6724_p2 = (($signed(i_08_in_reg_6640) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln160_1_fu_6820_p2 = ((j_reg_6649 == sample_period_count_s_reg_9701) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_6804_p2 = ((sliding_window_buffer_count_s_q0 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_6905_p2 = ((k_reg_6679 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_6739_p2 = (($signed(buffer_idx_fu_6730_p2) < $signed(32'd4294967264)) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_6825_p2 = ((j_reg_6649 > 6'd10) ? 1'b1 : 1'b0);

assign j_1_fu_6810_p2 = (j_reg_6649 + 6'd1);

assign k_cast_fu_6899_p1 = k_reg_6679;

assign n_periods_cast_fu_6690_p1 = n_periods;

assign select_ln34_fu_6831_p3 = ((icmp_ln34_fu_6825_p2[0:0] == 1'b1) ? 4'd9 : trunc_ln160_fu_6816_p1);

assign sext_ln160_fu_6875_p1 = $signed(sub_ln160_fu_6869_p2);

assign sext_ln167_fu_6889_p1 = idx_2_reg_6660;

assign sext_ln34_fu_6698_p1 = $signed(sliding_window_front_ptr_s);

assign shl_ln160_1_fu_6858_p3 = {{sample_period_count_s_reg_9701}, {2'd0}};

assign shl_ln_fu_6847_p3 = {{sample_period_count_s_reg_9701}, {4'd0}};

assign sliding_window_buffer_count_s_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_0_0_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_10_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_11_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_1_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_2_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_3_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_4_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_5_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_6_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_7_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_8_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_0_9_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_0_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_10_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_11_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_1_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_2_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_3_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_4_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_5_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_6_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_7_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_8_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_1_9_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_sample_V_2_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_2_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_3_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_4_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_5_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_6_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_7_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_8_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_sample_V_9_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_0_0_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_10_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_11_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_1_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_2_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_3_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_4_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_5_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_6_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_7_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_8_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_0_9_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_0_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_10_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_11_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_1_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_2_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_3_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_4_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_5_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_6_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_7_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_8_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_1_9_address0 = zext_ln46_fu_6752_p1;

assign sliding_window_buffer_samples_timestamp_V_2_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_2_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_3_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_4_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_5_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_6_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_7_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_8_9_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_0_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_10_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_11_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_1_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_2_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_3_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_4_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_5_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_6_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_7_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_8_address0 = zext_ln46_reg_8299;

assign sliding_window_buffer_samples_timestamp_V_9_9_address0 = zext_ln46_reg_8299;

assign sub_ln160_fu_6869_p2 = (zext_ln160_fu_6854_p1 - zext_ln160_1_fu_6865_p1);

assign trunc_ln160_fu_6816_p1 = j_reg_6649[3:0];

assign trunc_ln176_fu_6911_p1 = idx_4_reg_6670[11:0];

assign trunc_ln22_fu_6706_p1 = sliding_window_back_ptr_s[4:0];

assign zext_ln160_1_fu_6865_p1 = shl_ln160_1_fu_6858_p3;

assign zext_ln160_fu_6854_p1 = shl_ln_fu_6847_p3;

assign zext_ln176_fu_6935_p1 = add_ln176_1_fu_6930_p2;

assign zext_ln40_fu_6839_p1 = select_ln34_fu_6831_p3;

assign zext_ln46_fu_6752_p1 = buffer_idx_3_fu_6745_p3;

always @ (posedge ap_clk) begin
    zext_ln46_reg_8299[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln40_reg_9720[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //SlidingWindowMagSampleFetcher_writeToRAM
