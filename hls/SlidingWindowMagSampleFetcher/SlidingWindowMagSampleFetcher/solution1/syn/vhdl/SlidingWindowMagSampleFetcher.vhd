-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SlidingWindowMagSampleFetcher is
generic (
    C_S_AXI_AXI_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXI_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    buffer_in_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_0_ce0 : OUT STD_LOGIC;
    buffer_in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_1_ce0 : OUT STD_LOGIC;
    buffer_in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_2_ce0 : OUT STD_LOGIC;
    buffer_in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_3_ce0 : OUT STD_LOGIC;
    buffer_in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_4_ce0 : OUT STD_LOGIC;
    buffer_in_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_5_ce0 : OUT STD_LOGIC;
    buffer_in_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_6_ce0 : OUT STD_LOGIC;
    buffer_in_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_7_ce0 : OUT STD_LOGIC;
    buffer_in_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_8_ce0 : OUT STD_LOGIC;
    buffer_in_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_9_ce0 : OUT STD_LOGIC;
    buffer_in_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_10_ce0 : OUT STD_LOGIC;
    buffer_in_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_11_ce0 : OUT STD_LOGIC;
    buffer_in_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buffer_out_ce0 : OUT STD_LOGIC;
    buffer_out_we0 : OUT STD_LOGIC;
    buffer_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_out_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buffer_out_ce1 : OUT STD_LOGIC;
    buffer_out_we1 : OUT STD_LOGIC;
    buffer_out_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bfr_irq : IN STD_LOGIC;
    n_samples : IN STD_LOGIC_VECTOR (5 downto 0);
    n_samples_ap_vld : IN STD_LOGIC;
    start_write_i : IN STD_LOGIC;
    start_write_o : OUT STD_LOGIC;
    start_write_o_ap_vld : OUT STD_LOGIC;
    write_finished : OUT STD_LOGIC;
    write_finished_ap_vld : OUT STD_LOGIC;
    s_axi_axi_AWVALID : IN STD_LOGIC;
    s_axi_axi_AWREADY : OUT STD_LOGIC;
    s_axi_axi_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_ADDR_WIDTH-1 downto 0);
    s_axi_axi_WVALID : IN STD_LOGIC;
    s_axi_axi_WREADY : OUT STD_LOGIC;
    s_axi_axi_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_DATA_WIDTH-1 downto 0);
    s_axi_axi_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_DATA_WIDTH/8-1 downto 0);
    s_axi_axi_ARVALID : IN STD_LOGIC;
    s_axi_axi_ARREADY : OUT STD_LOGIC;
    s_axi_axi_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_ADDR_WIDTH-1 downto 0);
    s_axi_axi_RVALID : OUT STD_LOGIC;
    s_axi_axi_RREADY : IN STD_LOGIC;
    s_axi_axi_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_DATA_WIDTH-1 downto 0);
    s_axi_axi_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_axi_BVALID : OUT STD_LOGIC;
    s_axi_axi_BREADY : IN STD_LOGIC;
    s_axi_axi_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of SlidingWindowMagSampleFetcher is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SlidingWindowMagSampleFetcher_SlidingWindowMagSampleFetcher,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.676000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1294,HLS_SYN_LUT=1633,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal n_periods : STD_LOGIC_VECTOR (7 downto 0);
    signal n_samples_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal n_samples_in_sig : STD_LOGIC_VECTOR (5 downto 0);
    signal n_samples_ap_vld_preg : STD_LOGIC := '0';
    signal n_samples_ap_vld_in_sig : STD_LOGIC;
    signal n_samples_out_ap_vld : STD_LOGIC;
    signal n_samples_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bfr_irq_read_read_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_periods_read_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln8_fu_236_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bfr_irq_read_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_write_read_read_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_write_read_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sliding_window_buffer_count_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sliding_window_buffer_count_s_ce0 : STD_LOGIC;
    signal sliding_window_buffer_count_s_we0 : STD_LOGIC;
    signal sliding_window_buffer_count_s_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_loadSlidingWindow_fu_205_ap_start : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_ap_done : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_ap_idle : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_ap_ready : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_0_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_1_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_2_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_3_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_4_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_5_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_6_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_7_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_8_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_9_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_10_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_buffer_in_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadSlidingWindow_fu_205_buffer_in_11_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_ce0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_we0 : STD_LOGIC;
    signal grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_i_reg_182 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln8_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_sliding_window_size_0_phi_fu_197_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal sliding_window_size_0_reg_193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal grp_loadSlidingWindow_fu_205_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call1 : BOOLEAN;
    signal zext_ln12_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln94_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln90_fu_253_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component SlidingWindowMagSampleFetcher_loadSlidingWindow IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_in_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_0_ce0 : OUT STD_LOGIC;
        buffer_in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_1_ce0 : OUT STD_LOGIC;
        buffer_in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_2_ce0 : OUT STD_LOGIC;
        buffer_in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_3_ce0 : OUT STD_LOGIC;
        buffer_in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_4_ce0 : OUT STD_LOGIC;
        buffer_in_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_5_ce0 : OUT STD_LOGIC;
        buffer_in_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_6_ce0 : OUT STD_LOGIC;
        buffer_in_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_7_ce0 : OUT STD_LOGIC;
        buffer_in_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_8_ce0 : OUT STD_LOGIC;
        buffer_in_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_9_ce0 : OUT STD_LOGIC;
        buffer_in_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_10_ce0 : OUT STD_LOGIC;
        buffer_in_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_in_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_in_11_ce0 : OUT STD_LOGIC;
        buffer_in_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sliding_window_buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sliding_window_buffer_1_ce0 : OUT STD_LOGIC;
        sliding_window_buffer_1_we0 : OUT STD_LOGIC;
        sliding_window_buffer_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        n_samples : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component SlidingWindowMagSampleFetcher_sliding_window_buffer_count_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component SlidingWindowMagSampleFetcher_axi_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        n_periods : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_samples_out : IN STD_LOGIC_VECTOR (31 downto 0);
        n_samples_out_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    axi_s_axi_U : component SlidingWindowMagSampleFetcher_axi_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_DATA_WIDTH)
    port map (
        AWVALID => s_axi_axi_AWVALID,
        AWREADY => s_axi_axi_AWREADY,
        AWADDR => s_axi_axi_AWADDR,
        WVALID => s_axi_axi_WVALID,
        WREADY => s_axi_axi_WREADY,
        WDATA => s_axi_axi_WDATA,
        WSTRB => s_axi_axi_WSTRB,
        ARVALID => s_axi_axi_ARVALID,
        ARREADY => s_axi_axi_ARREADY,
        ARADDR => s_axi_axi_ARADDR,
        RVALID => s_axi_axi_RVALID,
        RREADY => s_axi_axi_RREADY,
        RDATA => s_axi_axi_RDATA,
        RRESP => s_axi_axi_RRESP,
        BVALID => s_axi_axi_BVALID,
        BREADY => s_axi_axi_BREADY,
        BRESP => s_axi_axi_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        n_periods => n_periods,
        n_samples_out => ap_const_lv32_0,
        n_samples_out_ap_vld => n_samples_out_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    sliding_window_buffer_count_s_U : component SlidingWindowMagSampleFetcher_sliding_window_buffer_count_s
    generic map (
        DataWidth => 6,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sliding_window_buffer_count_s_address0,
        ce0 => sliding_window_buffer_count_s_ce0,
        we0 => sliding_window_buffer_count_s_we0,
        d0 => sliding_window_buffer_count_s_d0);

    grp_loadSlidingWindow_fu_205 : component SlidingWindowMagSampleFetcher_loadSlidingWindow
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_loadSlidingWindow_fu_205_ap_start,
        ap_done => grp_loadSlidingWindow_fu_205_ap_done,
        ap_idle => grp_loadSlidingWindow_fu_205_ap_idle,
        ap_ready => grp_loadSlidingWindow_fu_205_ap_ready,
        buffer_in_0_address0 => grp_loadSlidingWindow_fu_205_buffer_in_0_address0,
        buffer_in_0_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_0_ce0,
        buffer_in_0_q0 => buffer_in_0_q0,
        buffer_in_1_address0 => grp_loadSlidingWindow_fu_205_buffer_in_1_address0,
        buffer_in_1_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_1_ce0,
        buffer_in_1_q0 => buffer_in_1_q0,
        buffer_in_2_address0 => grp_loadSlidingWindow_fu_205_buffer_in_2_address0,
        buffer_in_2_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_2_ce0,
        buffer_in_2_q0 => buffer_in_2_q0,
        buffer_in_3_address0 => grp_loadSlidingWindow_fu_205_buffer_in_3_address0,
        buffer_in_3_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_3_ce0,
        buffer_in_3_q0 => buffer_in_3_q0,
        buffer_in_4_address0 => grp_loadSlidingWindow_fu_205_buffer_in_4_address0,
        buffer_in_4_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_4_ce0,
        buffer_in_4_q0 => buffer_in_4_q0,
        buffer_in_5_address0 => grp_loadSlidingWindow_fu_205_buffer_in_5_address0,
        buffer_in_5_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_5_ce0,
        buffer_in_5_q0 => buffer_in_5_q0,
        buffer_in_6_address0 => grp_loadSlidingWindow_fu_205_buffer_in_6_address0,
        buffer_in_6_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_6_ce0,
        buffer_in_6_q0 => buffer_in_6_q0,
        buffer_in_7_address0 => grp_loadSlidingWindow_fu_205_buffer_in_7_address0,
        buffer_in_7_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_7_ce0,
        buffer_in_7_q0 => buffer_in_7_q0,
        buffer_in_8_address0 => grp_loadSlidingWindow_fu_205_buffer_in_8_address0,
        buffer_in_8_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_8_ce0,
        buffer_in_8_q0 => buffer_in_8_q0,
        buffer_in_9_address0 => grp_loadSlidingWindow_fu_205_buffer_in_9_address0,
        buffer_in_9_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_9_ce0,
        buffer_in_9_q0 => buffer_in_9_q0,
        buffer_in_10_address0 => grp_loadSlidingWindow_fu_205_buffer_in_10_address0,
        buffer_in_10_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_10_ce0,
        buffer_in_10_q0 => buffer_in_10_q0,
        buffer_in_11_address0 => grp_loadSlidingWindow_fu_205_buffer_in_11_address0,
        buffer_in_11_ce0 => grp_loadSlidingWindow_fu_205_buffer_in_11_ce0,
        buffer_in_11_q0 => buffer_in_11_q0,
        sliding_window_buffer_1_address0 => grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_address0,
        sliding_window_buffer_1_ce0 => grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_ce0,
        sliding_window_buffer_1_we0 => grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_we0,
        sliding_window_buffer_1_d0 => grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_d0,
        n_samples => n_samples_in_sig);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_loadSlidingWindow_fu_205_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_loadSlidingWindow_fu_205_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((bfr_irq_read_read_fu_126_p2 = ap_const_lv1_1) and (n_samples_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (bfr_irq_read_read_fu_126_p2 = ap_const_lv1_1))) then 
                    grp_loadSlidingWindow_fu_205_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_loadSlidingWindow_fu_205_ap_ready = ap_const_logic_1)) then 
                    grp_loadSlidingWindow_fu_205_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    n_samples_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_samples_ap_vld_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    n_samples_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (n_samples_ap_vld = ap_const_logic_1))) then 
                    n_samples_ap_vld_preg <= n_samples_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    n_samples_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_samples_preg <= ap_const_lv6_0;
            else
                if ((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (n_samples_ap_vld = ap_const_logic_1))) then 
                    n_samples_preg <= n_samples;
                end if; 
            end if;
        end if;
    end process;


    indvar_i_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_i_reg_182 <= add_ln8_fu_236_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_i_reg_182 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    sliding_window_size_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((bfr_irq_read_read_fu_126_p2 = ap_const_lv1_1) and (n_samples_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (bfr_irq_read_read_fu_126_p2 = ap_const_lv1_0))) then 
                sliding_window_size_0_reg_193 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4) and (bfr_irq_read_reg_275 = ap_const_lv1_1))) then 
                sliding_window_size_0_reg_193 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bfr_irq_read_reg_275 <= (0=>bfr_irq, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                n_periods_read_reg_262 <= n_periods;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                start_write_read_reg_284 <= (0=>start_write_i, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, n_samples_ap_vld_in_sig, ap_CS_fsm_state3, bfr_irq_read_read_fu_126_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln8_fu_247_p2, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((bfr_irq_read_read_fu_126_p2 = ap_const_lv1_1) and (n_samples_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln8_fu_236_p2 <= std_logic_vector(unsigned(indvar_i_reg_182) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state3_assign_proc : process(n_samples_ap_vld_in_sig, bfr_irq_read_read_fu_126_p2)
    begin
                ap_block_state3 <= ((bfr_irq_read_read_fu_126_p2 = ap_const_lv1_1) and (n_samples_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_block_state3_ignore_call1_assign_proc : process(n_samples_ap_vld_in_sig, bfr_irq_read_read_fu_126_p2)
    begin
                ap_block_state3_ignore_call1 <= ((bfr_irq_read_read_fu_126_p2 = ap_const_lv1_1) and (n_samples_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(bfr_irq_read_reg_275, grp_loadSlidingWindow_fu_205_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_loadSlidingWindow_fu_205_ap_done = ap_const_logic_0) and (bfr_irq_read_reg_275 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sliding_window_size_0_phi_fu_197_p4_assign_proc : process(bfr_irq_read_reg_275, ap_CS_fsm_state4, sliding_window_size_0_reg_193)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (bfr_irq_read_reg_275 = ap_const_lv1_1))) then 
            ap_phi_mux_sliding_window_size_0_phi_fu_197_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_sliding_window_size_0_phi_fu_197_p4 <= sliding_window_size_0_reg_193;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bfr_irq_read_read_fu_126_p2 <= (0=>bfr_irq, others=>'-');
    buffer_in_0_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_0_address0;
    buffer_in_0_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_0_ce0;
    buffer_in_10_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_10_address0;
    buffer_in_10_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_10_ce0;
    buffer_in_11_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_11_address0;
    buffer_in_11_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_11_ce0;
    buffer_in_1_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_1_address0;
    buffer_in_1_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_1_ce0;
    buffer_in_2_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_2_address0;
    buffer_in_2_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_2_ce0;
    buffer_in_3_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_3_address0;
    buffer_in_3_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_3_ce0;
    buffer_in_4_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_4_address0;
    buffer_in_4_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_4_ce0;
    buffer_in_5_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_5_address0;
    buffer_in_5_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_5_ce0;
    buffer_in_6_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_6_address0;
    buffer_in_6_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_6_ce0;
    buffer_in_7_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_7_address0;
    buffer_in_7_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_7_ce0;
    buffer_in_8_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_8_address0;
    buffer_in_8_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_8_ce0;
    buffer_in_9_address0 <= grp_loadSlidingWindow_fu_205_buffer_in_9_address0;
    buffer_in_9_ce0 <= grp_loadSlidingWindow_fu_205_buffer_in_9_ce0;
    buffer_out_address0 <= ap_const_lv12_0;
    buffer_out_address1 <= ap_const_lv12_0;
    buffer_out_ce0 <= ap_const_logic_0;
    buffer_out_ce1 <= ap_const_logic_0;
    buffer_out_d0 <= ap_const_lv32_0;
    buffer_out_d1 <= ap_const_lv32_0;
    buffer_out_we0 <= ap_const_logic_0;
    buffer_out_we1 <= ap_const_logic_0;
    grp_loadSlidingWindow_fu_205_ap_start <= grp_loadSlidingWindow_fu_205_ap_start_reg;
    icmp_ln8_fu_247_p2 <= "1" when (indvar_i_reg_182 = ap_const_lv5_1F) else "0";
    icmp_ln94_fu_257_p2 <= "1" when (unsigned(zext_ln90_fu_253_p1) < unsigned(n_periods_read_reg_262)) else "0";

    n_samples_ap_vld_in_sig_assign_proc : process(n_samples_ap_vld, n_samples_ap_vld_preg)
    begin
        if ((n_samples_ap_vld = ap_const_logic_1)) then 
            n_samples_ap_vld_in_sig <= n_samples_ap_vld;
        else 
            n_samples_ap_vld_in_sig <= n_samples_ap_vld_preg;
        end if; 
    end process;


    n_samples_blk_n_assign_proc : process(n_samples_ap_vld, ap_CS_fsm_state3, bfr_irq_read_read_fu_126_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (bfr_irq_read_read_fu_126_p2 = ap_const_lv1_1))) then 
            n_samples_blk_n <= n_samples_ap_vld;
        else 
            n_samples_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_samples_in_sig_assign_proc : process(n_samples, n_samples_preg, n_samples_ap_vld)
    begin
        if ((n_samples_ap_vld = ap_const_logic_1)) then 
            n_samples_in_sig <= n_samples;
        else 
            n_samples_in_sig <= n_samples_preg;
        end if; 
    end process;


    n_samples_out_ap_vld_assign_proc : process(start_write_read_read_fu_138_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, icmp_ln94_fu_257_p2)
    begin
        if (((icmp_ln94_fu_257_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4) and (start_write_read_read_fu_138_p2 = ap_const_lv1_1))) then 
            n_samples_out_ap_vld <= ap_const_logic_1;
        else 
            n_samples_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_count_s_address0_assign_proc : process(ap_CS_fsm_state2, bfr_irq_read_reg_275, ap_CS_fsm_state4, grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_address0, zext_ln12_fu_242_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_count_s_address0 <= zext_ln12_fu_242_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (bfr_irq_read_reg_275 = ap_const_lv1_1))) then 
            sliding_window_buffer_count_s_address0 <= grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_address0;
        else 
            sliding_window_buffer_count_s_address0 <= "XXXXX";
        end if; 
    end process;


    sliding_window_buffer_count_s_ce0_assign_proc : process(ap_CS_fsm_state2, bfr_irq_read_reg_275, ap_CS_fsm_state4, grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_count_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (bfr_irq_read_reg_275 = ap_const_lv1_1))) then 
            sliding_window_buffer_count_s_ce0 <= grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_ce0;
        else 
            sliding_window_buffer_count_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sliding_window_buffer_count_s_d0_assign_proc : process(ap_CS_fsm_state2, bfr_irq_read_reg_275, ap_CS_fsm_state4, grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_count_s_d0 <= ap_const_lv6_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (bfr_irq_read_reg_275 = ap_const_lv1_1))) then 
            sliding_window_buffer_count_s_d0 <= grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_d0;
        else 
            sliding_window_buffer_count_s_d0 <= "XXXXXX";
        end if; 
    end process;


    sliding_window_buffer_count_s_we0_assign_proc : process(ap_CS_fsm_state2, bfr_irq_read_reg_275, ap_CS_fsm_state4, grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_count_s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (bfr_irq_read_reg_275 = ap_const_lv1_1))) then 
            sliding_window_buffer_count_s_we0 <= grp_loadSlidingWindow_fu_205_sliding_window_buffer_1_we0;
        else 
            sliding_window_buffer_count_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    start_write_o_assign_proc : process(start_write_i, start_write_read_reg_284, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (start_write_read_reg_284 = ap_const_lv1_1))) then 
            start_write_o <= ap_const_logic_0;
        else 
            start_write_o <= start_write_i;
        end if; 
    end process;


    start_write_o_ap_vld_assign_proc : process(start_write_read_reg_284, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (start_write_read_reg_284 = ap_const_lv1_1))) then 
            start_write_o_ap_vld <= ap_const_logic_1;
        else 
            start_write_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    start_write_read_read_fu_138_p2 <= (0=>start_write_i, others=>'-');

    write_finished_assign_proc : process(start_write_read_read_fu_138_p2, start_write_read_reg_284, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (start_write_read_reg_284 = ap_const_lv1_1))) then 
            write_finished <= ap_const_logic_1;
        elsif (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4) and (start_write_read_read_fu_138_p2 = ap_const_lv1_1))) then 
            write_finished <= ap_const_logic_0;
        else 
            write_finished <= 'X';
        end if; 
    end process;


    write_finished_ap_vld_assign_proc : process(start_write_read_read_fu_138_p2, start_write_read_reg_284, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (start_write_read_reg_284 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4) and (start_write_read_read_fu_138_p2 = ap_const_lv1_1)))) then 
            write_finished_ap_vld <= ap_const_logic_1;
        else 
            write_finished_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_i_reg_182),64));
    zext_ln90_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_sliding_window_size_0_phi_fu_197_p4),8));
end behav;
