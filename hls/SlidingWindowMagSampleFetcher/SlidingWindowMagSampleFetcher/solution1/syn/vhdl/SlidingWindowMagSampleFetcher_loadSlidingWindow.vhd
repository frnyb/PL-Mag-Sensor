-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SlidingWindowMagSampleFetcher_loadSlidingWindow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_in_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_0_ce0 : OUT STD_LOGIC;
    buffer_in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_1_ce0 : OUT STD_LOGIC;
    buffer_in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_2_ce0 : OUT STD_LOGIC;
    buffer_in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_3_ce0 : OUT STD_LOGIC;
    buffer_in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_4_ce0 : OUT STD_LOGIC;
    buffer_in_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_5_ce0 : OUT STD_LOGIC;
    buffer_in_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_6_ce0 : OUT STD_LOGIC;
    buffer_in_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_7_ce0 : OUT STD_LOGIC;
    buffer_in_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_8_ce0 : OUT STD_LOGIC;
    buffer_in_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_9_ce0 : OUT STD_LOGIC;
    buffer_in_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_10_ce0 : OUT STD_LOGIC;
    buffer_in_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_in_11_ce0 : OUT STD_LOGIC;
    buffer_in_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sliding_window_buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_1_we0 : OUT STD_LOGIC;
    sliding_window_buffer_1_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    n_samples : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of SlidingWindowMagSampleFetcher_loadSlidingWindow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_pp1_stage7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_pp1_stage8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_pp1_stage9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_pp1_stage10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_pp1_stage11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_pp1_stage12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_pp1_stage13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_pp1_stage14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_pp1_stage15 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_pp1_stage16 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_pp1_stage17 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_pp1_stage18 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_pp1_stage19 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_pp1_stage20 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_C : STD_LOGIC_VECTOR (9 downto 0) := "0000001100";
    constant ap_const_lv10_E : STD_LOGIC_VECTOR (9 downto 0) := "0000001110";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv10_12 : STD_LOGIC_VECTOR (9 downto 0) := "0000010010";
    constant ap_const_lv10_14 : STD_LOGIC_VECTOR (9 downto 0) := "0000010100";
    constant ap_const_lv10_16 : STD_LOGIC_VECTOR (9 downto 0) := "0000010110";
    constant ap_const_lv10_18 : STD_LOGIC_VECTOR (9 downto 0) := "0000011000";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv10_24 : STD_LOGIC_VECTOR (9 downto 0) := "0000100100";
    constant ap_const_lv10_28 : STD_LOGIC_VECTOR (9 downto 0) := "0000101000";
    constant ap_const_lv10_2C : STD_LOGIC_VECTOR (9 downto 0) := "0000101100";
    constant ap_const_lv10_30 : STD_LOGIC_VECTOR (9 downto 0) := "0000110000";
    constant ap_const_lv10_34 : STD_LOGIC_VECTOR (9 downto 0) := "0000110100";
    constant ap_const_lv10_38 : STD_LOGIC_VECTOR (9 downto 0) := "0000111000";
    constant ap_const_lv10_3C : STD_LOGIC_VECTOR (9 downto 0) := "0000111100";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_const_lv10_44 : STD_LOGIC_VECTOR (9 downto 0) := "0001000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_1021 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_1032 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln119_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln119_fu_1050_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln119_1_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_1_reg_1925 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast3_fu_1065_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast3_reg_1929 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln18_fu_1273_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_reg_2017 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln18_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_2022 : STD_LOGIC_VECTOR (0 downto 0);
    signal samples_4_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_4_sample_V_load_reg_2146 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state6_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal samples_5_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_5_sample_V_load_reg_2151 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_6_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_6_sample_V_load_reg_2156 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_7_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_7_sample_V_load_reg_2161 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_8_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_8_sample_V_load_reg_2166 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_9_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_9_sample_V_load_reg_2171 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_10_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_10_sample_V_load_reg_2176 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_11_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_11_sample_V_load_reg_2181 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_0_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_0_timestamp_V_load_reg_2186 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_1_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_1_timestamp_V_load_reg_2191 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_2_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_2_timestamp_V_load_reg_2196 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_3_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_3_timestamp_V_load_reg_2201 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_4_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_4_timestamp_V_load_reg_2206 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_5_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_5_timestamp_V_load_reg_2211 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_6_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_6_timestamp_V_load_reg_2216 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_7_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_7_timestamp_V_load_reg_2221 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_8_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_8_timestamp_V_load_reg_2226 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_9_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_9_timestamp_V_load_reg_2231 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_10_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_10_timestamp_V_load_reg_2236 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_11_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_11_timestamp_V_load_reg_2241 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln20_20_fu_1336_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln20_20_reg_2246 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_19_reg_2270 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage20 : signal is "none";
    signal ap_block_state25_pp1_stage20_iter0 : BOOLEAN;
    signal ap_block_pp1_stage20_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage20_subdone : BOOLEAN;
    signal sample_period_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_period_ce0 : STD_LOGIC;
    signal sample_period_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_period_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sample_period_ce1 : STD_LOGIC;
    signal sample_period_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal samples_0_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_0_sample_V_ce0 : STD_LOGIC;
    signal samples_0_sample_V_we0 : STD_LOGIC;
    signal samples_0_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_0_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_1_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_1_sample_V_ce0 : STD_LOGIC;
    signal samples_1_sample_V_we0 : STD_LOGIC;
    signal samples_1_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_1_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_2_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_2_sample_V_ce0 : STD_LOGIC;
    signal samples_2_sample_V_we0 : STD_LOGIC;
    signal samples_2_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_2_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_3_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_3_sample_V_ce0 : STD_LOGIC;
    signal samples_3_sample_V_we0 : STD_LOGIC;
    signal samples_3_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_3_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_4_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_4_sample_V_ce0 : STD_LOGIC;
    signal samples_4_sample_V_we0 : STD_LOGIC;
    signal samples_4_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_5_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_5_sample_V_ce0 : STD_LOGIC;
    signal samples_5_sample_V_we0 : STD_LOGIC;
    signal samples_5_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_6_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_6_sample_V_ce0 : STD_LOGIC;
    signal samples_6_sample_V_we0 : STD_LOGIC;
    signal samples_6_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_7_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_7_sample_V_ce0 : STD_LOGIC;
    signal samples_7_sample_V_we0 : STD_LOGIC;
    signal samples_7_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_8_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_8_sample_V_ce0 : STD_LOGIC;
    signal samples_8_sample_V_we0 : STD_LOGIC;
    signal samples_8_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_9_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_9_sample_V_ce0 : STD_LOGIC;
    signal samples_9_sample_V_we0 : STD_LOGIC;
    signal samples_9_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_10_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_10_sample_V_ce0 : STD_LOGIC;
    signal samples_10_sample_V_we0 : STD_LOGIC;
    signal samples_10_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_11_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_11_sample_V_ce0 : STD_LOGIC;
    signal samples_11_sample_V_we0 : STD_LOGIC;
    signal samples_11_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal samples_0_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_0_timestamp_V_ce0 : STD_LOGIC;
    signal samples_0_timestamp_V_we0 : STD_LOGIC;
    signal samples_0_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_1_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_1_timestamp_V_ce0 : STD_LOGIC;
    signal samples_1_timestamp_V_we0 : STD_LOGIC;
    signal samples_1_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_2_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_2_timestamp_V_ce0 : STD_LOGIC;
    signal samples_2_timestamp_V_we0 : STD_LOGIC;
    signal samples_2_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_3_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_3_timestamp_V_ce0 : STD_LOGIC;
    signal samples_3_timestamp_V_we0 : STD_LOGIC;
    signal samples_3_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_4_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_4_timestamp_V_ce0 : STD_LOGIC;
    signal samples_4_timestamp_V_we0 : STD_LOGIC;
    signal samples_4_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_5_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_5_timestamp_V_ce0 : STD_LOGIC;
    signal samples_5_timestamp_V_we0 : STD_LOGIC;
    signal samples_5_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_6_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_6_timestamp_V_ce0 : STD_LOGIC;
    signal samples_6_timestamp_V_we0 : STD_LOGIC;
    signal samples_6_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_7_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_7_timestamp_V_ce0 : STD_LOGIC;
    signal samples_7_timestamp_V_we0 : STD_LOGIC;
    signal samples_7_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_8_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_8_timestamp_V_ce0 : STD_LOGIC;
    signal samples_8_timestamp_V_we0 : STD_LOGIC;
    signal samples_8_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_9_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_9_timestamp_V_ce0 : STD_LOGIC;
    signal samples_9_timestamp_V_we0 : STD_LOGIC;
    signal samples_9_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_10_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_10_timestamp_V_ce0 : STD_LOGIC;
    signal samples_10_timestamp_V_we0 : STD_LOGIC;
    signal samples_10_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal samples_11_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal samples_11_timestamp_V_ce0 : STD_LOGIC;
    signal samples_11_timestamp_V_we0 : STD_LOGIC;
    signal samples_11_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_mux_i_1_phi_fu_1036_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_cast4_fu_1288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_2_fu_1352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln20_5_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_7_fu_1417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal zext_ln20_11_fu_1449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal zext_ln20_24_fu_1473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_pp1_stage4 : BOOLEAN;
    signal zext_ln20_26_fu_1505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_block_pp1_stage5 : BOOLEAN;
    signal zext_ln20_27_fu_1529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage6 : signal is "none";
    signal ap_block_pp1_stage6 : BOOLEAN;
    signal zext_ln20_29_fu_1561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage7 : signal is "none";
    signal ap_block_pp1_stage7 : BOOLEAN;
    signal zext_ln20_30_fu_1585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage8 : signal is "none";
    signal ap_block_pp1_stage8 : BOOLEAN;
    signal zext_ln20_32_fu_1617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage9 : signal is "none";
    signal ap_block_pp1_stage9 : BOOLEAN;
    signal zext_ln20_33_fu_1641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage10 : signal is "none";
    signal ap_block_pp1_stage10 : BOOLEAN;
    signal zext_ln20_34_fu_1665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage11 : signal is "none";
    signal ap_block_pp1_stage11 : BOOLEAN;
    signal zext_ln20_35_fu_1689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage12 : signal is "none";
    signal ap_block_pp1_stage12 : BOOLEAN;
    signal zext_ln20_36_fu_1713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage13 : signal is "none";
    signal ap_block_pp1_stage13 : BOOLEAN;
    signal zext_ln20_37_fu_1737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage14 : signal is "none";
    signal ap_block_pp1_stage14 : BOOLEAN;
    signal zext_ln20_38_fu_1761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage15 : signal is "none";
    signal ap_block_pp1_stage15 : BOOLEAN;
    signal zext_ln20_39_fu_1785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage16 : signal is "none";
    signal ap_block_pp1_stage16 : BOOLEAN;
    signal zext_ln20_40_fu_1809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage17 : signal is "none";
    signal ap_block_pp1_stage17 : BOOLEAN;
    signal zext_ln20_41_fu_1833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage18 : signal is "none";
    signal ap_block_pp1_stage18 : BOOLEAN;
    signal zext_ln20_42_fu_1857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage19 : signal is "none";
    signal ap_block_pp1_stage19 : BOOLEAN;
    signal zext_ln20_43_fu_1881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage20 : BOOLEAN;
    signal zext_ln20_44_fu_1905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal zext_ln20_1_fu_1367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_3_fu_1393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal zext_ln20_4_fu_1403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal zext_ln20_9_fu_1434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal zext_ln20_6_fu_1459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_pp1_stage5_11001 : BOOLEAN;
    signal zext_ln20_25_fu_1490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state11_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_pp1_stage6_11001 : BOOLEAN;
    signal zext_ln20_8_fu_1515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state12_pp1_stage7_iter0 : BOOLEAN;
    signal ap_block_pp1_stage7_11001 : BOOLEAN;
    signal zext_ln20_28_fu_1546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state13_pp1_stage8_iter0 : BOOLEAN;
    signal ap_block_pp1_stage8_11001 : BOOLEAN;
    signal zext_ln20_10_fu_1571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state14_pp1_stage9_iter0 : BOOLEAN;
    signal ap_block_pp1_stage9_11001 : BOOLEAN;
    signal zext_ln20_31_fu_1602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state15_pp1_stage10_iter0 : BOOLEAN;
    signal ap_block_pp1_stage10_11001 : BOOLEAN;
    signal zext_ln20_12_fu_1627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state16_pp1_stage11_iter0 : BOOLEAN;
    signal ap_block_pp1_stage11_11001 : BOOLEAN;
    signal zext_ln20_13_fu_1651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state17_pp1_stage12_iter0 : BOOLEAN;
    signal ap_block_pp1_stage12_11001 : BOOLEAN;
    signal zext_ln20_14_fu_1675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state18_pp1_stage13_iter0 : BOOLEAN;
    signal ap_block_pp1_stage13_11001 : BOOLEAN;
    signal zext_ln20_15_fu_1699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state19_pp1_stage14_iter0 : BOOLEAN;
    signal ap_block_pp1_stage14_11001 : BOOLEAN;
    signal zext_ln20_16_fu_1723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state20_pp1_stage15_iter0 : BOOLEAN;
    signal ap_block_pp1_stage15_11001 : BOOLEAN;
    signal zext_ln20_17_fu_1747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state21_pp1_stage16_iter0 : BOOLEAN;
    signal ap_block_pp1_stage16_11001 : BOOLEAN;
    signal zext_ln20_18_fu_1771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state22_pp1_stage17_iter0 : BOOLEAN;
    signal ap_block_pp1_stage17_11001 : BOOLEAN;
    signal zext_ln20_19_fu_1795_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state23_pp1_stage18_iter0 : BOOLEAN;
    signal ap_block_pp1_stage18_11001 : BOOLEAN;
    signal zext_ln20_20_fu_1819_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state24_pp1_stage19_iter0 : BOOLEAN;
    signal ap_block_pp1_stage19_11001 : BOOLEAN;
    signal zext_ln20_21_fu_1843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_22_fu_1867_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_23_fu_1901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_1056_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_cast133_fu_1279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln20_7_fu_1324_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln20_6_fu_1316_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln20_fu_1332_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_fu_1342_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1357_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal or_ln20_fu_1372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_1383_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln20_fu_1398_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_1_fu_1407_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln20_2_fu_1427_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln20_1_fu_1422_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_2_fu_1439_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_2_fu_1454_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_3_fu_1463_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln20_3_fu_1483_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln20_3_fu_1478_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_4_fu_1495_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_4_fu_1510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_5_fu_1519_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln20_4_fu_1539_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln20_5_fu_1534_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_6_fu_1551_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_6_fu_1566_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_7_fu_1575_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln20_5_fu_1595_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln20_7_fu_1590_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_8_fu_1607_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_8_fu_1622_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_9_fu_1631_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_9_fu_1646_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_s_fu_1655_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_10_fu_1670_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_10_fu_1679_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_11_fu_1694_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_11_fu_1703_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_12_fu_1718_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_12_fu_1727_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_13_fu_1742_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_13_fu_1751_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_14_fu_1766_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_14_fu_1775_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_15_fu_1790_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_15_fu_1799_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_16_fu_1814_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_16_fu_1823_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_17_fu_1838_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_17_fu_1847_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_18_fu_1862_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln20_18_fu_1871_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_19_fu_1886_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_pp1_stage5_subdone : BOOLEAN;
    signal ap_block_pp1_stage6_subdone : BOOLEAN;
    signal ap_block_pp1_stage7_subdone : BOOLEAN;
    signal ap_block_pp1_stage8_subdone : BOOLEAN;
    signal ap_block_pp1_stage9_subdone : BOOLEAN;
    signal ap_block_pp1_stage10_subdone : BOOLEAN;
    signal ap_block_pp1_stage11_subdone : BOOLEAN;
    signal ap_block_pp1_stage12_subdone : BOOLEAN;
    signal ap_block_pp1_stage13_subdone : BOOLEAN;
    signal ap_block_pp1_stage14_subdone : BOOLEAN;
    signal ap_block_pp1_stage15_subdone : BOOLEAN;
    signal ap_block_pp1_stage16_subdone : BOOLEAN;
    signal ap_block_pp1_stage17_subdone : BOOLEAN;
    signal ap_block_pp1_stage18_subdone : BOOLEAN;
    signal ap_block_pp1_stage19_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SlidingWindowMagSampleFetcher_loadSlidingWindow_sample_period IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (3 downto 0);
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    sample_period_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_sample_period
    generic map (
        DataWidth => 32,
        AddressRange => 181,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_address0,
        ce0 => sample_period_ce0,
        we0 => sample_period_we0,
        d0 => sample_period_d0,
        address1 => sample_period_address1,
        ce1 => sample_period_ce1,
        we1 => sample_period_we1,
        d1 => sample_period_d1);

    samples_0_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_0_sample_V_address0,
        ce0 => samples_0_sample_V_ce0,
        we0 => samples_0_sample_V_we0,
        d0 => samples_0_sample_V_d0,
        q0 => samples_0_sample_V_q0);

    samples_1_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_1_sample_V_address0,
        ce0 => samples_1_sample_V_ce0,
        we0 => samples_1_sample_V_we0,
        d0 => samples_1_sample_V_d0,
        q0 => samples_1_sample_V_q0);

    samples_2_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_2_sample_V_address0,
        ce0 => samples_2_sample_V_ce0,
        we0 => samples_2_sample_V_we0,
        d0 => samples_2_sample_V_d0,
        q0 => samples_2_sample_V_q0);

    samples_3_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_3_sample_V_address0,
        ce0 => samples_3_sample_V_ce0,
        we0 => samples_3_sample_V_we0,
        d0 => samples_3_sample_V_d0,
        q0 => samples_3_sample_V_q0);

    samples_4_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_4_sample_V_address0,
        ce0 => samples_4_sample_V_ce0,
        we0 => samples_4_sample_V_we0,
        d0 => samples_4_sample_V_d0,
        q0 => samples_4_sample_V_q0);

    samples_5_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_5_sample_V_address0,
        ce0 => samples_5_sample_V_ce0,
        we0 => samples_5_sample_V_we0,
        d0 => samples_5_sample_V_d0,
        q0 => samples_5_sample_V_q0);

    samples_6_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_6_sample_V_address0,
        ce0 => samples_6_sample_V_ce0,
        we0 => samples_6_sample_V_we0,
        d0 => samples_6_sample_V_d0,
        q0 => samples_6_sample_V_q0);

    samples_7_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_7_sample_V_address0,
        ce0 => samples_7_sample_V_ce0,
        we0 => samples_7_sample_V_we0,
        d0 => samples_7_sample_V_d0,
        q0 => samples_7_sample_V_q0);

    samples_8_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_8_sample_V_address0,
        ce0 => samples_8_sample_V_ce0,
        we0 => samples_8_sample_V_we0,
        d0 => samples_8_sample_V_d0,
        q0 => samples_8_sample_V_q0);

    samples_9_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_9_sample_V_address0,
        ce0 => samples_9_sample_V_ce0,
        we0 => samples_9_sample_V_we0,
        d0 => samples_9_sample_V_d0,
        q0 => samples_9_sample_V_q0);

    samples_10_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_10_sample_V_address0,
        ce0 => samples_10_sample_V_ce0,
        we0 => samples_10_sample_V_we0,
        d0 => samples_10_sample_V_d0,
        q0 => samples_10_sample_V_q0);

    samples_11_sample_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_11_sample_V_address0,
        ce0 => samples_11_sample_V_ce0,
        we0 => samples_11_sample_V_we0,
        d0 => samples_11_sample_V_d0,
        q0 => samples_11_sample_V_q0);

    samples_0_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_0_timestamp_V_address0,
        ce0 => samples_0_timestamp_V_ce0,
        we0 => samples_0_timestamp_V_we0,
        d0 => samples_0_timestamp_V_d0,
        q0 => samples_0_timestamp_V_q0);

    samples_1_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_1_timestamp_V_address0,
        ce0 => samples_1_timestamp_V_ce0,
        we0 => samples_1_timestamp_V_we0,
        d0 => samples_1_timestamp_V_d0,
        q0 => samples_1_timestamp_V_q0);

    samples_2_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_2_timestamp_V_address0,
        ce0 => samples_2_timestamp_V_ce0,
        we0 => samples_2_timestamp_V_we0,
        d0 => samples_2_timestamp_V_d0,
        q0 => samples_2_timestamp_V_q0);

    samples_3_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_3_timestamp_V_address0,
        ce0 => samples_3_timestamp_V_ce0,
        we0 => samples_3_timestamp_V_we0,
        d0 => samples_3_timestamp_V_d0,
        q0 => samples_3_timestamp_V_q0);

    samples_4_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_4_timestamp_V_address0,
        ce0 => samples_4_timestamp_V_ce0,
        we0 => samples_4_timestamp_V_we0,
        d0 => samples_4_timestamp_V_d0,
        q0 => samples_4_timestamp_V_q0);

    samples_5_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_5_timestamp_V_address0,
        ce0 => samples_5_timestamp_V_ce0,
        we0 => samples_5_timestamp_V_we0,
        d0 => samples_5_timestamp_V_d0,
        q0 => samples_5_timestamp_V_q0);

    samples_6_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_6_timestamp_V_address0,
        ce0 => samples_6_timestamp_V_ce0,
        we0 => samples_6_timestamp_V_we0,
        d0 => samples_6_timestamp_V_d0,
        q0 => samples_6_timestamp_V_q0);

    samples_7_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_7_timestamp_V_address0,
        ce0 => samples_7_timestamp_V_ce0,
        we0 => samples_7_timestamp_V_we0,
        d0 => samples_7_timestamp_V_d0,
        q0 => samples_7_timestamp_V_q0);

    samples_8_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_8_timestamp_V_address0,
        ce0 => samples_8_timestamp_V_ce0,
        we0 => samples_8_timestamp_V_we0,
        d0 => samples_8_timestamp_V_d0,
        q0 => samples_8_timestamp_V_q0);

    samples_9_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_9_timestamp_V_address0,
        ce0 => samples_9_timestamp_V_ce0,
        we0 => samples_9_timestamp_V_we0,
        d0 => samples_9_timestamp_V_d0,
        q0 => samples_9_timestamp_V_q0);

    samples_10_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_10_timestamp_V_address0,
        ce0 => samples_10_timestamp_V_ce0,
        we0 => samples_10_timestamp_V_we0,
        d0 => samples_10_timestamp_V_d0,
        q0 => samples_10_timestamp_V_q0);

    samples_11_timestamp_V_U : component SlidingWindowMagSampleFetcher_loadSlidingWindow_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => samples_11_timestamp_V_address0,
        ce0 => samples_11_timestamp_V_ce0,
        we0 => samples_11_timestamp_V_we0,
        d0 => samples_11_timestamp_V_d0,
        q0 => samples_11_timestamp_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln119_fu_1044_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln119_fu_1044_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage20) and (ap_const_boolean_0 = ap_block_pp1_stage20_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_1032_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_1_reg_1032 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_1032 <= add_ln18_reg_2017;
            end if; 
        end if;
    end process;

    i_reg_1021_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln119_fu_1044_p2 = ap_const_lv1_0))) then 
                i_reg_1021 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_fu_1060_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_1021 <= add_ln119_fu_1050_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln18_reg_2017 <= add_ln18_fu_1273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                    add_ln20_20_reg_2246(9 downto 3) <= add_ln20_20_fu_1336_p2(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_fu_1060_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    i_cast3_reg_1929(3 downto 0) <= i_cast3_fu_1065_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln119_1_reg_1925 <= icmp_ln119_1_fu_1060_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln18_reg_2022 <= icmp_ln18_fu_1283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage20) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage20_11001))) then
                lshr_ln20_19_reg_2270 <= add_ln20_19_fu_1886_p2(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                samples_0_timestamp_V_load_reg_2186 <= samples_0_timestamp_V_q0;
                samples_10_sample_V_load_reg_2176 <= samples_10_sample_V_q0;
                samples_10_timestamp_V_load_reg_2236 <= samples_10_timestamp_V_q0;
                samples_11_sample_V_load_reg_2181 <= samples_11_sample_V_q0;
                samples_11_timestamp_V_load_reg_2241 <= samples_11_timestamp_V_q0;
                samples_1_timestamp_V_load_reg_2191 <= samples_1_timestamp_V_q0;
                samples_2_timestamp_V_load_reg_2196 <= samples_2_timestamp_V_q0;
                samples_3_timestamp_V_load_reg_2201 <= samples_3_timestamp_V_q0;
                samples_4_sample_V_load_reg_2146 <= samples_4_sample_V_q0;
                samples_4_timestamp_V_load_reg_2206 <= samples_4_timestamp_V_q0;
                samples_5_sample_V_load_reg_2151 <= samples_5_sample_V_q0;
                samples_5_timestamp_V_load_reg_2211 <= samples_5_timestamp_V_q0;
                samples_6_sample_V_load_reg_2156 <= samples_6_sample_V_q0;
                samples_6_timestamp_V_load_reg_2216 <= samples_6_timestamp_V_q0;
                samples_7_sample_V_load_reg_2161 <= samples_7_sample_V_q0;
                samples_7_timestamp_V_load_reg_2221 <= samples_7_timestamp_V_q0;
                samples_8_sample_V_load_reg_2166 <= samples_8_sample_V_q0;
                samples_8_timestamp_V_load_reg_2226 <= samples_8_timestamp_V_q0;
                samples_9_sample_V_load_reg_2171 <= samples_9_sample_V_q0;
                samples_9_timestamp_V_load_reg_2231 <= samples_9_timestamp_V_q0;
            end if;
        end if;
    end process;
    i_cast3_reg_1929(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    add_ln20_20_reg_2246(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln119_fu_1044_p2, ap_enable_reg_pp0_iter0, icmp_ln119_1_fu_1060_p2, ap_enable_reg_pp1_iter0, icmp_ln18_fu_1283_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage20_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage3_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage5_subdone, ap_block_pp1_stage6_subdone, ap_block_pp1_stage7_subdone, ap_block_pp1_stage8_subdone, ap_block_pp1_stage9_subdone, ap_block_pp1_stage10_subdone, ap_block_pp1_stage11_subdone, ap_block_pp1_stage12_subdone, ap_block_pp1_stage13_subdone, ap_block_pp1_stage14_subdone, ap_block_pp1_stage15_subdone, ap_block_pp1_stage16_subdone, ap_block_pp1_stage17_subdone, ap_block_pp1_stage18_subdone, ap_block_pp1_stage19_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln119_fu_1044_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln119_fu_1044_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln119_1_fu_1060_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln119_1_fu_1060_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln18_fu_1283_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((icmp_ln18_fu_1283_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_pp1_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                end if;
            when ap_ST_fsm_pp1_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                end if;
            when ap_ST_fsm_pp1_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                end if;
            when ap_ST_fsm_pp1_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                end if;
            when ap_ST_fsm_pp1_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                end if;
            when ap_ST_fsm_pp1_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage12;
                end if;
            when ap_ST_fsm_pp1_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage13;
                end if;
            when ap_ST_fsm_pp1_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage14;
                end if;
            when ap_ST_fsm_pp1_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage15;
                end if;
            when ap_ST_fsm_pp1_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage16;
                end if;
            when ap_ST_fsm_pp1_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage17;
                end if;
            when ap_ST_fsm_pp1_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage18;
                end if;
            when ap_ST_fsm_pp1_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage19;
                end if;
            when ap_ST_fsm_pp1_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage20;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln119_fu_1050_p2 <= std_logic_vector(unsigned(i_reg_1021) + unsigned(ap_const_lv4_1));
    add_ln18_fu_1273_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_1036_p4) + unsigned(ap_const_lv4_1));
    add_ln20_10_fu_1670_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_20));
    add_ln20_11_fu_1694_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_24));
    add_ln20_12_fu_1718_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_28));
    add_ln20_13_fu_1742_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_2C));
    add_ln20_14_fu_1766_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_30));
    add_ln20_15_fu_1790_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_34));
    add_ln20_16_fu_1814_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_38));
    add_ln20_17_fu_1838_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_3C));
    add_ln20_18_fu_1862_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_40));
    add_ln20_19_fu_1886_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_44));
    add_ln20_1_fu_1422_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_A));
    add_ln20_20_fu_1336_p2 <= std_logic_vector(unsigned(shl_ln20_6_fu_1316_p3) + unsigned(zext_ln20_fu_1332_p1));
    add_ln20_2_fu_1454_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_C));
    add_ln20_3_fu_1478_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_E));
    add_ln20_4_fu_1510_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_10));
    add_ln20_5_fu_1534_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_12));
    add_ln20_6_fu_1566_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_14));
    add_ln20_7_fu_1590_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_16));
    add_ln20_8_fu_1622_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_18));
    add_ln20_9_fu_1646_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_1C));
    add_ln20_fu_1398_p2 <= std_logic_vector(unsigned(add_ln20_20_reg_2246) + unsigned(ap_const_lv10_8));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage10 <= ap_CS_fsm(13);
    ap_CS_fsm_pp1_stage11 <= ap_CS_fsm(14);
    ap_CS_fsm_pp1_stage12 <= ap_CS_fsm(15);
    ap_CS_fsm_pp1_stage13 <= ap_CS_fsm(16);
    ap_CS_fsm_pp1_stage14 <= ap_CS_fsm(17);
    ap_CS_fsm_pp1_stage15 <= ap_CS_fsm(18);
    ap_CS_fsm_pp1_stage16 <= ap_CS_fsm(19);
    ap_CS_fsm_pp1_stage17 <= ap_CS_fsm(20);
    ap_CS_fsm_pp1_stage18 <= ap_CS_fsm(21);
    ap_CS_fsm_pp1_stage19 <= ap_CS_fsm(22);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage20 <= ap_CS_fsm(23);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage6 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage7 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage8 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage9 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln119_1_fu_1060_p2)
    begin
        if ((icmp_ln119_1_fu_1060_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln18_fu_1283_p2)
    begin
        if ((icmp_ln18_fu_1283_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_1036_p4_assign_proc : process(i_1_reg_1032, add_ln18_reg_2017, ap_CS_fsm_pp1_stage0, icmp_ln18_reg_2022, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_1036_p4 <= add_ln18_reg_2017;
        else 
            ap_phi_mux_i_1_phi_fu_1036_p4 <= i_1_reg_1032;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_0_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_0_ce0 <= ap_const_logic_1;
        else 
            buffer_in_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_10_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_10_ce0 <= ap_const_logic_1;
        else 
            buffer_in_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_11_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_11_ce0 <= ap_const_logic_1;
        else 
            buffer_in_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_1_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_1_ce0 <= ap_const_logic_1;
        else 
            buffer_in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_2_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_2_ce0 <= ap_const_logic_1;
        else 
            buffer_in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_3_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_3_ce0 <= ap_const_logic_1;
        else 
            buffer_in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_4_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_4_ce0 <= ap_const_logic_1;
        else 
            buffer_in_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_5_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_5_ce0 <= ap_const_logic_1;
        else 
            buffer_in_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_6_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_6_ce0 <= ap_const_logic_1;
        else 
            buffer_in_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_7_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_7_ce0 <= ap_const_logic_1;
        else 
            buffer_in_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_8_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_8_ce0 <= ap_const_logic_1;
        else 
            buffer_in_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_9_address0 <= i_cast3_fu_1065_p1(4 - 1 downto 0);

    buffer_in_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_in_9_ce0 <= ap_const_logic_1;
        else 
            buffer_in_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_cast133_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_1036_p4),6));
    i_1_cast4_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_1036_p4),64));
    i_cast3_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_1021),64));
    i_cast_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_1021),6));
    icmp_ln119_1_fu_1060_p2 <= "1" when (i_cast_fu_1056_p1 = n_samples) else "0";
    icmp_ln119_fu_1044_p2 <= "1" when (n_samples = ap_const_lv6_0) else "0";
    icmp_ln18_fu_1283_p2 <= "1" when (i_1_cast133_fu_1279_p1 = n_samples) else "0";
    lshr_ln20_10_fu_1679_p4 <= add_ln20_10_fu_1670_p2(9 downto 2);
    lshr_ln20_11_fu_1703_p4 <= add_ln20_11_fu_1694_p2(9 downto 2);
    lshr_ln20_12_fu_1727_p4 <= add_ln20_12_fu_1718_p2(9 downto 2);
    lshr_ln20_13_fu_1751_p4 <= add_ln20_13_fu_1742_p2(9 downto 2);
    lshr_ln20_14_fu_1775_p4 <= add_ln20_14_fu_1766_p2(9 downto 2);
    lshr_ln20_15_fu_1799_p4 <= add_ln20_15_fu_1790_p2(9 downto 2);
    lshr_ln20_16_fu_1823_p4 <= add_ln20_16_fu_1814_p2(9 downto 2);
    lshr_ln20_17_fu_1847_p4 <= add_ln20_17_fu_1838_p2(9 downto 2);
    lshr_ln20_18_fu_1871_p4 <= add_ln20_18_fu_1862_p2(9 downto 2);
    lshr_ln20_1_fu_1407_p4 <= add_ln20_fu_1398_p2(9 downto 2);
    lshr_ln20_2_fu_1439_p4 <= add_ln20_1_fu_1422_p2(9 downto 2);
    lshr_ln20_3_fu_1463_p4 <= add_ln20_2_fu_1454_p2(9 downto 2);
    lshr_ln20_4_fu_1495_p4 <= add_ln20_3_fu_1478_p2(9 downto 2);
    lshr_ln20_5_fu_1519_p4 <= add_ln20_4_fu_1510_p2(9 downto 2);
    lshr_ln20_6_fu_1551_p4 <= add_ln20_5_fu_1534_p2(9 downto 2);
    lshr_ln20_7_fu_1575_p4 <= add_ln20_6_fu_1566_p2(9 downto 2);
    lshr_ln20_8_fu_1607_p4 <= add_ln20_7_fu_1590_p2(9 downto 2);
    lshr_ln20_9_fu_1631_p4 <= add_ln20_8_fu_1622_p2(9 downto 2);
    lshr_ln20_s_fu_1655_p4 <= add_ln20_9_fu_1646_p2(9 downto 2);
    lshr_ln_fu_1342_p4 <= add_ln20_20_fu_1336_p2(9 downto 2);
    or_ln20_fu_1372_p2 <= (lshr_ln_fu_1342_p4 or ap_const_lv8_1);

    sample_period_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp1_stage1, zext_ln20_5_fu_1378_p1, zext_ln20_11_fu_1449_p1, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3, zext_ln20_26_fu_1505_p1, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5, zext_ln20_29_fu_1561_p1, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7, zext_ln20_32_fu_1617_p1, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9, zext_ln20_34_fu_1665_p1, ap_CS_fsm_pp1_stage11, ap_block_pp1_stage11, zext_ln20_36_fu_1713_p1, ap_CS_fsm_pp1_stage13, ap_block_pp1_stage13, zext_ln20_38_fu_1761_p1, ap_CS_fsm_pp1_stage15, ap_block_pp1_stage15, zext_ln20_40_fu_1809_p1, ap_CS_fsm_pp1_stage17, ap_block_pp1_stage17, zext_ln20_42_fu_1857_p1, ap_CS_fsm_pp1_stage19, ap_block_pp1_stage19, zext_ln20_44_fu_1905_p1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            sample_period_address0 <= zext_ln20_44_fu_1905_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage19) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage19))) then 
            sample_period_address0 <= zext_ln20_42_fu_1857_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage17))) then 
            sample_period_address0 <= zext_ln20_40_fu_1809_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage15))) then 
            sample_period_address0 <= zext_ln20_38_fu_1761_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage13) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage13))) then 
            sample_period_address0 <= zext_ln20_36_fu_1713_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage11))) then 
            sample_period_address0 <= zext_ln20_34_fu_1665_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage9))) then 
            sample_period_address0 <= zext_ln20_32_fu_1617_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage7))) then 
            sample_period_address0 <= zext_ln20_29_fu_1561_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage5))) then 
            sample_period_address0 <= zext_ln20_26_fu_1505_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3))) then 
            sample_period_address0 <= zext_ln20_11_fu_1449_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            sample_period_address0 <= zext_ln20_5_fu_1378_p1(8 - 1 downto 0);
        else 
            sample_period_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sample_period_address1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage20, zext_ln20_2_fu_1352_p1, ap_block_pp1_stage1, zext_ln20_7_fu_1417_p1, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, zext_ln20_24_fu_1473_p1, ap_CS_fsm_pp1_stage4, ap_block_pp1_stage4, zext_ln20_27_fu_1529_p1, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage6, zext_ln20_30_fu_1585_p1, ap_CS_fsm_pp1_stage8, ap_block_pp1_stage8, zext_ln20_33_fu_1641_p1, ap_CS_fsm_pp1_stage10, ap_block_pp1_stage10, zext_ln20_35_fu_1689_p1, ap_CS_fsm_pp1_stage12, ap_block_pp1_stage12, zext_ln20_37_fu_1737_p1, ap_CS_fsm_pp1_stage14, ap_block_pp1_stage14, zext_ln20_39_fu_1785_p1, ap_CS_fsm_pp1_stage16, ap_block_pp1_stage16, zext_ln20_41_fu_1833_p1, ap_CS_fsm_pp1_stage18, ap_block_pp1_stage18, zext_ln20_43_fu_1881_p1, ap_block_pp1_stage20)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage20) and (ap_const_boolean_0 = ap_block_pp1_stage20))) then 
                sample_period_address1 <= zext_ln20_43_fu_1881_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage18) and (ap_const_boolean_0 = ap_block_pp1_stage18))) then 
                sample_period_address1 <= zext_ln20_41_fu_1833_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_const_boolean_0 = ap_block_pp1_stage16))) then 
                sample_period_address1 <= zext_ln20_39_fu_1785_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_const_boolean_0 = ap_block_pp1_stage14))) then 
                sample_period_address1 <= zext_ln20_37_fu_1737_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage12) and (ap_const_boolean_0 = ap_block_pp1_stage12))) then 
                sample_period_address1 <= zext_ln20_35_fu_1689_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage10) and (ap_const_boolean_0 = ap_block_pp1_stage10))) then 
                sample_period_address1 <= zext_ln20_33_fu_1641_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_const_boolean_0 = ap_block_pp1_stage8))) then 
                sample_period_address1 <= zext_ln20_30_fu_1585_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_const_boolean_0 = ap_block_pp1_stage6))) then 
                sample_period_address1 <= zext_ln20_27_fu_1529_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_const_boolean_0 = ap_block_pp1_stage4))) then 
                sample_period_address1 <= zext_ln20_24_fu_1473_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
                sample_period_address1 <= zext_ln20_7_fu_1417_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
                sample_period_address1 <= zext_ln20_2_fu_1352_p1(8 - 1 downto 0);
            else 
                sample_period_address1 <= "XXXXXXXX";
            end if;
        else 
            sample_period_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sample_period_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage11, ap_CS_fsm_pp1_stage13, ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage17, ap_CS_fsm_pp1_stage19, ap_block_pp1_stage3_11001, ap_block_pp1_stage5_11001, ap_block_pp1_stage7_11001, ap_block_pp1_stage9_11001, ap_block_pp1_stage11_11001, ap_block_pp1_stage13_11001, ap_block_pp1_stage15_11001, ap_block_pp1_stage17_11001, ap_block_pp1_stage19_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage19) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage19_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage17_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage15_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage13) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            sample_period_ce0 <= ap_const_logic_1;
        else 
            sample_period_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_ce1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage20, ap_block_pp1_stage20_11001, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage4, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage10, ap_CS_fsm_pp1_stage12, ap_CS_fsm_pp1_stage14, ap_CS_fsm_pp1_stage16, ap_CS_fsm_pp1_stage18, ap_block_pp1_stage2_11001, ap_block_pp1_stage4_11001, ap_block_pp1_stage6_11001, ap_block_pp1_stage8_11001, ap_block_pp1_stage10_11001, ap_block_pp1_stage12_11001, ap_block_pp1_stage14_11001, ap_block_pp1_stage16_11001, ap_block_pp1_stage18_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage18) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage16_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage14_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage12) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage10) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage20) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage20_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            sample_period_ce1 <= ap_const_logic_1;
        else 
            sample_period_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9, ap_CS_fsm_pp1_stage11, ap_block_pp1_stage11, ap_CS_fsm_pp1_stage13, ap_block_pp1_stage13, ap_CS_fsm_pp1_stage15, ap_block_pp1_stage15, ap_CS_fsm_pp1_stage17, ap_block_pp1_stage17, ap_CS_fsm_pp1_stage19, ap_block_pp1_stage19, zext_ln20_3_fu_1393_p1, zext_ln20_9_fu_1434_p1, zext_ln20_25_fu_1490_p1, zext_ln20_28_fu_1546_p1, zext_ln20_31_fu_1602_p1, zext_ln20_13_fu_1651_p1, zext_ln20_15_fu_1699_p1, zext_ln20_17_fu_1747_p1, zext_ln20_19_fu_1795_p1, zext_ln20_21_fu_1843_p1, zext_ln20_23_fu_1901_p1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            sample_period_d0 <= zext_ln20_23_fu_1901_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage19) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage19))) then 
            sample_period_d0 <= zext_ln20_21_fu_1843_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage17))) then 
            sample_period_d0 <= zext_ln20_19_fu_1795_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage15))) then 
            sample_period_d0 <= zext_ln20_17_fu_1747_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage13) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage13))) then 
            sample_period_d0 <= zext_ln20_15_fu_1699_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage11))) then 
            sample_period_d0 <= zext_ln20_13_fu_1651_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage9))) then 
            sample_period_d0 <= zext_ln20_31_fu_1602_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage7))) then 
            sample_period_d0 <= zext_ln20_28_fu_1546_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage5))) then 
            sample_period_d0 <= zext_ln20_25_fu_1490_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3))) then 
            sample_period_d0 <= zext_ln20_9_fu_1434_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            sample_period_d0 <= zext_ln20_3_fu_1393_p1;
        else 
            sample_period_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_d1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage20, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp1_stage4, ap_block_pp1_stage4, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage6, ap_CS_fsm_pp1_stage8, ap_block_pp1_stage8, ap_CS_fsm_pp1_stage10, ap_block_pp1_stage10, ap_CS_fsm_pp1_stage12, ap_block_pp1_stage12, ap_CS_fsm_pp1_stage14, ap_block_pp1_stage14, ap_CS_fsm_pp1_stage16, ap_block_pp1_stage16, ap_CS_fsm_pp1_stage18, ap_block_pp1_stage18, ap_block_pp1_stage20, zext_ln20_1_fu_1367_p1, zext_ln20_4_fu_1403_p1, zext_ln20_6_fu_1459_p1, zext_ln20_8_fu_1515_p1, zext_ln20_10_fu_1571_p1, zext_ln20_12_fu_1627_p1, zext_ln20_14_fu_1675_p1, zext_ln20_16_fu_1723_p1, zext_ln20_18_fu_1771_p1, zext_ln20_20_fu_1819_p1, zext_ln20_22_fu_1867_p1)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage20) and (ap_const_boolean_0 = ap_block_pp1_stage20))) then 
                sample_period_d1 <= zext_ln20_22_fu_1867_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage18) and (ap_const_boolean_0 = ap_block_pp1_stage18))) then 
                sample_period_d1 <= zext_ln20_20_fu_1819_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_const_boolean_0 = ap_block_pp1_stage16))) then 
                sample_period_d1 <= zext_ln20_18_fu_1771_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_const_boolean_0 = ap_block_pp1_stage14))) then 
                sample_period_d1 <= zext_ln20_16_fu_1723_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage12) and (ap_const_boolean_0 = ap_block_pp1_stage12))) then 
                sample_period_d1 <= zext_ln20_14_fu_1675_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage10) and (ap_const_boolean_0 = ap_block_pp1_stage10))) then 
                sample_period_d1 <= zext_ln20_12_fu_1627_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_const_boolean_0 = ap_block_pp1_stage8))) then 
                sample_period_d1 <= zext_ln20_10_fu_1571_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_const_boolean_0 = ap_block_pp1_stage6))) then 
                sample_period_d1 <= zext_ln20_8_fu_1515_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_const_boolean_0 = ap_block_pp1_stage4))) then 
                sample_period_d1 <= zext_ln20_6_fu_1459_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
                sample_period_d1 <= zext_ln20_4_fu_1403_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
                sample_period_d1 <= zext_ln20_1_fu_1367_p1;
            else 
                sample_period_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            sample_period_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, icmp_ln18_reg_2022, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage11, ap_CS_fsm_pp1_stage13, ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage17, ap_CS_fsm_pp1_stage19, ap_block_pp1_stage3_11001, ap_block_pp1_stage5_11001, ap_block_pp1_stage7_11001, ap_block_pp1_stage9_11001, ap_block_pp1_stage11_11001, ap_block_pp1_stage13_11001, ap_block_pp1_stage15_11001, ap_block_pp1_stage17_11001, ap_block_pp1_stage19_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage19) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage19_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage17) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage17_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage15_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage13) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage11) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage11_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            sample_period_we0 <= ap_const_lv4_7;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)))) then 
            sample_period_we0 <= ap_const_lv4_C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
            sample_period_we0 <= ap_const_lv4_F;
        else 
            sample_period_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    sample_period_we1_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln18_reg_2022, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage20, ap_block_pp1_stage20_11001, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage4, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage10, ap_CS_fsm_pp1_stage12, ap_CS_fsm_pp1_stage14, ap_CS_fsm_pp1_stage16, ap_CS_fsm_pp1_stage18, ap_block_pp1_stage2_11001, ap_block_pp1_stage4_11001, ap_block_pp1_stage6_11001, ap_block_pp1_stage8_11001, ap_block_pp1_stage10_11001, ap_block_pp1_stage12_11001, ap_block_pp1_stage14_11001, ap_block_pp1_stage16_11001, ap_block_pp1_stage18_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage18) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage16_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage14_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage12) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage10) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage20) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage20_11001)))) then 
            sample_period_we1 <= ap_const_lv4_7;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            sample_period_we1 <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln18_reg_2022 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
            sample_period_we1 <= ap_const_lv4_F;
        else 
            sample_period_we1 <= ap_const_lv4_0;
        end if; 
    end process;


    samples_0_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_0_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_0_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_0_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_0_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_0_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_0_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_0_sample_V_d0 <= buffer_in_0_q0(12 - 1 downto 0);

    samples_0_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_0_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_0_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_0_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_0_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_0_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_0_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_0_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_0_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_0_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_0_timestamp_V_d0 <= buffer_in_0_q0(31 downto 12);

    samples_0_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_0_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_0_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_10_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_10_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_10_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_10_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_10_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_10_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_10_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_10_sample_V_d0 <= buffer_in_10_q0(12 - 1 downto 0);

    samples_10_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_10_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_10_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_10_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_10_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_10_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_10_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_10_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_10_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_10_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_10_timestamp_V_d0 <= buffer_in_10_q0(31 downto 12);

    samples_10_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_10_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_10_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_11_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_11_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_11_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_11_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_11_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_11_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_11_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_11_sample_V_d0 <= buffer_in_11_q0(12 - 1 downto 0);

    samples_11_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_11_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_11_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_11_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_11_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_11_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_11_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_11_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_11_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_11_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_11_timestamp_V_d0 <= buffer_in_11_q0(31 downto 12);

    samples_11_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_11_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_11_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_1_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_1_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_1_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_1_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_1_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_1_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_1_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_1_sample_V_d0 <= buffer_in_1_q0(12 - 1 downto 0);

    samples_1_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_1_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_1_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_1_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_1_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_1_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_1_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_1_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_1_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_1_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_1_timestamp_V_d0 <= buffer_in_1_q0(31 downto 12);

    samples_1_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_1_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_1_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_2_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_2_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_2_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_2_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_2_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_2_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_2_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_2_sample_V_d0 <= buffer_in_2_q0(12 - 1 downto 0);

    samples_2_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_2_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_2_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_2_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_2_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_2_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_2_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_2_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_2_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_2_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_2_timestamp_V_d0 <= buffer_in_2_q0(31 downto 12);

    samples_2_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_2_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_2_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_3_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_3_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_3_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_3_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_3_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_3_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_3_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_3_sample_V_d0 <= buffer_in_3_q0(12 - 1 downto 0);

    samples_3_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_3_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_3_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_3_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_3_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_3_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_3_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_3_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_3_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_3_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_3_timestamp_V_d0 <= buffer_in_3_q0(31 downto 12);

    samples_3_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_3_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_3_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_4_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_4_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_4_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_4_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_4_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_4_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_4_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_4_sample_V_d0 <= buffer_in_4_q0(12 - 1 downto 0);

    samples_4_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_4_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_4_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_4_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_4_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_4_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_4_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_4_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_4_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_4_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_4_timestamp_V_d0 <= buffer_in_4_q0(31 downto 12);

    samples_4_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_4_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_4_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_5_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_5_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_5_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_5_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_5_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_5_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_5_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_5_sample_V_d0 <= buffer_in_5_q0(12 - 1 downto 0);

    samples_5_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_5_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_5_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_5_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_5_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_5_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_5_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_5_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_5_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_5_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_5_timestamp_V_d0 <= buffer_in_5_q0(31 downto 12);

    samples_5_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_5_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_5_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_6_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_6_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_6_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_6_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_6_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_6_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_6_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_6_sample_V_d0 <= buffer_in_6_q0(12 - 1 downto 0);

    samples_6_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_6_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_6_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_6_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_6_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_6_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_6_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_6_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_6_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_6_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_6_timestamp_V_d0 <= buffer_in_6_q0(31 downto 12);

    samples_6_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_6_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_6_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_7_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_7_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_7_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_7_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_7_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_7_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_7_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_7_sample_V_d0 <= buffer_in_7_q0(12 - 1 downto 0);

    samples_7_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_7_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_7_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_7_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_7_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_7_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_7_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_7_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_7_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_7_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_7_timestamp_V_d0 <= buffer_in_7_q0(31 downto 12);

    samples_7_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_7_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_7_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_8_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_8_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_8_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_8_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_8_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_8_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_8_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_8_sample_V_d0 <= buffer_in_8_q0(12 - 1 downto 0);

    samples_8_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_8_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_8_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_8_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_8_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_8_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_8_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_8_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_8_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_8_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_8_timestamp_V_d0 <= buffer_in_8_q0(31 downto 12);

    samples_8_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_8_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_8_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_9_sample_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_9_sample_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_9_sample_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_9_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_9_sample_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_9_sample_V_ce0 <= ap_const_logic_1;
        else 
            samples_9_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_9_sample_V_d0 <= buffer_in_9_q0(12 - 1 downto 0);

    samples_9_sample_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_9_sample_V_we0 <= ap_const_logic_1;
        else 
            samples_9_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    samples_9_timestamp_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_cast3_reg_1929, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0, i_1_cast4_fu_1288_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            samples_9_timestamp_V_address0 <= i_1_cast4_fu_1288_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            samples_9_timestamp_V_address0 <= i_cast3_reg_1929(4 - 1 downto 0);
        else 
            samples_9_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    samples_9_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            samples_9_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            samples_9_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    samples_9_timestamp_V_d0 <= buffer_in_9_q0(31 downto 12);

    samples_9_timestamp_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln119_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_1_reg_1925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            samples_9_timestamp_V_we0 <= ap_const_logic_1;
        else 
            samples_9_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln20_2_fu_1427_p3 <= (samples_5_sample_V_load_reg_2151 & ap_const_lv16_0);
    shl_ln20_3_fu_1483_p3 <= (samples_7_sample_V_load_reg_2161 & ap_const_lv16_0);
    shl_ln20_4_fu_1539_p3 <= (samples_9_sample_V_load_reg_2171 & ap_const_lv16_0);
    shl_ln20_5_fu_1595_p3 <= (samples_11_sample_V_load_reg_2181 & ap_const_lv16_0);
    shl_ln20_6_fu_1316_p3 <= (i_1_reg_1032 & ap_const_lv6_0);
    shl_ln20_7_fu_1324_p3 <= (i_1_reg_1032 & ap_const_lv3_0);
    sliding_window_buffer_1_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    sliding_window_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_1_d0 <= n_samples;

    sliding_window_buffer_1_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sliding_window_buffer_1_we0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_1383_p4 <= ((samples_3_sample_V_q0 & ap_const_lv4_0) & samples_2_sample_V_q0);
    tmp_s_fu_1357_p4 <= ((samples_1_sample_V_q0 & ap_const_lv4_0) & samples_0_sample_V_q0);
    zext_ln20_10_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_10_sample_V_load_reg_2176),32));
    zext_ln20_11_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_2_fu_1439_p4),64));
    zext_ln20_12_fu_1627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_0_timestamp_V_load_reg_2186),32));
    zext_ln20_13_fu_1651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_1_timestamp_V_load_reg_2191),32));
    zext_ln20_14_fu_1675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_2_timestamp_V_load_reg_2196),32));
    zext_ln20_15_fu_1699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_3_timestamp_V_load_reg_2201),32));
    zext_ln20_16_fu_1723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_4_timestamp_V_load_reg_2206),32));
    zext_ln20_17_fu_1747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_5_timestamp_V_load_reg_2211),32));
    zext_ln20_18_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_6_timestamp_V_load_reg_2216),32));
    zext_ln20_19_fu_1795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_7_timestamp_V_load_reg_2221),32));
    zext_ln20_1_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1357_p4),32));
    zext_ln20_20_fu_1819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_8_timestamp_V_load_reg_2226),32));
    zext_ln20_21_fu_1843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_9_timestamp_V_load_reg_2231),32));
    zext_ln20_22_fu_1867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_10_timestamp_V_load_reg_2236),32));
    zext_ln20_23_fu_1901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_11_timestamp_V_load_reg_2241),32));
    zext_ln20_24_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_3_fu_1463_p4),64));
    zext_ln20_25_fu_1490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln20_3_fu_1483_p3),32));
    zext_ln20_26_fu_1505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_4_fu_1495_p4),64));
    zext_ln20_27_fu_1529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_5_fu_1519_p4),64));
    zext_ln20_28_fu_1546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln20_4_fu_1539_p3),32));
    zext_ln20_29_fu_1561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_6_fu_1551_p4),64));
    zext_ln20_2_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_1342_p4),64));
    zext_ln20_30_fu_1585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_7_fu_1575_p4),64));
    zext_ln20_31_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln20_5_fu_1595_p3),32));
    zext_ln20_32_fu_1617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_8_fu_1607_p4),64));
    zext_ln20_33_fu_1641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_9_fu_1631_p4),64));
    zext_ln20_34_fu_1665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_s_fu_1655_p4),64));
    zext_ln20_35_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_10_fu_1679_p4),64));
    zext_ln20_36_fu_1713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_11_fu_1703_p4),64));
    zext_ln20_37_fu_1737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_12_fu_1727_p4),64));
    zext_ln20_38_fu_1761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_13_fu_1751_p4),64));
    zext_ln20_39_fu_1785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_14_fu_1775_p4),64));
    zext_ln20_3_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1383_p4),32));
    zext_ln20_40_fu_1809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_15_fu_1799_p4),64));
    zext_ln20_41_fu_1833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_16_fu_1823_p4),64));
    zext_ln20_42_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_17_fu_1847_p4),64));
    zext_ln20_43_fu_1881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_18_fu_1871_p4),64));
    zext_ln20_44_fu_1905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_19_reg_2270),64));
    zext_ln20_4_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_4_sample_V_load_reg_2146),32));
    zext_ln20_5_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln20_fu_1372_p2),64));
    zext_ln20_6_fu_1459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_6_sample_V_load_reg_2156),32));
    zext_ln20_7_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln20_1_fu_1407_p4),64));
    zext_ln20_8_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(samples_8_sample_V_load_reg_2166),32));
    zext_ln20_9_fu_1434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln20_2_fu_1427_p3),32));
    zext_ln20_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln20_7_fu_1324_p3),10));
end behav;
