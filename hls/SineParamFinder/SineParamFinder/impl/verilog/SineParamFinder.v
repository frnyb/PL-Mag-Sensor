// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SineParamFinder_SineParamFinder,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.329125,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=261,HLS_VERSION=2020_2}" *)

module SineParamFinder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n_samples,
        samples_address0,
        samples_ce0,
        samples_q0,
        channel,
        amplitude,
        amplitude_ap_vld,
        offset,
        offset_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] n_samples;
output  [9:0] samples_address0;
output   samples_ce0;
input  [31:0] samples_q0;
input  [3:0] channel;
output  [11:0] amplitude;
output   amplitude_ap_vld;
output  [19:0] offset;
output   offset_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg samples_ce0;
reg amplitude_ap_vld;
reg offset_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] i_reg_113;
reg   [19:0] max_offset_V_reg_124;
reg   [11:0] max_val_V_reg_137;
reg   [11:0] min_val_V_reg_149;
wire   [15:0] add_ln16_fu_161_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln16_fu_167_p2;
reg   [0:0] icmp_ln16_reg_312;
wire   [11:0] min_val_V_2_fu_215_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [11:0] val_V_2_fu_223_p3;
wire   [19:0] offset_V_2_fu_231_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage0;
wire   [63:0] i_cast_fu_172_p1;
wire    ap_CS_fsm_state4;
wire   [11:0] offset_V_fu_181_p4;
wire   [11:0] val_V_fu_177_p1;
wire   [0:0] icmp_ln878_fu_201_p2;
wire   [0:0] icmp_ln886_fu_195_p2;
wire   [11:0] min_val_V_1_fu_207_p3;
wire   [19:0] zext_ln19_fu_191_p1;
wire   [12:0] zext_ln215_fu_239_p1;
wire   [12:0] zext_ln215_1_fu_243_p1;
wire   [12:0] ret_fu_247_p2;
wire   [12:0] sub_ln1364_fu_261_p2;
wire   [11:0] trunc_ln1364_1_fu_267_p4;
wire   [0:0] tmp_fu_253_p3;
wire   [11:0] sub_ln1364_1_fu_287_p2;
wire   [11:0] trunc_ln1364_2_fu_277_p4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_167_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_113 <= add_ln16_fu_161_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_113 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_312 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_offset_V_reg_124 <= offset_V_2_fu_231_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_offset_V_reg_124 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_312 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_val_V_reg_137 <= val_V_2_fu_223_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_val_V_reg_137 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_312 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_val_V_reg_149 <= min_val_V_2_fu_215_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        min_val_V_reg_149 <= 12'd4095;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln16_reg_312 <= icmp_ln16_fu_167_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        amplitude_ap_vld = 1'b1;
    end else begin
        amplitude_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_167_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        offset_ap_vld = 1'b1;
    end else begin
        offset_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        samples_ce0 = 1'b1;
    end else begin
        samples_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln16_fu_167_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln16_fu_167_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_161_p2 = (i_reg_113 + 16'd1);

assign amplitude = ((tmp_fu_253_p3[0:0] == 1'b1) ? sub_ln1364_1_fu_287_p2 : trunc_ln1364_2_fu_277_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_cast_fu_172_p1 = i_reg_113;

assign icmp_ln16_fu_167_p2 = ((i_reg_113 == n_samples) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_201_p2 = ((val_V_fu_177_p1 < min_val_V_reg_149) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_195_p2 = ((val_V_fu_177_p1 > max_val_V_reg_137) ? 1'b1 : 1'b0);

assign min_val_V_1_fu_207_p3 = ((icmp_ln878_fu_201_p2[0:0] == 1'b1) ? val_V_fu_177_p1 : min_val_V_reg_149);

assign min_val_V_2_fu_215_p3 = ((icmp_ln886_fu_195_p2[0:0] == 1'b1) ? min_val_V_reg_149 : min_val_V_1_fu_207_p3);

assign offset = max_offset_V_reg_124;

assign offset_V_2_fu_231_p3 = ((icmp_ln886_fu_195_p2[0:0] == 1'b1) ? zext_ln19_fu_191_p1 : max_offset_V_reg_124);

assign offset_V_fu_181_p4 = {{samples_q0[23:12]}};

assign ret_fu_247_p2 = (zext_ln215_fu_239_p1 - zext_ln215_1_fu_243_p1);

assign samples_address0 = i_cast_fu_172_p1;

assign sub_ln1364_1_fu_287_p2 = (12'd0 - trunc_ln1364_1_fu_267_p4);

assign sub_ln1364_fu_261_p2 = (13'd0 - ret_fu_247_p2);

assign tmp_fu_253_p3 = ret_fu_247_p2[32'd12];

assign trunc_ln1364_1_fu_267_p4 = {{sub_ln1364_fu_261_p2[12:1]}};

assign trunc_ln1364_2_fu_277_p4 = {{ret_fu_247_p2[12:1]}};

assign val_V_2_fu_223_p3 = ((icmp_ln886_fu_195_p2[0:0] == 1'b1) ? val_V_fu_177_p1 : max_val_V_reg_137);

assign val_V_fu_177_p1 = samples_q0[11:0];

assign zext_ln19_fu_191_p1 = offset_V_fu_181_p4;

assign zext_ln215_1_fu_243_p1 = min_val_V_reg_149;

assign zext_ln215_fu_239_p1 = max_val_V_reg_137;

endmodule //SineParamFinder
