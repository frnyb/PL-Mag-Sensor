-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SineParamFinder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_samples : IN STD_LOGIC_VECTOR (15 downto 0);
    samples_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    samples_ce0 : OUT STD_LOGIC;
    samples_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    channel : IN STD_LOGIC_VECTOR (3 downto 0);
    amplitude : OUT STD_LOGIC_VECTOR (11 downto 0);
    amplitude_ap_vld : OUT STD_LOGIC;
    offset : OUT STD_LOGIC_VECTOR (19 downto 0);
    offset_ap_vld : OUT STD_LOGIC );
end;


architecture behav of SineParamFinder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SineParamFinder_SineParamFinder,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.329125,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=261,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_113 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_offset_V_reg_124 : STD_LOGIC_VECTOR (19 downto 0);
    signal max_val_V_reg_137 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_val_V_reg_149 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln16_fu_161_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln16_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_val_V_2_fu_215_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal val_V_2_fu_223_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal offset_V_2_fu_231_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_cast_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal offset_V_fu_181_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal val_V_fu_177_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln878_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_val_V_1_fu_207_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_fu_191_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln215_fu_239_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln215_1_fu_243_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_fu_247_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1364_fu_261_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1364_1_fu_267_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1364_1_fu_287_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1364_2_fu_277_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_167_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_113 <= add_ln16_fu_161_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_113 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    max_offset_V_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_reg_312 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                max_offset_V_reg_124 <= offset_V_2_fu_231_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_offset_V_reg_124 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    max_val_V_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_reg_312 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                max_val_V_reg_137 <= val_V_2_fu_223_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_val_V_reg_137 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    min_val_V_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln16_reg_312 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                min_val_V_reg_149 <= min_val_V_2_fu_215_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                min_val_V_reg_149 <= ap_const_lv12_FFF;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln16_reg_312 <= icmp_ln16_fu_167_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln16_fu_167_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln16_fu_167_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln16_fu_167_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln16_fu_161_p2 <= std_logic_vector(unsigned(i_reg_113) + unsigned(ap_const_lv16_1));
    amplitude <= 
        sub_ln1364_1_fu_287_p2 when (tmp_fu_253_p3(0) = '1') else 
        trunc_ln1364_2_fu_277_p4;

    amplitude_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            amplitude_ap_vld <= ap_const_logic_1;
        else 
            amplitude_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln16_fu_167_p2)
    begin
        if ((icmp_ln16_fu_167_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_113),64));
    icmp_ln16_fu_167_p2 <= "1" when (i_reg_113 = n_samples) else "0";
    icmp_ln878_fu_201_p2 <= "1" when (unsigned(val_V_fu_177_p1) < unsigned(min_val_V_reg_149)) else "0";
    icmp_ln886_fu_195_p2 <= "1" when (unsigned(val_V_fu_177_p1) > unsigned(max_val_V_reg_137)) else "0";
    min_val_V_1_fu_207_p3 <= 
        val_V_fu_177_p1 when (icmp_ln878_fu_201_p2(0) = '1') else 
        min_val_V_reg_149;
    min_val_V_2_fu_215_p3 <= 
        min_val_V_reg_149 when (icmp_ln886_fu_195_p2(0) = '1') else 
        min_val_V_1_fu_207_p3;
    offset <= max_offset_V_reg_124;
    offset_V_2_fu_231_p3 <= 
        zext_ln19_fu_191_p1 when (icmp_ln886_fu_195_p2(0) = '1') else 
        max_offset_V_reg_124;
    offset_V_fu_181_p4 <= samples_q0(23 downto 12);

    offset_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            offset_ap_vld <= ap_const_logic_1;
        else 
            offset_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_247_p2 <= std_logic_vector(unsigned(zext_ln215_fu_239_p1) - unsigned(zext_ln215_1_fu_243_p1));
    samples_address0 <= i_cast_fu_172_p1(10 - 1 downto 0);

    samples_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            samples_ce0 <= ap_const_logic_1;
        else 
            samples_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1364_1_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(trunc_ln1364_1_fu_267_p4));
    sub_ln1364_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(ret_fu_247_p2));
    tmp_fu_253_p3 <= ret_fu_247_p2(12 downto 12);
    trunc_ln1364_1_fu_267_p4 <= sub_ln1364_fu_261_p2(12 downto 1);
    trunc_ln1364_2_fu_277_p4 <= ret_fu_247_p2(12 downto 1);
    val_V_2_fu_223_p3 <= 
        val_V_fu_177_p1 when (icmp_ln886_fu_195_p2(0) = '1') else 
        max_val_V_reg_137;
    val_V_fu_177_p1 <= samples_q0(12 - 1 downto 0);
    zext_ln19_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_V_fu_181_p4),20));
    zext_ln215_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_val_V_reg_149),13));
    zext_ln215_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_V_reg_137),13));
end behav;
