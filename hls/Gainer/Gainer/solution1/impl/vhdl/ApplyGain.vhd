-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ApplyGain is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    gain_step : IN STD_LOGIC_VECTOR (5 downto 0);
    signal_in : IN STD_LOGIC_VECTOR (31 downto 0);
    signal_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    signal_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ApplyGain is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ApplyGain_ApplyGain,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.822203,HLS_SYN_LAT=30,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1157,HLS_SYN_LUT=1364,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_C0200000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000001000000000000000000000";
    constant ap_const_lv32_40200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000001000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3DCCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101110011001100110011001101";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_408999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0100000010001001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal grp_fu_97_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_91_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gain_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv6_reg_392 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_reg_397 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_85_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_85_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_97_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_97_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_102_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_fu_145_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln315_fu_159_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_167_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal trunc_ln306_fu_133_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln311_fu_155_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_185_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_fu_209_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln331_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_fu_175_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln331_fu_229_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln331_fu_233_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln326_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln328_fu_163_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln326cast_fu_243_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln323_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln327_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln327_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln329_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln331_fu_239_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln329_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln329_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln337_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln339_fu_247_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln330_fu_277_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln330_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_1_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln337_fu_303_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln323_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln327_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln330_1_fu_329_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln327_fu_349_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_137_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln455_fu_357_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component ApplyGain_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ApplyGain_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ApplyGain_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ApplyGain_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ApplyGain_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component ApplyGain_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_85_p0,
        din1 => grp_fu_85_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_85_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U2 : component ApplyGain_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_113,
        din1 => ap_const_lv32_3DCCCCCD,
        ce => ap_const_logic_1,
        dout => grp_fu_91_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component ApplyGain_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_97_p0,
        din1 => grp_fu_97_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_97_p2);

    sitofp_32s_32_4_no_dsp_1_U4 : component ApplyGain_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_102_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_102_p1);

    fpext_32ns_64_2_no_dsp_1_U5 : component ApplyGain_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_119,
        ce => ap_const_logic_1,
        dout => grp_fu_105_p1);

    dmul_64ns_64ns_64_6_max_dsp_1_U6 : component ApplyGain_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv6_reg_392,
        din1 => ap_const_lv64_408999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_108_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                conv6_reg_392 <= grp_fu_105_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                conv_reg_377 <= grp_fu_102_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                gain_reg_387 <= grp_fu_91_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_113 <= grp_fu_97_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_119 <= grp_fu_85_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                val_reg_397 <= grp_fu_108_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln327_fu_343_p2 <= (xor_ln323_fu_337_p2 and icmp_ln327_fu_191_p2);
    and_ln329_fu_265_p2 <= (xor_ln327_fu_259_p2 and icmp_ln329_fu_197_p2);
    and_ln330_1_fu_317_p2 <= (xor_ln330_fu_311_p2 and and_ln329_fu_265_p2);
    and_ln330_fu_271_p2 <= (icmp_ln330_fu_203_p2 and and_ln329_fu_265_p2);
    and_ln337_fu_297_p2 <= (xor_ln329_fu_291_p2 and icmp_ln337_fu_219_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    exp_fu_145_p4 <= reg_fu_130_p1(62 downto 52);
        grp_fu_102_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(gain_step),32));


    grp_fu_85_p0_assign_proc : process(signal_in, reg_113, ap_CS_fsm_state9, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_85_p0 <= reg_113;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_85_p0 <= signal_in;
        else 
            grp_fu_85_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_85_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_85_p1 <= ap_const_lv32_40200000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_85_p1 <= ap_const_lv32_C0200000;
        else 
            grp_fu_85_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_97_p0_assign_proc : process(conv_reg_377, gain_reg_387, ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_97_p0 <= gain_reg_387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_97_p0 <= conv_reg_377;
        else 
            grp_fu_97_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_97_p1_assign_proc : process(reg_119, ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_97_p1 <= reg_119;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_97_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_97_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln323_fu_179_p2 <= "1" when (trunc_ln306_fu_133_p1 = ap_const_lv63_0) else "0";
    icmp_ln327_fu_191_p2 <= "1" when (exp_fu_145_p4 = ap_const_lv11_433) else "0";
    icmp_ln329_fu_197_p2 <= "1" when (signed(sh_amt_fu_185_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln330_fu_203_p2 <= "1" when (signed(sh_amt_fu_185_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln337_fu_219_p2 <= "1" when (signed(sh_amt_1_fu_209_p2) < signed(ap_const_lv12_C)) else "0";
    lshr_ln331_fu_233_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_fu_175_p1),to_integer(unsigned('0' & zext_ln331_fu_229_p1(31-1 downto 0)))));
    or_ln327_fu_253_p2 <= (icmp_ln327_fu_191_p2 or icmp_ln323_fu_179_p2);
    or_ln329_fu_285_p2 <= (or_ln327_fu_253_p2 or icmp_ln329_fu_197_p2);
    or_ln330_fu_323_p2 <= (icmp_ln323_fu_179_p2 or and_ln330_1_fu_317_p2);
    p_Result_1_fu_167_p3 <= (ap_const_lv1_1 & trunc_ln315_fu_159_p1);
    p_Result_s_fu_137_p3 <= reg_fu_130_p1(63 downto 63);
    reg_fu_130_p1 <= val_reg_397;
    select_ln327_fu_349_p3 <= 
        trunc_ln328_fu_163_p1 when (and_ln327_fu_343_p2(0) = '1') else 
        select_ln330_1_fu_329_p3;
    select_ln330_1_fu_329_p3 <= 
        ap_const_lv12_0 when (or_ln330_fu_323_p2(0) = '1') else 
        select_ln337_fu_303_p3;
    select_ln330_fu_277_p3 <= 
        trunc_ln331_fu_239_p1 when (and_ln330_fu_271_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln337_fu_303_p3 <= 
        shl_ln339_fu_247_p2 when (and_ln337_fu_297_p2(0) = '1') else 
        select_ln330_fu_277_p3;
        sext_ln326_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_fu_209_p2),32));

    sext_ln326cast_fu_243_p1 <= sext_ln326_fu_215_p1(12 - 1 downto 0);
        sext_ln331_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_185_p2),32));

    sh_amt_1_fu_209_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_amt_fu_185_p2));
    sh_amt_fu_185_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln311_fu_155_p1));
    shl_ln339_fu_247_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln328_fu_163_p1),to_integer(unsigned('0' & sext_ln326cast_fu_243_p1(12-1 downto 0)))));
    signal_out <= 
        sub_ln455_fu_357_p2 when (p_Result_s_fu_137_p3(0) = '1') else 
        select_ln327_fu_349_p3;

    signal_out_ap_vld_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            signal_out_ap_vld <= ap_const_logic_1;
        else 
            signal_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln455_fu_357_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(select_ln327_fu_349_p3));
    trunc_ln306_fu_133_p1 <= reg_fu_130_p1(63 - 1 downto 0);
    trunc_ln315_fu_159_p1 <= reg_fu_130_p1(52 - 1 downto 0);
    trunc_ln328_fu_163_p1 <= reg_fu_130_p1(12 - 1 downto 0);
    trunc_ln331_fu_239_p1 <= lshr_ln331_fu_233_p2(12 - 1 downto 0);
    xor_ln323_fu_337_p2 <= (icmp_ln323_fu_179_p2 xor ap_const_lv1_1);
    xor_ln327_fu_259_p2 <= (or_ln327_fu_253_p2 xor ap_const_lv1_1);
    xor_ln329_fu_291_p2 <= (or_ln329_fu_285_p2 xor ap_const_lv1_1);
    xor_ln330_fu_311_p2 <= (icmp_ln330_fu_203_p2 xor ap_const_lv1_1);
    zext_ln311_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_fu_145_p4),12));
    zext_ln320_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_167_p3),54));
    zext_ln331_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln331_fu_225_p1),54));
end behav;
