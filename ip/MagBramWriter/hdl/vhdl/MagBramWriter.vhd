-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MagBramWriter is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    buffer_in_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_0_ce0 : OUT STD_LOGIC;
    buffer_in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_1_ce0 : OUT STD_LOGIC;
    buffer_in_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_2_ce0 : OUT STD_LOGIC;
    buffer_in_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_3_ce0 : OUT STD_LOGIC;
    buffer_in_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_4_ce0 : OUT STD_LOGIC;
    buffer_in_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_5_ce0 : OUT STD_LOGIC;
    buffer_in_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_6_ce0 : OUT STD_LOGIC;
    buffer_in_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_7_ce0 : OUT STD_LOGIC;
    buffer_in_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_8_ce0 : OUT STD_LOGIC;
    buffer_in_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_9_ce0 : OUT STD_LOGIC;
    buffer_in_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_10_ce0 : OUT STD_LOGIC;
    buffer_in_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_in_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_in_11_ce0 : OUT STD_LOGIC;
    buffer_in_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_out_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_out_ce0 : OUT STD_LOGIC;
    buffer_out_we0 : OUT STD_LOGIC;
    buffer_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of MagBramWriter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MagBramWriter_MagBramWriter,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.072000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3378,HLS_SYN_LUT=3108,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal buffer_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_ce0 : STD_LOGIC;
    signal buffer_0_we0 : STD_LOGIC;
    signal buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_1_ce0 : STD_LOGIC;
    signal buffer_1_we0 : STD_LOGIC;
    signal buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_2_ce0 : STD_LOGIC;
    signal buffer_2_we0 : STD_LOGIC;
    signal buffer_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_3_ce0 : STD_LOGIC;
    signal buffer_3_we0 : STD_LOGIC;
    signal buffer_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_4_ce0 : STD_LOGIC;
    signal buffer_4_we0 : STD_LOGIC;
    signal buffer_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_5_ce0 : STD_LOGIC;
    signal buffer_5_we0 : STD_LOGIC;
    signal buffer_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_6_ce0 : STD_LOGIC;
    signal buffer_6_we0 : STD_LOGIC;
    signal buffer_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_7_ce0 : STD_LOGIC;
    signal buffer_7_we0 : STD_LOGIC;
    signal buffer_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_8_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_8_ce0 : STD_LOGIC;
    signal buffer_8_we0 : STD_LOGIC;
    signal buffer_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_9_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_9_ce0 : STD_LOGIC;
    signal buffer_9_we0 : STD_LOGIC;
    signal buffer_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_10_ce0 : STD_LOGIC;
    signal buffer_10_we0 : STD_LOGIC;
    signal buffer_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_11_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_11_ce0 : STD_LOGIC;
    signal buffer_11_we0 : STD_LOGIC;
    signal buffer_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writeData_fu_132_ap_start : STD_LOGIC;
    signal grp_writeData_fu_132_ap_done : STD_LOGIC;
    signal grp_writeData_fu_132_ap_idle : STD_LOGIC;
    signal grp_writeData_fu_132_ap_ready : STD_LOGIC;
    signal grp_writeData_fu_132_buffer_out_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_writeData_fu_132_buffer_out_ce0 : STD_LOGIC;
    signal grp_writeData_fu_132_buffer_out_we0 : STD_LOGIC;
    signal grp_writeData_fu_132_buffer_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writeData_fu_132_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_writeData_fu_132_buffer_r_ce0 : STD_LOGIC;
    signal grp_writeData_fu_132_buffer_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writeData_fu_132_channel : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_loadBuffer_fu_152_ap_start : STD_LOGIC;
    signal grp_loadBuffer_fu_152_ap_done : STD_LOGIC;
    signal grp_loadBuffer_fu_152_ap_idle : STD_LOGIC;
    signal grp_loadBuffer_fu_152_ap_ready : STD_LOGIC;
    signal grp_loadBuffer_fu_152_buffer_in_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_loadBuffer_fu_152_buffer_in_0_ce0 : STD_LOGIC;
    signal grp_loadBuffer_fu_152_buffer_in_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_loadBuffer_fu_152_buffer_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_loadBuffer_fu_152_buffer_r_ce0 : STD_LOGIC;
    signal grp_loadBuffer_fu_152_buffer_r_we0 : STD_LOGIC;
    signal grp_loadBuffer_fu_152_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_writeData_fu_132_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_loadBuffer_fu_152_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_block_state16_on_subcall_done : BOOLEAN;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal ap_block_state22_on_subcall_done : BOOLEAN;
    signal ap_block_state24_on_subcall_done : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component MagBramWriter_writeData IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_out_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_out_ce0 : OUT STD_LOGIC;
        buffer_out_we0 : OUT STD_LOGIC;
        buffer_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        channel : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component MagBramWriter_loadBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_in_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_in_0_ce0 : OUT STD_LOGIC;
        buffer_in_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MagBramWriter_buffer_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MagBramWriter_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component MagBramWriter_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    buffer_0_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_0_address0,
        ce0 => buffer_0_ce0,
        we0 => buffer_0_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_0_q0);

    buffer_1_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_1_address0,
        ce0 => buffer_1_ce0,
        we0 => buffer_1_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_1_q0);

    buffer_2_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_2_address0,
        ce0 => buffer_2_ce0,
        we0 => buffer_2_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_2_q0);

    buffer_3_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_3_address0,
        ce0 => buffer_3_ce0,
        we0 => buffer_3_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_3_q0);

    buffer_4_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_4_address0,
        ce0 => buffer_4_ce0,
        we0 => buffer_4_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_4_q0);

    buffer_5_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_5_address0,
        ce0 => buffer_5_ce0,
        we0 => buffer_5_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_5_q0);

    buffer_6_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_6_address0,
        ce0 => buffer_6_ce0,
        we0 => buffer_6_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_6_q0);

    buffer_7_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_7_address0,
        ce0 => buffer_7_ce0,
        we0 => buffer_7_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_7_q0);

    buffer_8_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_8_address0,
        ce0 => buffer_8_ce0,
        we0 => buffer_8_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_8_q0);

    buffer_9_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_9_address0,
        ce0 => buffer_9_ce0,
        we0 => buffer_9_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_9_q0);

    buffer_10_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_10_address0,
        ce0 => buffer_10_ce0,
        we0 => buffer_10_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_10_q0);

    buffer_11_U : component MagBramWriter_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_11_address0,
        ce0 => buffer_11_ce0,
        we0 => buffer_11_we0,
        d0 => grp_loadBuffer_fu_152_buffer_r_d0,
        q0 => buffer_11_q0);

    grp_writeData_fu_132 : component MagBramWriter_writeData
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_writeData_fu_132_ap_start,
        ap_done => grp_writeData_fu_132_ap_done,
        ap_idle => grp_writeData_fu_132_ap_idle,
        ap_ready => grp_writeData_fu_132_ap_ready,
        buffer_out_address0 => grp_writeData_fu_132_buffer_out_address0,
        buffer_out_ce0 => grp_writeData_fu_132_buffer_out_ce0,
        buffer_out_we0 => grp_writeData_fu_132_buffer_out_we0,
        buffer_out_d0 => grp_writeData_fu_132_buffer_out_d0,
        buffer_r_address0 => grp_writeData_fu_132_buffer_r_address0,
        buffer_r_ce0 => grp_writeData_fu_132_buffer_r_ce0,
        buffer_r_q0 => grp_writeData_fu_132_buffer_r_q0,
        channel => grp_writeData_fu_132_channel);

    grp_loadBuffer_fu_152 : component MagBramWriter_loadBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_loadBuffer_fu_152_ap_start,
        ap_done => grp_loadBuffer_fu_152_ap_done,
        ap_idle => grp_loadBuffer_fu_152_ap_idle,
        ap_ready => grp_loadBuffer_fu_152_ap_ready,
        buffer_in_0_address0 => grp_loadBuffer_fu_152_buffer_in_0_address0,
        buffer_in_0_ce0 => grp_loadBuffer_fu_152_buffer_in_0_ce0,
        buffer_in_0_q0 => grp_loadBuffer_fu_152_buffer_in_0_q0,
        buffer_r_address0 => grp_loadBuffer_fu_152_buffer_r_address0,
        buffer_r_ce0 => grp_loadBuffer_fu_152_buffer_r_ce0,
        buffer_r_we0 => grp_loadBuffer_fu_152_buffer_r_we0,
        buffer_r_d0 => grp_loadBuffer_fu_152_buffer_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_loadBuffer_fu_152_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_loadBuffer_fu_152_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_loadBuffer_fu_152_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_loadBuffer_fu_152_ap_ready = ap_const_logic_1)) then 
                    grp_loadBuffer_fu_152_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_writeData_fu_132_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_writeData_fu_132_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_writeData_fu_132_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_writeData_fu_132_ap_ready = ap_const_logic_1)) then 
                    grp_writeData_fu_132_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state2, ap_block_state4_on_subcall_done, ap_block_state6_on_subcall_done, ap_block_state8_on_subcall_done, ap_block_state10_on_subcall_done, ap_block_state12_on_subcall_done, ap_block_state14_on_subcall_done, ap_block_state16_on_subcall_done, ap_block_state18_on_subcall_done, ap_block_state20_on_subcall_done, ap_block_state22_on_subcall_done, ap_block_state24_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_loadBuffer_fu_152_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_boolean_0 = ap_block_state22_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_boolean_0 = ap_block_state24_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_writeData_fu_132_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state12_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state14_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state16_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state16_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state22_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state22_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state24_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state24_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(grp_writeData_fu_132_ap_done, grp_loadBuffer_fu_152_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_loadBuffer_fu_152_ap_done = ap_const_logic_0) or (grp_writeData_fu_132_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_writeData_fu_132_ap_done, ap_CS_fsm_state26)
    begin
        if (((grp_writeData_fu_132_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_writeData_fu_132_ap_done, ap_CS_fsm_state26)
    begin
        if (((grp_writeData_fu_132_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buffer_0_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_0_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_0_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_0_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_0_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_0_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_0_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_0_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_0_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_10_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buffer_10_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buffer_10_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_10_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_10_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buffer_10_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buffer_10_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_10_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buffer_10_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_11_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buffer_11_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buffer_11_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_11_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_11_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buffer_11_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            buffer_11_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_11_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buffer_11_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_1_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_1_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_1_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_1_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_1_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_1_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_1_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_1_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_1_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_2_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_2_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_2_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_2_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_2_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_2_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_2_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_2_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_2_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_3_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_3_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buffer_3_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_3_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_3_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_3_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buffer_3_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_3_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_3_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_4_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buffer_4_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_4_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_4_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_4_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buffer_4_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_4_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_4_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buffer_4_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_5_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_5_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_5_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_5_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_5_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_5_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_5_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_5_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_5_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_6_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_6_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_6_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_6_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_6_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_6_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_6_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_6_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_6_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_7_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_7_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_7_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_7_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_7_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_7_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_7_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_7_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_7_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_8_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_8_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_8_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_8_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_8_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_8_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_8_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_8_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_8_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_9_address0_assign_proc : process(grp_writeData_fu_132_buffer_r_address0, grp_loadBuffer_fu_152_buffer_r_address0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_9_address0 <= grp_loadBuffer_fu_152_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buffer_9_address0 <= grp_writeData_fu_132_buffer_r_address0;
        else 
            buffer_9_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_9_ce0_assign_proc : process(grp_writeData_fu_132_buffer_r_ce0, grp_loadBuffer_fu_152_buffer_r_ce0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_9_ce0 <= grp_loadBuffer_fu_152_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buffer_9_ce0 <= grp_writeData_fu_132_buffer_r_ce0;
        else 
            buffer_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_9_we0_assign_proc : process(grp_loadBuffer_fu_152_buffer_r_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_9_we0 <= grp_loadBuffer_fu_152_buffer_r_we0;
        else 
            buffer_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_0_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_0_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_in_0_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_10_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_10_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            buffer_in_10_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_11_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_11_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            buffer_in_11_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_1_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_1_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_in_1_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_2_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_2_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_in_2_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_3_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_3_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer_in_3_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_4_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_4_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buffer_in_4_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_5_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_5_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buffer_in_5_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_6_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_6_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_in_6_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_7_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_7_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_in_7_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_8_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_8_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_in_8_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_in_9_address0 <= grp_loadBuffer_fu_152_buffer_in_0_address0;

    buffer_in_9_ce0_assign_proc : process(grp_loadBuffer_fu_152_buffer_in_0_ce0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_in_9_ce0 <= grp_loadBuffer_fu_152_buffer_in_0_ce0;
        else 
            buffer_in_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_out_address0 <= grp_writeData_fu_132_buffer_out_address0;

    buffer_out_ce0_assign_proc : process(grp_writeData_fu_132_buffer_out_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buffer_out_ce0 <= grp_writeData_fu_132_buffer_out_ce0;
        else 
            buffer_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_out_d0 <= grp_writeData_fu_132_buffer_out_d0;

    buffer_out_we0_assign_proc : process(grp_writeData_fu_132_buffer_out_we0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buffer_out_we0 <= grp_writeData_fu_132_buffer_out_we0;
        else 
            buffer_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_loadBuffer_fu_152_ap_start <= grp_loadBuffer_fu_152_ap_start_reg;

    grp_loadBuffer_fu_152_buffer_in_0_q0_assign_proc : process(buffer_in_0_q0, buffer_in_1_q0, buffer_in_2_q0, buffer_in_3_q0, buffer_in_4_q0, buffer_in_5_q0, buffer_in_6_q0, buffer_in_7_q0, buffer_in_8_q0, buffer_in_9_q0, buffer_in_10_q0, buffer_in_11_q0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= buffer_in_0_q0;
        else 
            grp_loadBuffer_fu_152_buffer_in_0_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_writeData_fu_132_ap_start <= grp_writeData_fu_132_ap_start_reg;

    grp_writeData_fu_132_buffer_r_q0_assign_proc : process(buffer_0_q0, buffer_1_q0, buffer_2_q0, buffer_3_q0, buffer_4_q0, buffer_5_q0, buffer_6_q0, buffer_7_q0, buffer_8_q0, buffer_9_q0, buffer_10_q0, buffer_11_q0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_writeData_fu_132_buffer_r_q0 <= buffer_0_q0;
        else 
            grp_writeData_fu_132_buffer_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_writeData_fu_132_channel_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_writeData_fu_132_channel <= ap_const_lv4_0;
        else 
            grp_writeData_fu_132_channel <= "XXXX";
        end if; 
    end process;

end behav;
