-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MagBramWriter_writeData is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_out_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_out_ce0 : OUT STD_LOGIC;
    buffer_out_we0 : OUT STD_LOGIC;
    buffer_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    channel : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of MagBramWriter_writeData is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_85 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_1_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_2_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_2_reg_177 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln95_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln95_reg_182_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_reg_182_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln97_2_fu_149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter23_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter24_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter25_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter26_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter27_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter28_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter29_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter30_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter31_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter32_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter33_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter34_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln97_2_reg_191_pp0_iter35_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln95_1_fu_153_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal zext_ln97_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln97_1_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln95_1_fu_102_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_94_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln95_fu_110_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_114_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln95_fu_124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_143_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln97_1_fu_159_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MagBramWriter_srem_32ns_6ns_5_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    srem_32ns_6ns_5_36_1_U3 : component MagBramWriter_srem_32ns_6ns_5_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 6,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_143_p0,
        din1 => grp_fu_143_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_1_reg_85 <= zext_ln95_1_fu_120_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln95_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_reg_85 <= add_ln95_1_fu_153_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln95_reg_182 <= icmp_ln95_fu_134_p2;
                icmp_ln95_reg_182_pp0_iter1_reg <= icmp_ln95_reg_182;
                trunc_ln97_2_reg_191_pp0_iter1_reg <= trunc_ln97_2_reg_191;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln95_reg_182_pp0_iter10_reg <= icmp_ln95_reg_182_pp0_iter9_reg;
                icmp_ln95_reg_182_pp0_iter11_reg <= icmp_ln95_reg_182_pp0_iter10_reg;
                icmp_ln95_reg_182_pp0_iter12_reg <= icmp_ln95_reg_182_pp0_iter11_reg;
                icmp_ln95_reg_182_pp0_iter13_reg <= icmp_ln95_reg_182_pp0_iter12_reg;
                icmp_ln95_reg_182_pp0_iter14_reg <= icmp_ln95_reg_182_pp0_iter13_reg;
                icmp_ln95_reg_182_pp0_iter15_reg <= icmp_ln95_reg_182_pp0_iter14_reg;
                icmp_ln95_reg_182_pp0_iter16_reg <= icmp_ln95_reg_182_pp0_iter15_reg;
                icmp_ln95_reg_182_pp0_iter17_reg <= icmp_ln95_reg_182_pp0_iter16_reg;
                icmp_ln95_reg_182_pp0_iter18_reg <= icmp_ln95_reg_182_pp0_iter17_reg;
                icmp_ln95_reg_182_pp0_iter19_reg <= icmp_ln95_reg_182_pp0_iter18_reg;
                icmp_ln95_reg_182_pp0_iter20_reg <= icmp_ln95_reg_182_pp0_iter19_reg;
                icmp_ln95_reg_182_pp0_iter21_reg <= icmp_ln95_reg_182_pp0_iter20_reg;
                icmp_ln95_reg_182_pp0_iter22_reg <= icmp_ln95_reg_182_pp0_iter21_reg;
                icmp_ln95_reg_182_pp0_iter23_reg <= icmp_ln95_reg_182_pp0_iter22_reg;
                icmp_ln95_reg_182_pp0_iter24_reg <= icmp_ln95_reg_182_pp0_iter23_reg;
                icmp_ln95_reg_182_pp0_iter25_reg <= icmp_ln95_reg_182_pp0_iter24_reg;
                icmp_ln95_reg_182_pp0_iter26_reg <= icmp_ln95_reg_182_pp0_iter25_reg;
                icmp_ln95_reg_182_pp0_iter27_reg <= icmp_ln95_reg_182_pp0_iter26_reg;
                icmp_ln95_reg_182_pp0_iter28_reg <= icmp_ln95_reg_182_pp0_iter27_reg;
                icmp_ln95_reg_182_pp0_iter29_reg <= icmp_ln95_reg_182_pp0_iter28_reg;
                icmp_ln95_reg_182_pp0_iter2_reg <= icmp_ln95_reg_182_pp0_iter1_reg;
                icmp_ln95_reg_182_pp0_iter30_reg <= icmp_ln95_reg_182_pp0_iter29_reg;
                icmp_ln95_reg_182_pp0_iter31_reg <= icmp_ln95_reg_182_pp0_iter30_reg;
                icmp_ln95_reg_182_pp0_iter32_reg <= icmp_ln95_reg_182_pp0_iter31_reg;
                icmp_ln95_reg_182_pp0_iter33_reg <= icmp_ln95_reg_182_pp0_iter32_reg;
                icmp_ln95_reg_182_pp0_iter34_reg <= icmp_ln95_reg_182_pp0_iter33_reg;
                icmp_ln95_reg_182_pp0_iter35_reg <= icmp_ln95_reg_182_pp0_iter34_reg;
                icmp_ln95_reg_182_pp0_iter3_reg <= icmp_ln95_reg_182_pp0_iter2_reg;
                icmp_ln95_reg_182_pp0_iter4_reg <= icmp_ln95_reg_182_pp0_iter3_reg;
                icmp_ln95_reg_182_pp0_iter5_reg <= icmp_ln95_reg_182_pp0_iter4_reg;
                icmp_ln95_reg_182_pp0_iter6_reg <= icmp_ln95_reg_182_pp0_iter5_reg;
                icmp_ln95_reg_182_pp0_iter7_reg <= icmp_ln95_reg_182_pp0_iter6_reg;
                icmp_ln95_reg_182_pp0_iter8_reg <= icmp_ln95_reg_182_pp0_iter7_reg;
                icmp_ln95_reg_182_pp0_iter9_reg <= icmp_ln95_reg_182_pp0_iter8_reg;
                trunc_ln97_2_reg_191_pp0_iter10_reg <= trunc_ln97_2_reg_191_pp0_iter9_reg;
                trunc_ln97_2_reg_191_pp0_iter11_reg <= trunc_ln97_2_reg_191_pp0_iter10_reg;
                trunc_ln97_2_reg_191_pp0_iter12_reg <= trunc_ln97_2_reg_191_pp0_iter11_reg;
                trunc_ln97_2_reg_191_pp0_iter13_reg <= trunc_ln97_2_reg_191_pp0_iter12_reg;
                trunc_ln97_2_reg_191_pp0_iter14_reg <= trunc_ln97_2_reg_191_pp0_iter13_reg;
                trunc_ln97_2_reg_191_pp0_iter15_reg <= trunc_ln97_2_reg_191_pp0_iter14_reg;
                trunc_ln97_2_reg_191_pp0_iter16_reg <= trunc_ln97_2_reg_191_pp0_iter15_reg;
                trunc_ln97_2_reg_191_pp0_iter17_reg <= trunc_ln97_2_reg_191_pp0_iter16_reg;
                trunc_ln97_2_reg_191_pp0_iter18_reg <= trunc_ln97_2_reg_191_pp0_iter17_reg;
                trunc_ln97_2_reg_191_pp0_iter19_reg <= trunc_ln97_2_reg_191_pp0_iter18_reg;
                trunc_ln97_2_reg_191_pp0_iter20_reg <= trunc_ln97_2_reg_191_pp0_iter19_reg;
                trunc_ln97_2_reg_191_pp0_iter21_reg <= trunc_ln97_2_reg_191_pp0_iter20_reg;
                trunc_ln97_2_reg_191_pp0_iter22_reg <= trunc_ln97_2_reg_191_pp0_iter21_reg;
                trunc_ln97_2_reg_191_pp0_iter23_reg <= trunc_ln97_2_reg_191_pp0_iter22_reg;
                trunc_ln97_2_reg_191_pp0_iter24_reg <= trunc_ln97_2_reg_191_pp0_iter23_reg;
                trunc_ln97_2_reg_191_pp0_iter25_reg <= trunc_ln97_2_reg_191_pp0_iter24_reg;
                trunc_ln97_2_reg_191_pp0_iter26_reg <= trunc_ln97_2_reg_191_pp0_iter25_reg;
                trunc_ln97_2_reg_191_pp0_iter27_reg <= trunc_ln97_2_reg_191_pp0_iter26_reg;
                trunc_ln97_2_reg_191_pp0_iter28_reg <= trunc_ln97_2_reg_191_pp0_iter27_reg;
                trunc_ln97_2_reg_191_pp0_iter29_reg <= trunc_ln97_2_reg_191_pp0_iter28_reg;
                trunc_ln97_2_reg_191_pp0_iter2_reg <= trunc_ln97_2_reg_191_pp0_iter1_reg;
                trunc_ln97_2_reg_191_pp0_iter30_reg <= trunc_ln97_2_reg_191_pp0_iter29_reg;
                trunc_ln97_2_reg_191_pp0_iter31_reg <= trunc_ln97_2_reg_191_pp0_iter30_reg;
                trunc_ln97_2_reg_191_pp0_iter32_reg <= trunc_ln97_2_reg_191_pp0_iter31_reg;
                trunc_ln97_2_reg_191_pp0_iter33_reg <= trunc_ln97_2_reg_191_pp0_iter32_reg;
                trunc_ln97_2_reg_191_pp0_iter34_reg <= trunc_ln97_2_reg_191_pp0_iter33_reg;
                trunc_ln97_2_reg_191_pp0_iter35_reg <= trunc_ln97_2_reg_191_pp0_iter34_reg;
                trunc_ln97_2_reg_191_pp0_iter3_reg <= trunc_ln97_2_reg_191_pp0_iter2_reg;
                trunc_ln97_2_reg_191_pp0_iter4_reg <= trunc_ln97_2_reg_191_pp0_iter3_reg;
                trunc_ln97_2_reg_191_pp0_iter5_reg <= trunc_ln97_2_reg_191_pp0_iter4_reg;
                trunc_ln97_2_reg_191_pp0_iter6_reg <= trunc_ln97_2_reg_191_pp0_iter5_reg;
                trunc_ln97_2_reg_191_pp0_iter7_reg <= trunc_ln97_2_reg_191_pp0_iter6_reg;
                trunc_ln97_2_reg_191_pp0_iter8_reg <= trunc_ln97_2_reg_191_pp0_iter7_reg;
                trunc_ln97_2_reg_191_pp0_iter9_reg <= trunc_ln97_2_reg_191_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln95_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln97_2_reg_191 <= trunc_ln97_2_fu_149_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln95_2_reg_177(7 downto 2) <= zext_ln95_2_fu_130_p1(7 downto 2);
            end if;
        end if;
    end process;
    zext_ln95_2_reg_177(1 downto 0) <= "00";
    zext_ln95_2_reg_177(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln95_fu_134_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln95_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln95_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln95_1_fu_153_p2 <= std_logic_vector(unsigned(i_1_reg_85) + unsigned(ap_const_lv64_1));
    add_ln95_fu_124_p2 <= std_logic_vector(unsigned(i_fu_114_p2) + unsigned(ap_const_lv8_14));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state39 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln95_fu_134_p2)
    begin
        if ((icmp_ln95_fu_134_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36)
    begin
        if (((ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_out_address0 <= zext_ln97_1_fu_168_p1(8 - 1 downto 0);

    buffer_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter36)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            buffer_out_ce0 <= ap_const_logic_1;
        else 
            buffer_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_out_d0 <= buffer_r_q0;

    buffer_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln95_reg_182_pp0_iter35_reg, ap_enable_reg_pp0_iter36)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1) and (icmp_ln95_reg_182_pp0_iter35_reg = ap_const_lv1_1))) then 
            buffer_out_we0 <= ap_const_logic_1;
        else 
            buffer_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= zext_ln97_fu_163_p1(5 - 1 downto 0);

    buffer_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter35)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter35 = ap_const_logic_1))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_143_p0 <= i_1_reg_85(32 - 1 downto 0);
    grp_fu_143_p1 <= ap_const_lv32_14(6 - 1 downto 0);
    i_fu_114_p2 <= std_logic_vector(unsigned(shl_ln_fu_94_p3) + unsigned(zext_ln95_fu_110_p1));
    icmp_ln95_fu_134_p2 <= "1" when (signed(i_1_reg_85) < signed(zext_ln95_2_reg_177)) else "0";
    shl_ln95_1_fu_102_p3 <= (channel & ap_const_lv2_0);
    shl_ln_fu_94_p3 <= (channel & ap_const_lv4_0);
    trunc_ln97_1_fu_159_p1 <= grp_fu_143_p2(5 - 1 downto 0);
    trunc_ln97_2_fu_149_p1 <= i_1_reg_85(8 - 1 downto 0);
    zext_ln95_1_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_114_p2),64));
    zext_ln95_2_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_fu_124_p2),64));
    zext_ln95_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln95_1_fu_102_p3),8));
    zext_ln97_1_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln97_2_reg_191_pp0_iter35_reg),64));
    zext_ln97_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln97_1_fu_159_p1),64));
end behav;
