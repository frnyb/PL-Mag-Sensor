// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MagSampleFetcher_writeData (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_out_address0,
        buffer_out_ce0,
        buffer_out_we0,
        buffer_out_d0,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        channel,
        curr_n_samples,
        n_samples
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] buffer_out_address0;
output   buffer_out_ce0;
output   buffer_out_we0;
output  [31:0] buffer_out_d0;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
input  [31:0] buffer_r_q0;
input  [3:0] channel;
input  [10:0] curr_n_samples;
input  [5:0] n_samples;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_out_ce0;
reg buffer_out_we0;
reg buffer_r_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] i_reg_111;
wire   [12:0] start_idx_fu_152_p2;
reg   [12:0] start_idx_reg_222;
wire   [5:0] add_ln116_fu_158_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln116_fu_164_p2;
reg   [0:0] icmp_ln116_reg_232;
wire   [12:0] add_ln120_fu_208_p2;
reg   [12:0] add_ln120_reg_241;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] i_cast2_fu_169_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln120_fu_213_p1;
wire   [8:0] trunc_ln114_fu_126_p1;
wire   [12:0] shl_ln_fu_130_p3;
wire   [12:0] shl_ln114_1_fu_138_p3;
wire   [12:0] sub_ln114_fu_146_p2;
wire   [12:0] channel_cast_fu_122_p1;
wire   [9:0] shl_ln1_fu_174_p3;
wire   [7:0] shl_ln118_1_fu_186_p3;
wire   [10:0] zext_ln118_fu_182_p1;
wire   [10:0] zext_ln118_1_fu_194_p1;
wire   [10:0] sub_ln118_fu_198_p2;
wire  signed [12:0] sext_ln120_fu_204_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_111 <= 6'd0;
    end else if (((icmp_ln116_fu_164_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_111 <= add_ln116_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln116_fu_164_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln120_reg_241 <= add_ln120_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln116_reg_232 <= icmp_ln116_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        start_idx_reg_222 <= start_idx_fu_152_p2;
    end
end

always @ (*) begin
    if ((icmp_ln116_fu_164_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_out_ce0 = 1'b1;
    end else begin
        buffer_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln116_reg_232 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_out_we0 = 1'b1;
    end else begin
        buffer_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln116_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln116_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln116_fu_158_p2 = (i_reg_111 + 6'd1);

assign add_ln120_fu_208_p2 = ($signed(sext_ln120_fu_204_p1) + $signed(start_idx_reg_222));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_out_address0 = zext_ln120_fu_213_p1;

assign buffer_out_d0 = buffer_r_q0;

assign buffer_r_address0 = i_cast2_fu_169_p1;

assign channel_cast_fu_122_p1 = channel;

assign i_cast2_fu_169_p1 = i_reg_111;

assign icmp_ln116_fu_164_p2 = ((i_reg_111 == n_samples) ? 1'b1 : 1'b0);

assign sext_ln120_fu_204_p1 = $signed(sub_ln118_fu_198_p2);

assign shl_ln114_1_fu_138_p3 = {{curr_n_samples}, {2'd0}};

assign shl_ln118_1_fu_186_p3 = {{i_reg_111}, {2'd0}};

assign shl_ln1_fu_174_p3 = {{i_reg_111}, {4'd0}};

assign shl_ln_fu_130_p3 = {{trunc_ln114_fu_126_p1}, {4'd0}};

assign start_idx_fu_152_p2 = (sub_ln114_fu_146_p2 + channel_cast_fu_122_p1);

assign sub_ln114_fu_146_p2 = (shl_ln_fu_130_p3 - shl_ln114_1_fu_138_p3);

assign sub_ln118_fu_198_p2 = (zext_ln118_fu_182_p1 - zext_ln118_1_fu_194_p1);

assign trunc_ln114_fu_126_p1 = curr_n_samples[8:0];

assign zext_ln118_1_fu_194_p1 = shl_ln118_1_fu_186_p3;

assign zext_ln118_fu_182_p1 = shl_ln1_fu_174_p3;

assign zext_ln120_fu_213_p1 = add_ln120_reg_241;

endmodule //MagSampleFetcher_writeData
