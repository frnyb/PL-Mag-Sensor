-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K0_V_rom is 
    generic(
             DWIDTH     : integer := 29; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K0_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11001001000011111101101010100", 1 => "11001001000011111000011111110", 
    2 => "11001001000011101000111111101", 3 => "11001001000011001111001010000", 
    4 => "11001001000010101010111111000", 5 => "11001001000001111100011110101", 
    6 => "11001001000001000011101001000", 7 => "11001001000000000000011110001", 
    8 => "11001000111110110010111110001", 9 => "11001000111101011011001001010", 
    10 => "11001000111011111000111111011", 11 => "11001000111010001100100000111", 
    12 => "11001000111000010101101101110", 13 => "11001000110110010100100110011", 
    14 => "11001000110100001001001010101", 15 => "11001000110001110011011011000", 
    16 => "11001000101111010011010111100", 17 => "11001000101100101001000000100", 
    18 => "11001000101001110100010110001", 19 => "11001000100110110101011000110", 
    20 => "11001000100011101100001000101", 21 => "11001000100000011000100110000", 
    22 => "11001000011100111010110001010", 23 => "11001000011001010010101010101", 
    24 => "11001000010101100000010010011", 25 => "11001000010001100011101001001", 
    26 => "11001000001101011100101111000", 27 => "11001000001001001011100100011", 
    28 => "11001000000100110000001001110", 29 => "11001000000000001010011111101", 
    30 => "11000111111011011010100110001", 31 => "11000111110110100000011110000", 
    32 => "11000111110001011100000111100", 33 => "11000111101100001101100011010", 
    34 => "11000111100110110100110001101", 35 => "11000111100001010001110011001", 
    36 => "11000111011011100100101000010", 37 => "11000111010101101101010001101", 
    38 => "11000111001111101011101111110", 39 => "11000111001001100000000011001", 
    40 => "11000111000011001010001100011", 41 => "11000110111100101010001100000", 
    42 => "11000110110110000000000010110", 43 => "11000110101111001011110001001", 
    44 => "11000110101000001101010111110", 45 => "11000110100001000100110111011", 
    46 => "11000110011001110010010000101", 47 => "11000110010010010101100100000", 
    48 => "11000110001010101110110010100", 49 => "11000110000010111101111100100", 
    50 => "11000101111011000011000011000", 51 => "11000101110010111110000110101", 
    52 => "11000101101010101111001000000", 53 => "11000101100010010110001000000", 
    54 => "11000101011001110011000111100", 55 => "11000101010001000110000111001", 
    56 => "11000101001000001111000111101", 57 => "11000100111111001110001010000", 
    58 => "11000100110110000011001111001", 59 => "11000100101100101110010111101", 
    60 => "11000100100011001111100100011", 61 => "11000100011001100110110110100", 
    62 => "11000100001111110100001110101", 63 => "11000100000101110111101101110", 
    64 => "11000011111011110001010100111", 65 => "11000011110001100001000100110", 
    66 => "11000011100111000110111110100", 67 => "11000011011100100011000011000", 
    68 => "11000011010001110101010011010", 69 => "11000011000110111101110000010", 
    70 => "11000010111011111100011010111", 71 => "11000010110000110001010100011", 
    72 => "11000010100101011100011101100", 73 => "11000010011001111101110111101", 
    74 => "11000010001110010101100011100", 75 => "11000010000010100011100010010", 
    76 => "11000001110110100111110101001", 77 => "11000001101010100010011101010", 
    78 => "11000001011110010011011011100", 79 => "11000001010001111010110001001", 
    80 => "11000001000101011000011111010", 81 => "11000000111000101100100111000", 
    82 => "11000000101011110111001001101", 83 => "11000000011110111000001000011", 
    84 => "11000000010001101111100100010", 85 => "11000000000100011101011110100", 
    86 => "10111111110111000001111000011", 87 => "10111111101001011100110011010", 
    88 => "10111111011011101110010000010", 89 => "10111111001101110110010000101", 
    90 => "10111110111111110100110101101", 91 => "10111110110001101010000000101", 
    92 => "10111110100011010101110010110", 93 => "10111110010100111000001101101", 
    94 => "10111110000110010001010010011", 95 => "10111101110111100001000010011", 
    96 => "10111101101000100111011111000", 97 => "10111101011001100100101001100", 
    98 => "10111101001010011000100011100", 99 => "10111100111011000011001110001", 
    100 => "10111100101011100100101011000", 101 => "10111100011011111100111011100", 
    102 => "10111100001100001100000001000", 103 => "10111011111100010001111100111", 
    104 => "10111011101100001110110000110", 105 => "10111011011100000010011110000", 
    106 => "10111011001011101101000110010", 107 => "10111010111011001110101010110", 
    108 => "10111010101010100111001101010", 109 => "10111010011001110110101111001", 
    110 => "10111010001000111101010010000", 111 => "10111001110111111010110111010", 
    112 => "10111001100110101111100000110", 113 => "10111001010101011011001111110", 
    114 => "10111001000011111110000110001", 115 => "10111000110010011000000101010", 
    116 => "10111000100000101001001110111", 117 => "10111000001110110001100100101", 
    118 => "10110111111100110001001000000", 119 => "10110111101010100111111010110", 
    120 => "10110111011000010101111110100", 121 => "10110111000101111011010101000", 
    122 => "10110110110011010111111111110", 123 => "10110110100000101100000000110", 
    124 => "10110110001101110111011001100", 125 => "10110101111010111010001011101", 
    126 => "10110101100111110100011001001", 127 => "10110101010100100110000011101" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K0_V is
    generic (
        DataWidth : INTEGER := 29;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K0_V is
    component LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K0_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K0_V_rom_U :  component LLSSineReconstruction_generic_sincos_float_s_second_order_float_sin_K0_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


