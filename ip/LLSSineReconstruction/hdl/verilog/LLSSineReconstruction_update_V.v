// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LLSSineReconstruction_update_V (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        matV_0_address0,
        matV_0_ce0,
        matV_0_we0,
        matV_0_d0,
        V_i_0_address0,
        V_i_0_ce0,
        V_i_0_q0,
        V_j_0_address0,
        V_j_0_ce0,
        V_j_0_q0,
        col_i_dout,
        col_i_empty_n,
        col_i_read,
        col_j_dout,
        col_j_empty_n,
        col_j_read,
        s_dout,
        s_empty_n,
        s_read,
        c_dout,
        c_empty_n,
        c_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] matV_0_address0;
output   matV_0_ce0;
output   matV_0_we0;
output  [59:0] matV_0_d0;
output  [1:0] V_i_0_address0;
output   V_i_0_ce0;
input  [59:0] V_i_0_q0;
output  [1:0] V_j_0_address0;
output   V_j_0_ce0;
input  [59:0] V_j_0_q0;
input  [1:0] col_i_dout;
input   col_i_empty_n;
output   col_i_read;
input  [1:0] col_j_dout;
input   col_j_empty_n;
output   col_j_read;
input  [59:0] s_dout;
input   s_empty_n;
output   s_read;
input  [59:0] c_dout;
input   c_empty_n;
output   c_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] matV_0_address0;
reg matV_0_ce0;
reg matV_0_we0;
reg[59:0] matV_0_d0;
reg V_i_0_ce0;
reg V_j_0_ce0;
reg col_i_read;
reg col_j_read;
reg s_read;
reg c_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    col_i_blk_n;
reg    col_j_blk_n;
reg    s_blk_n;
reg    c_blk_n;
wire  signed [98:0] c_cast_i_i_fu_142_p1;
reg  signed [98:0] c_cast_i_i_reg_321;
wire  signed [98:0] s_cast_i_i_fu_146_p1;
reg  signed [98:0] s_cast_i_i_reg_327;
wire   [3:0] col_i_load_cast_fu_150_p1;
reg   [3:0] col_i_load_cast_reg_333;
wire   [3:0] zext_ln511_1_fu_154_p1;
reg   [3:0] zext_ln511_1_reg_338;
wire   [1:0] add_ln511_fu_158_p2;
reg   [1:0] add_ln511_reg_343;
wire    ap_CS_fsm_state2;
reg   [3:0] matV_0_addr_reg_348;
reg   [3:0] matV_0_addr_1_reg_353;
wire   [0:0] icmp_ln511_fu_208_p2;
reg   [59:0] trunc_ln_reg_371;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_2_reg_376;
reg   [59:0] trunc_ln708_1_reg_381;
reg   [0:0] tmp_3_reg_386;
wire   [59:0] add_ln415_1_fu_316_p2;
reg   [59:0] add_ln415_1_reg_391;
wire    ap_CS_fsm_state4;
reg   [1:0] k_reg_131;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
wire   [63:0] zext_ln520_1_fu_193_p1;
wire   [63:0] zext_ln521_fu_203_p1;
wire   [63:0] zext_ln511_fu_164_p1;
wire   [59:0] add_ln415_fu_307_p2;
wire   [3:0] tmp_fu_174_p3;
wire   [3:0] zext_ln520_fu_170_p1;
wire   [3:0] sub_ln520_fu_182_p2;
wire   [3:0] add_ln520_fu_188_p2;
wire   [3:0] add_ln521_fu_198_p2;
wire  signed [59:0] r_V_6_fu_218_p0;
wire  signed [98:0] sext_ln1118_fu_214_p1;
wire  signed [59:0] r_V_6_fu_218_p1;
wire  signed [59:0] r_V_7_fu_227_p0;
wire  signed [98:0] sext_ln1118_1_fu_223_p1;
wire  signed [59:0] r_V_7_fu_227_p1;
wire   [98:0] r_V_6_fu_218_p2;
wire   [98:0] r_V_7_fu_227_p2;
wire   [98:0] ret_V_fu_232_p2;
wire  signed [59:0] r_V_4_fu_256_p0;
wire  signed [59:0] r_V_4_fu_256_p1;
wire  signed [59:0] r_V_5_fu_261_p0;
wire  signed [59:0] r_V_5_fu_261_p1;
wire   [98:0] r_V_4_fu_256_p2;
wire   [98:0] r_V_5_fu_261_p2;
wire   [98:0] ret_V_1_fu_274_p2;
wire   [38:0] trunc_ln1192_1_fu_270_p1;
wire   [38:0] trunc_ln1192_fu_266_p1;
wire   [38:0] add_ln713_fu_290_p2;
wire   [59:0] zext_ln415_fu_304_p1;
wire   [59:0] zext_ln415_1_fu_313_p1;
reg   [4:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U261(
    .din0(r_V_6_fu_218_p0),
    .din1(r_V_6_fu_218_p1),
    .dout(r_V_6_fu_218_p2)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U262(
    .din0(r_V_7_fu_227_p0),
    .din1(r_V_7_fu_227_p1),
    .dout(r_V_7_fu_227_p2)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U263(
    .din0(r_V_4_fu_256_p0),
    .din1(r_V_4_fu_256_p1),
    .dout(r_V_4_fu_256_p2)
);

LLSSineReconstruction_mul_60s_60s_99_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 60 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 99 ))
mul_60s_60s_99_1_1_U264(
    .din0(r_V_5_fu_261_p0),
    .din1(r_V_5_fu_261_p1),
    .dout(r_V_5_fu_261_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln511_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_131 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_131 <= add_ln511_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln415_1_reg_391 <= add_ln415_1_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln511_reg_343 <= add_ln511_fu_158_p2;
        matV_0_addr_1_reg_353 <= zext_ln521_fu_203_p1;
        matV_0_addr_reg_348 <= zext_ln520_1_fu_193_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        c_cast_i_i_reg_321 <= c_cast_i_i_fu_142_p1;
        col_i_load_cast_reg_333[1 : 0] <= col_i_load_cast_fu_150_p1[1 : 0];
        s_cast_i_i_reg_327 <= s_cast_i_i_fu_146_p1;
        zext_ln511_1_reg_338[1 : 0] <= zext_ln511_1_fu_154_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_2_reg_376 <= ret_V_fu_232_p2[32'd38];
        tmp_3_reg_386 <= add_ln713_fu_290_p2[32'd38];
        trunc_ln708_1_reg_381 <= {{ret_V_1_fu_274_p2[98:39]}};
        trunc_ln_reg_371 <= {{ret_V_fu_232_p2[98:39]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        V_i_0_ce0 = 1'b1;
    end else begin
        V_i_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        V_j_0_ce0 = 1'b1;
    end else begin
        V_j_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln511_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln511_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_blk_n = c_empty_n;
    end else begin
        c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read = 1'b1;
    end else begin
        c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_blk_n = col_i_empty_n;
    end else begin
        col_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_i_read = 1'b1;
    end else begin
        col_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_blk_n = col_j_empty_n;
    end else begin
        col_j_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_j_read = 1'b1;
    end else begin
        col_j_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matV_0_address0 = matV_0_addr_1_reg_353;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        matV_0_address0 = matV_0_addr_reg_348;
    end else begin
        matV_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        matV_0_ce0 = 1'b1;
    end else begin
        matV_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matV_0_d0 = add_ln415_1_reg_391;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        matV_0_d0 = add_ln415_fu_307_p2;
    end else begin
        matV_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        matV_0_we0 = 1'b1;
    end else begin
        matV_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_blk_n = s_empty_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_read = 1'b1;
    end else begin
        s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln511_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V_i_0_address0 = zext_ln511_fu_164_p1;

assign V_j_0_address0 = zext_ln511_fu_164_p1;

assign add_ln415_1_fu_316_p2 = (trunc_ln708_1_reg_381 + zext_ln415_1_fu_313_p1);

assign add_ln415_fu_307_p2 = (trunc_ln_reg_371 + zext_ln415_fu_304_p1);

assign add_ln511_fu_158_p2 = (k_reg_131 + 2'd1);

assign add_ln520_fu_188_p2 = (sub_ln520_fu_182_p2 + col_i_load_cast_reg_333);

assign add_ln521_fu_198_p2 = (sub_ln520_fu_182_p2 + zext_ln511_1_reg_338);

assign add_ln713_fu_290_p2 = (trunc_ln1192_1_fu_270_p1 + trunc_ln1192_fu_266_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((c_empty_n == 1'b0) | (s_empty_n == 1'b0) | (col_j_empty_n == 1'b0) | (col_i_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign c_cast_i_i_fu_142_p1 = $signed(c_dout);

assign col_i_load_cast_fu_150_p1 = col_i_dout;

assign icmp_ln511_fu_208_p2 = ((k_reg_131 == 2'd3) ? 1'b1 : 1'b0);

assign r_V_4_fu_256_p0 = sext_ln1118_fu_214_p1;

assign r_V_4_fu_256_p1 = s_cast_i_i_reg_327;

assign r_V_5_fu_261_p0 = sext_ln1118_1_fu_223_p1;

assign r_V_5_fu_261_p1 = c_cast_i_i_reg_321;

assign r_V_6_fu_218_p0 = sext_ln1118_fu_214_p1;

assign r_V_6_fu_218_p1 = c_cast_i_i_reg_321;

assign r_V_7_fu_227_p0 = sext_ln1118_1_fu_223_p1;

assign r_V_7_fu_227_p1 = s_cast_i_i_reg_327;

assign ret_V_1_fu_274_p2 = (r_V_5_fu_261_p2 + r_V_4_fu_256_p2);

assign ret_V_fu_232_p2 = (r_V_6_fu_218_p2 - r_V_7_fu_227_p2);

assign s_cast_i_i_fu_146_p1 = $signed(s_dout);

assign sext_ln1118_1_fu_223_p1 = $signed(V_j_0_q0);

assign sext_ln1118_fu_214_p1 = $signed(V_i_0_q0);

assign sub_ln520_fu_182_p2 = (tmp_fu_174_p3 - zext_ln520_fu_170_p1);

assign tmp_fu_174_p3 = {{k_reg_131}, {2'd0}};

assign trunc_ln1192_1_fu_270_p1 = r_V_5_fu_261_p2[38:0];

assign trunc_ln1192_fu_266_p1 = r_V_4_fu_256_p2[38:0];

assign zext_ln415_1_fu_313_p1 = tmp_3_reg_386;

assign zext_ln415_fu_304_p1 = tmp_2_reg_376;

assign zext_ln511_1_fu_154_p1 = col_j_dout;

assign zext_ln511_fu_164_p1 = k_reg_131;

assign zext_ln520_1_fu_193_p1 = add_ln520_fu_188_p2;

assign zext_ln520_fu_170_p1 = k_reg_131;

assign zext_ln521_fu_203_p1 = add_ln521_fu_198_p2;

always @ (posedge ap_clk) begin
    col_i_load_cast_reg_333[3:2] <= 2'b00;
    zext_ln511_1_reg_338[3:2] <= 2'b00;
end

endmodule //LLSSineReconstruction_update_V
