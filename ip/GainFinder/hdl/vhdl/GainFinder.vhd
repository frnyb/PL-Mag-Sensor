-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GainFinder is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    signal_top_val : IN STD_LOGIC_VECTOR (11 downto 0);
    n_samples_sat : IN STD_LOGIC_VECTOR (10 downto 0);
    n_samples : IN STD_LOGIC_VECTOR (10 downto 0);
    curr_gain : IN STD_LOGIC_VECTOR (5 downto 0);
    new_gain : OUT STD_LOGIC_VECTOR (5 downto 0);
    new_gain_ap_vld : OUT STD_LOGIC );
end;


architecture behav of GainFinder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "GainFinder_GainFinder,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.192000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=38,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_E00 : STD_LOGIC_VECTOR (11 downto 0) := "111000000000";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal icmp_ln886_fu_61_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_fu_67_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    icmp_ln878_fu_67_p2 <= "1" when (unsigned(signal_top_val) < unsigned(ap_const_lv12_A00)) else "0";
    icmp_ln886_fu_61_p2 <= "1" when (unsigned(signal_top_val) > unsigned(ap_const_lv12_E00)) else "0";

    new_gain_assign_proc : process(ap_start, curr_gain, icmp_ln886_fu_61_p2, icmp_ln878_fu_67_p2)
    begin
        if ((((icmp_ln886_fu_61_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1)) or ((icmp_ln878_fu_67_p2 = ap_const_lv1_1) and (icmp_ln886_fu_61_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1)))) then 
            new_gain <= ap_const_lv6_0;
        elsif (((icmp_ln878_fu_67_p2 = ap_const_lv1_0) and (icmp_ln886_fu_61_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
            new_gain <= curr_gain;
        else 
            new_gain <= "XXXXXX";
        end if; 
    end process;


    new_gain_ap_vld_assign_proc : process(ap_start, icmp_ln886_fu_61_p2, icmp_ln878_fu_67_p2)
    begin
        if ((((icmp_ln886_fu_61_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1)) or ((icmp_ln878_fu_67_p2 = ap_const_lv1_1) and (icmp_ln886_fu_61_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1)) or ((icmp_ln878_fu_67_p2 = ap_const_lv1_0) and (icmp_ln886_fu_61_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1)))) then 
            new_gain_ap_vld <= ap_const_logic_1;
        else 
            new_gain_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
