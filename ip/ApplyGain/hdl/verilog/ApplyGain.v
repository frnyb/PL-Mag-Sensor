// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ApplyGain_ApplyGain,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.822203,HLS_SYN_LAT=30,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1157,HLS_SYN_LUT=1364,HLS_VERSION=2020_2}" *)

module ApplyGain (
        ap_clk,
        ap_rst,
        gain_step,
        signal_in,
        signal_out,
        signal_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input  [5:0] gain_step;
input  [31:0] signal_in;
output  [11:0] signal_out;
output   signal_out_ap_vld;

reg signal_out_ap_vld;

wire   [31:0] grp_fu_97_p2;
reg   [31:0] reg_113;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_85_p2;
reg   [31:0] reg_119;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_102_p1;
reg   [31:0] conv_reg_377;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_91_p2;
reg   [31:0] gain_reg_387;
wire   [63:0] grp_fu_105_p1;
reg   [63:0] conv6_reg_392;
wire    ap_CS_fsm_state24;
wire   [63:0] grp_fu_108_p2;
reg   [63:0] val_reg_397;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
reg   [31:0] grp_fu_85_p0;
reg   [31:0] grp_fu_85_p1;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_97_p0;
reg   [31:0] grp_fu_97_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state14;
wire  signed [31:0] grp_fu_102_p0;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire   [63:0] reg_fu_130_p1;
wire   [10:0] exp_fu_145_p4;
wire   [51:0] trunc_ln315_fu_159_p1;
wire   [52:0] p_Result_1_fu_167_p3;
wire   [62:0] trunc_ln306_fu_133_p1;
wire   [11:0] zext_ln311_fu_155_p1;
wire  signed [11:0] sh_amt_fu_185_p2;
wire  signed [11:0] sh_amt_1_fu_209_p2;
wire  signed [31:0] sext_ln331_fu_225_p1;
wire   [53:0] zext_ln320_fu_175_p1;
wire   [53:0] zext_ln331_fu_229_p1;
wire   [53:0] lshr_ln331_fu_233_p2;
wire  signed [31:0] sext_ln326_fu_215_p1;
wire   [11:0] trunc_ln328_fu_163_p1;
wire   [11:0] sext_ln326cast_fu_243_p1;
wire   [0:0] icmp_ln323_fu_179_p2;
wire   [0:0] icmp_ln327_fu_191_p2;
wire   [0:0] or_ln327_fu_253_p2;
wire   [0:0] icmp_ln329_fu_197_p2;
wire   [0:0] xor_ln327_fu_259_p2;
wire   [0:0] and_ln329_fu_265_p2;
wire   [0:0] icmp_ln330_fu_203_p2;
wire   [0:0] and_ln330_fu_271_p2;
wire   [11:0] trunc_ln331_fu_239_p1;
wire   [0:0] or_ln329_fu_285_p2;
wire   [0:0] icmp_ln337_fu_219_p2;
wire   [0:0] xor_ln329_fu_291_p2;
wire   [0:0] and_ln337_fu_297_p2;
wire   [11:0] shl_ln339_fu_247_p2;
wire   [11:0] select_ln330_fu_277_p3;
wire   [0:0] xor_ln330_fu_311_p2;
wire   [0:0] and_ln330_1_fu_317_p2;
wire   [0:0] or_ln330_fu_323_p2;
wire   [11:0] select_ln337_fu_303_p3;
wire   [0:0] xor_ln323_fu_337_p2;
wire   [0:0] and_ln327_fu_343_p2;
wire   [11:0] select_ln330_1_fu_329_p3;
wire   [11:0] select_ln327_fu_349_p3;
wire   [0:0] p_Result_s_fu_137_p3;
wire   [11:0] sub_ln455_fu_357_p2;
reg   [30:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
end

ApplyGain_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_85_p0),
    .din1(grp_fu_85_p1),
    .ce(1'b1),
    .dout(grp_fu_85_p2)
);

ApplyGain_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_113),
    .din1(32'd1036831949),
    .ce(1'b1),
    .dout(grp_fu_91_p2)
);

ApplyGain_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_97_p0),
    .din1(grp_fu_97_p1),
    .ce(1'b1),
    .dout(grp_fu_97_p2)
);

ApplyGain_sitofp_32s_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_4_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_102_p0),
    .ce(1'b1),
    .dout(grp_fu_102_p1)
);

ApplyGain_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_119),
    .ce(1'b1),
    .dout(grp_fu_105_p1)
);

ApplyGain_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv6_reg_392),
    .din1(64'd4650416975222774170),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        conv6_reg_392 <= grp_fu_105_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_reg_377 <= grp_fu_102_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gain_reg_387 <= grp_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_113 <= grp_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_119 <= grp_fu_85_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        val_reg_397 <= grp_fu_108_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_85_p0 = reg_113;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_85_p0 = signal_in;
    end else begin
        grp_fu_85_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_85_p1 = 32'd1075838976;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_85_p1 = 32'd3223322624;
    end else begin
        grp_fu_85_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_97_p0 = gain_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_97_p0 = conv_reg_377;
    end else begin
        grp_fu_97_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_97_p1 = reg_119;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_97_p1 = 32'd1073741824;
    end else begin
        grp_fu_97_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        signal_out_ap_vld = 1'b1;
    end else begin
        signal_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln327_fu_343_p2 = (xor_ln323_fu_337_p2 & icmp_ln327_fu_191_p2);

assign and_ln329_fu_265_p2 = (xor_ln327_fu_259_p2 & icmp_ln329_fu_197_p2);

assign and_ln330_1_fu_317_p2 = (xor_ln330_fu_311_p2 & and_ln329_fu_265_p2);

assign and_ln330_fu_271_p2 = (icmp_ln330_fu_203_p2 & and_ln329_fu_265_p2);

assign and_ln337_fu_297_p2 = (xor_ln329_fu_291_p2 & icmp_ln337_fu_219_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exp_fu_145_p4 = {{reg_fu_130_p1[62:52]}};

assign grp_fu_102_p0 = $signed(gain_step);

assign icmp_ln323_fu_179_p2 = ((trunc_ln306_fu_133_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln327_fu_191_p2 = ((exp_fu_145_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln329_fu_197_p2 = (($signed(sh_amt_fu_185_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln330_fu_203_p2 = (($signed(sh_amt_fu_185_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_219_p2 = (($signed(sh_amt_1_fu_209_p2) < $signed(12'd12)) ? 1'b1 : 1'b0);

assign lshr_ln331_fu_233_p2 = zext_ln320_fu_175_p1 >> zext_ln331_fu_229_p1;

assign or_ln327_fu_253_p2 = (icmp_ln327_fu_191_p2 | icmp_ln323_fu_179_p2);

assign or_ln329_fu_285_p2 = (or_ln327_fu_253_p2 | icmp_ln329_fu_197_p2);

assign or_ln330_fu_323_p2 = (icmp_ln323_fu_179_p2 | and_ln330_1_fu_317_p2);

assign p_Result_1_fu_167_p3 = {{1'd1}, {trunc_ln315_fu_159_p1}};

assign p_Result_s_fu_137_p3 = reg_fu_130_p1[32'd63];

assign reg_fu_130_p1 = val_reg_397;

assign select_ln327_fu_349_p3 = ((and_ln327_fu_343_p2[0:0] == 1'b1) ? trunc_ln328_fu_163_p1 : select_ln330_1_fu_329_p3);

assign select_ln330_1_fu_329_p3 = ((or_ln330_fu_323_p2[0:0] == 1'b1) ? 12'd0 : select_ln337_fu_303_p3);

assign select_ln330_fu_277_p3 = ((and_ln330_fu_271_p2[0:0] == 1'b1) ? trunc_ln331_fu_239_p1 : 12'd0);

assign select_ln337_fu_303_p3 = ((and_ln337_fu_297_p2[0:0] == 1'b1) ? shl_ln339_fu_247_p2 : select_ln330_fu_277_p3);

assign sext_ln326_fu_215_p1 = sh_amt_1_fu_209_p2;

assign sext_ln326cast_fu_243_p1 = sext_ln326_fu_215_p1[11:0];

assign sext_ln331_fu_225_p1 = sh_amt_fu_185_p2;

assign sh_amt_1_fu_209_p2 = ($signed(12'd0) - $signed(sh_amt_fu_185_p2));

assign sh_amt_fu_185_p2 = (12'd1075 - zext_ln311_fu_155_p1);

assign shl_ln339_fu_247_p2 = trunc_ln328_fu_163_p1 << sext_ln326cast_fu_243_p1;

assign signal_out = ((p_Result_s_fu_137_p3[0:0] == 1'b1) ? sub_ln455_fu_357_p2 : select_ln327_fu_349_p3);

assign sub_ln455_fu_357_p2 = (12'd0 - select_ln327_fu_349_p3);

assign trunc_ln306_fu_133_p1 = reg_fu_130_p1[62:0];

assign trunc_ln315_fu_159_p1 = reg_fu_130_p1[51:0];

assign trunc_ln328_fu_163_p1 = reg_fu_130_p1[11:0];

assign trunc_ln331_fu_239_p1 = lshr_ln331_fu_233_p2[11:0];

assign xor_ln323_fu_337_p2 = (icmp_ln323_fu_179_p2 ^ 1'd1);

assign xor_ln327_fu_259_p2 = (or_ln327_fu_253_p2 ^ 1'd1);

assign xor_ln329_fu_291_p2 = (or_ln329_fu_285_p2 ^ 1'd1);

assign xor_ln330_fu_311_p2 = (icmp_ln330_fu_203_p2 ^ 1'd1);

assign zext_ln311_fu_155_p1 = exp_fu_145_p4;

assign zext_ln320_fu_175_p1 = p_Result_1_fu_167_p3;

assign zext_ln331_fu_229_p1 = $unsigned(sext_ln331_fu_225_p1);

endmodule //ApplyGain
