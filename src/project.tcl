#*****************************************************************************************
# Vivado (TM) v2020.2 (64-bit)
#
# project.tcl: Tcl script for re-creating project 'PL-Mag-Sensor'
#
# Generated by Vivado on Wed Feb 02 07:19:07 CET 2022
# IP Build 3064653 on Wed Nov 18 14:17:31 MST 2020
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (project.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/SPI_master.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/gain_controller.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x4.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/counter.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/gain_lut.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/buffer_controller.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/ADC_controller.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x12.vhd"
#    "/vol/Workspace/Projects/PL-Mag-Sensor/src/multiplexer_4x16.vhd"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/SPI_master.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/gain_controller.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x4.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/counter.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/gain_lut.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/buffer_controller.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/ADC_controller.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x12.vhd" \
   "/vol/Workspace/Projects/PL-Mag-Sensor/src/multiplexer_4x16.vhd" \
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  set paths [list \
   [file normalize "$origin_dir/../ip"] \
   [file normalize "$origin_dir/../ip"] \
  ]
  foreach ipath $paths {
    if { ![file isdirectory $ipath] } {
      puts " Could not access $ipath "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "PL-Mag-Sensor"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "project.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/../vivado/PL-Mag-Sensor"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xczu3eg-sbva484-1-i

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xczu3eg-sbva484-1-i" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "1" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "1" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "1" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "1" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "1" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "1" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "32" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/../ip"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/SPI_master.vhd"] \
 [file normalize "${origin_dir}/gain_controller.vhd"] \
 [file normalize "${origin_dir}/slice_1x4.vhd"] \
 [file normalize "${origin_dir}/counter.vhd"] \
 [file normalize "${origin_dir}/gain_lut.vhd"] \
 [file normalize "${origin_dir}/buffer_controller.vhd"] \
 [file normalize "${origin_dir}/ADC_controller.vhd"] \
 [file normalize "${origin_dir}/pingpong_buffer.vhd"] \
 [file normalize "${origin_dir}/slice_1x12.vhd"] \
 [file normalize "${origin_dir}/multiplexer_4x16.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/SPI_master.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/gain_controller.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/slice_1x4.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/counter.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/gain_lut.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/buffer_controller.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/ADC_controller.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/pingpong_buffer.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/slice_1x12.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/multiplexer_4x16.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "MagController_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Empty (no sources present)

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xczu3eg-sbva484-1-i" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "hbs.configure_design_for_hier_access" -value "1" -objects $obj
set_property -name "top" -value "MagController_wrapper" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files slice_1x12.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x12.vhd
}
if { [get_files multiplexer_4x16.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/multiplexer_4x16.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files slice_1x12.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x12.vhd
}
if { [get_files slice_1x12.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x12.vhd
}
if { [get_files multiplexer_4x16.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/multiplexer_4x16.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files pingpong_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/pingpong_buffer.vhd
}
if { [get_files slice_1x12.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x12.vhd
}


# Proc to create BD MagPingPongBuffers
proc cr_bd_MagPingPongBuffers { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# slice_1x12, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, pingpong_buffer, mux_4x16, slice_1x12, slice_1x12



  # CHANGE DESIGN NAME HERE
  set design_name MagPingPongBuffers

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:xlconcat:2.1\
  xilinx.com:ip:xlconstant:1.1\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  slice_1x12\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  pingpong_buffer\
  mux_4x16\
  slice_1x12\
  slice_1x12\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set busy [ create_bd_port -dir O -from 11 -to 0 busy ]
  set clk [ create_bd_port -dir I -type clk clk ]
  set hold [ create_bd_port -dir I -from 11 -to 0 hold ]
  set irq [ create_bd_port -dir O -from 11 -to 0 irq ]
  set rd_addr [ create_bd_port -dir I -from 7 -to 0 rd_addr ]
  set rd_ch [ create_bd_port -dir I -from 3 -to 0 rd_ch ]
  set rd_out [ create_bd_port -dir O -from 31 -to 0 rd_out ]
  set rst_n [ create_bd_port -dir I -type rst rst_n ]
  set shift [ create_bd_port -dir I -from 11 -to 0 shift ]
  set wr [ create_bd_port -dir I -from 11 -to 0 wr ]
  set wr_addr [ create_bd_port -dir I -from 7 -to 0 wr_addr ]
  set wr_din [ create_bd_port -dir I -from 31 -to 0 wr_din ]

  # Create instance: busy_concat, and set properties
  set busy_concat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 busy_concat ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {12} \
 ] $busy_concat

  # Create instance: hold_slice, and set properties
  set block_name slice_1x12
  set block_cell_name hold_slice
  if { [catch {set hold_slice [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $hold_slice eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: irq_concat, and set properties
  set irq_concat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 irq_concat ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {12} \
 ] $irq_concat

  # Create instance: mag_pingpong_buffer_0, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_0
  if { [catch {set mag_pingpong_buffer_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_0

  # Create instance: mag_pingpong_buffer_1, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_1
  if { [catch {set mag_pingpong_buffer_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_1

  # Create instance: mag_pingpong_buffer_2, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_2
  if { [catch {set mag_pingpong_buffer_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_2

  # Create instance: mag_pingpong_buffer_3, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_3
  if { [catch {set mag_pingpong_buffer_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_3

  # Create instance: mag_pingpong_buffer_4, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_4
  if { [catch {set mag_pingpong_buffer_4 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_4 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_4

  # Create instance: mag_pingpong_buffer_5, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_5
  if { [catch {set mag_pingpong_buffer_5 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_5 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_5

  # Create instance: mag_pingpong_buffer_6, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_6
  if { [catch {set mag_pingpong_buffer_6 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_6 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_6

  # Create instance: mag_pingpong_buffer_7, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_7
  if { [catch {set mag_pingpong_buffer_7 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_7 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_7

  # Create instance: mag_pingpong_buffer_8, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_8
  if { [catch {set mag_pingpong_buffer_8 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_8 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_8

  # Create instance: mag_pingpong_buffer_9, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_9
  if { [catch {set mag_pingpong_buffer_9 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_9 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_9

  # Create instance: mag_pingpong_buffer_10, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_10
  if { [catch {set mag_pingpong_buffer_10 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_10 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_10

  # Create instance: mag_pingpong_buffer_11, and set properties
  set block_name pingpong_buffer
  set block_cell_name mag_pingpong_buffer_11
  if { [catch {set mag_pingpong_buffer_11 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mag_pingpong_buffer_11 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.word_width {32} \
 ] $mag_pingpong_buffer_11

  # Create instance: rd_mux, and set properties
  set block_name mux_4x16
  set block_cell_name rd_mux
  if { [catch {set rd_mux [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rd_mux eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.n_bits {32} \
 ] $rd_mux

  # Create instance: shift_slice, and set properties
  set block_name slice_1x12
  set block_cell_name shift_slice
  if { [catch {set shift_slice [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $shift_slice eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: wr_slice, and set properties
  set block_name slice_1x12
  set block_cell_name wr_slice
  if { [catch {set wr_slice [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $wr_slice eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {8} \
 ] $xlconstant_0

  # Create port connections
  connect_bd_net -net busy_concat_dout [get_bd_ports busy] [get_bd_pins busy_concat/dout]
  connect_bd_net -net clk_1 [get_bd_ports clk] [get_bd_pins mag_pingpong_buffer_0/clk] [get_bd_pins mag_pingpong_buffer_1/clk] [get_bd_pins mag_pingpong_buffer_10/clk] [get_bd_pins mag_pingpong_buffer_11/clk] [get_bd_pins mag_pingpong_buffer_2/clk] [get_bd_pins mag_pingpong_buffer_3/clk] [get_bd_pins mag_pingpong_buffer_4/clk] [get_bd_pins mag_pingpong_buffer_5/clk] [get_bd_pins mag_pingpong_buffer_6/clk] [get_bd_pins mag_pingpong_buffer_7/clk] [get_bd_pins mag_pingpong_buffer_8/clk] [get_bd_pins mag_pingpong_buffer_9/clk]
  connect_bd_net -net hold_slice_ch0 [get_bd_pins hold_slice/ch0] [get_bd_pins mag_pingpong_buffer_0/hold]
  connect_bd_net -net hold_slice_ch1 [get_bd_pins hold_slice/ch1] [get_bd_pins mag_pingpong_buffer_1/hold]
  connect_bd_net -net hold_slice_ch2 [get_bd_pins hold_slice/ch2] [get_bd_pins mag_pingpong_buffer_2/hold]
  connect_bd_net -net hold_slice_ch3 [get_bd_pins hold_slice/ch3] [get_bd_pins mag_pingpong_buffer_3/hold]
  connect_bd_net -net hold_slice_ch4 [get_bd_pins hold_slice/ch4] [get_bd_pins mag_pingpong_buffer_4/hold]
  connect_bd_net -net hold_slice_ch5 [get_bd_pins hold_slice/ch5] [get_bd_pins mag_pingpong_buffer_5/hold]
  connect_bd_net -net hold_slice_ch6 [get_bd_pins hold_slice/ch6] [get_bd_pins mag_pingpong_buffer_6/hold]
  connect_bd_net -net hold_slice_ch7 [get_bd_pins hold_slice/ch7] [get_bd_pins mag_pingpong_buffer_7/hold]
  connect_bd_net -net hold_slice_ch8 [get_bd_pins hold_slice/ch8] [get_bd_pins mag_pingpong_buffer_8/hold]
  connect_bd_net -net hold_slice_ch9 [get_bd_pins hold_slice/ch9] [get_bd_pins mag_pingpong_buffer_9/hold]
  connect_bd_net -net hold_slice_ch10 [get_bd_pins hold_slice/ch10] [get_bd_pins mag_pingpong_buffer_10/hold]
  connect_bd_net -net hold_slice_ch11 [get_bd_pins hold_slice/ch11] [get_bd_pins mag_pingpong_buffer_11/hold]
  connect_bd_net -net inp_0_1 [get_bd_ports wr] [get_bd_pins wr_slice/inp]
  connect_bd_net -net inp_0_2 [get_bd_ports hold] [get_bd_pins hold_slice/inp]
  connect_bd_net -net inp_0_3 [get_bd_ports shift] [get_bd_pins shift_slice/inp]
  connect_bd_net -net irq_concat_dout [get_bd_ports irq] [get_bd_pins irq_concat/dout]
  connect_bd_net -net mag_pingpong_buffer_0_busy [get_bd_pins busy_concat/In0] [get_bd_pins mag_pingpong_buffer_0/busy]
  connect_bd_net -net mag_pingpong_buffer_0_irq [get_bd_pins irq_concat/In0] [get_bd_pins mag_pingpong_buffer_0/irq]
  connect_bd_net -net mag_pingpong_buffer_0_rd_dout [get_bd_pins mag_pingpong_buffer_0/rd_dout] [get_bd_pins rd_mux/inp0]
  connect_bd_net -net mag_pingpong_buffer_10_busy [get_bd_pins busy_concat/In10] [get_bd_pins mag_pingpong_buffer_10/busy]
  connect_bd_net -net mag_pingpong_buffer_10_irq [get_bd_pins irq_concat/In10] [get_bd_pins mag_pingpong_buffer_10/irq]
  connect_bd_net -net mag_pingpong_buffer_10_rd_dout [get_bd_pins mag_pingpong_buffer_10/rd_dout] [get_bd_pins rd_mux/inp10]
  connect_bd_net -net mag_pingpong_buffer_11_busy [get_bd_pins busy_concat/In11] [get_bd_pins mag_pingpong_buffer_11/busy]
  connect_bd_net -net mag_pingpong_buffer_11_irq [get_bd_pins irq_concat/In11] [get_bd_pins mag_pingpong_buffer_11/irq]
  connect_bd_net -net mag_pingpong_buffer_11_rd_dout [get_bd_pins mag_pingpong_buffer_11/rd_dout] [get_bd_pins rd_mux/inp11]
  connect_bd_net -net mag_pingpong_buffer_1_busy [get_bd_pins busy_concat/In1] [get_bd_pins mag_pingpong_buffer_1/busy]
  connect_bd_net -net mag_pingpong_buffer_1_irq [get_bd_pins irq_concat/In1] [get_bd_pins mag_pingpong_buffer_1/irq]
  connect_bd_net -net mag_pingpong_buffer_1_rd_dout [get_bd_pins mag_pingpong_buffer_1/rd_dout] [get_bd_pins rd_mux/inp1]
  connect_bd_net -net mag_pingpong_buffer_2_busy [get_bd_pins busy_concat/In2] [get_bd_pins mag_pingpong_buffer_2/busy]
  connect_bd_net -net mag_pingpong_buffer_2_irq [get_bd_pins irq_concat/In2] [get_bd_pins mag_pingpong_buffer_2/irq]
  connect_bd_net -net mag_pingpong_buffer_2_rd_dout [get_bd_pins mag_pingpong_buffer_2/rd_dout] [get_bd_pins rd_mux/inp2]
  connect_bd_net -net mag_pingpong_buffer_3_busy [get_bd_pins busy_concat/In3] [get_bd_pins mag_pingpong_buffer_3/busy]
  connect_bd_net -net mag_pingpong_buffer_3_irq [get_bd_pins irq_concat/In3] [get_bd_pins mag_pingpong_buffer_3/irq]
  connect_bd_net -net mag_pingpong_buffer_3_rd_dout [get_bd_pins mag_pingpong_buffer_3/rd_dout] [get_bd_pins rd_mux/inp3]
  connect_bd_net -net mag_pingpong_buffer_4_busy [get_bd_pins busy_concat/In4] [get_bd_pins mag_pingpong_buffer_4/busy]
  connect_bd_net -net mag_pingpong_buffer_4_irq [get_bd_pins irq_concat/In4] [get_bd_pins mag_pingpong_buffer_4/irq]
  connect_bd_net -net mag_pingpong_buffer_4_rd_dout [get_bd_pins mag_pingpong_buffer_4/rd_dout] [get_bd_pins rd_mux/inp4]
  connect_bd_net -net mag_pingpong_buffer_5_busy [get_bd_pins busy_concat/In5] [get_bd_pins mag_pingpong_buffer_5/busy]
  connect_bd_net -net mag_pingpong_buffer_5_irq [get_bd_pins irq_concat/In5] [get_bd_pins mag_pingpong_buffer_5/irq]
  connect_bd_net -net mag_pingpong_buffer_5_rd_dout [get_bd_pins mag_pingpong_buffer_5/rd_dout] [get_bd_pins rd_mux/inp5]
  connect_bd_net -net mag_pingpong_buffer_6_busy [get_bd_pins busy_concat/In6] [get_bd_pins mag_pingpong_buffer_6/busy]
  connect_bd_net -net mag_pingpong_buffer_6_irq [get_bd_pins irq_concat/In6] [get_bd_pins mag_pingpong_buffer_6/irq]
  connect_bd_net -net mag_pingpong_buffer_6_rd_dout [get_bd_pins mag_pingpong_buffer_6/rd_dout] [get_bd_pins rd_mux/inp6]
  connect_bd_net -net mag_pingpong_buffer_7_busy [get_bd_pins busy_concat/In7] [get_bd_pins mag_pingpong_buffer_7/busy]
  connect_bd_net -net mag_pingpong_buffer_7_irq [get_bd_pins irq_concat/In7] [get_bd_pins mag_pingpong_buffer_7/irq]
  connect_bd_net -net mag_pingpong_buffer_7_rd_dout [get_bd_pins mag_pingpong_buffer_7/rd_dout] [get_bd_pins rd_mux/inp7]
  connect_bd_net -net mag_pingpong_buffer_8_busy [get_bd_pins busy_concat/In8] [get_bd_pins mag_pingpong_buffer_8/busy]
  connect_bd_net -net mag_pingpong_buffer_8_irq [get_bd_pins irq_concat/In8] [get_bd_pins mag_pingpong_buffer_8/irq]
  connect_bd_net -net mag_pingpong_buffer_8_rd_dout [get_bd_pins mag_pingpong_buffer_8/rd_dout] [get_bd_pins rd_mux/inp8]
  connect_bd_net -net mag_pingpong_buffer_9_busy [get_bd_pins busy_concat/In9] [get_bd_pins mag_pingpong_buffer_9/busy]
  connect_bd_net -net mag_pingpong_buffer_9_irq [get_bd_pins irq_concat/In9] [get_bd_pins mag_pingpong_buffer_9/irq]
  connect_bd_net -net mag_pingpong_buffer_9_rd_dout [get_bd_pins mag_pingpong_buffer_9/rd_dout] [get_bd_pins rd_mux/inp9]
  connect_bd_net -net rd_addr_0_1 [get_bd_ports rd_addr] [get_bd_pins mag_pingpong_buffer_0/rd_addr] [get_bd_pins mag_pingpong_buffer_1/rd_addr] [get_bd_pins mag_pingpong_buffer_10/rd_addr] [get_bd_pins mag_pingpong_buffer_11/rd_addr] [get_bd_pins mag_pingpong_buffer_2/rd_addr] [get_bd_pins mag_pingpong_buffer_3/rd_addr] [get_bd_pins mag_pingpong_buffer_4/rd_addr] [get_bd_pins mag_pingpong_buffer_5/rd_addr] [get_bd_pins mag_pingpong_buffer_6/rd_addr] [get_bd_pins mag_pingpong_buffer_7/rd_addr] [get_bd_pins mag_pingpong_buffer_8/rd_addr] [get_bd_pins mag_pingpong_buffer_9/rd_addr]
  connect_bd_net -net rd_mux_outp [get_bd_ports rd_out] [get_bd_pins rd_mux/outp]
  connect_bd_net -net rst_n_1 [get_bd_ports rst_n] [get_bd_pins mag_pingpong_buffer_0/rst_n] [get_bd_pins mag_pingpong_buffer_1/rst_n] [get_bd_pins mag_pingpong_buffer_10/rst_n] [get_bd_pins mag_pingpong_buffer_11/rst_n] [get_bd_pins mag_pingpong_buffer_2/rst_n] [get_bd_pins mag_pingpong_buffer_3/rst_n] [get_bd_pins mag_pingpong_buffer_4/rst_n] [get_bd_pins mag_pingpong_buffer_5/rst_n] [get_bd_pins mag_pingpong_buffer_6/rst_n] [get_bd_pins mag_pingpong_buffer_7/rst_n] [get_bd_pins mag_pingpong_buffer_8/rst_n] [get_bd_pins mag_pingpong_buffer_9/rst_n]
  connect_bd_net -net sel_0_1 [get_bd_ports rd_ch] [get_bd_pins rd_mux/sel]
  connect_bd_net -net shift_slice_ch0 [get_bd_pins mag_pingpong_buffer_0/shift] [get_bd_pins shift_slice/ch0]
  connect_bd_net -net shift_slice_ch1 [get_bd_pins mag_pingpong_buffer_1/shift] [get_bd_pins shift_slice/ch1]
  connect_bd_net -net shift_slice_ch2 [get_bd_pins mag_pingpong_buffer_2/shift] [get_bd_pins shift_slice/ch2]
  connect_bd_net -net shift_slice_ch3 [get_bd_pins mag_pingpong_buffer_3/shift] [get_bd_pins shift_slice/ch3]
  connect_bd_net -net shift_slice_ch4 [get_bd_pins mag_pingpong_buffer_4/shift] [get_bd_pins shift_slice/ch4]
  connect_bd_net -net shift_slice_ch5 [get_bd_pins mag_pingpong_buffer_5/shift] [get_bd_pins shift_slice/ch5]
  connect_bd_net -net shift_slice_ch6 [get_bd_pins mag_pingpong_buffer_6/shift] [get_bd_pins shift_slice/ch6]
  connect_bd_net -net shift_slice_ch7 [get_bd_pins mag_pingpong_buffer_7/shift] [get_bd_pins shift_slice/ch7]
  connect_bd_net -net shift_slice_ch8 [get_bd_pins mag_pingpong_buffer_8/shift] [get_bd_pins shift_slice/ch8]
  connect_bd_net -net shift_slice_ch9 [get_bd_pins mag_pingpong_buffer_9/shift] [get_bd_pins shift_slice/ch9]
  connect_bd_net -net shift_slice_ch10 [get_bd_pins mag_pingpong_buffer_10/shift] [get_bd_pins shift_slice/ch10]
  connect_bd_net -net shift_slice_ch11 [get_bd_pins mag_pingpong_buffer_11/shift] [get_bd_pins shift_slice/ch11]
  connect_bd_net -net wr_addr_0_1 [get_bd_ports wr_addr] [get_bd_pins mag_pingpong_buffer_0/wr_addr] [get_bd_pins mag_pingpong_buffer_1/wr_addr] [get_bd_pins mag_pingpong_buffer_10/wr_addr] [get_bd_pins mag_pingpong_buffer_11/wr_addr] [get_bd_pins mag_pingpong_buffer_2/wr_addr] [get_bd_pins mag_pingpong_buffer_3/wr_addr] [get_bd_pins mag_pingpong_buffer_4/wr_addr] [get_bd_pins mag_pingpong_buffer_5/wr_addr] [get_bd_pins mag_pingpong_buffer_6/wr_addr] [get_bd_pins mag_pingpong_buffer_7/wr_addr] [get_bd_pins mag_pingpong_buffer_8/wr_addr] [get_bd_pins mag_pingpong_buffer_9/wr_addr]
  connect_bd_net -net wr_din_0_1 [get_bd_ports wr_din] [get_bd_pins mag_pingpong_buffer_0/wr_din] [get_bd_pins mag_pingpong_buffer_1/wr_din] [get_bd_pins mag_pingpong_buffer_10/wr_din] [get_bd_pins mag_pingpong_buffer_11/wr_din] [get_bd_pins mag_pingpong_buffer_2/wr_din] [get_bd_pins mag_pingpong_buffer_3/wr_din] [get_bd_pins mag_pingpong_buffer_4/wr_din] [get_bd_pins mag_pingpong_buffer_5/wr_din] [get_bd_pins mag_pingpong_buffer_6/wr_din] [get_bd_pins mag_pingpong_buffer_7/wr_din] [get_bd_pins mag_pingpong_buffer_8/wr_din] [get_bd_pins mag_pingpong_buffer_9/wr_din]
  connect_bd_net -net wr_slice_ch0 [get_bd_pins mag_pingpong_buffer_0/wr] [get_bd_pins wr_slice/ch0]
  connect_bd_net -net wr_slice_ch1 [get_bd_pins mag_pingpong_buffer_1/wr] [get_bd_pins wr_slice/ch1]
  connect_bd_net -net wr_slice_ch2 [get_bd_pins mag_pingpong_buffer_2/wr] [get_bd_pins wr_slice/ch2]
  connect_bd_net -net wr_slice_ch3 [get_bd_pins mag_pingpong_buffer_3/wr] [get_bd_pins wr_slice/ch3]
  connect_bd_net -net wr_slice_ch4 [get_bd_pins mag_pingpong_buffer_4/wr] [get_bd_pins wr_slice/ch4]
  connect_bd_net -net wr_slice_ch5 [get_bd_pins mag_pingpong_buffer_5/wr] [get_bd_pins wr_slice/ch5]
  connect_bd_net -net wr_slice_ch6 [get_bd_pins mag_pingpong_buffer_6/wr] [get_bd_pins wr_slice/ch6]
  connect_bd_net -net wr_slice_ch7 [get_bd_pins mag_pingpong_buffer_7/wr] [get_bd_pins wr_slice/ch7]
  connect_bd_net -net wr_slice_ch8 [get_bd_pins mag_pingpong_buffer_8/wr] [get_bd_pins wr_slice/ch8]
  connect_bd_net -net wr_slice_ch9 [get_bd_pins mag_pingpong_buffer_9/wr] [get_bd_pins wr_slice/ch9]
  connect_bd_net -net wr_slice_ch10 [get_bd_pins mag_pingpong_buffer_10/wr] [get_bd_pins wr_slice/ch10]
  connect_bd_net -net wr_slice_ch11 [get_bd_pins mag_pingpong_buffer_11/wr] [get_bd_pins wr_slice/ch11]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins rd_mux/inp12] [get_bd_pins rd_mux/inp13] [get_bd_pins rd_mux/inp14] [get_bd_pins rd_mux/inp15] [get_bd_pins xlconstant_0/dout]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_MagPingPongBuffers()
cr_bd_MagPingPongBuffers ""
set_property REGISTERED_WITH_MANAGER "1" [get_files MagPingPongBuffers.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files MagPingPongBuffers.bd ] 

if { [get_files SPI_master.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/SPI_master.vhd
}
if { [get_files gain_controller.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/gain_controller.vhd
}
if { [get_files gain_controller.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/gain_controller.vhd
}
if { [get_files gain_controller.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/gain_controller.vhd
}
if { [get_files gain_controller.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/gain_controller.vhd
}
if { [get_files slice_1x4.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/slice_1x4.vhd
}
if { [get_files counter.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/counter.vhd
}
if { [get_files counter.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/counter.vhd
}
if { [get_files gain_lut.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/gain_lut.vhd
}
if { [get_files buffer_controller.vhd] == "" } {
  import_files -quiet -fileset sources_1 /vol/Workspace/Projects/PL-Mag-Sensor/src/buffer_controller.vhd
}


# Proc to create BD MagController
proc cr_bd_MagController { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# ADC_controller, spi_master, buffer_controller, gain_lut, counter, counter, gain_controller, gain_controller, gain_controller, gain_controller, slice_1x4


# The design that will be created by this Tcl proc contains the following 
# block design container source references:
# MagPingPongBuffers



  # CHANGE DESIGN NAME HERE
  set design_name MagController

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:xlslice:1.0\
  xilinx.com:ip:xlconcat:2.1\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  ADC_controller\
  spi_master\
  buffer_controller\
  gain_lut\
  counter\
  counter\
  gain_controller\
  gain_controller\
  gain_controller\
  gain_controller\
  slice_1x4\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  ##################################################################
  # CHECK Block Design Container Sources
  ##################################################################
  set bCheckSources 1
  set list_bdc_active "MagPingPongBuffers"

  array set map_bdc_missing {}
  set map_bdc_missing(ACTIVE) ""
  set map_bdc_missing(BDC) ""

  if { $bCheckSources == 1 } {
     set list_check_srcs "\ 
  MagPingPongBuffers \
  "

   common::send_gid_msg -ssname BD::TCL -id 2056 -severity "INFO" "Checking if the following sources for block design container exist in the project: $list_check_srcs .\n\n"

   foreach src $list_check_srcs {
      if { [can_resolve_reference $src] == 0 } {
         if { [lsearch $list_bdc_active $src] != -1 } {
            set map_bdc_missing(ACTIVE) "$map_bdc_missing(ACTIVE) $src"
         } else {
            set map_bdc_missing(BDC) "$map_bdc_missing(BDC) $src"
         }
      }
   }

   if { [llength $map_bdc_missing(ACTIVE)] > 0 } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2057 -severity "ERROR" "The following source(s) of Active variants are not found in the project: $map_bdc_missing(ACTIVE)" }
      common::send_gid_msg -ssname BD::TCL -id 2060 -severity "INFO" "Please add source files for the missing source(s) above."
      set bCheckIPsPassed 0
   }
   if { [llength $map_bdc_missing(BDC)] > 0 } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2059 -severity "WARNING" "The following source(s) of variants are not found in the project: $map_bdc_missing(BDC)" }
      common::send_gid_msg -ssname BD::TCL -id 2060 -severity "INFO" "Please add source files for the missing source(s) above."
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: GPIO_slice
proc create_hier_cell_GPIO_slice { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_GPIO_slice() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 3 -to 0 UnD
  create_bd_pin -dir O -from 0 -to 0 UnD_0
  create_bd_pin -dir O -from 0 -to 0 UnD_1
  create_bd_pin -dir O -from 0 -to 0 UnD_2
  create_bd_pin -dir O -from 0 -to 0 UnD_3
  create_bd_pin -dir I -from 3 -to 0 nCS
  create_bd_pin -dir O -from 0 -to 0 nCS_0
  create_bd_pin -dir O -from 0 -to 0 nCS_1
  create_bd_pin -dir O -from 0 -to 0 nCS_2
  create_bd_pin -dir O -from 0 -to 0 nCS_3

  # Create instance: UnD_slice_0, and set properties
  set UnD_slice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 UnD_slice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {4} \
 ] $UnD_slice_0

  # Create instance: UnD_slice_1, and set properties
  set UnD_slice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 UnD_slice_1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $UnD_slice_1

  # Create instance: UnD_slice_2, and set properties
  set UnD_slice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 UnD_slice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $UnD_slice_2

  # Create instance: UnD_slice_3, and set properties
  set UnD_slice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 UnD_slice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {3} \
   CONFIG.DIN_TO {3} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $UnD_slice_3

  # Create instance: nCS_slice_0, and set properties
  set nCS_slice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 nCS_slice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {4} \
 ] $nCS_slice_0

  # Create instance: nCS_slice_1, and set properties
  set nCS_slice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 nCS_slice_1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $nCS_slice_1

  # Create instance: nCS_slice_2, and set properties
  set nCS_slice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 nCS_slice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $nCS_slice_2

  # Create instance: nCS_slice_3, and set properties
  set nCS_slice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 nCS_slice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {3} \
   CONFIG.DIN_TO {3} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $nCS_slice_3

  # Create port connections
  connect_bd_net -net Din_1 [get_bd_pins UnD] [get_bd_pins UnD_slice_0/Din] [get_bd_pins UnD_slice_1/Din] [get_bd_pins UnD_slice_2/Din] [get_bd_pins UnD_slice_3/Din]
  connect_bd_net -net Net [get_bd_pins nCS] [get_bd_pins nCS_slice_0/Din] [get_bd_pins nCS_slice_1/Din] [get_bd_pins nCS_slice_2/Din] [get_bd_pins nCS_slice_3/Din]
  connect_bd_net -net UnD_slice_0_Dout [get_bd_pins UnD_0] [get_bd_pins UnD_slice_0/Dout]
  connect_bd_net -net UnD_slice_1_Dout [get_bd_pins UnD_1] [get_bd_pins UnD_slice_1/Dout]
  connect_bd_net -net UnD_slice_2_Dout [get_bd_pins UnD_2] [get_bd_pins UnD_slice_2/Dout]
  connect_bd_net -net UnD_slice_3_Dout [get_bd_pins UnD_3] [get_bd_pins UnD_slice_3/Dout]
  connect_bd_net -net nCS_slice_0_Dout [get_bd_pins nCS_0] [get_bd_pins nCS_slice_0/Dout]
  connect_bd_net -net nCS_slice_1_Dout [get_bd_pins nCS_1] [get_bd_pins nCS_slice_1/Dout]
  connect_bd_net -net nCS_slice_2_Dout [get_bd_pins nCS_2] [get_bd_pins nCS_slice_2/Dout]
  connect_bd_net -net nCS_slice_3_Dout [get_bd_pins nCS_3] [get_bd_pins nCS_slice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: GPIO_concat
proc create_hier_cell_GPIO_concat { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_GPIO_concat() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 3 -to 0 UnD_ref
  create_bd_pin -dir I -from 0 -to 0 UnD_ref_0
  create_bd_pin -dir I -from 0 -to 0 UnD_ref_1
  create_bd_pin -dir I -from 0 -to 0 UnD_ref_2
  create_bd_pin -dir I -from 0 -to 0 UnD_ref_3
  create_bd_pin -dir O -from 3 -to 0 nCS_ref
  create_bd_pin -dir I -from 0 -to 0 nCS_ref_0
  create_bd_pin -dir I -from 0 -to 0 nCS_ref_1
  create_bd_pin -dir I -from 0 -to 0 nCS_ref_2
  create_bd_pin -dir I -from 0 -to 0 nCS_ref_3

  # Create instance: UnD_ref_concat, and set properties
  set UnD_ref_concat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 UnD_ref_concat ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {4} \
 ] $UnD_ref_concat

  # Create instance: nCS_ref_concat, and set properties
  set nCS_ref_concat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 nCS_ref_concat ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {4} \
 ] $nCS_ref_concat

  # Create port connections
  connect_bd_net -net UnD_ref_concat_dout [get_bd_pins UnD_ref] [get_bd_pins UnD_ref_concat/dout]
  connect_bd_net -net gain_controller_0_adc_UnD_ref [get_bd_pins UnD_ref_0] [get_bd_pins UnD_ref_concat/In0]
  connect_bd_net -net gain_controller_0_adc_nCS_ref [get_bd_pins nCS_ref_0] [get_bd_pins nCS_ref_concat/In0]
  connect_bd_net -net gain_controller_1_adc_UnD_ref [get_bd_pins UnD_ref_1] [get_bd_pins UnD_ref_concat/In1]
  connect_bd_net -net gain_controller_1_adc_nCS_ref [get_bd_pins nCS_ref_1] [get_bd_pins nCS_ref_concat/In1]
  connect_bd_net -net gain_controller_2_adc_UnD_ref [get_bd_pins UnD_ref_2] [get_bd_pins UnD_ref_concat/In2]
  connect_bd_net -net gain_controller_2_adc_nCS_ref [get_bd_pins nCS_ref_2] [get_bd_pins nCS_ref_concat/In2]
  connect_bd_net -net gain_controller_3_adc_UnD_ref [get_bd_pins UnD_ref_3] [get_bd_pins UnD_ref_concat/In3]
  connect_bd_net -net gain_controller_3_adc_nCS_ref [get_bd_pins nCS_ref_3] [get_bd_pins nCS_ref_concat/In3]
  connect_bd_net -net nCS_ref_concat_dout [get_bd_pins nCS_ref] [get_bd_pins nCS_ref_concat/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: GainControl
proc create_hier_cell_GainControl { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_GainControl() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 3 -to 0 UnD
  create_bd_pin -dir O -from 3 -to 0 UnD_ref
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir O -from 23 -to 0 gain_out
  create_bd_pin -dir I -from 23 -to 0 gain_ref
  create_bd_pin -dir I -from 3 -to 0 nCS
  create_bd_pin -dir O -from 3 -to 0 nCS_ref
  create_bd_pin -dir I -type rst rst_n

  # Create instance: GPIO_concat
  create_hier_cell_GPIO_concat $hier_obj GPIO_concat

  # Create instance: GPIO_slice
  create_hier_cell_GPIO_slice $hier_obj GPIO_slice

  # Create instance: gain_concat, and set properties
  set gain_concat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 gain_concat ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {6} \
   CONFIG.IN1_WIDTH {6} \
   CONFIG.IN2_WIDTH {6} \
   CONFIG.IN3_WIDTH {6} \
   CONFIG.NUM_PORTS {4} \
 ] $gain_concat

  # Create instance: gain_controller_0, and set properties
  set block_name gain_controller
  set block_cell_name gain_controller_0
  if { [catch {set gain_controller_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gain_controller_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: gain_controller_1, and set properties
  set block_name gain_controller
  set block_cell_name gain_controller_1
  if { [catch {set gain_controller_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gain_controller_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: gain_controller_2, and set properties
  set block_name gain_controller
  set block_cell_name gain_controller_2
  if { [catch {set gain_controller_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gain_controller_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: gain_controller_3, and set properties
  set block_name gain_controller
  set block_cell_name gain_controller_3
  if { [catch {set gain_controller_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gain_controller_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: slice_1x4_0, and set properties
  set block_name slice_1x4
  set block_cell_name slice_1x4_0
  if { [catch {set slice_1x4_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $slice_1x4_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Din_1 [get_bd_pins UnD] [get_bd_pins GPIO_slice/UnD]
  connect_bd_net -net Net [get_bd_pins nCS] [get_bd_pins GPIO_slice/nCS]
  connect_bd_net -net UnD_ref_concat_dout [get_bd_pins UnD_ref] [get_bd_pins GPIO_concat/UnD_ref]
  connect_bd_net -net UnD_slice_0_Dout [get_bd_pins GPIO_slice/UnD_0] [get_bd_pins gain_controller_0/adc_UnD]
  connect_bd_net -net UnD_slice_1_Dout [get_bd_pins GPIO_slice/UnD_1] [get_bd_pins gain_controller_1/adc_UnD]
  connect_bd_net -net UnD_slice_2_Dout [get_bd_pins GPIO_slice/UnD_2] [get_bd_pins gain_controller_2/adc_UnD]
  connect_bd_net -net UnD_slice_3_Dout [get_bd_pins GPIO_slice/UnD_3] [get_bd_pins gain_controller_3/adc_UnD]
  connect_bd_net -net clk_0_1 [get_bd_pins clk] [get_bd_pins gain_controller_0/clk] [get_bd_pins gain_controller_1/clk] [get_bd_pins gain_controller_2/clk] [get_bd_pins gain_controller_3/clk]
  connect_bd_net -net gain_concat_dout [get_bd_pins gain_out] [get_bd_pins gain_concat/dout]
  connect_bd_net -net gain_controller_0_adc_UnD_ref [get_bd_pins GPIO_concat/UnD_ref_0] [get_bd_pins gain_controller_0/adc_UnD_ref]
  connect_bd_net -net gain_controller_0_adc_nCS_ref [get_bd_pins GPIO_concat/nCS_ref_0] [get_bd_pins gain_controller_0/adc_nCS_ref]
  connect_bd_net -net gain_controller_0_gain [get_bd_pins gain_concat/In0] [get_bd_pins gain_controller_0/gain]
  connect_bd_net -net gain_controller_1_adc_UnD_ref [get_bd_pins GPIO_concat/UnD_ref_1] [get_bd_pins gain_controller_1/adc_UnD_ref]
  connect_bd_net -net gain_controller_1_adc_nCS_ref [get_bd_pins GPIO_concat/nCS_ref_1] [get_bd_pins gain_controller_1/adc_nCS_ref]
  connect_bd_net -net gain_controller_1_gain [get_bd_pins gain_concat/In1] [get_bd_pins gain_controller_1/gain]
  connect_bd_net -net gain_controller_2_adc_UnD_ref [get_bd_pins GPIO_concat/UnD_ref_2] [get_bd_pins gain_controller_2/adc_UnD_ref]
  connect_bd_net -net gain_controller_2_adc_nCS_ref [get_bd_pins GPIO_concat/nCS_ref_2] [get_bd_pins gain_controller_2/adc_nCS_ref]
  connect_bd_net -net gain_controller_2_gain [get_bd_pins gain_concat/In2] [get_bd_pins gain_controller_2/gain]
  connect_bd_net -net gain_controller_3_adc_UnD_ref [get_bd_pins GPIO_concat/UnD_ref_3] [get_bd_pins gain_controller_3/adc_UnD_ref]
  connect_bd_net -net gain_controller_3_adc_nCS_ref [get_bd_pins GPIO_concat/nCS_ref_3] [get_bd_pins gain_controller_3/adc_nCS_ref]
  connect_bd_net -net gain_controller_3_gain [get_bd_pins gain_concat/In3] [get_bd_pins gain_controller_3/gain]
  connect_bd_net -net inp_1 [get_bd_pins gain_ref] [get_bd_pins slice_1x4_0/inp]
  connect_bd_net -net nCS_ref_concat_dout [get_bd_pins nCS_ref] [get_bd_pins GPIO_concat/nCS_ref]
  connect_bd_net -net nCS_slice_0_Dout [get_bd_pins GPIO_slice/nCS_0] [get_bd_pins gain_controller_0/adc_nCS]
  connect_bd_net -net nCS_slice_1_Dout [get_bd_pins GPIO_slice/nCS_1] [get_bd_pins gain_controller_1/adc_nCS]
  connect_bd_net -net nCS_slice_2_Dout [get_bd_pins GPIO_slice/nCS_2] [get_bd_pins gain_controller_2/adc_nCS]
  connect_bd_net -net nCS_slice_3_Dout [get_bd_pins GPIO_slice/nCS_3] [get_bd_pins gain_controller_3/adc_nCS]
  connect_bd_net -net rst_n_0_1 [get_bd_pins rst_n] [get_bd_pins gain_controller_0/rst_n] [get_bd_pins gain_controller_1/rst_n] [get_bd_pins gain_controller_2/rst_n] [get_bd_pins gain_controller_3/rst_n]
  connect_bd_net -net slice_1x4_0_ch0 [get_bd_pins gain_controller_0/gain_ref] [get_bd_pins slice_1x4_0/ch0]
  connect_bd_net -net slice_1x4_0_ch1 [get_bd_pins gain_controller_1/gain_ref] [get_bd_pins slice_1x4_0/ch1]
  connect_bd_net -net slice_1x4_0_ch2 [get_bd_pins gain_controller_2/gain_ref] [get_bd_pins slice_1x4_0/ch2]
  connect_bd_net -net slice_1x4_0_ch3 [get_bd_pins gain_controller_3/gain_ref] [get_bd_pins slice_1x4_0/ch3]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: BufferFlowControl
proc create_hier_cell_BufferFlowControl { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_BufferFlowControl() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 3 -to 0 adc_ch
  create_bd_pin -dir I -from 11 -to 0 adc_din
  create_bd_pin -dir I -type intr adc_irq
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 23 -to 0 gain_curr
  create_bd_pin -dir O -from 23 -to 0 gain_ref
  create_bd_pin -dir I -type rst rst_n

  # Create instance: MagPingPongBuffers, and set properties
  set MagPingPongBuffers [ create_bd_cell -type container -reference MagPingPongBuffers MagPingPongBuffers ]
  set_property -dict [ list \
   CONFIG.ACTIVE_SIM_BD {MagPingPongBuffers.bd} \
   CONFIG.ACTIVE_SYNTH_BD {MagPingPongBuffers.bd} \
   CONFIG.ENABLE_DFX {0} \
   CONFIG.LIST_SIM_BD {MagPingPongBuffers.bd} \
   CONFIG.LIST_SYNTH_BD {MagPingPongBuffers.bd} \
   CONFIG.LOCK_PROPAGATE {0} \
 ] $MagPingPongBuffers

  # Create instance: buffer_controller, and set properties
  set block_name buffer_controller
  set block_cell_name buffer_controller
  if { [catch {set buffer_controller [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $buffer_controller eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: gain_LUT, and set properties
  set block_name gain_lut
  set block_cell_name gain_LUT
  if { [catch {set gain_LUT [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gain_LUT eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sample_interval_timer, and set properties
  set block_name counter
  set block_cell_name sample_interval_timer
  if { [catch {set sample_interval_timer [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sample_interval_timer eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.n_bits {20} \
 ] $sample_interval_timer

  # Create instance: signal_period_timer, and set properties
  set block_name counter
  set block_cell_name signal_period_timer
  if { [catch {set signal_period_timer [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $signal_period_timer eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.n_bits {21} \
 ] $signal_period_timer

  # Create port connections
  connect_bd_net -net MagPingPongBuffers_busy [get_bd_pins MagPingPongBuffers/busy]
  connect_bd_net -net MagPingPongBuffers_irq [get_bd_pins MagPingPongBuffers/irq] [get_bd_pins buffer_controller/bf_irq]
  connect_bd_net -net adc_ch_1 [get_bd_pins adc_ch] [get_bd_pins buffer_controller/adc_ch]
  connect_bd_net -net adc_din_1 [get_bd_pins adc_din] [get_bd_pins buffer_controller/adc_din]
  connect_bd_net -net adc_irq_1 [get_bd_pins adc_irq] [get_bd_pins buffer_controller/adc_irq]
  connect_bd_net -net buffer_controller_bf_shift [get_bd_pins MagPingPongBuffers/shift] [get_bd_pins buffer_controller/bf_shift]
  connect_bd_net -net buffer_controller_bf_wr [get_bd_pins MagPingPongBuffers/wr] [get_bd_pins buffer_controller/bf_wr]
  connect_bd_net -net buffer_controller_bf_wr_addr [get_bd_pins MagPingPongBuffers/wr_addr] [get_bd_pins buffer_controller/bf_wr_addr]
  connect_bd_net -net buffer_controller_ch_out [get_bd_pins MagPingPongBuffers/rd_ch]
  connect_bd_net -net buffer_controller_gain_ref [get_bd_pins gain_ref] [get_bd_pins buffer_controller/gain_ref]
  connect_bd_net -net buffer_controller_lut_curr_gain [get_bd_pins buffer_controller/lut_curr_gain] [get_bd_pins gain_LUT/curr_gain]
  connect_bd_net -net buffer_controller_lut_gain_UnD [get_bd_pins buffer_controller/lut_gain_UnD] [get_bd_pins gain_LUT/gain_UnD]
  connect_bd_net -net buffer_controller_lut_n_over [get_bd_pins buffer_controller/lut_n_over] [get_bd_pins gain_LUT/n_over]
  connect_bd_net -net buffer_controller_lut_top_val [get_bd_pins buffer_controller/lut_top_val] [get_bd_pins gain_LUT/top_val]
  connect_bd_net -net buffer_controller_t_sg_prd_en [get_bd_pins buffer_controller/t_period_en] [get_bd_pins signal_period_timer/en]
  connect_bd_net -net buffer_controller_t_sg_prd_rest [get_bd_pins buffer_controller/t_period_rest] [get_bd_pins signal_period_timer/restart]
  connect_bd_net -net buffer_controller_t_sm_mg_int_en [get_bd_pins buffer_controller/t_sample_en] [get_bd_pins sample_interval_timer/en]
  connect_bd_net -net buffer_controller_t_sm_mg_int_rest [get_bd_pins buffer_controller/t_sample_rest] [get_bd_pins sample_interval_timer/restart]
  connect_bd_net -net clk_1 [get_bd_pins clk] [get_bd_pins MagPingPongBuffers/clk] [get_bd_pins buffer_controller/clk] [get_bd_pins gain_LUT/clk] [get_bd_pins sample_interval_timer/clk] [get_bd_pins signal_period_timer/clk]
  connect_bd_net -net gain_LUT_irq [get_bd_pins buffer_controller/lut_irq] [get_bd_pins gain_LUT/irq]
  connect_bd_net -net gain_LUT_new_gain [get_bd_pins buffer_controller/lut_new_gain] [get_bd_pins gain_LUT/new_gain]
  connect_bd_net -net gain_curr_1 [get_bd_pins gain_curr] [get_bd_pins buffer_controller/gain_curr]
  connect_bd_net -net rst_n_1 [get_bd_pins rst_n] [get_bd_pins MagPingPongBuffers/rst_n] [get_bd_pins buffer_controller/rst_n] [get_bd_pins sample_interval_timer/rst_n] [get_bd_pins signal_period_timer/rst_n]
  connect_bd_net -net sample_mag_interval_timer_cnt [get_bd_pins buffer_controller/t_sample_cnt] [get_bd_pins sample_interval_timer/cnt]
  connect_bd_net -net sample_mag_interval_timer_irq [get_bd_pins buffer_controller/t_sample_irq] [get_bd_pins sample_interval_timer/irq]
  connect_bd_net -net signal_period_timer_cnt [get_bd_pins buffer_controller/t_period_cnt] [get_bd_pins signal_period_timer/cnt]
  connect_bd_net -net signal_period_timer_irq [get_bd_pins buffer_controller/t_period_irq] [get_bd_pins signal_period_timer/irq]
  connect_bd_net -net wr_din_1 [get_bd_pins MagPingPongBuffers/wr_din] [get_bd_pins buffer_controller/bf_wr_data]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set SPI_MISO [ create_bd_port -dir I SPI_MISO ]
  set SPI_MOSI [ create_bd_port -dir O SPI_MOSI ]
  set SPI_SCLK [ create_bd_port -dir O -type clk SPI_SCLK ]
  set SPI_nCS [ create_bd_port -dir O -from 3 -to 0 SPI_nCS ]
  set clk [ create_bd_port -dir I -type clk clk ]
  set rst_n [ create_bd_port -dir I -type rst rst_n ]

  # Create instance: ADC_controller, and set properties
  set block_name ADC_controller
  set block_cell_name ADC_controller
  if { [catch {set ADC_controller [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ADC_controller eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: BufferFlowControl
  create_hier_cell_BufferFlowControl [current_bd_instance .] BufferFlowControl

  # Create instance: GainControl
  create_hier_cell_GainControl [current_bd_instance .] GainControl

  # Create instance: SPI_master, and set properties
  set block_name spi_master
  set block_cell_name SPI_master
  if { [catch {set SPI_master [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $SPI_master eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: SPI_nCS_slice, and set properties
  set SPI_nCS_slice [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 SPI_nCS_slice ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {3} \
   CONFIG.DIN_WIDTH {8} \
   CONFIG.DOUT_WIDTH {4} \
 ] $SPI_nCS_slice

  # Create port connections
  connect_bd_net -net ADC_controller_0_spi_addr [get_bd_pins ADC_controller/spi_addr] [get_bd_pins SPI_master/addr]
  connect_bd_net -net ADC_controller_0_spi_cs [get_bd_pins ADC_controller/spi_cs] [get_bd_pins SPI_master/cs]
  connect_bd_net -net ADC_controller_0_spi_dout [get_bd_pins ADC_controller/spi_dout] [get_bd_pins SPI_master/data_in]
  connect_bd_net -net ADC_controller_0_spi_rw [get_bd_pins ADC_controller/spi_rw] [get_bd_pins SPI_master/rw]
  connect_bd_net -net ADC_controller_ch_out [get_bd_pins ADC_controller/ch_out] [get_bd_pins BufferFlowControl/adc_ch]
  connect_bd_net -net ADC_controller_data_out [get_bd_pins ADC_controller/data_out] [get_bd_pins BufferFlowControl/adc_din]
  connect_bd_net -net ADC_controller_gpio_UnD [get_bd_pins ADC_controller/gpio_UnD] [get_bd_pins GainControl/UnD]
  connect_bd_net -net ADC_controller_gpio_nCS [get_bd_pins ADC_controller/gpio_nCS] [get_bd_pins GainControl/nCS]
  connect_bd_net -net ADC_controller_irq_out [get_bd_pins ADC_controller/irq_out] [get_bd_pins BufferFlowControl/adc_irq]
  connect_bd_net -net GainControl_dout [get_bd_pins ADC_controller/gpio_UnD_ref] [get_bd_pins GainControl/UnD_ref]
  connect_bd_net -net GainControl_dout1 [get_bd_pins ADC_controller/gpio_nCS_ref] [get_bd_pins GainControl/nCS_ref]
  connect_bd_net -net GainControl_dout2 [get_bd_pins BufferFlowControl/gain_curr] [get_bd_pins GainControl/gain_out]
  connect_bd_net -net SPI_master_data_out [get_bd_pins ADC_controller/spi_din] [get_bd_pins SPI_master/data_out]
  connect_bd_net -net SPI_master_irq [get_bd_pins ADC_controller/spi_irq] [get_bd_pins SPI_master/irq]
  connect_bd_net -net clk_0_1 [get_bd_ports clk] [get_bd_pins ADC_controller/clk] [get_bd_pins BufferFlowControl/clk] [get_bd_pins GainControl/clk] [get_bd_pins SPI_master/clk]
  connect_bd_net -net inp_1 [get_bd_pins BufferFlowControl/gain_ref] [get_bd_pins GainControl/gain_ref]
  connect_bd_net -net rst_n_0_1 [get_bd_ports rst_n] [get_bd_pins ADC_controller/rst_n] [get_bd_pins BufferFlowControl/rst_n] [get_bd_pins GainControl/rst_n] [get_bd_pins SPI_master/rst_n]
  connect_bd_net -net spi_master_0_spi_clk [get_bd_ports SPI_SCLK] [get_bd_pins SPI_master/spi_clk]
  connect_bd_net -net spi_master_0_spi_cs_n [get_bd_pins SPI_master/spi_cs_n] [get_bd_pins SPI_nCS_slice/Din]
  connect_bd_net -net spi_master_0_spi_mosi [get_bd_ports SPI_MOSI] [get_bd_pins SPI_master/spi_mosi]
  connect_bd_net -net spi_miso_0_1 [get_bd_ports SPI_MISO] [get_bd_pins SPI_master/spi_miso]
  connect_bd_net -net xlslice_0_Dout [get_bd_ports SPI_nCS] [get_bd_pins SPI_nCS_slice/Dout]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_gid_msg -ssname BD::TCL -id 2050 -severity "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_MagController()
cr_bd_MagController ""
set_property REGISTERED_WITH_MANAGER "1" [get_files MagController.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files MagController.bd ] 



# Proc to create BD SineReconstructor
proc cr_bd_SineReconstructor { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name SineReconstructor

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
##################################################################
# There are no IPs, Modules, nor sources to check.
##################################################################

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports

  # Create port connections

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_gid_msg -ssname BD::TCL -id 2050 -severity "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_SineReconstructor()
cr_bd_SineReconstructor ""
set_property REGISTERED_WITH_MANAGER "1" [get_files SineReconstructor.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files SineReconstructor.bd ] 

#call make_wrapper to create wrapper files
if { [get_property IS_LOCKED [ get_files -norecurse MagController.bd] ] == 1  } {
  import_files -fileset basic_string::_M_construct null not valid [file normalize "${origin_dir}/../vivado/PL-Mag-Sensor/PL-Mag-Sensor.gen/sources_1/bd/MagController/hdl/MagController_wrapper.vhd" ]
} else {
  set wrapper_path [make_wrapper -fileset basic_string::_M_construct null not valid -files [ get_files -norecurse MagController.bd] -top]
  add_files -norecurse -fileset basic_string::_M_construct null not valid $wrapper_path
}

if { [get_property IS_LOCKED [ get_files -norecurse MagController.bd] ] == 1  } {
  import_files -fileset sources_1 [file normalize "${origin_dir}/../vivado/PL-Mag-Sensor/PL-Mag-Sensor.gen/sources_1/bd/MagController/hdl/MagController_wrapper.vhd" ]
} else {
  set wrapper_path [make_wrapper -fileset sources_1 -files [ get_files -norecurse MagController.bd] -top]
  add_files -norecurse -fileset sources_1 $wrapper_path
}


# Set IP repository paths
set obj [get_filesets MagPingPongBuffers_inst_0]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/../ip"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'MagPingPongBuffers_inst_0' fileset object
set obj [get_filesets MagPingPongBuffers_inst_0]
# Set 'MagPingPongBuffers_inst_0' fileset file properties for remote files
# None

# Set 'MagPingPongBuffers_inst_0' fileset file properties for local files
# None

# Set 'MagPingPongBuffers_inst_0' fileset properties
set obj [get_filesets MagPingPongBuffers_inst_0]
set_property -name "top" -value "MagPingPongBuffers_inst_0" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xczu3eg-sbva484-1-i -flow {Vivado Synthesis 2020} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2020" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xczu3eg-sbva484-1-i" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xczu3eg-sbva484-1-i -flow {Vivado Implementation 2020} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2020" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "part" -value "xczu3eg-sbva484-1-i" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
