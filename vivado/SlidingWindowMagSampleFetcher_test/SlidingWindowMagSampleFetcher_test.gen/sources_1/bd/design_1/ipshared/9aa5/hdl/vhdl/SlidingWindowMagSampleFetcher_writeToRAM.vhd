-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SlidingWindowMagSampleFetcher_writeToRAM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buffer_out_ce0 : OUT STD_LOGIC;
    buffer_out_we0 : OUT STD_LOGIC;
    buffer_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_samples_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    n_samples_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_samples_out_o_ap_vld : OUT STD_LOGIC;
    n_periods : IN STD_LOGIC_VECTOR (7 downto 0);
    sliding_window_front_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_back_ptr_s : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_buffer_count_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_count_s_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_count_s_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_9_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_9_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_9_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_9_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_9_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_9_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_8_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_8_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_8_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_8_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_8_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_8_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_7_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_7_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_7_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_7_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_7_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_7_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_6_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_6_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_6_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_6_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_6_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_6_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_5_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_5_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_5_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_5_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_5_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_5_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_4_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_4_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_4_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_4_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_4_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_4_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_3_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_3_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_3_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_3_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_3_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_2_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_2_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_2_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_2_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_2_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_1_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_1_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_1_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_1_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_1_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_11_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_10_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_9_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_8_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_7_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_6_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_5_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_4_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_3_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_2_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_1_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_timestamp_V_0_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_timestamp_V_0_0_q0 : IN STD_LOGIC_VECTOR (19 downto 0);
    sliding_window_buffer_samples_sample_V_0_11_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_11_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_10_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_10_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_9_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_9_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_8_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_7_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_6_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_5_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_4_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_3_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_2_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_1_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sliding_window_buffer_samples_sample_V_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sliding_window_buffer_samples_sample_V_0_0_ce0 : OUT STD_LOGIC;
    sliding_window_buffer_samples_sample_V_0_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of SlidingWindowMagSampleFetcher_writeToRAM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal idx_4_reg_6687 : STD_LOGIC_VECTOR (32 downto 0);
    signal k_reg_6696 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_periods_cast_fu_6707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_fu_6715_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_reg_8290 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln22_fu_6723_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln22_reg_8295 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_6736_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_8303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln46_fu_6770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_8311 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln179_fu_6742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sample_period_count_s_reg_9713 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln188_fu_6822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_reg_9720 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_6828_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_9724 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln40_fu_6857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_reg_9732 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln188_1_fu_6838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln195_fu_6907_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln195_fu_6911_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state15_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln195_fu_6923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_9886 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln204_fu_6929_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln204_fu_6935_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln204_reg_9905 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln188_1_fu_6952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal sample_period_samples_0_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_0_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_0_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_0_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_1_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_1_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_1_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_1_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_2_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_2_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_2_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_2_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_3_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_3_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_3_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_3_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_4_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_4_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_4_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_4_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_5_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_5_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_5_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_5_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_6_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_6_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_6_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_6_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_7_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_7_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_7_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_7_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_8_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_8_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_8_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_8_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_9_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_9_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_9_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_9_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_10_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_10_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_10_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_10_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_11_sample_V_ce0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we0 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_11_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_11_sample_V_ce1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_we1 : STD_LOGIC;
    signal sample_period_samples_11_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_period_samples_0_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_0_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_0_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_0_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_0_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_1_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_1_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_1_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_1_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_2_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_2_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_2_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_2_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_3_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_3_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_3_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_3_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_4_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_4_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_4_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_4_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_5_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_5_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_5_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_5_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_6_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_6_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_6_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_6_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_7_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_7_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_7_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_7_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_8_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_8_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_8_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_8_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_9_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_9_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_9_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_9_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_10_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_10_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_10_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_10_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_11_timestamp_V_ce0 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_we0 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_period_samples_11_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_period_samples_11_timestamp_V_ce1 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_we1 : STD_LOGIC;
    signal sample_period_samples_11_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_sample_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_sample_V_ce0 : STD_LOGIC;
    signal sample_sample_V_we0 : STD_LOGIC;
    signal sample_sample_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_sample_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_sample_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_sample_V_ce1 : STD_LOGIC;
    signal sample_sample_V_we1 : STD_LOGIC;
    signal sample_sample_V_d1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sample_timestamp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_timestamp_V_ce0 : STD_LOGIC;
    signal sample_timestamp_V_we0 : STD_LOGIC;
    signal sample_timestamp_V_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_timestamp_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal sample_timestamp_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_timestamp_V_ce1 : STD_LOGIC;
    signal sample_timestamp_V_we1 : STD_LOGIC;
    signal sample_timestamp_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_08_in_reg_6657 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_6666 : STD_LOGIC_VECTOR (5 downto 0);
    signal idx_2_reg_6677 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast_fu_6917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln204_fu_6948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_fu_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_fu_6897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_idx_fu_6748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_6757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_idx_2_fu_6753_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_idx_3_fu_6763_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln34_fu_6843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln188_fu_6834_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_fu_6849_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_6865_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln188_1_fu_6876_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln188_fu_6872_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln188_1_fu_6883_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln188_fu_6887_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln188_fu_6893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component SlidingWindowMagSampleFetcher_writeToRAM_sample_sample_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component SlidingWindowMagSampleFetcher_writeToRAM_sample_timestamp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    sample_period_samples_0_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_0_sample_V_address0,
        ce0 => sample_period_samples_0_sample_V_ce0,
        we0 => sample_period_samples_0_sample_V_we0,
        d0 => sample_period_samples_0_sample_V_d0,
        q0 => sample_period_samples_0_sample_V_q0,
        address1 => sample_period_samples_0_sample_V_address1,
        ce1 => sample_period_samples_0_sample_V_ce1,
        we1 => sample_period_samples_0_sample_V_we1,
        d1 => sample_period_samples_0_sample_V_d1);

    sample_period_samples_1_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_1_sample_V_address0,
        ce0 => sample_period_samples_1_sample_V_ce0,
        we0 => sample_period_samples_1_sample_V_we0,
        d0 => sample_period_samples_1_sample_V_d0,
        q0 => sample_period_samples_1_sample_V_q0,
        address1 => sample_period_samples_1_sample_V_address1,
        ce1 => sample_period_samples_1_sample_V_ce1,
        we1 => sample_period_samples_1_sample_V_we1,
        d1 => sample_period_samples_1_sample_V_d1);

    sample_period_samples_2_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_2_sample_V_address0,
        ce0 => sample_period_samples_2_sample_V_ce0,
        we0 => sample_period_samples_2_sample_V_we0,
        d0 => sample_period_samples_2_sample_V_d0,
        q0 => sample_period_samples_2_sample_V_q0,
        address1 => sample_period_samples_2_sample_V_address1,
        ce1 => sample_period_samples_2_sample_V_ce1,
        we1 => sample_period_samples_2_sample_V_we1,
        d1 => sample_period_samples_2_sample_V_d1);

    sample_period_samples_3_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_3_sample_V_address0,
        ce0 => sample_period_samples_3_sample_V_ce0,
        we0 => sample_period_samples_3_sample_V_we0,
        d0 => sample_period_samples_3_sample_V_d0,
        q0 => sample_period_samples_3_sample_V_q0,
        address1 => sample_period_samples_3_sample_V_address1,
        ce1 => sample_period_samples_3_sample_V_ce1,
        we1 => sample_period_samples_3_sample_V_we1,
        d1 => sample_period_samples_3_sample_V_d1);

    sample_period_samples_4_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_4_sample_V_address0,
        ce0 => sample_period_samples_4_sample_V_ce0,
        we0 => sample_period_samples_4_sample_V_we0,
        d0 => sample_period_samples_4_sample_V_d0,
        q0 => sample_period_samples_4_sample_V_q0,
        address1 => sample_period_samples_4_sample_V_address1,
        ce1 => sample_period_samples_4_sample_V_ce1,
        we1 => sample_period_samples_4_sample_V_we1,
        d1 => sample_period_samples_4_sample_V_d1);

    sample_period_samples_5_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_5_sample_V_address0,
        ce0 => sample_period_samples_5_sample_V_ce0,
        we0 => sample_period_samples_5_sample_V_we0,
        d0 => sample_period_samples_5_sample_V_d0,
        q0 => sample_period_samples_5_sample_V_q0,
        address1 => sample_period_samples_5_sample_V_address1,
        ce1 => sample_period_samples_5_sample_V_ce1,
        we1 => sample_period_samples_5_sample_V_we1,
        d1 => sample_period_samples_5_sample_V_d1);

    sample_period_samples_6_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_6_sample_V_address0,
        ce0 => sample_period_samples_6_sample_V_ce0,
        we0 => sample_period_samples_6_sample_V_we0,
        d0 => sample_period_samples_6_sample_V_d0,
        q0 => sample_period_samples_6_sample_V_q0,
        address1 => sample_period_samples_6_sample_V_address1,
        ce1 => sample_period_samples_6_sample_V_ce1,
        we1 => sample_period_samples_6_sample_V_we1,
        d1 => sample_period_samples_6_sample_V_d1);

    sample_period_samples_7_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_7_sample_V_address0,
        ce0 => sample_period_samples_7_sample_V_ce0,
        we0 => sample_period_samples_7_sample_V_we0,
        d0 => sample_period_samples_7_sample_V_d0,
        q0 => sample_period_samples_7_sample_V_q0,
        address1 => sample_period_samples_7_sample_V_address1,
        ce1 => sample_period_samples_7_sample_V_ce1,
        we1 => sample_period_samples_7_sample_V_we1,
        d1 => sample_period_samples_7_sample_V_d1);

    sample_period_samples_8_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_8_sample_V_address0,
        ce0 => sample_period_samples_8_sample_V_ce0,
        we0 => sample_period_samples_8_sample_V_we0,
        d0 => sample_period_samples_8_sample_V_d0,
        q0 => sample_period_samples_8_sample_V_q0,
        address1 => sample_period_samples_8_sample_V_address1,
        ce1 => sample_period_samples_8_sample_V_ce1,
        we1 => sample_period_samples_8_sample_V_we1,
        d1 => sample_period_samples_8_sample_V_d1);

    sample_period_samples_9_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_9_sample_V_address0,
        ce0 => sample_period_samples_9_sample_V_ce0,
        we0 => sample_period_samples_9_sample_V_we0,
        d0 => sample_period_samples_9_sample_V_d0,
        q0 => sample_period_samples_9_sample_V_q0,
        address1 => sample_period_samples_9_sample_V_address1,
        ce1 => sample_period_samples_9_sample_V_ce1,
        we1 => sample_period_samples_9_sample_V_we1,
        d1 => sample_period_samples_9_sample_V_d1);

    sample_period_samples_10_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_10_sample_V_address0,
        ce0 => sample_period_samples_10_sample_V_ce0,
        we0 => sample_period_samples_10_sample_V_we0,
        d0 => sample_period_samples_10_sample_V_d0,
        q0 => sample_period_samples_10_sample_V_q0,
        address1 => sample_period_samples_10_sample_V_address1,
        ce1 => sample_period_samples_10_sample_V_ce1,
        we1 => sample_period_samples_10_sample_V_we1,
        d1 => sample_period_samples_10_sample_V_d1);

    sample_period_samples_11_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_11_sample_V_address0,
        ce0 => sample_period_samples_11_sample_V_ce0,
        we0 => sample_period_samples_11_sample_V_we0,
        d0 => sample_period_samples_11_sample_V_d0,
        q0 => sample_period_samples_11_sample_V_q0,
        address1 => sample_period_samples_11_sample_V_address1,
        ce1 => sample_period_samples_11_sample_V_ce1,
        we1 => sample_period_samples_11_sample_V_we1,
        d1 => sample_period_samples_11_sample_V_d1);

    sample_period_samples_0_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_0_timestamp_V_address0,
        ce0 => sample_period_samples_0_timestamp_V_ce0,
        we0 => sample_period_samples_0_timestamp_V_we0,
        d0 => sample_period_samples_0_timestamp_V_d0,
        q0 => sample_period_samples_0_timestamp_V_q0,
        address1 => sample_period_samples_0_timestamp_V_address1,
        ce1 => sample_period_samples_0_timestamp_V_ce1,
        we1 => sample_period_samples_0_timestamp_V_we1,
        d1 => sample_period_samples_0_timestamp_V_d1);

    sample_period_samples_1_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_1_timestamp_V_address0,
        ce0 => sample_period_samples_1_timestamp_V_ce0,
        we0 => sample_period_samples_1_timestamp_V_we0,
        d0 => sample_period_samples_1_timestamp_V_d0,
        q0 => sample_period_samples_1_timestamp_V_q0,
        address1 => sample_period_samples_1_timestamp_V_address1,
        ce1 => sample_period_samples_1_timestamp_V_ce1,
        we1 => sample_period_samples_1_timestamp_V_we1,
        d1 => sample_period_samples_1_timestamp_V_d1);

    sample_period_samples_2_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_2_timestamp_V_address0,
        ce0 => sample_period_samples_2_timestamp_V_ce0,
        we0 => sample_period_samples_2_timestamp_V_we0,
        d0 => sample_period_samples_2_timestamp_V_d0,
        q0 => sample_period_samples_2_timestamp_V_q0,
        address1 => sample_period_samples_2_timestamp_V_address1,
        ce1 => sample_period_samples_2_timestamp_V_ce1,
        we1 => sample_period_samples_2_timestamp_V_we1,
        d1 => sample_period_samples_2_timestamp_V_d1);

    sample_period_samples_3_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_3_timestamp_V_address0,
        ce0 => sample_period_samples_3_timestamp_V_ce0,
        we0 => sample_period_samples_3_timestamp_V_we0,
        d0 => sample_period_samples_3_timestamp_V_d0,
        q0 => sample_period_samples_3_timestamp_V_q0,
        address1 => sample_period_samples_3_timestamp_V_address1,
        ce1 => sample_period_samples_3_timestamp_V_ce1,
        we1 => sample_period_samples_3_timestamp_V_we1,
        d1 => sample_period_samples_3_timestamp_V_d1);

    sample_period_samples_4_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_4_timestamp_V_address0,
        ce0 => sample_period_samples_4_timestamp_V_ce0,
        we0 => sample_period_samples_4_timestamp_V_we0,
        d0 => sample_period_samples_4_timestamp_V_d0,
        q0 => sample_period_samples_4_timestamp_V_q0,
        address1 => sample_period_samples_4_timestamp_V_address1,
        ce1 => sample_period_samples_4_timestamp_V_ce1,
        we1 => sample_period_samples_4_timestamp_V_we1,
        d1 => sample_period_samples_4_timestamp_V_d1);

    sample_period_samples_5_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_5_timestamp_V_address0,
        ce0 => sample_period_samples_5_timestamp_V_ce0,
        we0 => sample_period_samples_5_timestamp_V_we0,
        d0 => sample_period_samples_5_timestamp_V_d0,
        q0 => sample_period_samples_5_timestamp_V_q0,
        address1 => sample_period_samples_5_timestamp_V_address1,
        ce1 => sample_period_samples_5_timestamp_V_ce1,
        we1 => sample_period_samples_5_timestamp_V_we1,
        d1 => sample_period_samples_5_timestamp_V_d1);

    sample_period_samples_6_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_6_timestamp_V_address0,
        ce0 => sample_period_samples_6_timestamp_V_ce0,
        we0 => sample_period_samples_6_timestamp_V_we0,
        d0 => sample_period_samples_6_timestamp_V_d0,
        q0 => sample_period_samples_6_timestamp_V_q0,
        address1 => sample_period_samples_6_timestamp_V_address1,
        ce1 => sample_period_samples_6_timestamp_V_ce1,
        we1 => sample_period_samples_6_timestamp_V_we1,
        d1 => sample_period_samples_6_timestamp_V_d1);

    sample_period_samples_7_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_7_timestamp_V_address0,
        ce0 => sample_period_samples_7_timestamp_V_ce0,
        we0 => sample_period_samples_7_timestamp_V_we0,
        d0 => sample_period_samples_7_timestamp_V_d0,
        q0 => sample_period_samples_7_timestamp_V_q0,
        address1 => sample_period_samples_7_timestamp_V_address1,
        ce1 => sample_period_samples_7_timestamp_V_ce1,
        we1 => sample_period_samples_7_timestamp_V_we1,
        d1 => sample_period_samples_7_timestamp_V_d1);

    sample_period_samples_8_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_8_timestamp_V_address0,
        ce0 => sample_period_samples_8_timestamp_V_ce0,
        we0 => sample_period_samples_8_timestamp_V_we0,
        d0 => sample_period_samples_8_timestamp_V_d0,
        q0 => sample_period_samples_8_timestamp_V_q0,
        address1 => sample_period_samples_8_timestamp_V_address1,
        ce1 => sample_period_samples_8_timestamp_V_ce1,
        we1 => sample_period_samples_8_timestamp_V_we1,
        d1 => sample_period_samples_8_timestamp_V_d1);

    sample_period_samples_9_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_9_timestamp_V_address0,
        ce0 => sample_period_samples_9_timestamp_V_ce0,
        we0 => sample_period_samples_9_timestamp_V_we0,
        d0 => sample_period_samples_9_timestamp_V_d0,
        q0 => sample_period_samples_9_timestamp_V_q0,
        address1 => sample_period_samples_9_timestamp_V_address1,
        ce1 => sample_period_samples_9_timestamp_V_ce1,
        we1 => sample_period_samples_9_timestamp_V_we1,
        d1 => sample_period_samples_9_timestamp_V_d1);

    sample_period_samples_10_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_10_timestamp_V_address0,
        ce0 => sample_period_samples_10_timestamp_V_ce0,
        we0 => sample_period_samples_10_timestamp_V_we0,
        d0 => sample_period_samples_10_timestamp_V_d0,
        q0 => sample_period_samples_10_timestamp_V_q0,
        address1 => sample_period_samples_10_timestamp_V_address1,
        ce1 => sample_period_samples_10_timestamp_V_ce1,
        we1 => sample_period_samples_10_timestamp_V_we1,
        d1 => sample_period_samples_10_timestamp_V_d1);

    sample_period_samples_11_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_period_samples_0_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_period_samples_11_timestamp_V_address0,
        ce0 => sample_period_samples_11_timestamp_V_ce0,
        we0 => sample_period_samples_11_timestamp_V_we0,
        d0 => sample_period_samples_11_timestamp_V_d0,
        q0 => sample_period_samples_11_timestamp_V_q0,
        address1 => sample_period_samples_11_timestamp_V_address1,
        ce1 => sample_period_samples_11_timestamp_V_ce1,
        we1 => sample_period_samples_11_timestamp_V_we1,
        d1 => sample_period_samples_11_timestamp_V_d1);

    sample_sample_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_sample_V
    generic map (
        DataWidth => 12,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_sample_V_address0,
        ce0 => sample_sample_V_ce0,
        we0 => sample_sample_V_we0,
        d0 => sample_sample_V_d0,
        q0 => sample_sample_V_q0,
        address1 => sample_sample_V_address1,
        ce1 => sample_sample_V_ce1,
        we1 => sample_sample_V_we1,
        d1 => sample_sample_V_d1);

    sample_timestamp_V_U : component SlidingWindowMagSampleFetcher_writeToRAM_sample_timestamp_V
    generic map (
        DataWidth => 20,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sample_timestamp_V_address0,
        ce0 => sample_timestamp_V_ce0,
        we0 => sample_timestamp_V_we0,
        d0 => sample_timestamp_V_d0,
        q0 => sample_timestamp_V_q0,
        address1 => sample_timestamp_V_address1,
        ce1 => sample_timestamp_V_ce1,
        we1 => sample_timestamp_V_we1,
        d1 => sample_timestamp_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state15);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_08_in_reg_6657_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln188_1_fu_6838_p2 = ap_const_lv1_1) or (icmp_ln188_reg_9720 = ap_const_lv1_1)))) then 
                i_08_in_reg_6657 <= i_reg_8303;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_08_in_reg_6657 <= n_periods_cast_fu_6707_p1;
            end if; 
        end if;
    end process;

    idx_2_reg_6677_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_6822_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                idx_2_reg_6677 <= idx_fu_592;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                idx_2_reg_6677 <= add_ln188_1_fu_6952_p2;
            end if; 
        end if;
    end process;

    idx_4_reg_6687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                idx_4_reg_6687 <= sext_ln195_fu_6907_p1;
            elsif (((icmp_ln195_fu_6923_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                idx_4_reg_6687 <= add_ln204_fu_6929_p2;
            end if; 
        end if;
    end process;

    idx_fu_592_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_fu_592 <= ap_const_lv32_0;
            elsif (((icmp_ln188_1_fu_6838_p2 = ap_const_lv1_1) and (icmp_ln188_reg_9720 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                idx_fu_592 <= add_ln188_fu_6897_p2;
            end if; 
        end if;
    end process;

    j_reg_6666_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_6822_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_reg_6666 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_reg_6666 <= j_1_reg_9724;
            end if; 
        end if;
    end process;

    k_reg_6696_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_reg_6696 <= ap_const_lv4_0;
            elsif (((icmp_ln195_fu_6923_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_6696 <= add_ln195_fu_6911_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_8303 <= i_fu_6736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln188_reg_9720 <= icmp_ln188_fu_6822_p2;
                sample_period_count_s_reg_9713 <= sliding_window_buffer_count_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln195_reg_9886 <= icmp_ln195_fu_6923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_reg_9720 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                j_1_reg_9724 <= j_1_fu_6828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                sext_ln34_reg_8290 <= sext_ln34_fu_6715_p1;
                trunc_ln22_reg_8295 <= trunc_ln22_fu_6723_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_fu_6923_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln204_reg_9905 <= trunc_ln204_fu_6935_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_1_fu_6838_p2 = ap_const_lv1_0) and (icmp_ln188_reg_9720 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    zext_ln40_reg_9732(3 downto 0) <= zext_ln40_fu_6857_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln179_fu_6742_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln46_reg_8311(4 downto 0) <= zext_ln46_fu_6770_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln46_reg_8311(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln40_reg_9732(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln179_fu_6742_p2, icmp_ln188_reg_9720, ap_CS_fsm_state8, icmp_ln188_1_fu_6838_p2, ap_enable_reg_pp0_iter0, icmp_ln195_fu_6923_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln179_fu_6742_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((icmp_ln188_1_fu_6838_p2 = ap_const_lv1_1) or (icmp_ln188_reg_9720 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln195_fu_6923_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln195_fu_6923_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln188_1_fu_6952_p2 <= std_logic_vector(signed(idx_2_reg_6677) + signed(ap_const_lv32_C));
    add_ln188_fu_6897_p2 <= std_logic_vector(signed(sext_ln188_fu_6893_p1) + signed(idx_fu_592));
    add_ln195_fu_6911_p2 <= std_logic_vector(unsigned(k_reg_6696) + unsigned(ap_const_lv4_1));
    add_ln204_fu_6929_p2 <= std_logic_vector(unsigned(idx_4_reg_6687) + unsigned(ap_const_lv33_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state15_assign_proc : process(icmp_ln195_fu_6923_p2)
    begin
        if ((icmp_ln195_fu_6923_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln179_fu_6742_p2)
    begin
        if ((((icmp_ln179_fu_6742_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln179_fu_6742_p2)
    begin
        if (((icmp_ln179_fu_6742_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_idx_2_fu_6753_p1 <= buffer_idx_fu_6748_p2(5 - 1 downto 0);
    buffer_idx_3_fu_6763_p3 <= 
        trunc_ln22_reg_8295 when (icmp_ln32_fu_6757_p2(0) = '1') else 
        buffer_idx_2_fu_6753_p1;
    buffer_idx_fu_6748_p2 <= std_logic_vector(signed(sext_ln34_reg_8290) - signed(i_fu_6736_p2));
    buffer_out_address0 <= zext_ln204_fu_6948_p1(12 - 1 downto 0);

    buffer_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_out_ce0 <= ap_const_logic_1;
        else 
            buffer_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_out_d0 <= (sample_timestamp_V_q0 & sample_sample_V_q0);

    buffer_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln195_reg_9886, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln195_reg_9886 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_out_we0 <= ap_const_logic_1;
        else 
            buffer_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_6736_p2 <= std_logic_vector(unsigned(i_08_in_reg_6657) + unsigned(ap_const_lv32_FFFFFFFF));
    icmp_ln179_fu_6742_p2 <= "1" when (signed(i_08_in_reg_6657) > signed(ap_const_lv32_0)) else "0";
    icmp_ln188_1_fu_6838_p2 <= "1" when (j_reg_6666 = sample_period_count_s_reg_9713) else "0";
    icmp_ln188_fu_6822_p2 <= "1" when (sliding_window_buffer_count_s_q0 = ap_const_lv6_0) else "0";
    icmp_ln195_fu_6923_p2 <= "1" when (k_reg_6696 = ap_const_lv4_C) else "0";
    icmp_ln32_fu_6757_p2 <= "1" when (signed(buffer_idx_fu_6748_p2) < signed(ap_const_lv32_FFFFFFE0)) else "0";
    icmp_ln34_fu_6843_p2 <= "1" when (unsigned(j_reg_6666) > unsigned(ap_const_lv6_A)) else "0";
    j_1_fu_6828_p2 <= std_logic_vector(unsigned(j_reg_6666) + unsigned(ap_const_lv6_1));
    k_cast_fu_6917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_6696),64));
    n_periods_cast_fu_6707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_periods),32));
    n_samples_out_o <= idx_fu_592;

    n_samples_out_o_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln179_fu_6742_p2)
    begin
        if (((icmp_ln179_fu_6742_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            n_samples_out_o_ap_vld <= ap_const_logic_1;
        else 
            n_samples_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln40_fu_6857_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_sample_V_address0 <= zext_ln40_fu_6857_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_0_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_0_q0, sliding_window_buffer_samples_sample_V_7_0_q0, sliding_window_buffer_samples_sample_V_5_0_q0, sliding_window_buffer_samples_sample_V_3_0_q0, sliding_window_buffer_samples_sample_V_1_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_0_q0;
        else 
            sample_period_samples_0_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_0_q0, sliding_window_buffer_samples_sample_V_6_0_q0, sliding_window_buffer_samples_sample_V_4_0_q0, sliding_window_buffer_samples_sample_V_2_0_q0, sliding_window_buffer_samples_sample_V_0_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_0_q0;
        else 
            sample_period_samples_0_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln40_fu_6857_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_0_timestamp_V_address0 <= zext_ln40_fu_6857_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_0_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_0_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_0_q0, sliding_window_buffer_samples_timestamp_V_7_0_q0, sliding_window_buffer_samples_timestamp_V_5_0_q0, sliding_window_buffer_samples_timestamp_V_3_0_q0, sliding_window_buffer_samples_timestamp_V_1_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_0_q0;
        else 
            sample_period_samples_0_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_0_q0, sliding_window_buffer_samples_timestamp_V_6_0_q0, sliding_window_buffer_samples_timestamp_V_4_0_q0, sliding_window_buffer_samples_timestamp_V_2_0_q0, sliding_window_buffer_samples_timestamp_V_0_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_0_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_0_q0;
        else 
            sample_period_samples_0_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_0_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_0_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_0_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_period_samples_10_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_10_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_10_q0, sliding_window_buffer_samples_sample_V_7_10_q0, sliding_window_buffer_samples_sample_V_5_10_q0, sliding_window_buffer_samples_sample_V_3_10_q0, sliding_window_buffer_samples_sample_V_1_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_10_q0;
        else 
            sample_period_samples_10_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_10_q0, sliding_window_buffer_samples_sample_V_6_10_q0, sliding_window_buffer_samples_sample_V_4_10_q0, sliding_window_buffer_samples_sample_V_2_10_q0, sliding_window_buffer_samples_sample_V_0_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_10_q0;
        else 
            sample_period_samples_10_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_period_samples_10_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_10_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_10_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_10_q0, sliding_window_buffer_samples_timestamp_V_7_10_q0, sliding_window_buffer_samples_timestamp_V_5_10_q0, sliding_window_buffer_samples_timestamp_V_3_10_q0, sliding_window_buffer_samples_timestamp_V_1_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_10_q0;
        else 
            sample_period_samples_10_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_10_q0, sliding_window_buffer_samples_timestamp_V_6_10_q0, sliding_window_buffer_samples_timestamp_V_4_10_q0, sliding_window_buffer_samples_timestamp_V_2_10_q0, sliding_window_buffer_samples_timestamp_V_0_10_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_10_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_10_q0;
        else 
            sample_period_samples_10_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_10_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_10_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_10_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_period_samples_11_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_11_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_11_q0, sliding_window_buffer_samples_sample_V_7_11_q0, sliding_window_buffer_samples_sample_V_5_11_q0, sliding_window_buffer_samples_sample_V_3_11_q0, sliding_window_buffer_samples_sample_V_1_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_11_q0;
        else 
            sample_period_samples_11_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_11_q0, sliding_window_buffer_samples_sample_V_6_11_q0, sliding_window_buffer_samples_sample_V_4_11_q0, sliding_window_buffer_samples_sample_V_2_11_q0, sliding_window_buffer_samples_sample_V_0_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_11_q0;
        else 
            sample_period_samples_11_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_period_samples_11_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_11_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_11_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_11_q0, sliding_window_buffer_samples_timestamp_V_7_11_q0, sliding_window_buffer_samples_timestamp_V_5_11_q0, sliding_window_buffer_samples_timestamp_V_3_11_q0, sliding_window_buffer_samples_timestamp_V_1_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_11_q0;
        else 
            sample_period_samples_11_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_11_q0, sliding_window_buffer_samples_timestamp_V_6_11_q0, sliding_window_buffer_samples_timestamp_V_4_11_q0, sliding_window_buffer_samples_timestamp_V_2_11_q0, sliding_window_buffer_samples_timestamp_V_0_11_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_11_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_11_q0;
        else 
            sample_period_samples_11_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_11_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_11_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_11_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln40_fu_6857_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_sample_V_address0 <= zext_ln40_fu_6857_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_1_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_1_q0, sliding_window_buffer_samples_sample_V_7_1_q0, sliding_window_buffer_samples_sample_V_5_1_q0, sliding_window_buffer_samples_sample_V_3_1_q0, sliding_window_buffer_samples_sample_V_1_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_1_q0;
        else 
            sample_period_samples_1_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_1_q0, sliding_window_buffer_samples_sample_V_6_1_q0, sliding_window_buffer_samples_sample_V_4_1_q0, sliding_window_buffer_samples_sample_V_2_1_q0, sliding_window_buffer_samples_sample_V_0_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_1_q0;
        else 
            sample_period_samples_1_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln40_fu_6857_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sample_period_samples_1_timestamp_V_address0 <= zext_ln40_fu_6857_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_1_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_1_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_1_q0, sliding_window_buffer_samples_timestamp_V_7_1_q0, sliding_window_buffer_samples_timestamp_V_5_1_q0, sliding_window_buffer_samples_timestamp_V_3_1_q0, sliding_window_buffer_samples_timestamp_V_1_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_1_q0;
        else 
            sample_period_samples_1_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_1_q0, sliding_window_buffer_samples_timestamp_V_6_1_q0, sliding_window_buffer_samples_timestamp_V_4_1_q0, sliding_window_buffer_samples_timestamp_V_2_1_q0, sliding_window_buffer_samples_timestamp_V_0_1_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_1_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_1_q0;
        else 
            sample_period_samples_1_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_1_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_1_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_1_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_2_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_2_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_2_q0, sliding_window_buffer_samples_sample_V_7_2_q0, sliding_window_buffer_samples_sample_V_5_2_q0, sliding_window_buffer_samples_sample_V_3_2_q0, sliding_window_buffer_samples_sample_V_1_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_2_q0;
        else 
            sample_period_samples_2_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_2_q0, sliding_window_buffer_samples_sample_V_6_2_q0, sliding_window_buffer_samples_sample_V_4_2_q0, sliding_window_buffer_samples_sample_V_2_2_q0, sliding_window_buffer_samples_sample_V_0_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_2_q0;
        else 
            sample_period_samples_2_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_2_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_2_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_2_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_2_q0, sliding_window_buffer_samples_timestamp_V_7_2_q0, sliding_window_buffer_samples_timestamp_V_5_2_q0, sliding_window_buffer_samples_timestamp_V_3_2_q0, sliding_window_buffer_samples_timestamp_V_1_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_2_q0;
        else 
            sample_period_samples_2_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_2_q0, sliding_window_buffer_samples_timestamp_V_6_2_q0, sliding_window_buffer_samples_timestamp_V_4_2_q0, sliding_window_buffer_samples_timestamp_V_2_2_q0, sliding_window_buffer_samples_timestamp_V_0_2_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_2_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_2_q0;
        else 
            sample_period_samples_2_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_2_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_2_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_2_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_3_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_3_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_3_q0, sliding_window_buffer_samples_sample_V_7_3_q0, sliding_window_buffer_samples_sample_V_5_3_q0, sliding_window_buffer_samples_sample_V_3_3_q0, sliding_window_buffer_samples_sample_V_1_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_3_q0;
        else 
            sample_period_samples_3_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_3_q0, sliding_window_buffer_samples_sample_V_6_3_q0, sliding_window_buffer_samples_sample_V_4_3_q0, sliding_window_buffer_samples_sample_V_2_3_q0, sliding_window_buffer_samples_sample_V_0_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_3_q0;
        else 
            sample_period_samples_3_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_period_samples_3_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_3_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_3_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_3_q0, sliding_window_buffer_samples_timestamp_V_7_3_q0, sliding_window_buffer_samples_timestamp_V_5_3_q0, sliding_window_buffer_samples_timestamp_V_3_3_q0, sliding_window_buffer_samples_timestamp_V_1_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_3_q0;
        else 
            sample_period_samples_3_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_3_q0, sliding_window_buffer_samples_timestamp_V_6_3_q0, sliding_window_buffer_samples_timestamp_V_4_3_q0, sliding_window_buffer_samples_timestamp_V_2_3_q0, sliding_window_buffer_samples_timestamp_V_0_3_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_3_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_3_q0;
        else 
            sample_period_samples_3_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_3_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_3_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_3_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_period_samples_4_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_4_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_4_q0, sliding_window_buffer_samples_sample_V_7_4_q0, sliding_window_buffer_samples_sample_V_5_4_q0, sliding_window_buffer_samples_sample_V_3_4_q0, sliding_window_buffer_samples_sample_V_1_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_4_q0;
        else 
            sample_period_samples_4_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_4_q0, sliding_window_buffer_samples_sample_V_6_4_q0, sliding_window_buffer_samples_sample_V_4_4_q0, sliding_window_buffer_samples_sample_V_2_4_q0, sliding_window_buffer_samples_sample_V_0_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_4_q0;
        else 
            sample_period_samples_4_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_period_samples_4_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_4_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_4_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_4_q0, sliding_window_buffer_samples_timestamp_V_7_4_q0, sliding_window_buffer_samples_timestamp_V_5_4_q0, sliding_window_buffer_samples_timestamp_V_3_4_q0, sliding_window_buffer_samples_timestamp_V_1_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_4_q0;
        else 
            sample_period_samples_4_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_4_q0, sliding_window_buffer_samples_timestamp_V_6_4_q0, sliding_window_buffer_samples_timestamp_V_4_4_q0, sliding_window_buffer_samples_timestamp_V_2_4_q0, sliding_window_buffer_samples_timestamp_V_0_4_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_4_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_4_q0;
        else 
            sample_period_samples_4_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_4_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_4_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_4_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_period_samples_5_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_5_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_5_q0, sliding_window_buffer_samples_sample_V_7_5_q0, sliding_window_buffer_samples_sample_V_5_5_q0, sliding_window_buffer_samples_sample_V_3_5_q0, sliding_window_buffer_samples_sample_V_1_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_5_q0;
        else 
            sample_period_samples_5_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_5_q0, sliding_window_buffer_samples_sample_V_6_5_q0, sliding_window_buffer_samples_sample_V_4_5_q0, sliding_window_buffer_samples_sample_V_2_5_q0, sliding_window_buffer_samples_sample_V_0_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_5_q0;
        else 
            sample_period_samples_5_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_period_samples_5_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_5_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_5_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_5_q0, sliding_window_buffer_samples_timestamp_V_7_5_q0, sliding_window_buffer_samples_timestamp_V_5_5_q0, sliding_window_buffer_samples_timestamp_V_3_5_q0, sliding_window_buffer_samples_timestamp_V_1_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_5_q0;
        else 
            sample_period_samples_5_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_5_q0, sliding_window_buffer_samples_timestamp_V_6_5_q0, sliding_window_buffer_samples_timestamp_V_4_5_q0, sliding_window_buffer_samples_timestamp_V_2_5_q0, sliding_window_buffer_samples_timestamp_V_0_5_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_5_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_5_q0;
        else 
            sample_period_samples_5_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_5_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_5_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_5_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_period_samples_6_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_6_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_6_q0, sliding_window_buffer_samples_sample_V_7_6_q0, sliding_window_buffer_samples_sample_V_5_6_q0, sliding_window_buffer_samples_sample_V_3_6_q0, sliding_window_buffer_samples_sample_V_1_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_6_q0;
        else 
            sample_period_samples_6_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_6_q0, sliding_window_buffer_samples_sample_V_6_6_q0, sliding_window_buffer_samples_sample_V_4_6_q0, sliding_window_buffer_samples_sample_V_2_6_q0, sliding_window_buffer_samples_sample_V_0_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_6_q0;
        else 
            sample_period_samples_6_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_period_samples_6_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_6_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_6_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_6_q0, sliding_window_buffer_samples_timestamp_V_7_6_q0, sliding_window_buffer_samples_timestamp_V_5_6_q0, sliding_window_buffer_samples_timestamp_V_3_6_q0, sliding_window_buffer_samples_timestamp_V_1_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_6_q0;
        else 
            sample_period_samples_6_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_6_q0, sliding_window_buffer_samples_timestamp_V_6_6_q0, sliding_window_buffer_samples_timestamp_V_4_6_q0, sliding_window_buffer_samples_timestamp_V_2_6_q0, sliding_window_buffer_samples_timestamp_V_0_6_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_6_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_6_q0;
        else 
            sample_period_samples_6_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_6_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_6_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_6_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_period_samples_7_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_7_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_7_q0, sliding_window_buffer_samples_sample_V_7_7_q0, sliding_window_buffer_samples_sample_V_5_7_q0, sliding_window_buffer_samples_sample_V_3_7_q0, sliding_window_buffer_samples_sample_V_1_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_7_q0;
        else 
            sample_period_samples_7_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_7_q0, sliding_window_buffer_samples_sample_V_6_7_q0, sliding_window_buffer_samples_sample_V_4_7_q0, sliding_window_buffer_samples_sample_V_2_7_q0, sliding_window_buffer_samples_sample_V_0_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_7_q0;
        else 
            sample_period_samples_7_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_period_samples_7_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_7_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_7_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_7_q0, sliding_window_buffer_samples_timestamp_V_7_7_q0, sliding_window_buffer_samples_timestamp_V_5_7_q0, sliding_window_buffer_samples_timestamp_V_3_7_q0, sliding_window_buffer_samples_timestamp_V_1_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_7_q0;
        else 
            sample_period_samples_7_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_7_q0, sliding_window_buffer_samples_timestamp_V_6_7_q0, sliding_window_buffer_samples_timestamp_V_4_7_q0, sliding_window_buffer_samples_timestamp_V_2_7_q0, sliding_window_buffer_samples_timestamp_V_0_7_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_7_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_7_q0;
        else 
            sample_period_samples_7_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_7_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_7_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_7_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_period_samples_8_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_8_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_8_q0, sliding_window_buffer_samples_sample_V_7_8_q0, sliding_window_buffer_samples_sample_V_5_8_q0, sliding_window_buffer_samples_sample_V_3_8_q0, sliding_window_buffer_samples_sample_V_1_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_8_q0;
        else 
            sample_period_samples_8_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_8_q0, sliding_window_buffer_samples_sample_V_6_8_q0, sliding_window_buffer_samples_sample_V_4_8_q0, sliding_window_buffer_samples_sample_V_2_8_q0, sliding_window_buffer_samples_sample_V_0_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_8_q0;
        else 
            sample_period_samples_8_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_period_samples_8_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_8_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_8_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_8_q0, sliding_window_buffer_samples_timestamp_V_7_8_q0, sliding_window_buffer_samples_timestamp_V_5_8_q0, sliding_window_buffer_samples_timestamp_V_3_8_q0, sliding_window_buffer_samples_timestamp_V_1_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_8_q0;
        else 
            sample_period_samples_8_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_8_q0, sliding_window_buffer_samples_timestamp_V_6_8_q0, sliding_window_buffer_samples_timestamp_V_4_8_q0, sliding_window_buffer_samples_timestamp_V_2_8_q0, sliding_window_buffer_samples_timestamp_V_0_8_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_8_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_8_q0;
        else 
            sample_period_samples_8_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_8_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_8_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_8_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_period_samples_9_sample_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_9_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_d0_assign_proc : process(sliding_window_buffer_samples_sample_V_9_9_q0, sliding_window_buffer_samples_sample_V_7_9_q0, sliding_window_buffer_samples_sample_V_5_9_q0, sliding_window_buffer_samples_sample_V_3_9_q0, sliding_window_buffer_samples_sample_V_1_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_9_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_7_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_5_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_3_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_d0 <= sliding_window_buffer_samples_sample_V_1_9_q0;
        else 
            sample_period_samples_9_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_d1_assign_proc : process(sliding_window_buffer_samples_sample_V_8_9_q0, sliding_window_buffer_samples_sample_V_6_9_q0, sliding_window_buffer_samples_sample_V_4_9_q0, sliding_window_buffer_samples_sample_V_2_9_q0, sliding_window_buffer_samples_sample_V_0_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_8_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_6_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_4_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_2_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_sample_V_d1 <= sliding_window_buffer_samples_sample_V_0_9_q0;
        else 
            sample_period_samples_9_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_sample_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_sample_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln40_reg_9732, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_period_samples_9_timestamp_V_address0 <= zext_ln40_reg_9732(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_period_samples_9_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_period_samples_9_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_d0_assign_proc : process(sliding_window_buffer_samples_timestamp_V_9_9_q0, sliding_window_buffer_samples_timestamp_V_7_9_q0, sliding_window_buffer_samples_timestamp_V_5_9_q0, sliding_window_buffer_samples_timestamp_V_3_9_q0, sliding_window_buffer_samples_timestamp_V_1_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_9_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_7_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_5_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_3_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_timestamp_V_d0 <= sliding_window_buffer_samples_timestamp_V_1_9_q0;
        else 
            sample_period_samples_9_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_d1_assign_proc : process(sliding_window_buffer_samples_timestamp_V_8_9_q0, sliding_window_buffer_samples_timestamp_V_6_9_q0, sliding_window_buffer_samples_timestamp_V_4_9_q0, sliding_window_buffer_samples_timestamp_V_2_9_q0, sliding_window_buffer_samples_timestamp_V_0_9_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_8_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_6_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_4_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_2_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sample_period_samples_9_timestamp_V_d1 <= sliding_window_buffer_samples_timestamp_V_0_9_q0;
        else 
            sample_period_samples_9_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_period_samples_9_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sample_period_samples_9_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_period_samples_9_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, k_cast_fu_6917_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_sample_V_address0 <= k_cast_fu_6917_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sample_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sample_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sample_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sample_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sample_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sample_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_sample_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_sample_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sample_V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sample_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sample_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sample_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sample_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sample_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_sample_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_sample_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sample_sample_V_ce0 <= ap_const_logic_1;
        else 
            sample_sample_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_sample_V_ce1 <= ap_const_logic_1;
        else 
            sample_sample_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, sample_period_samples_1_sample_V_q0, sample_period_samples_3_sample_V_q0, sample_period_samples_5_sample_V_q0, sample_period_samples_7_sample_V_q0, sample_period_samples_9_sample_V_q0, sample_period_samples_11_sample_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sample_V_d0 <= sample_period_samples_11_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sample_V_d0 <= sample_period_samples_9_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sample_V_d0 <= sample_period_samples_7_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sample_V_d0 <= sample_period_samples_5_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sample_V_d0 <= sample_period_samples_3_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sample_V_d0 <= sample_period_samples_1_sample_V_q0;
        else 
            sample_sample_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_sample_V_d1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, sample_period_samples_0_sample_V_q0, sample_period_samples_2_sample_V_q0, sample_period_samples_4_sample_V_q0, sample_period_samples_6_sample_V_q0, sample_period_samples_8_sample_V_q0, sample_period_samples_10_sample_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_sample_V_d1 <= sample_period_samples_10_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_sample_V_d1 <= sample_period_samples_8_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_sample_V_d1 <= sample_period_samples_6_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_sample_V_d1 <= sample_period_samples_4_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_sample_V_d1 <= sample_period_samples_2_sample_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_sample_V_d1 <= sample_period_samples_0_sample_V_q0;
        else 
            sample_sample_V_d1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sample_sample_V_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_sample_V_we0 <= ap_const_logic_1;
        else 
            sample_sample_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_sample_V_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_sample_V_we1 <= ap_const_logic_1;
        else 
            sample_sample_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, k_cast_fu_6917_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sample_timestamp_V_address0 <= k_cast_fu_6917_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_timestamp_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            sample_timestamp_V_address0 <= "XXXX";
        end if; 
    end process;


    sample_timestamp_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_timestamp_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sample_timestamp_V_address1 <= "XXXX";
        end if; 
    end process;


    sample_timestamp_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sample_timestamp_V_ce0 <= ap_const_logic_1;
        else 
            sample_timestamp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_timestamp_V_ce1 <= ap_const_logic_1;
        else 
            sample_timestamp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, sample_period_samples_1_timestamp_V_q0, sample_period_samples_3_timestamp_V_q0, sample_period_samples_5_timestamp_V_q0, sample_period_samples_7_timestamp_V_q0, sample_period_samples_9_timestamp_V_q0, sample_period_samples_11_timestamp_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_timestamp_V_d0 <= sample_period_samples_11_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_timestamp_V_d0 <= sample_period_samples_9_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_timestamp_V_d0 <= sample_period_samples_7_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_timestamp_V_d0 <= sample_period_samples_5_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_timestamp_V_d0 <= sample_period_samples_3_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_timestamp_V_d0 <= sample_period_samples_1_timestamp_V_q0;
        else 
            sample_timestamp_V_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_timestamp_V_d1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, sample_period_samples_0_timestamp_V_q0, sample_period_samples_2_timestamp_V_q0, sample_period_samples_4_timestamp_V_q0, sample_period_samples_6_timestamp_V_q0, sample_period_samples_8_timestamp_V_q0, sample_period_samples_10_timestamp_V_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sample_timestamp_V_d1 <= sample_period_samples_10_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sample_timestamp_V_d1 <= sample_period_samples_8_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sample_timestamp_V_d1 <= sample_period_samples_6_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sample_timestamp_V_d1 <= sample_period_samples_4_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sample_timestamp_V_d1 <= sample_period_samples_2_timestamp_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sample_timestamp_V_d1 <= sample_period_samples_0_timestamp_V_q0;
        else 
            sample_timestamp_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sample_timestamp_V_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_timestamp_V_we0 <= ap_const_logic_1;
        else 
            sample_timestamp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sample_timestamp_V_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            sample_timestamp_V_we1 <= ap_const_logic_1;
        else 
            sample_timestamp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln34_fu_6849_p3 <= 
        ap_const_lv4_9 when (icmp_ln34_fu_6843_p2(0) = '1') else 
        trunc_ln188_fu_6834_p1;
        sext_ln188_fu_6893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln188_fu_6887_p2),32));

        sext_ln195_fu_6907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx_2_reg_6677),33));

        sext_ln34_fu_6715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sliding_window_front_ptr_s),32));

    shl_ln188_1_fu_6876_p3 <= (sample_period_count_s_reg_9713 & ap_const_lv2_0);
    shl_ln_fu_6865_p3 <= (sample_period_count_s_reg_9713 & ap_const_lv4_0);
    sliding_window_buffer_count_s_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_count_s_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_count_s_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_count_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_0_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_10_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_11_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_1_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_2_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_3_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_4_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_5_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_6_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_7_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_8_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_0_9_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_0_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_0_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_10_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_11_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_1_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_2_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_3_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_4_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_5_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_6_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_7_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_8_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_1_9_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_1_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_2_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_2_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_3_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_3_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_4_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_4_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_5_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_5_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_5_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_6_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_6_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_6_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_7_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_7_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_7_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_8_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_8_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_8_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_8_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_sample_V_9_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_sample_V_9_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_sample_V_9_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_sample_V_9_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_0_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_10_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_11_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_1_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_2_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_3_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_4_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_5_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_6_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_7_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_8_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_0_9_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_0_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_0_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_0_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_10_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_11_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_11_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_1_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_2_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_3_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_4_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_5_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_6_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_7_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_8_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_8_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_1_9_address0 <= zext_ln46_fu_6770_p1(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_1_9_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sliding_window_buffer_samples_timestamp_V_1_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_2_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_2_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_2_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_10_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_11_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_3_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_3_9_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sliding_window_buffer_samples_timestamp_V_3_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_4_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_4_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_4_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_5_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_5_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sliding_window_buffer_samples_timestamp_V_5_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_5_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_6_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_6_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_6_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_6_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_10_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_11_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_7_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_7_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sliding_window_buffer_samples_timestamp_V_7_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_7_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_8_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_8_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_8_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_8_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_0_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_0_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_10_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_10_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_11_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_11_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_1_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_1_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_2_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_2_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_3_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_3_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_4_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_4_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_5_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_5_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_6_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_6_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_7_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_7_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_8_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_8_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sliding_window_buffer_samples_timestamp_V_9_9_address0 <= zext_ln46_reg_8311(5 - 1 downto 0);

    sliding_window_buffer_samples_timestamp_V_9_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sliding_window_buffer_samples_timestamp_V_9_9_ce0 <= ap_const_logic_1;
        else 
            sliding_window_buffer_samples_timestamp_V_9_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln188_fu_6887_p2 <= std_logic_vector(unsigned(zext_ln188_fu_6872_p1) - unsigned(zext_ln188_1_fu_6883_p1));
    trunc_ln188_fu_6834_p1 <= j_reg_6666(4 - 1 downto 0);
    trunc_ln204_fu_6935_p1 <= idx_4_reg_6687(12 - 1 downto 0);
    trunc_ln22_fu_6723_p1 <= sliding_window_back_ptr_s(5 - 1 downto 0);
    zext_ln188_1_fu_6883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln188_1_fu_6876_p3),11));
    zext_ln188_fu_6872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_6865_p3),11));
    zext_ln204_fu_6948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln204_reg_9905),64));
    zext_ln40_fu_6857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_6849_p3),64));
    zext_ln46_fu_6770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_idx_3_fu_6763_p3),64));
end behav;
